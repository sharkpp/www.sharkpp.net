#!/bin/bash

check_php () {
  for I in php56cli php56 php55cli php55 php54cli php54 php53cli php53 php5cli php5 php
  do
    if   [ "cli" == "$($I -v 2>&1 | grep cli)" ] ; then
      alias php=$I
    fi
  done
}

exec_usage () {
  echo 'usage: site <command> [option]'
  echo 'commands are:'
  echo '  init                initialize site'
  echo '  clean               cleanup site, remove ignore files'
  echo '  generate [OUT_PATH] generate site'
  echo '  test                launch web server [ http://localhost:8000/ ] for test site'
  echo '  spider              check broken link'
  echo '  diary [STUB]        create new empty page'
}

exec_init () {
  check_php
  # install Sculpin
  if [ ! -e "$(dirname $0)/sculpin.phar" ] ; then
    curl --insecure -L -O https://download.sculpin.io/sculpin.phar
  fi
  php sculpin.phar self-update
  php sculpin.phar install
  # install Composer
  if [ ! -e "$(dirname $0)/composer.phar" ] ; then
    curl --insecure -L https://getcomposer.org/installer | php
  fi
  php composer.phar self-update
  php composer.phar install
  # install BowerPHP
  .vendor/bin/bowerphp install
  # create default webhook conf
  if [ ! -e "$(dirname $0)/webhook.conf" ] ; then
    echo "log_file=$(dirname $0)/webhook.log"> $(dirname $0)/webhook.conf
    echo "secret_key=$(cat /dev/urandom | head -n 64 | shasum -a 512 -b | sed -e "s/[\* -]//g")">> $(dirname $0)/webhook.conf
    echo "git_cmd=$(whereis git)">> $(dirname $0)/webhook.conf
    echo "repos_path=$(dirname $0)">> $(dirname $0)/webhook.conf
    echo "output_path=$(dirname $0)/public">> $(dirname $0)/webhook.conf
  fi
}

exec_clean () {
  rm -rf .vendor .sculpin *.lock *.phar
  rm -rf output_* app/cache app/logs
  find source/assets -maxdepth 1 -mindepth 1 -not -name js -and -not -name css -exec rm -rf {} \;
}

exec_generate () {
  if [ ! -e "$(dirname $0)/sculpin.phar" ] ; then
    exec_init
  else
    check_php
  fi
  #
  rm -rf output_prod/* > /dev/null 2>&1
  php sculpin.phar generate --env=prod > /dev/null
  if [ $? -ne 0 ]; then echo "Could not generate the site"; exit 1; fi
  OUT_PATH=$1
  if [ "" != "$OUT_PATH" -a "" != "$(basename $OUT_PATH)" ] ; then
    rm -rf ${OUT_PATH}~ > /dev/null 2>&1
    mv $OUT_PATH ${OUT_PATH}~
    mv output_prod $OUT_PATH
  fi
}

exec_test () {
  if [ ! -e "$(dirname $0)/sculpin.phar" ] ; then
    exec_init
  else
    check_php
  fi
  #
  rm -rf output_dev/*
  php sculpin.phar generate --watch --server
}

exec_spider () {
  if [ ! -e "$(dirname $0)/sculpin.phar" ] ; then
    exec_init
  else
    check_php
  fi
  # wget install check
  wget --help > /dev/null
  if [ $? -eq 127 ] ; then
    echo wget command not installed
    exit
  fi
  if [ ! -e "$(dirname $0)/sculpin.phar" ] ; then
    exec_init
  fi
  RUNNING=$(ps ax|grep "php sculpin.phar[ ]"|wc -l|sed -e "s/ //g")
  if [ 0 -eq $RUNNING ] ; then
    rm -rf output_dev/*
    # launch server and waiting for generate
    while read f; do
      if [ "" != "$(echo "$f" | grep "server is running at")" ] ; then break ; fi
    done < <(php sculpin.phar generate --watch --server &)
  fi
  wget --spider --no-directories --recursive --page-requisites --level=0 --no-verbose http://localhost:8000
  if [ 0 -eq $RUNNING ] ; then
    killall php
  fi
}

exec_diary () {
  NEW_PAGE=source/_posts/$(date +%Y-%m-%d)-$1.md

  echo "---"                             > $NEW_PAGE
  echo "title: \"$1\""                   >>$NEW_PAGE
  echo "date: $(date +'%Y-%m-%d %H:%M')" >>$NEW_PAGE
  echo "tags: [雑記]"                     >>$NEW_PAGE
  echo "categories: [ブログ]"             >>$NEW_PAGE
  echo ""                                >>$NEW_PAGE
  echo "---"                             >>$NEW_PAGE

  echo create new blog page is $NEW_PAGE
}

case "$1" in
  "init"     ) exec_init ;;
  "i"        ) exec_init ;;
  "clean"    ) exec_clean ;;
  "generate" ) exec_generate $2;;
  "g"        ) exec_generate $2;;
  "test"     ) exec_test ;;
  "t"        ) exec_test ;;
  "spider"   ) exec_spider ;;
  "diary"    ) exec_diary $2;;
  "d"        ) exec_diary $2;;
  *          ) exec_usage ;;
esac
