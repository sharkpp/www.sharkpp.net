<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
    <title><![CDATA[さめたすたすのお家]]></title>
    <link href="https://www.sharkpp.net/blog/tags/%E9%9B%91%E8%A8%98.xml" rel="self"/>
    <link href="https://www.sharkpp.net/"/>
    <updated>2023-08-16T14:20:08+00:00</updated>
    <id>https://www.sharkpp.net/</id>
            <author>
            <name><![CDATA[sharkpp]]></name>                    </author>
        <generator uri="http://sculpin.io/">Sculpin</generator>
            <entry>
            <title type="html"><![CDATA[HAPPY NEW YEAR 2023]]></title>
            <link href="https://www.sharkpp.net/blog/2023/01/01/happy-new-year-2023.html"/>
            <updated>2023-01-01T00:17:00+00:00</updated>
            <id>https://www.sharkpp.net/blog/2023/01/01/happy-new-year-2023.html</id>
            <content type="html"><![CDATA[<p>明けましておめでとうございます。</p>

<p>新型コロナ、身近な人に感染者が出てくるようになって、これ終わりが来るのだろうかって感じですが、
体に気をつけ、今年も良いとしてあってほしいですね。</p>

<p>では、今年の目標をば。</p>

<h2 id="%E7%9B%AE%E6%A8%99">目標</h2>

<h3 id="%E3%83%9B%E3%83%BC%E3%83%A0%E3%83%9A%E3%83%BC%E3%82%B8%E3%81%AE%E6%9B%B4%E6%96%B0">ホームページの更新</h3>

<p>ここ数年、かなり更新頻度が乱れたので、今年こそは月一ぐらいは更新したいです。
ネタとしては、IonicやSynology NAS 関連とか。
ネタはあるので何かアプリ作ってみたいですね。</p>

<h3 id="%E3%83%9B%E3%83%BC%E3%83%A0%E3%83%9A%E3%83%BC%E3%82%B8%E3%81%AE%E3%83%93%E3%83%AB%E3%83%89%E3%82%B7%E3%82%B9%E3%83%86%E3%83%A0%E3%81%AE%E6%94%B9%E5%96%84">ホームページのビルドシステムの改善</h3>

<p>こちらも、全くできていないので、何とかしたい。
GatsbyJS + GitHub Action でビルドできるといい感じかなと。</p>

<p>https化は年末にチェックボックス一つでできたのでそこは嬉しい。</p>

<p><img src="/images/20221231-github-pages-enforce-https.png" alt="Enforce HTTPS in GitHub" /></p>

<h2 id="%E3%81%82%E3%81%91%E3%81%8A%E3%82%81%E3%81%93%E3%81%A8%E3%82%88%E3%82%8D">あけおめことよろ</h2>

<p>今年もまた一年、よろしくお願いいたします。</p>
]]></content>
        </entry>
            <entry>
            <title type="html"><![CDATA[大晦日@2022]]></title>
            <link href="https://www.sharkpp.net/blog/2022/12/31/new-years-eve-2022.html"/>
            <updated>2022-12-31T07:10:00+00:00</updated>
            <id>https://www.sharkpp.net/blog/2022/12/31/new-years-eve-2022.html</id>
            <content type="html"><![CDATA[<h2 id="1-%E5%B9%B4%E3%82%92%E6%8C%AF%E3%82%8A%E8%BF%94%E3%82%8A">1 年を振り返り</h2>

<p>今年も本日が大晦日、今年最後の日になりました。</p>

<p>ここ数年、自分の知ってる著名人がパタパタ亡くなっていて、ああ自分も歳をとったのだなぁと感じる今日この頃。</p>

<p>去年からの個人的な出来事で休日もかき回されてなかなか時間が取れずほとんどブログ書けてない... いや、中途半端な状態でまとめきれてないのがん現状なのでなんとかしたいですね。</p>

<p>今年も恒例(？)の仮想除夜の鐘アプリを設置しておきます。</p>

<iframe src="/files/joya_no_kane.html" width="128" height="128" frameborder="0" scrolling="no"></iframe>

<h2 id="%E7%B5%90%E6%9E%9C">結果</h2>

<p>まずは、今年の正月 <a href="/blog/2022/01/01/happy-new-year-2022.html">HAPPY NEW YEAR 2022</a> に掲げた目標です。</p>

<ul>
<li>ホームページの更新</li>
</ul>

<p>今年も全くできてない...
頑張ろう...</p>

<p>成果は <a href="https://github.com/sharkpp/web-fetch-bot">web-fetch-bot</a> ぐらいかな。
全くもって、これだけだと何やるツールかわからないけど、まあ自分用って感じ。</p>

<p>あ、Apple MacBook Air 買ったので、快適なのです。
前のも、10年ぐらい現役で使えてたので、なかなか優秀だなぁと。</p>

<h2 id="%E5%8F%8D%E7%9C%81">反省</h2>

<p>ブログはちょこちょこ作ってアップしていきたいところ。</p>

<p>という感じで、今年の反省会終了です。</p>

<p>それでは来年もよろしくお願いします。</p>
]]></content>
        </entry>
            <entry>
            <title type="html"><![CDATA[MacBook Air (M1, 2020) 開封の儀]]></title>
            <link href="https://www.sharkpp.net/blog/2022/05/13/unboxing-macbook-air-2020.html"/>
            <updated>2022-05-13T21:37:00+00:00</updated>
            <id>https://www.sharkpp.net/blog/2022/05/13/unboxing-macbook-air-2020.html</id>
            <content type="html"><![CDATA[<p>メイン機として使っている、MacBook Air (11-inch, Mid 2012) がまだ使えるけど、そろそろZoomなどストリーミング処理が辛くなってきた感じなので新しくしたいなって思ってたところ、機会があったので... ついに...</p>

<blockquote class="twitter-tweet" data-lang="ja"><p lang="ja" dir="ltr">My New Gear <a href="https://t.co/c64XG2F565">pic.twitter.com/c64XG2F565</a></p>&mdash; さめたすたす (@sharkpp) <a href="https://twitter.com/sharkpp/status/1510520564670398465?ref_src=twsrc%5Etfw">April 3, 2022</a></blockquote>

<script async src="https//platform.twitter.com/widgets.js" charset="utf-8"></script>

<p>買っちゃった...</p>

<h2 id="%E9%96%8B%E5%B0%81%E3%81%AE%E5%84%80">開封の儀</h2>

<p>MacBook Pro と迷ったけど、まあ前も Air だったから今回も Air にしてみた。</p>

<p>箱もシンプル、中身もシンプル。</p>

<p><a href="/images/20220323_box1.jpg"><img src="/thumbs/e6927e1efb0d7060232915ec14d50285-640x640.jpg" alt="化粧箱"></a> <a href="/images/20220323_box2.jpg"><img src="/thumbs/6a3eca99bd92c9aa1aaeb3f4ba43f641-640x640.jpg" alt="開封して中身確認"></a></p>

<p>ディスプレイの表面は傷付かなように不織布が貼り付けられてる。前回はどうだったかな...？</p>

<p><a href="/images/20220323_macbookair1.jpg"><img src="/thumbs/5a60e7a21ea0fa75df76faa0ec0ebd38-640x640.jpg" alt="閉じた状態"></a> <a href="/images/20220323_macbookair2.jpg"><img src="/thumbs/98cdc1508e06dbf38919478720e7427b-640x640.jpg" alt="パカっ！"></a></p>

<p>いろんな国の「こんにちは」が最初に開けると次々に表示されるセットアップ画面。</p>

<p><a href="/images/20220323_macbookair3.jpg"><img src="/thumbs/ffb023a90e0292931754d0368bc88852-640x640.jpg" alt="こんにちは"></a></p>

<p>セットアップ完了直後はこんな感じ。</p>

<p><a href="/images/20220403_desktop1.png"><img src="/thumbs/613a518f7d8144bc2363e86ed9cf58ff-640x640.png" alt="インストール直後のデスクトップ"></a></p>

<p>OS は Monterey 12.0.1 がインストール済みで、更新の確認をすると Monterey 12.3.1 にアップグレードできた。</p>

<p><a href="/images/20220403_desktop2.png"><img src="/thumbs/c77576e409a7d762ec46a1bead8efa57-640x640.png" alt="OS バージョン"></a></p>

<p>新旧の MacBook Air の比較</p>

<table>
<thead>
<tr>
  <th>タブ</th>
  <th align="center">MacBook Air (13-inch Mid 2012)</th>
  <th align="center">MacBook Air (Late 2020)</th>
</tr>
</thead>
<tbody>
<tr>
  <td>概要</td>
  <td align="center">macOS 10.14.6 (Build 18G9323)<br/><a href="/images/20220507_about_oldmac_summary.png"><img src="/thumbs/81cdfb48d00a88ed3b8fa8f751fc3873-96x96.png" alt="OS バージョン"></a></td>
  <td align="center">macOS 12.3.1 (Build 21E258)<br/><a href="/images/20220503_about_mac_summary.png"><img src="/thumbs/da434d844460304fd41bac1120cefc5b-96x96.png" alt="OS バージョン"></a></td>
</tr>
<tr>
  <td>ディスプレイ</td>
  <td align="center">内臓ディスプレイ 13.3 インチ(1440 x 900)<br/><a href="/images/20220507_about_oldmac_display.png"><img src="/thumbs/e4f55c5972ab47842df8cdf1ccdbca1f-96x96.png" alt="ディスプレイ"></a></td>
  <td align="center">内臓Retinaディスプレイ 13.3 インチ(2560 x 1600)<br/><a href="/images/20220507_about_mac_display.png"><img src="/thumbs/aad3b870f10c7119e93c7ea7b123626a-96x96.png" alt="ディスプレイ"></a></td>
</tr>
<tr>
  <td>ストレージ</td>
  <td align="center">251 GB<br/><a href="/images/20220507_about_oldmac_storage.png"><img src="/thumbs/5e695f241c1aaeb14c9e7e6d15eb714e-96x96.png" alt="OS バージョン"></a></td>
  <td align="center">500 GB<br/><a href="/images/20220510_storag20220510_about_mac_storagee_using.png"><img src="/thumbs/d3cc6f098382e925ab24cabd37acd280-96x96.png" alt="ストレージ"></a></td>
</tr>
</tbody>
</table>

<p>初期インストールされたアプリ一覧。</p>

<p>前回一度も使わなかったアプリが今回もちらほらありそう。</p>

<p><a href="/images/20220403_apps1.png"><img src="/thumbs/5813ec6cd1e839603dbd82215a67ae7c-640x640.png" alt="アプリ一覧"></a> <a href="/images/20220403_apps2.png"><img src="/thumbs/327e5e922f657ba67095146c948dc2de-640x640.png" alt="アプリ一覧2"></a></p>

<p>アクティビティーモニタの表示。種類欄がアーキテクチャの表示っぽい。初期インストールされたものは、そりゃまぁ Apple(＝M1) で動いてるね。</p>

<p><a href="/images/20220403_taskmgr1.png"><img src="/thumbs/40d9ca4f802709bd311272836b0b7e0e-640x640.png" alt="アクティビティーモニタ1"></a> <a href="/images/20220403_taskmgr2.png"><img src="/thumbs/6ee77b2c8d6a37007451d1b9b67e2d55-640x640.png" alt="アクティビティーモニタ2"></a></p>

<p>初期の設定だとクリックとダブルクリックの誤操作が頻発し、操作感がイマイチだったので設定を探して変更。</p>

<p>「トラックパッドの設定」に該当の設定を見つけた。</p>

<ul>
<li>　 調べる＆データ検出</li>
<li>✅ 副ボタンのクリック</li>
<li>　 タップでクリック</li>
</ul>

<p><a href="/images/20220411_trackpad_config.png"><img src="/thumbs/1c23d8341578205f0a22d2077615b940-640x640.png" alt="トラックパッド設定"></a></p>

<h2 id="geekbench-%E3%81%A7%E6%AF%94%E8%BC%83">Geekbench で比較</h2>

<p><a href="https://www.geekbench.com/">Geekbench 5 Tryout</a> を使ってしてスペックを比較してみる。</p>

<p>新旧の結果をまとめると...</p>

<table>
<thead>
<tr>
  <th>機種</th>
  <th align="right">Single-Core</th>
  <th align="right">Multi-Core</th>
  <th align="right">OpenCL</th>
  <th align="right">Metal</th>
</tr>
</thead>
<tbody>
<tr>
  <td>MacBook Air (13-inch Mid 2012) x86 (64-bit)</td>
  <td align="right"><a href="https://browser.geekbench.com/v5/cpu/14758525">328</a></td>
  <td align="right"><a href="https://browser.geekbench.com/v5/cpu/14758525">951</a></td>
  <td align="right"><a href="https://browser.geekbench.com/v5/compute/4783629">929</a></td>
  <td align="right"><a href="https://browser.geekbench.com/v5/compute/4785033">178</a></td>
</tr>
<tr>
  <td>MacBook Air (Late 2020) AArch64</td>
  <td align="right"><a href="https://browser.geekbench.com/v5/cpu/14192043">1732</a></td>
  <td align="right"><a href="https://browser.geekbench.com/v5/cpu/14192043">7711</a></td>
  <td align="right"><a href="https://browser.geekbench.com/v5/compute/4630141">18824</a></td>
  <td align="right"><a href="https://browser.geekbench.com/v5/compute/4783614">20872</a></td>
</tr>
</tbody>
</table>

<p>スコアが著しくアップしていて性能の差が著しい...
特にグラフィックの性能は顕著。</p>

<p>参考にそれぞれのPCのスペックの比較</p>

<table>
<thead>
<tr>
  <th></th>
  <th align="center">MacBook Air (13-inch Mid 2012)</th>
  <th align="center">MacBook Air (Late 2020)</th>
</tr>
</thead>
<tbody>
<tr>
  <td><strong>System Information</strong></td>
  <td align="center"></td>
  <td align="center"></td>
</tr>
<tr>
  <td>Operating System</td>
  <td align="center">macOS 10.14.6 (Build 18G9323)</td>
  <td align="center">macOS 12.3.1 (Build 21E258)</td>
</tr>
<tr>
  <td>Model</td>
  <td align="center">MacBook Air (13-inch Mid 2012)</td>
  <td align="center">MacBook Air (Late 2020)</td>
</tr>
<tr>
  <td>Model ID</td>
  <td align="center">MacBookAir5,2</td>
  <td align="center">MacBookAir10,1</td>
</tr>
<tr>
  <td>Motherboard</td>
  <td align="center">Apple Inc. Mac MacBookAir5,2</td>
  <td align="center">MacBookAir10,1</td>
</tr>
<tr>
  <td><strong>CPU Information</strong></td>
  <td align="center"></td>
  <td align="center"></td>
</tr>
<tr>
  <td>Name</td>
  <td align="center">Intel Core i5-3427U</td>
  <td align="center">Apple M1</td>
</tr>
<tr>
  <td>Topology</td>
  <td align="center">1 Processor, 2 Cores, 4 Threads</td>
  <td align="center">1 Processor, 8 Cores</td>
</tr>
<tr>
  <td>Base Frequency</td>
  <td align="center">1.80 GHz</td>
  <td align="center">3.20 GHz</td>
</tr>
<tr>
  <td>L1 Instruction Cache</td>
  <td align="center">32.0 KB x 2</td>
  <td align="center">128 KB x 1</td>
</tr>
<tr>
  <td>L1 Data Cache</td>
  <td align="center">32.0 KB x 2</td>
  <td align="center">64.0 KB x 1</td>
</tr>
<tr>
  <td>L2 Cache</td>
  <td align="center">256 KB x 2</td>
  <td align="center">4.00 MB x 1</td>
</tr>
<tr>
  <td>L3 Cache</td>
  <td align="center">3.00 MB x 1</td>
  <td align="center"></td>
</tr>
<tr>
  <td><strong>Memory Information</strong></td>
  <td align="center"></td>
  <td align="center"></td>
</tr>
<tr>
  <td>Memory</td>
  <td align="center">8.00 GB DDR3 1600 MT/s</td>
  <td align="center">8.00 GB</td>
</tr>
<tr>
  <td><strong>Metal Information</strong></td>
  <td align="center"></td>
  <td align="center"></td>
</tr>
<tr>
  <td>Device Name</td>
  <td align="center">Intel HD Graphics 4000</td>
  <td align="center">Apple M1</td>
</tr>
<tr>
  <td><strong>OpenCL Information</strong></td>
  <td align="center"></td>
  <td align="center"></td>
</tr>
<tr>
  <td>Platform Vendor</td>
  <td align="center">Apple</td>
  <td align="center">Apple</td>
</tr>
<tr>
  <td>Platform Name</td>
  <td align="center">Apple</td>
  <td align="center">Apple</td>
</tr>
<tr>
  <td>Device Vendor</td>
  <td align="center">Intel</td>
  <td align="center">Apple</td>
</tr>
<tr>
  <td>Device Name</td>
  <td align="center">HD Graphics 4000</td>
  <td align="center">Apple M1</td>
</tr>
<tr>
  <td>Compute Units</td>
  <td align="center">16</td>
  <td align="center">8</td>
</tr>
<tr>
  <td>Maximum Frequency</td>
  <td align="center">1150 MHz</td>
  <td align="center">1000 MHz</td>
</tr>
<tr>
  <td>Device Memory</td>
  <td align="center">1.50 GB</td>
  <td align="center">5.33 GB</td>
</tr>
</tbody>
</table>

<h2 id="%E3%82%A4%E3%83%B3%E3%82%B9%E3%83%88%E3%83%BC%E3%83%AB%E3%81%97%E3%81%9F%E3%82%A2%E3%83%97%E3%83%AA">インストールしたアプリ</h2>

<p>とりあえず最初に入れてみたアプリはこちら。
多分大体入れた順。</p>

<table>
<thead>
<tr>
  <th>アプリ</th>
  <th>概要</th>
</tr>
</thead>
<tbody>
<tr>
  <td>Google Chrome</td>
  <td></td>
</tr>
<tr>
  <td><a href="https://code.visualstudio.com/">Visual Studio Code</a></td>
  <td>開発環境</td>
</tr>
<tr>
  <td><a href="https://desktop.github.com/">GitHub Desktop</a></td>
  <td>GitHub クライアント</td>
</tr>
<tr>
  <td>Command Line Developer Tools</td>
  <td>コマンドラインツールなど。touchコマンドとかこれで入る</td>
</tr>
<tr>
  <td><a href="https://inkscape.org/">Inkscape</a></td>
  <td>ドローソフト</td>
</tr>
<tr>
  <td><a href="https://www.gimp.org/">GIMP</a></td>
  <td>ペイントソフト</td>
</tr>
<tr>
  <td><a href="https://krita.org/">Krita</a></td>
  <td>ペイントソフト</td>
</tr>
<tr>
  <td><a href="https://www.docker.com/">Docker Desktop</a></td>
  <td>Docker</td>
</tr>
<tr>
  <td><a href="https://www.mediaatelier.com/CheatSheet/">CheatSheet</a></td>
  <td>お試しで</td>
</tr>
<tr>
  <td><a href="https://apps.apple.com/jp/app/the-unarchiver/id425424353?mt=12">The Unarchiver</a></td>
  <td>圧縮/解凍</td>
</tr>
<tr>
  <td><a href="https://brew.sh/index_ja">Homebrew</a></td>
  <td>パッケージマネージャ</td>
</tr>
<tr>
  <td><a href="https://www.blender.org/">Blender</a></td>
  <td>3D ソフト</td>
</tr>
<tr>
  <td><a href="https://github.com/Clipy/Clipy/releases">Clipy</a></td>
  <td>クリップボードの履歴を取るソフト</td>
</tr>
</tbody>
</table>

<p>他はおいおい入れてこうかな。</p>

<h2 id="%E3%81%BE%E3%81%A8%E3%82%81">まとめ</h2>

<p>ちょっとずつ使い始めてるけど、新しいからか圧倒的にバッテリー持ちが良くなってる。</p>

<p>性能もすごい良くなってるので楽しい。</p>
]]></content>
        </entry>
            <entry>
            <title type="html"><![CDATA[HAPPY NEW YEAR 2022]]></title>
            <link href="https://www.sharkpp.net/blog/2022/01/01/happy-new-year-2022.html"/>
            <updated>2022-01-01T20:02:00+00:00</updated>
            <id>https://www.sharkpp.net/blog/2022/01/01/happy-new-year-2022.html</id>
            <content type="html"><![CDATA[<p>明けましておめでとうございます。</p>

<p>まだまだ新型コロナは油断ならないですが、今年も良いとしてあってほしいですね。</p>

<p>では、今年の目標をば。</p>

<h2 id="%E7%9B%AE%E6%A8%99">目標</h2>

<h3 id="%E3%83%9B%E3%83%BC%E3%83%A0%E3%83%9A%E3%83%BC%E3%82%B8%E3%81%AE%E6%9B%B4%E6%96%B0">ホームページの更新</h3>

<p>昨年はかなり更新が乱れたので、今年は月一ぐらいは更新したいです。
ネタとしては、IonicやSynology NAS 関連とか。</p>

<h3 id="%E3%83%9B%E3%83%BC%E3%83%A0%E3%83%9A%E3%83%BC%E3%82%B8%E3%81%AE%E3%83%93%E3%83%AB%E3%83%89%E3%82%B7%E3%82%B9%E3%83%86%E3%83%A0%E3%81%AE%E6%94%B9%E5%96%84">ホームページのビルドシステムの改善</h3>

<p>こちらも、去年も全くできていないので、何とかしたい。
GatsbyJS + GitHub Action でビルドできるといい感じかなと。</p>

<h3 id="%E3%81%9D%E3%81%AE%E4%BB%96">その他</h3>

<p>お金貯まってきたので Apple MacBook Air とか欲しいな... そろそろノートPC買い換えたい...</p>

<h2 id="%E3%81%82%E3%81%91%E3%81%8A%E3%82%81%E3%81%93%E3%81%A8%E3%82%88%E3%82%8D">あけおめことよろ</h2>

<p>今年もまた一年、よろしくお願いいたします。</p>
]]></content>
        </entry>
            <entry>
            <title type="html"><![CDATA[大晦日@2021]]></title>
            <link href="https://www.sharkpp.net/blog/2021/12/31/new-years-eve-2021.html"/>
            <updated>2021-12-31T10:13:00+00:00</updated>
            <id>https://www.sharkpp.net/blog/2021/12/31/new-years-eve-2021.html</id>
            <content type="html"><![CDATA[<h2 id="1-%E5%B9%B4%E3%82%92%E6%8C%AF%E3%82%8A%E8%BF%94%E3%82%8A">1 年を振り返り</h2>

<p>今年も毎度のこと大晦日の今日だけとなりました。</p>

<p>今年の年末は新型コロナも一時的に下火となり、久方ぶりにコミケも開催中だとのこと。
まあ、コミケ行ってないですが...</p>

<p>個人的な文でいうと、働き方も引き続き在宅がメインとなって色々時間も作りやすく... なってないんだなぁこれが... 
なかなか時間が取れず(＆MP不足で)、４本５本ぐらいの記事をまとめきれてない...</p>

<blockquote>
  <p>自分自身のことについてはまあ諸々の理由があって勉強会もほとんど参加できなかったのが残念ですが、来年の後半ぐらいから多少マシになる... といいなと。</p>
  
  <p>これは、まだもう少しイベントがありそうだけどなんとかしたいですね。</p>
</blockquote>

<p>去年の年末に書いた件はまあ何とかイベントが消化（追加のイベントもあったけど）したので、来年こそはなんとか時間を作っていきたいなってところ。</p>

<p>今年も恒例(？)の仮想除夜の鐘アプリを設置しておきます。</p>

<iframe src="/files/joya_no_kane.html" width="128" height="128" frameborder="0" scrolling="no"></iframe>

<h2 id="%E7%B5%90%E6%9E%9C">結果</h2>

<p>まずは、今年の正月 <a href="/blog/2021/01/01/happy-new-year-2021.html">HAPPY NEW YEAR 2021</a> に掲げた目標です。</p>

<ul>
<li>ホームページの更新</li>
<li>ホームページのビルドシステムの改善</li>
</ul>

<p>うん、全くできてないね...
頑張ろう...</p>

<h2 id="%E5%8F%8D%E7%9C%81">反省</h2>

<p>なかなかに、HPもMPも低空飛行、つらぽよだなぁと。</p>

<p>来年こそ頑張ろう。
という感じで、今年の反省会終了です。</p>

<p><img src="/images/20211229_toshikoshi_soba.jpg" alt="年越しそば" /></p>

<p>それでは来年もよろしくお願いします。</p>
]]></content>
        </entry>
            <entry>
            <title type="html"><![CDATA[Chromecast with Google TV の開封の儀と３ヶ月ぐらい使ってみた]]></title>
            <link href="https://www.sharkpp.net/blog/2021/02/28/unboxing-and-used-three-month-of-chromecast-with-google-tv.html"/>
            <updated>2021-02-28T22:45:00+00:00</updated>
            <id>https://www.sharkpp.net/blog/2021/02/28/unboxing-and-used-three-month-of-chromecast-with-google-tv.html</id>
            <content type="html"><![CDATA[<p>10月1日に発表され、これは欲しいって思いつつ日本発売の情報が流れずやきもきしていたところで、
やっと11月25日に発売された <a href="https://store.google.com/jp/product/chromecast_google_tv">Chromecast with Google TV</a> を
しばらく使ってみた感想などを毎度のごとくの開封の儀とともに記事にしました。</p>

<p>今度の Chromecast はスマホなしでいろいろできていいね！</p>

<h2 id="%E9%96%8B%E5%B0%81%E3%81%AE%E5%84%80">開封の儀</h2>

<p>箱はまあ、一般的(？)な化粧箱に入った感じですね。
周りを全部写真撮ったので六面体の展開図風にしてみました。</p>

<p><a href="/images/20201128_chromecast_box.jpg"><img src="/thumbs/6650ec61e09199521c279f1ecbc8994e-640x640.jpg" alt="Chromecast箱"></a></p>

<p>ぱかっとな。</p>

<p><a href="/images/20201128_chromecast_box_open.jpg"><img src="/thumbs/a8be2c001947c34f7907a49c5a16cf05-640x640.jpg" alt="Chromecast箱オープン"></a></p>

<p>付属品はこんな感じ。</p>

<p><a href="/images/20201128_chromecast_open_all.jpg"><img src="/thumbs/4c6fa44000361f934e27bc77ebaf7cde-640x640.jpg" alt="Chromecast箱の中身"></a></p>

<h2 id="%E3%82%BB%E3%83%83%E3%83%88%E3%82%A2%E3%83%83%E3%83%97">セットアップ</h2>

<p>テレビの裏のHDMIに接続。 
最終的には<a href="https://www.amazon.co.jp/dp/B071JTQW19/">HDMI切替器</a>を買って切り替えできるようにしています。</p>

<p><a href="/images/20201128_chromecast_connected.jpg"><img src="/thumbs/e5f4826f55917d2eb6c777c5b090ce11-640x640.jpg" alt="Chromecastテレビに接続"></a></p>

<p>Chromecasy 起動</p>

<p><a href="/images/20201128_chromecast_logo.jpg"><img src="/thumbs/8df9d169db2ecd8a6a5fbd6e9bb08f3a-640x640.jpg" alt="Chromecastロゴ"></a></p>

<p>リモコンをセットアップ</p>

<p><a href="/images/20201128_chromecast_remocon_setup.jpg"><img src="/thumbs/a7e34c5302e3833d8324551119147bdb-640x640.jpg" alt="Chromecastリモコンセットアップ"></a></p>

<p>QRコードでスマホアプリと連携することでセットアップが簡単にできました。</p>

<p>※スマホなしでもセットアップできたと思う...</p>

<p><a href="/images/20201128_chromecast_app_setup.jpg"><img src="/thumbs/86fe527fc915953a97173642f776f3ba-640x640.jpg" alt="Chromecastアプリセットアップ(テレビで)"></a>
<a href="/images/20201128_chromecast_app_setup_phone1.png"><img src="/thumbs/ead66e12ba066e67d6df27b39ba08696-640x640.png" alt="Chromecastアプリセットアップ(スマホで１)"></a>
<a href="/images/20201128_chromecast_app_setup_phone2.png"><img src="/thumbs/797aef6b50dfb96157ecd303160c795b-640x640.png" alt="Chromecastアプリセットアップ(スマホで２)"></a></p>

<p>ホーム画面を見ると Netflixなどなどある程度いろいろインストールされてますが Abema 以外の初期インストールされた動画配信サービスのアプリは一旦アンインストール。</p>

<p><a href="/images/20201128_chromecast_home_screen.jpg"><img src="/thumbs/bb6d95a290d1e9b6ed2d69aeb0c66ba4-640x640.jpg" alt="Chromecastホーム画面"></a></p>

<p>そして、GyaO! をインストール。
これも、QRコードで簡単に連携可能。</p>

<p><a href="/images/20201128_gyao_pairing.jpg"><img src="/thumbs/46dfc00402b5c9abc5ef1f641b832480-640x640.jpg" alt="Chromecast GyaO! ペアリング"></a></p>

<p>のちに、Abemaもアカウント登録＆QRコードで連携して、マイリストを同期しました。</p>

<h2 id="%EF%BC%93%E3%83%B6%E6%9C%88%E3%81%90%E3%82%89%E3%81%84%E4%BD%BF%E3%81%A3%E3%81%A6%E3%81%BF%E3%81%9F%E6%84%9F%E3%81%98">３ヶ月ぐらい使ってみた感じ</h2>

<p>３ヶ月みっちりというよりゆるーく使ってみた感じの感想。</p>

<p><strong>GyaO! アプリ</strong></p>

<ul>
<li>現時点ではホーム画面にお勧めなどが列挙されないのがイマイチ。</li>
<li>Android スマホ版やウェブ版だと配信されているバラエティー番組などが配信されていない

<ul>
<li>たとえば、「吉田類の酒場放浪記」や「秘密のケンミンSHOW極」など</li>
</ul></li>
<li>映画の音量調整がイマイチ。

<ul>
<li>効果音と声の音量がアンマッチで効果音に合わせると声が聞き取り辛く、声に合わせると効果音が大きすぎる感じ。</li>
</ul></li>
</ul>

<p><strong>Abema</strong></p>

<ul>
<li>マイビデオへの登録に操作が多いのでちょっとむず</li>
<li>スマホアプリからキャストで見るのが一番楽...</li>
<li>ホーム画面に番組が出るのはいいかも</li>
</ul>

<p><strong>TVer</strong></p>

<p>入れたけどそんなに使ってない...</p>

<p>アニメあんまりないので...</p>

<h2 id="%E3%81%BE%E3%81%A8%E3%82%81">まとめ</h2>

<p>現状は、ほぼアニメでたまに映画とかみてるけど、買ってよかったガジェットにランクインな感じ。</p>

<p>7000円ぐらいするけど、元は十分取れると思う。</p>
]]></content>
        </entry>
            <entry>
            <title type="html"><![CDATA[HAPPY NEW YEAR 2021]]></title>
            <link href="https://www.sharkpp.net/blog/2021/01/01/happy-new-year-2021.html"/>
            <updated>2021-01-01T22:30:00+00:00</updated>
            <id>https://www.sharkpp.net/blog/2021/01/01/happy-new-year-2021.html</id>
            <content type="html"><![CDATA[<p>明けましておめでとうございます。</p>

<p>今年もまだまだ新型コロナは収まりそうになさそうですが、それに負けることなく過ごせればと思います。</p>

<p>では、今年の目標をば。</p>

<h2 id="%E7%9B%AE%E6%A8%99">目標</h2>

<h3 id="%E3%83%9B%E3%83%BC%E3%83%A0%E3%83%9A%E3%83%BC%E3%82%B8%E3%81%AE%E6%9B%B4%E6%96%B0">ホームページの更新</h3>

<p>最低でも月一ぐらいでは更新したいと思います。
つまるところ、それには何かしらネタを仕込む必要があるかなと。</p>

<p>とりあえず、ReactJSを使ってウェブアプリをちょこちょこ作りつつ、Qtでも何か作ってみようかなと。</p>

<p>あとは、React native とかも気になっているところ。</p>

<h3 id="%E3%83%9B%E3%83%BC%E3%83%A0%E3%83%9A%E3%83%BC%E3%82%B8%E3%81%AE%E3%83%93%E3%83%AB%E3%83%89%E3%82%B7%E3%82%B9%E3%83%86%E3%83%A0%E3%81%AE%E6%94%B9%E5%96%84">ホームページのビルドシステムの改善</h3>

<p>現状、php 製の Sculpin でホームページをビルドしてます。
が、年末に記事を書いたらビルドが失敗して慌てて応急手当てをした感じで、さすがにこれはなんとかしないとって感じをひしひしと。
で、 Sculpin もそこそこ更新はされているのでいいかもだけど、せっかくなので GatsbyJS で構築してみようかと。
まあ、思い立ったのは去年のことだけど...</p>

<p>あと、CI も GitHub Action に変えて GitHub のみで完結できそうなので変更したいところ。</p>

<p>あとは、今更 http もないだろうから https にもしてみたいな。</p>

<h3 id="%E3%81%9D%E3%81%AE%E4%BB%96">その他</h3>

<p>その他には...</p>

<ul>
<li>ガジェットの記事</li>
<li>DIYの記事</li>
</ul>

<p>とかも随時していきたいところ。</p>

<p>ああ、あとは、お金貯めて Apple MacBook Air (13", M1, 2020) とか欲しいな... そろそろノートPC買い換えたい...</p>

<h2 id="%E3%81%82%E3%81%91%E3%81%8A%E3%82%81%E3%81%93%E3%81%A8%E3%82%88%E3%82%8D">あけおめことよろ</h2>

<p>ではでは、今年もまた一年、よろしくお願いいたします。</p>

<p><img src="/images/20210101_first_sunrise.jpg" alt="2021年の初日の出" /></p>
]]></content>
        </entry>
            <entry>
            <title type="html"><![CDATA[大晦日@2020]]></title>
            <link href="https://www.sharkpp.net/blog/2020/12/31/new-years-eve-2020.html"/>
            <updated>2020-12-31T21:49:00+00:00</updated>
            <id>https://www.sharkpp.net/blog/2020/12/31/new-years-eve-2020.html</id>
            <content type="html"><![CDATA[<h2 id="1-%E5%B9%B4%E3%82%92%E6%8C%AF%E3%82%8A%E8%BF%94%E3%82%8A">1 年を振り返り</h2>

<p>今年も残すところ大晦日の今日だけとなりました。
つまりは99.7%は終わった感じですね。</p>

<p>世間的なところではコロナ禍が猛威を振るい、今だに収まらないというのは去年の今頃は全く予想できなかったです。
それによって働き方も様変わりし、旅行やイベントも自粛ムードになるなど影響がいたるところに出ている感じですね。</p>

<p>個人的なところでは、お仕事は変わらずだけど、コロナ禍の影響を受けて在宅ワークがメインになったりしました。</p>

<blockquote>
  <p>自分自身のことについてはまあ諸々の理由があって勉強会もほとんど参加できなかったのが残念ですが、来年の後半ぐらいから多少マシになる... といいなと。</p>
</blockquote>

<p>これは、まだもう少しイベントがありそうだけどなんとかしたいですね。</p>

<p>そして、今年も恒例(？)の仮想除夜の鐘アプリ「<a href="https://sharkpp.github.io/joya_no_kane/">除夜の鐘</a>」のリンクを貼っておきます。</p>

<p>さて、前置きいつも通り書いたところで、今年の反省をば。</p>

<h2 id="%E7%B5%90%E6%9E%9C">結果</h2>

<p>まずは、今年の正月 <a href="/blog/2020/01/01/happy-new-year-2020.html">HAPPY NEW YEAR 2020</a> に掲げた目標です。</p>

<ul>
<li>定期的なホムペの更新</li>
<li>ホームページを GitHub Action ＆ GatsbyJS ベースに移行してモダーンな感じに</li>
<li>PWAとかQtとかもろもろ勉強... というか遊ぶ</li>
<li>Rust頑張ってみる... Rust難しい...</li>
<li><a href="https://github.com/sharkpp/FrameExtract">FrameExtract</a> を完成させる</li>
</ul>

<p>と、こんな感じ。</p>

<p>成果としては...</p>

<p>ちょこちょこやっているけど、如何せん時間があまり取れずなかなか進まない感じ。</p>

<p>8月から11月までブログに書けるような内容も何もできていないので、ぐぬぬ。</p>

<p>今年も<a href="https://togetter.com/li/1450054">よんた@keita44_f4 さんの日本酒の感想ツイートまとめ</a>を<del>更新してました</del>大晦日に慌てて更新しました(汗
お酒たくさん飲めて羨ましい...</p>

<h2 id="%E5%8F%8D%E7%9C%81">反省</h2>

<p>作りたいものはあるけど、なかなか時間がない、というか体力がない感じをなんとかしたい感じ。</p>

<p>と言うあたりで今年の反省会終了です。</p>

<p><img src="/images/20201231_herring_soba.jpg" alt="にしん蕎麦" /></p>

<p>それでは来年もよろしくお願いします。</p>
]]></content>
        </entry>
            <entry>
            <title type="html"><![CDATA[Hubot アダプタを TypeScript を使って作ってみた]]></title>
            <link href="https://www.sharkpp.net/blog/2020/07/29/hubot-adapter-with-typescript.html"/>
            <updated>2020-07-29T23:46:00+00:00</updated>
            <id>https://www.sharkpp.net/blog/2020/07/29/hubot-adapter-with-typescript.html</id>
            <content type="html"><![CDATA[<h2 id="typescrpt-%E3%81%A7%E5%AE%9F%E8%A3%85%E3%81%99%E3%82%8B-hubot-%E3%82%A2%E3%83%80%E3%83%97%E3%82%BF">TypeScrpt で実装する Hubot アダプタ</h2>

<p><a href="https://hubot.github.com/docs/adapters/development/">Development adapter | HUBOT</a> を参考に、起動時に bot へと生成したメッセージを受け渡すだけを行うアダプタを TypeScript で実装してみました。</p>

<p>この記事では次のような名称を利用しているので適時読み替えてください。</p>

<table>
<thead>
<tr>
  <th>項目</th>
  <th>名称</th>
</tr>
</thead>
<tbody>
<tr>
  <td>アダプタプロジェクト名</td>
  <td><code>hubot-sample-adapter</code></td>
</tr>
<tr>
  <td>テスト用のHubotプロジェクト名</td>
  <td><code>hubot-test</code></td>
</tr>
<tr>
  <td>アダプタプロジェクトの親フォルダ</td>
  <td><code>~/</code></td>
</tr>
</tbody>
</table>

<h3 id="typescript-%E3%81%AE%E3%82%A4%E3%83%B3%E3%82%B9%E3%83%88%E3%83%BC%E3%83%AB">TypeScript のインストール</h3>

<p>まず環境を整えていきます。</p>

<pre><code class="console">$ mkdir hubot-sample-adapter
$ cd hubot-sample-adapter
$ npm init -y
</code></pre>

<p>追加で、</p>

<pre><code class="console">$ npm install --save --dev typescript hubot @types/hubot
$ npx tsc --init
</code></pre>

<p>として TypeScript のツール用の設定をします。</p>

<h3 id="visual-studio-code-%E3%81%A7%E6%A7%8B%E6%96%87%E3%83%81%E3%82%A7%E3%83%83%E3%82%AF">Visual Studio Code で構文チェック</h3>

<p>Visual Studio Code で <a href="https://marketplace.visualstudio.com/items?itemName=dbaeumer.vscode-eslint">ESLint</a> を使って構文チェックをできるようにします。</p>

<pre><code class="console">$ npm install --save --dev eslint prettier eslint-config-airbnb-base eslint-config-prettier eslint-plugin-prettier eslint-plugin-import
$ npm install --save --dev @typescript-eslint/parser @typescript-eslint/eslint-plugin
</code></pre>

<p>インストールを行うと <code>The ESLint extension will use 'node_modules/eslint' for validation, which is installed locally in 'hubot-sample-adapter'. If you trust this version of ESLint, press 'Allow', otherwise press 'Do Not Allow'. Press 'Cancel' to disable ESLint for this session.</code> と確認されるので <code>Allow</code> を選択します。</p>

<p>とりあえず、</p>

<table>
<thead>
<tr>
  <th>項目</th>
  <th>説明など</th>
</tr>
</thead>
<tbody>
<tr>
  <td>Javascript style guide</td>
  <td>airbnb-base</td>
</tr>
<tr>
  <td>構文チェック</td>
  <td>基本全てエラー</td>
</tr>
<tr>
  <td>no-unused-vars</td>
  <td><code>_</code> から始まる変数以外の未使用をエラーとする。(TypeScriptの構文を優先)</td>
</tr>
</tbody>
</table>

<p>こんな感じで、設定ファイル <code>.eslintrc.js</code> は</p>

<pre><code class="javascript">module.exports = {
    "env": {
        "browser": false,
        "es2020": true
    },
    "extends": [
        "airbnb-base",
        "plugin:prettier/recommended",
        "prettier/@typescript-eslint"
    ],
    "parser": "@typescript-eslint/parser",
    "parserOptions": {
        "ecmaVersion": 11,
        "sourceType": "module"
    },
    "plugins": [
        "@typescript-eslint",
        "prettier"
    ],
    "rules": {
        "prettier/prettier": "error",
        "no-unused-vars": "off",
        "@typescript-eslint/no-unused-vars": ["error", { argsIgnorePattern: "^_" }]
    }
};
</code></pre>

<p>こんな感じ。</p>

<h2 id="visual-studio-code-%E3%81%A7%E3%83%87%E3%83%90%E3%83%83%E3%82%B0%E3%82%92%E8%A1%8C%E3%81%86%E3%81%9F%E3%82%81%E3%81%AE%E3%81%82%E3%82%8C%E3%81%93%E3%82%8C">Visual Studio Code でデバッグを行うためのあれこれ</h2>

<p>TypeScript のソース上でブレークポイントを設定したりデバッグ実行前にソースをコンパイルするなど、デバッグのための構成を行います。</p>

<ol>
<li>デバッグ用 hubot プロジェクトの作成</li>
<li>デバッグのための構成を追加</li>
</ol>

<h3 id="%E3%83%87%E3%83%90%E3%83%83%E3%82%B0%E7%94%A8-hubot-%E3%83%97%E3%83%AD%E3%82%B8%E3%82%A7%E3%82%AF%E3%83%88%E3%81%AE%E4%BD%9C%E6%88%90">デバッグ用 hubot プロジェクトの作成</h3>

<p><code>yo hubot</code> でテスト用の hubot を作成します。
この時 <code>--defaults</code> オプションをつけることでオーナーなどの指定をよしなにしてくれます。
ここではテスト用に作るため、アダプタプロジェクトの直下に作ります。</p>

<pre><code class="console">$ mkdir hubot-test
$ cd hubot-test
$ npx yo hubot --defaults
                     _____________________________  
                    /                             \ 
   //\              |      Extracting input for    |
  ////\    _____    |   self-replication process   |
 //////\  /_____\   \                             / 
 ======= |[^_/\_]|   /----------------------------  
  |   | _|___@@__|__                                
  +===+/  ///     \_\                               
   | |_\ /// HUBOT/\\                             
   |___/\//      /  \\                            
         \      /   +---+                            
          \____/    |   |                            
           | //|    +===+                            
            \//      |xx|                            

   create bin/hubot
   create bin/hubot.cmd
　　　　　　　　：
added 92 packages from 53 contributors and audited 92 packages in 13.227s
found 0 vulnerabilities

</code></pre>

<p><code>npm link path/to/hubot-adapter</code> とコマンドを実行し、アダプタへリンクを貼り テスト用の Hubot プロジェクトからアダプタが認識できるようにします。</p>

<pre><code class="console">$ pwd

$ npm link ../../hubot-sample-adapter
npm WARN hubot-sample-adapter@1.0.0 No repository field.

audited 373 packages in 3.58s

29 packages are looking for funding
  run `npm fund` for details

found 0 vulnerabilities

/usr/local/lib/node_modules/hubot-sample-adapter -&gt; ~/hubot-sample-adapter
~/hubot-sample-adapter/hubot-test/node_modules/hubot-sample-adapter -&gt; /usr/local/lib/node_modules/hubot-sample-adapter -&gt; ~/hubot-sample-adapter
</code></pre>

<p>注意点として、パスの指定は相対パスで問題ないですが、指定したパスの最後の部分を利用し node_modules にフォルダを作成しているようなので、フォルダ名を指定する必要があります。</p>

<pre><code>○ $ npm link ../../hubot-sample-adapter
× $ npm link ../
</code></pre>

<p>作成されたプロジェクトをデバッグ用にカスタマイズします。</p>

<p><code>hubot-test/external-scripts.json</code> にデフォルトで設定されている外部スクリプトはデバッグの邪魔になるので除外しておきます。</p>

<pre><code class="diff"> [
-  "hubot-diagnostics",
-  "hubot-help",
-  "hubot-heroku-keepalive",
-  "hubot-google-images",
-  "hubot-google-translate",
-  "hubot-pugme",
-  "hubot-maps",
-  "hubot-redis-brain",
-  "hubot-rules",
-  "hubot-shipit"
 ]
</code></pre>

<p>とりあえず、この記事で実装するアダプタは起動時にメッセージを bot へ送るので、どんな内容でも受け取ってり返答する bot を <code>hubot-test/scripts/echo.coffee</code> として追加します。</p>

<p>内容は適時使いやすいように書き換え可能ですが、先頭のコメント行を削除すると <code>using deprecated documentation syntax</code> と警告がログに出ます。</p>

<pre><code class="coffee"># Description:
#   echo bot
#
# Commands:
#   &lt;text&gt; - Reply back with &lt;text&gt;

module.exports = (robot) -&gt;

  robot.hear /(.*)/i, (res) -&gt;
    res.reply "echo \"#{res.match[1]}\""
</code></pre>

<h3 id="%E3%83%87%E3%83%90%E3%83%83%E3%82%B0%E3%81%AE%E3%81%9F%E3%82%81%E3%81%AE%E6%A7%8B%E6%88%90%E3%82%92%E8%BF%BD%E5%8A%A0">デバッグのための構成を追加</h3>

<p>Visual Studio Code で TypeScript で実装された Hubot アダプタをデバッグするため、３つのファイルでデバッグ構成を設定します。</p>

<p>まず、<code>.vscode/launch.json</code> にデバッグ実行のための構成を追加します。</p>

<ol>
<li>「アクティビティーバー」の「実行」を押下し、「launch.json ファイルを作成します」を選択します。</li>
<li>ドロップダウンで指定する環境は「Node.js」を選択します。</li>
<li>すると <code>.vscode/launch.json</code> にプログラムを実行するための構成ファイルが生成されます。</li>
</ol>

<p>作成後のファイルを開き（確認のためファイルはオープンされています）次のような感じに変更します。</p>

<p><code>"outputCapture": "std"</code> (もしくは、ユーザーの入力を受け取る必要があるなら <code>"console": "integratedTerminal"</code> )を設定しない場合、実行時のログを確認することができません。</p>

<pre><code class="diff"> {
   "version": "0.2.0",
   "configurations": [
     {
-      "name": "プログラムの起動",
+      "name": "Debug Adapter",
       "type": "node",
       "request": "launch",
+      "preLaunchTask": "tsc: ビルド - tsconfig.json",
       "skipFiles": [
         "&lt;node_internals&gt;/**"
       ],
-      "program": "${workspaceFolder}/index.js"
+      "program": "${workspaceRoot}/hubot-test/node_modules/.bin/coffee",
+      "cwd": "${workspaceRoot}/hubot-test",
+      "outputCapture": "std",
+      "args": [
+        "${workspaceRoot}/hubot-test/node_modules/.bin/hubot",
+        "-a", "sample-adapter",
+      ],
+      "env": {
+        "HUBOT_LOG_LEVEL": "DEBUG"
+      }
     }
   ]
 }
</code></pre>

<p>まず、<code>.vscode/tasks.json</code> にデバッグ実行前に TypeScript でコンパイルを行うための設定をします。
デバッグ実行との関連付けはすでに <code>"preLaunchTask": "tsc: ビルド - tsconfig.json",</code> にて指定済みです。</p>

<p>メニューから「ターミナル」→「タスクの構成...」を選択し、ドロップダウンの選択ないから「tsc: ビルド - tsconfig.json」を選択します。</p>

<p>すると次のような内容が <code>.vscode/tasks.json</code> に作成されます。</p>

<pre><code class="json">{
    "version": "2.0.0",
    "tasks": [
        {
            "type": "typescript",
            "tsconfig": "tsconfig.json",
            "problemMatcher": [
                "$tsc"
            ],
            "group": "build",
            "label": "tsc: ビルド - tsconfig.json"
        }
    ]
}
</code></pre>

<p>最後に、 <code>tsconfig.json</code> に設定することで、TypeScript のソースでブレイクポイントを設定できるようにします。</p>

<p>デフォルトでは、TypeScript のソースでブレークポイントを設定してもデバッグ実行時には、コンパイル後の JavaScript のソースが実行されるため指定したブレークポイントは無効にされてしまいます。</p>

<p>設定を追加することで TypeScript のソースのコンパイル時に同時にマップファイルが書き出されるようになり、結果としてブレイクポイントを設定できるようになります。</p>

<p><code>tsconfig.json</code> を次のように変更します。</p>

<pre><code class="diff">      // "declaration": true,                   /* Generates corresponding '.d.ts' file. */
      // "declarationMap": true,                /* Generates a sourcemap for each corresponding '.d.ts' file. */
-     // "sourceMap": true,                     /* Generates corresponding '.map' file. */
+     "sourceMap": true,                        /* Generates corresponding '.map' file. */
      // "outFile": "./",                       /* Concatenate and emit output to single file. */
      // "outDir": "./",                        /* Redirect output structure to the directory. */
</code></pre>

<h2 id="%E3%82%A2%E3%83%80%E3%83%97%E3%82%BF%E3%83%97%E3%81%AE%E5%AE%9F%E8%A3%85">アダプタプの実装</h2>

<p><a href="https://hubot.github.com/docs/adapters/development/">Development adapter | HUBOT</a> の <code>src/adapter.coffee</code> を参考に TypeScript で書き換え <code>src/adapter.ts</code> を作成します。</p>

<pre><code class="typescript">import { Robot, Adapter, User, TextMessage } from "hubot";

class Sample extends Adapter {
  robot!: Robot&lt;Adapter&gt;;

  constructor(robot: Robot&lt;Adapter&gt;) {
    super(robot);
    this.robot.logger.info("Constructor");
  }

  send(envelope: any, ...strings: any[]) {
    this.robot.logger.info("Send");
  }

  reply(envelope: any, ...strings: any[]) {
    this.robot.logger.info("Reply");
  }

  run() {
    this.robot.logger.info("Run");
    this.emit("connected");
    const user = new User("1001", { name: "Sample User", });
    const message = new TextMessage(user, "Some Sample Message", "MSG-001");
    this.robot.receive(message);
  }
}

module.exports.use = function createSampleAdapter(
  robot: Robot&lt;Adapter&gt;
) {
  return new Sample(robot);
};
</code></pre>

<p>TypeScript でコンパイルすると <code>src/adapter.js</code> が作成されるので、忘れずに <code>package.json</code> に書かれているエントリポイントは <code>src/adapter.coffee</code> ではなく <code>src/adapter.js</code> にしておきましょう。</p>

<h3 id="%E3%83%87%E3%83%90%E3%83%83%E3%82%B0%E5%AE%9F%E8%A1%8C%E6%99%82%E7%89%B9%E6%9C%89%E3%81%AE%E5%95%8F%E9%A1%8C%E3%81%B8%E3%81%AE%E5%AF%BE%E5%87%A6">デバッグ実行時特有の問題への対処</h3>

<p>ここまでで、ほぼデバッグ実行ができるようになりますが、実はこのままだと Node.js のライブラリの読み込みの仕様が原因で <code>robot.receive()</code> から呼ばれるはずの bot の処理が実行されない状態になっています。</p>

<p>原因としてはどうやら</p>

<ol>
<li><code>hubot</code> コマンドがアダプタを読み込む。</li>
<li>アダプタが <code>hubot</code> ライブラリの読み込みを行う。</li>
<li>パスの解決の結果、 <code>hubot-test/node_modules/hubot</code> が読み込まれることを意図しているところ、 アダプタのコンパイルに必要なため <code>node_modules/hubot</code> が存在していることから、そちらが読み込まれる。</li>
</ol>

<p>結果 <code>hubot</code> コマンド内で行われる <code>instanceof TextMessage</code> などの比較で不一致が発生し bot が処理されないようです。</p>

<p>現状、対処としては動的にデバッグ実行かそうでないかを判断しライブラリの読み込みパスを変更するようにすることで意図しない動きを回避しています。</p>

<pre><code class="diff">-import { Robot, Adapter, User, TextMessage } from "hubot";
+import * as Hubot from "hubot";
+import { Robot, Adapter } from "hubot";
+import * as path from "path";
+
+const isTestHubot =
+  path.join(__dirname, "..") ===
+  // @ts-ignore TS2532: Object is possibly 'undefined'.
+  path.join(require.main.filename.replace(/node_modules\/.*$/, ""), ".."); // (...)/hubot-line-local-tunnel/hubot-test/node_modules/hubot/bin/hubot
+// テスト環境での実行時はテスト用の環境に含まれる Hubot パッケージを読むように指示
+const { User, TextMessage } = !isTestHubot
+  ? Hubot
+  : require(require("path").join(__dirname, "../hubot-test/node_modules/hubot")); // eslint-disable-line import/no-dynamic-require

 class Sample extends Adapter {
   robot!: Robot&lt;Adapter&gt;;
</code></pre>

<h2 id="%E5%AE%9F%E8%A1%8C%E3%81%97%E3%81%A6%E3%81%BF%E3%82%8B">実行してみる</h2>

<p><code>hubot</code> プリフェックスを除いた名前で <code>--adapter</code> オプションを指定し実行します</p>

<pre><code class="console">$ npx hubot -a sample-adapter
[Wed Jul 29 2020 23:44:09 GMT+0900] INFO Constructor
[Wed Jul 29 2020 23:44:09 GMT+0900] INFO Run
[Wed Jul 29 2020 23:44:09 GMT+0900] WARNING Loading scripts from hubot-scripts.json is deprecated and will be removed in 3.0 (https://github.com/github/hubot-scripts/issues/1113) in favor of packages for each script.

Your hubot-scripts.json is empty, so you just need to remove it.
[Wed Jul 29 2020 23:44:09 GMT+0900] INFO Reply
</code></pre>

<p>ログを見ると、ちゃんと <code>Constructor</code> と <code>Run</code> と <code>Reply</code> が印字されています。</p>

<h2 id="%E3%83%A1%E3%83%A2">メモ</h2>

<h3 id="configuration-for-rule-%22import%2Fno-cycle%22-is-invalid">Configuration for rule "import/no-cycle" is invalid</h3>

<pre><code class="console">               :
Configuration for rule "import/no-cycle" is invalid
               :
</code></pre>

<p>と表示され eslint が正常に実行されない場合があった。</p>

<p><a href="https://github.com/airbnb/javascript/issues/2227">Invalid rule configurations compiled by "eslint --print-config" on eslint-config-airbnb-typescript · Issue #2227 · airbnb/javascript</a> によると、どうやら 7.3.0 から 7.2.0 へダウングレードすることで回避できる様子。</p>

<pre><code class="console">$ npm i eslint@7.2.0 --save-dev
</code></pre>

<h2 id="%E5%8F%82%E8%80%83">参考</h2>

<ul>
<li><a href="https://hubot.github.com/docs/adapters/development/">Development adapter | HUBOT</a></li>
<li><a href="https://github.com/airbnb/javascript/issues/2227">Invalid rule configurations compiled by "eslint --print-config" on eslint-config-airbnb-typescript · Issue #2227 · airbnb/javascript</a></li>
<li><a href="https://hiranoon.hatenablog.com/entry/2020/04/13/192746#%E3%81%AF%E3%81%98%E3%82%81%E3%81%AB">TypeScript の開発環境を作る。VSCode を基本に ESLint と Prettier も添えて。 - Multi Vitamin &amp; Mineral</a></li>
<li><a href="http://akiomik.hatenablog.jp/entry/2014/02/12/052703">hubot adapterの作り方 - おみブロZ</a></li>
<li><a href="https://qiita.com/bouzuya/items/11c0c6da2b3ad54b827f#hubot-echo">Hubot のインストール - Qiita</a></li>
<li><a href="https://komari.co.jp/blog/develop/frontend/355/#i-3">Visual Studio Code のデバッグコンソールにログが出力されない話 | 岡山のWEB制作はKOMARI</a></li>
<li><a href="https://qiita.com/n0bisuke/items/12ce4df55a405a62b599">Hubotでusing deprecated documentation syntax - Qiita</a></li>
<li><a href="https://qiita.com/mysticatea/items/f523dab04a25f617c87d">ESLint 最初の一歩 - Qiita</a></li>
<li><a href="https://shotat.hateblo.jp/entry/2016/10/26/000912">Eslintでunderscoreから始まる変数をチェックさせない設定にする - Memento memo.</a></li>
<li><a href="https://stackoverflow.com/questions/57802057/eslint-configuring-no-unused-vars-for-typescript">esLint-Typescriptの「no-unused-vars」の構成-スタックオーバーフロー</a></li>
</ul>
]]></content>
        </entry>
            <entry>
            <title type="html"><![CDATA[あれから16年経ったようです]]></title>
            <link href="https://www.sharkpp.net/blog/2020/02/29/happy-anniversary-16th.html"/>
            <updated>2020-02-29T23:30:00+00:00</updated>
            <id>https://www.sharkpp.net/blog/2020/02/29/happy-anniversary-16th.html</id>
            <content type="html"><![CDATA[<p>世間では新型コロナウイルスによって展示会やらイベントが次々に中止や延期に追い込まれています。
個人的な部分でもついにリモートワークが推奨になってきた感じで影響が出始めましたね。</p>

<p>さて、本日はいつの間にかホームページ開設が16年を過ぎ17年目になったことに気がついて、去年何かやっておけばよかったとすこし後悔していたところで今からでも遅くないというそらみみが聞こえてきたので、このページの過去をざっくりと振り返ってみたいと思います。</p>

<h2 id="%E3%83%9B%E3%83%BC%E3%83%A0%E3%83%9A%E3%83%BC%E3%82%B8%E9%96%8B%E8%A8%AD">ホームページ開設</h2>

<p>2004-02-24 ホームページを開設</p>

<p>たしか、契約しているプロバイダのおまけでついてくるジオシティーズのアカウントで公開していたと思う。</p>

<p>phpを動かすために、別のサービス(これもすでに閉鎖)も借りていた記憶もありますね。</p>

<p>ジオシティーズも去年完全閉鎖され時代の流れを感じますのぅ。
<a href="https://info-geocities.yahoo.co.jp/close/"><img src="/images/20200229_geocities_closed.png" alt="サービス終了のお知らせ - Yahoo!ジオシティーズ" /></a></p>

<h2 id="%E3%83%89%E3%83%A1%E3%82%A4%E3%83%B3%E5%8F%96%E5%BE%97">ドメイン取得</h2>

<p>2005-08-13 独自ドメインへ移転</p>

<p>数日前の 2005-08-05 に <code>sharkpp.net</code> を取得し、独自ドメインでの運営に変更。
この当時契約していたドメインレジストラも独自運営からGMOに買収されたりと、これまた結構変遷があります。</p>

<p><a href="http://web.archive.org/">Wayback Machine</a>に残っている最古は 2005-10-20 15:34:50 でこんなデザインでした。</p>

<p><a href="http://web.archive.org/web/20051020153450/http://www.sharkpp.net:80/"><img src="/images/20200229_webarc20051020153450.png" alt="2005-10-20 15:34:50 当時のページ" /></a></p>

<h2 id="%E6%A7%8B%E7%AF%89%E3%82%B7%E3%82%B9%E3%83%86%E3%83%A0%E3%82%92%E6%89%8B%E6%89%93%E3%81%A1%E3%81%8B%E3%82%89-frog-cms-%E3%81%AB%E5%A4%89%E6%9B%B4">構築システムを手打ちから Frog CMS に変更</h2>

<p>2008-08-XX 構築システムを手打ちから Frog CMS に変更</p>

<p>ホームページを手打ちから <a href="https://github.com/philippe/FrogCMS">Frog CMS</a> というCMSに変更。
この時同時に、デザインの変更や、掲示板の廃止などもしています。
Frog CMS も更新が続くと思ってたらしばらくしたら更新されなくなりましたなぁ...</p>

<p><a href="http://web.archive.org/web/20081007190559/http://www.sharkpp.net:80/"><img src="/images/20200229_webarc20081007190559.png" alt="2008-10-07 19:05:59 当時のページ" /></a></p>

<h2 id="%E6%A7%8B%E7%AF%89%E3%82%B7%E3%82%B9%E3%83%86%E3%83%A0%E3%82%92-frog-cms-%E3%81%8B%E3%82%89-sculpin-%2B-github-pages-%E3%81%AB%E5%A4%89%E6%9B%B4">構築システムを Frog CMS から Sculpin + GitHub pages に変更</h2>

<p>2015-05-31 構築システムを Frog CMS から Sculpin + GitHub pages に変更</p>

<p>レンタルサーバーの仕様変更で、しばらく Frog CMS がエラーを吐いていたことやもはや保守されてないものを使うのもってことで、重い腰を上げ <a href="https://sculpin.io/">Sculpin</a> という、php で動作する静的サイトジェネレータを利用し GitHub に push したら GitHub pages で運用しているサイトが更新される仕組みを構築しました。
その時の記録は「<a href="/blog/2015/06/28/site-reboot-by-sculpin.html">Sculpin でホムペを再構築したときのメモ</a>」として記事にしています。
この時同時に、デザインやホームページのタイトルの変更もしています。</p>

<h2 id="%E6%A7%8B%E7%AF%89%E3%82%B7%E3%82%B9%E3%83%86%E3%83%A0%E3%81%AE%E9%81%8B%E7%94%A8%E3%82%92-xrea-%E3%81%8B%E3%82%89-travis-ci-%E3%81%AB%E5%A4%89%E6%9B%B4">構築システムの運用を xrea から Travis CI に変更</h2>

<p>2016-06-12 構築システムの運用を xrea から Travis CI に変更</p>

<p>レンタルサーバーの XREA でサイトのビルドを行なっていたけど、だんだんとビルドに失敗したりすることが多くなってきたので Travis CI を使ってビルドするように変更。
今なら、GitHub Actions を使う感じかも。
今と違って、ヘッダ部分にカテゴリリンクがなかったりしてるけど、それはおいおいと細かく変更していった結果。</p>

<p><a href="http://web.archive.org/web/20150613052025/http://www.sharkpp.net:80/"><img src="/images/20200229_webarc20150613052025.png" alt="2015-06-13 05:20:25 当時のページ" /></a></p>

<h2 id="%E3%81%9D%E3%81%97%E3%81%A6%E7%8F%BE%E5%9C%A8">そして現在</h2>

<p>もろもろ細かなデザインが変わったりしているけど、根本のシステムは変わらず。</p>

<p><img src="/images/20200229_now.png" alt="現在のページ" /></p>

<h2 id="%E3%81%BE%E3%81%A8%E3%82%81">まとめ</h2>

<p>とりあえず、大きな変更をざっくりとまとめてみました。
16年も経つとオギャーといってた赤ちゃんが高校１年とか２年とかになっている感じなので、世間でも大きなところでは、携帯電話がガラゲー（フューチャーフォン）からスマホに変わったりしていますね。</p>

<p>光陰矢の如しとはよくいったもので、ここ数年は一年があっという間に過ぎていく感じで、なかなかに恐ろしいです。</p>

<p>まあ、そんな感じな雑な締めかたですが、16年経ち17年目を迎えた「さめたすたすのお部屋」をよろしくお願いします。</p>
]]></content>
        </entry>
    </feed>