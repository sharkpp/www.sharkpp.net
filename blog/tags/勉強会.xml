<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
    <title><![CDATA[さめたすたすのお家]]></title>
    <link href="https://www.sharkpp.net/blog/tags/%E5%8B%89%E5%BC%B7%E4%BC%9A.xml" rel="self"/>
    <link href="https://www.sharkpp.net/"/>
    <updated>2022-12-30T22:37:57+00:00</updated>
    <id>https://www.sharkpp.net/</id>
            <author>
            <name><![CDATA[sharkpp]]></name>                    </author>
        <generator uri="http://sculpin.io/">Sculpin</generator>
            <entry>
            <title type="html"><![CDATA[名古屋Qt勉強会#31.1 に参加しました]]></title>
            <link href="https://www.sharkpp.net/blog/2019/11/23/qt-nagoya-31.html"/>
            <updated>2019-11-23T17:38:00+00:00</updated>
            <id>https://www.sharkpp.net/blog/2019/11/23/qt-nagoya-31.html</id>
            <content type="html"><![CDATA[<p>2019年11月23日(土) に開催された <a href="https://qt-users.connpass.com/event/155325/">Qt 勉強会 @ Nagoya #31.1 - connpass</a> へ参加しました。</p>

<p>そのまとめです。</p>

<h2 id="%E8%87%AA%E5%B7%B1%E7%B4%B9%E4%BB%8B">自己紹介</h2>

<p>毎回の通り、自己紹介と本日やることを宣言。</p>

<p>初めて参加の方が一人いた。</p>

<p>久しぶりの開催なのと初めての人がいるためか開催の趣旨などが説明された。</p>

<h2 id="%40kazuo_asa-%E3%81%95%E3%82%93%E3%81%AB%E3%82%88%E3%82%8B%E7%99%BA%E8%A1%A8">@kazuo_asa さんによる発表</h2>

<p><a href="https://twitter.com/kazuo_asa">@kazuo_asa</a> による</p>

<ul>
<li>はじめてのQt入門 シグナルとスロット</li>
</ul>

<p>の発表がありました。</p>

<h2 id="%E8%87%AA%E5%88%86%E3%81%AE%E6%9C%AC%E6%97%A5%E3%81%AE%E3%82%84%E3%82%8B%E3%81%93%E3%81%A8">自分の本日のやること</h2>

<ul>
<li>前回の続きの動画からフレームを切り出し動画のメタ情報とフレーム位置に応じた時刻を設定するツールを実装</li>
</ul>

<p>前回までの状況</p>

<ul>
<li>UIの実装途中</li>
</ul>

<h2 id="%E6%9C%AC%E6%97%A5%E3%81%AE%E7%9F%A5%E8%A6%8B">本日の知見</h2>

<h2 id="path%E7%92%B0%E5%A2%83%E5%A4%89%E6%95%B0">PATH環境変数</h2>

<p>QtCreator で値を上書きできるので、コンソールでの実行結果と違うことがある...</p>

<h2 id="%E3%82%B7%E3%82%B0%E3%83%8A%E3%83%AB%2F%E3%82%B9%E3%83%AD%E3%83%83%E3%83%88%E3%81%A7%E3%81%AE%E6%8E%A5%E7%B6%9A%E3%82%BF%E3%82%A4%E3%83%97">シグナル/スロットでの接続タイプ</h2>

<p>オプションで指定できたみたい... 知らなかった...</p>

<p><a href="https://doc.qt.io/qt-5/qt.html#ConnectionType-enum">enum Qt::ConnectionType</a> より</p>

<table>
<thead>
<tr>
  <th>Constant</th>
  <th>Value</th>
  <th>Description</th>
</tr>
</thead>
<tbody>
<tr>
  <td>Qt::AutoConnection</td>
  <td>0</td>
  <td>（デフォルト）シグナルを発信するスレッド内にレシーバーが存在する場合、Qt::DirectConnection が使用されます。それ以外の場合、Qt::QueuedConnection が使用されます。接続タイプは、信号が発信されるときに決定されます。</td>
</tr>
<tr>
  <td>Qt::DirectConnection</td>
  <td>1</td>
  <td>スロットは、信号が発信されるとすぐに呼び出されます。スロットはシグナリングスレッドで実行されます。</td>
</tr>
<tr>
  <td>Qt::QueuedConnection</td>
  <td>2</td>
  <td>スロットは、制御がレシーバーのスレッドのイベントループに戻るときに呼び出されます。スロットは受信者のスレッドで実行されます。</td>
</tr>
<tr>
  <td>Qt::BlockingQueuedConnection</td>
  <td>3</td>
  <td>Qt::QueuedConnection と同じです。ただし、シグナルスレッドは、スロットが戻るまでブロックします。レシーバがシグナリングスレッドに存在する場合、この接続を使用しないでください。使用すると、アプリケーションがデッドロックします。</td>
</tr>
<tr>
  <td>Qt::UniqueConnection</td>
  <td>0x80</td>
  <td>これは、ビット単位のORを使用して、上記の接続タイプのいずれかと組み合わせることができるフラグです。 Qt::UniqueConnection が設定されている場合、接続が既に存在する場合（つまり、同じオブジェクトの同じペアの同じスロットに同じ信号が既に接続されている場合）、QObject::connect() は失敗します。このフラグはQt 4.6で導入されました。</td>
</tr>
</tbody>
</table>

<h2 id="%E6%9C%AC%E6%97%A5%E3%81%AE%E9%80%B2%E6%8D%97">本日の進捗</h2>

<ul>
<li>前回の続きを思い出すところからスタート</li>
<li>QProcess::start() で絶対パスではなく <code>ffmpeg</code> だけでコマンドが呼び出せないのを調べていたが、結局 QtCreater の設定に追加することで解決</li>
<li>あとは QML で 思った UI の表現がうまくいかなかったのでそれを実現するためにサンプルを作ってたりしてタイムアップ</li>
</ul>

<p>なかなかに、思ったUIを作るのが難しい...</p>

<h2 id="%E3%83%A1%E3%83%A2">メモ</h2>

<ul>
<li><a href="https://scoop.sh/">Scoop</a> いいぞぉ</li>
</ul>

<h2 id="%E5%8F%82%E8%80%83">参考</h2>

<ul>
<li><a href="https://doc.qt.io/qt-5/qt.html#ConnectionType-enum">Qt Namespace | Qt Core 5.13.2</a></li>
</ul>
]]></content>
        </entry>
            <entry>
            <title type="html"><![CDATA[名古屋Qt勉強会#30.1 に参加しました]]></title>
            <link href="https://www.sharkpp.net/blog/2019/08/24/qt-nagoya-30.html"/>
            <updated>2019-08-24T17:13:00+00:00</updated>
            <id>https://www.sharkpp.net/blog/2019/08/24/qt-nagoya-30.html</id>
            <content type="html"><![CDATA[<p>2019年8月24日(土) に開催された <a href="https://qt-users.connpass.com/event/143118/">Qt 勉強会 @ Nagoya #30.1 - connpass</a> へ参加しました。</p>

<p>そのまとめです。</p>

<p><img src="/images/20190824_frame_extract.png" alt="成果" /></p>

<h2 id="%E8%87%AA%E5%B7%B1%E7%B4%B9%E4%BB%8B">自己紹介</h2>

<p>毎回の通り、自己紹介と本日やることを宣言。</p>

<p>初めて参加の方が一人いた。</p>

<h2 id="%40kazuo_asa-%E3%81%95%E3%82%93%E3%81%AB%E3%82%88%E3%82%8B%E7%99%BA%E8%A1%A8">@kazuo_asa さんによる発表</h2>

<p><a href="https://twitter.com/kazuo_asa">@kazuo_asa</a> による</p>

<ul>
<li>Yoctoを使用して、Boot2Qtをraspberry pi用に構築してみよう。</li>
<li>Qt Creatorを使用して、raspberry piで動作するQtアプリのリモートデバックの仕方。</li>
</ul>

<p>の発表がありました。</p>

<p>発表資料: <a href="https://qiita.com/sazus/items/e3c12dc67b8d38667a20">Raspberry Pi 3 で Qt 5 をビルドして動かす方法(Yocto layer Boot2Qt編)</a></p>

<h2 id="%E8%87%AA%E5%88%86%E3%81%AE%E6%9C%AC%E6%97%A5%E3%81%AE%E3%82%84%E3%82%8B%E3%81%93%E3%81%A8">自分の本日のやること</h2>

<ul>
<li>前回の続きの動画からフレームを切り出し動画のメタ情報とフレーム位置に応じた時刻を設定するツールを実装</li>
</ul>

<p>前回までの状況</p>

<ul>
<li>フレームの取得の高速化（フレーム数で取得するのを諦めフレーム数とフレームレートで秒数を求めて指定するようにした）</li>
<li>なぜかフレームデータの受け渡しでアクセス違反が... なぜだ！？</li>
</ul>

<h2 id="%E6%9C%AC%E6%97%A5%E3%81%AE%E7%9F%A5%E8%A6%8B">本日の知見</h2>

<h3 id="void%2A-%E2%86%92-qvariant">void* → QVariant</h3>

<p>たぶんこう。</p>

<p>```c++
    Hoge* hogePointer = this->getHoge();
    QVariant a = QVariant::fromValue(reinterpret_cast&lt;void*>(hogePointer));</p>

<pre><code><br />ただ、なんか逆がうまくいかないので Q_DECLARE_METATYPE で型を登録して利用するようにした。

### QVariant で自作のクラスのポインタを扱う

QVariant で自作のクラスのポインタを扱うための実装。 

定義 

このとき、一部だけで `Q_DECLARE_METATYPE` を使うと `static_assert failed "Type is not registered, please use the Q_DECLARE_METATYPE macro to make it known to Qt's meta-object system"` とエラーが出る。

```c++
// hoge.hpp

#include &lt;QObject&gt;

class Hoge {
  // ...
};

Q_DECLARE_METATYPE(Hoge*)
</code></pre>

<p>利用方法</p>

<pre><code>#include &lt;hoge.hpp&gt;

void fuga() {

  // to  QVariant()
  Hoge* hoge1 = new Hoge();
  QVariant a = QVariant::fromValue(hoge1);

  // from QVariant()
  Hoge* hoge2 = a.value&lt;Hoge*&gt;();
}
</code></pre>

<h3 id="qqmlengine%EF%BC%9Aqml%E3%82%A8%E3%83%B3%E3%82%B8%E3%83%B3%E3%81%A8%E3%81%AF%E7%95%B0%E3%81%AA%E3%82%8B%E3%82%B9%E3%83%AC%E3%83%83%E3%83%89%E3%81%AB%E3%81%82%E3%82%8B%E3%82%AF%E3%83%A9%E3%82%B9%E3%81%B8%E3%81%AE%E4%B8%8D%E6%AD%A3%E3%81%AA%E6%8E%A5%E7%B6%9A%E8%A9%A6%E8%A1%8C">QQmlEngine：QMLエンジンとは異なるスレッドにあるクラスへの不正な接続試行</h3>

<p><code>QQmlEngine: Illegal attempt to connect to XXXXXXX(0x99999999) that is in a different thread than the QML engine QQmlApplicationEngine(0x99999999.</code> というエラーが出た。</p>

<p>どうやら <code>QQmlApplicationEngine</code> とは別のスレッドで作成したインスタンスにアクセスしようとすると出るっぽい。</p>

<h2 id="%E6%9C%AC%E6%97%A5%E3%81%AE%E9%80%B2%E6%8D%97">本日の進捗</h2>

<p>なぜかアクセス違反で落ちると思ってたらそもそも想定した値が入ってなかった（つまるところ未初期化）
それは落ちるわけだ... とりあえずこれは直った。</p>

<p>やっとサムネイルが出るようになった。</p>

<p>画面はこんな感じで行きたいな。</p>

<p><img src="/images/20190824_frame_extract_ui1.png" alt="秒単位でのフレームの一覧" /> <img src="/images/20190824_frame_extract_ui2.png" alt="フレーム単位でのフレームの一覧" /></p>

<p>とりあえずの成果はこんな感じ</p>

<p><img src="/images/20190824_frame_extract.png" alt="成果" /></p>

<h2 id="%E3%83%A1%E3%83%A2">メモ</h2>

<ul>
<li>UIどうするか？

<ul>
<li>最終的にはスマホでも動くようにしたいなぁ</li>
</ul></li>
<li>複数の動画をドロップして全部一度に選べると良さそう</li>
</ul>

<h2 id="%E5%8F%82%E8%80%83">参考</h2>

<ul>
<li><a href="https://qiita.com/dNaga392/items/3b32fdb3d59b3c25fa6c">QVariantを便利に使おう - Qiita</a></li>
<li><a href="https://stackoverflow.com/questions/44501171/qvariant-with-custom-class-pointer-does-not-return-same-address">qt - QVariant with custom class pointer does not return same address - Stack Overflow</a></li>
<li><a href="https://forum.qt.io/topic/30169/qt-5-1-qml-property-through-threads">Qt 5.1 QML property through Threads | Qt Forum</a> の翻訳→ <a href="https://codeday.me/jp/qa/20190228/335153.html">c – スレッドを通したQt 5.1 QMLプロパティ - コードログ</a></li>
<li><a href="https://getting-started-qml-ja.readthedocs.io/ja/latest/chapter06.html">Qt C++を用いたQMLの拡張 — Getting started QML programming Japanese translation 2014.04.05 ドキュメント</a></li>
</ul>
]]></content>
        </entry>
            <entry>
            <title type="html"><![CDATA[名古屋Qt勉強会#28 に参加しました]]></title>
            <link href="https://www.sharkpp.net/blog/2019/05/18/qt-nagoya-28.html"/>
            <updated>2019-05-18T17:15:00+00:00</updated>
            <id>https://www.sharkpp.net/blog/2019/05/18/qt-nagoya-28.html</id>
            <content type="html"><![CDATA[<p>5月18日(土) に開催された <a href="https://qt-users.connpass.com/event/130498/">Qt 勉強会 @ Nagoya #28 - connpass</a> へ前回に引き続き参加しました。</p>

<p>そのまとめです。</p>

<p><img src="/images/20190518_frame_extract.png" alt="成果" /></p>

<h2 id="%E8%87%AA%E5%B7%B1%E7%B4%B9%E4%BB%8B">自己紹介</h2>

<p>毎回の通り、自己紹介と本日やることを宣言。</p>

<p>初めて参加の方が二人いた。
次回以降も参加してくれるといいな。</p>

<h2 id="%E8%87%AA%E5%88%86%E3%81%AE%E6%9C%AC%E6%97%A5%E3%81%AE%E3%82%84%E3%82%8B%E3%81%93%E3%81%A8">自分の本日のやること</h2>

<ul>
<li>前回の続きの動画からフレームを切り出し動画のメタ情報とフレーム位置に応じた時刻を設定するツールを実装</li>
</ul>

<p>前回までの状況</p>

<ul>
<li>ファイルドロップでファイル名などを取れるようになった</li>
<li>画面の再構成中（これは勉強会後に自宅で実装、そして途中も途中で中断してた...）</li>
</ul>

<h2 id="%E6%9C%AC%E6%97%A5%E3%81%AE%E7%9F%A5%E8%A6%8B">本日の知見</h2>

<h3 id="component-wthi-path-xxxx-could-not-be-created">Component wthi path XXXX could not be created</h3>

<p><img src="/images/20190518_qtcreator_error1.png" alt="Component wthi path XXXX could not be created" /></p>

<p>QMLのデザイナのナビゲータエリアで ⚠️ マークと共に <code>Component with path /path/to/qml could not be created</code> (訳: <code>パス /path/to/qml のコンポーネントを作成できませんでした</code>) と出た。</p>

<p>このエラー出るパターンとして、実際にファイルがない場合と該当ファイルでなんらかのエラーが起きて読み込みに失敗した場合にも同様のメッセージが表示されるようだ。</p>

<h3 id="qml%E3%81%A7%E3%81%AErow%2Fcolumn">QMLでのRow/Column</h3>

<p>QMLの <a href="https://doc.qt.io/qt-5/qtquick-positioning-layouts.html">Item Positioners</a> や <a href="https://doc.qt.io/qt-5/qtquicklayouts-index.html">Qt Quick Layouts</a> を利用するとき、ちょっと直感的じゃない。</p>

<p>名前はともかくとして、デザイナのエレメントエリアに存在するアイコンが正直、致命的に頭悪いと思う。</p>

<table>
<thead>
<tr>
  <th>QMLタイプ</th>
  <th>デザイナ内のアイコン</th>
  <th>実際の動き</th>
</tr>
</thead>
<tbody>
<tr>
  <td><a href="https://doc.qt.io/qt-5/qml-qtquick-column.html">Column QML Type</a></td>
  <td>縦棒３つ（＝横に並ぶ）</td>
  <td>縦に並ぶ</td>
</tr>
<tr>
  <td><a href="https://doc.qt.io/qt-5/qml-qtquick-row.html">Row QML Type</a></td>
  <td>横棒３つ（＝縦に並ぶ）</td>
  <td>横に並ぶ</td>
</tr>
<tr>
  <td><a href="https://doc.qt.io/qt-5/qml-qtquick-layouts-columnlayout.html">ColumnLayout QML Type</a></td>
  <td>縦棒３つ（＝横に並ぶ）</td>
  <td>縦に並ぶ</td>
</tr>
<tr>
  <td><a href="https://doc.qt.io/qt-5/qml-qtquick-layouts-rowlayout.html">RowLayout QML Type</a></td>
  <td>横棒３つ（＝縦に並ぶ）</td>
  <td>横に並ぶ</td>
</tr>
</tbody>
</table>

<h3 id="binding-loop-detected-for-property-xxxx">Binding loop detected for property XXXX</h3>

<p>ログに <code>QML {component}: Binding loop detected for property "{property}"</code> と出てるけどよくわからん。</p>

<p>っとおもったら以前もハマった問題にまたハマってただけだった。</p>

<p>つまり、</p>

<pre><code>Item {
    id: root
    property var fuga: null

    Hoge {
        id: hoge
        fuga: fuga // QML Hoge: Binding loop detected for property "fuga"
    }
}
</code></pre>

<p>というコードで発生してた。</p>

<p>スコープの関係で <code>root.fuga</code> ではなく <code>hoge.fuga</code> を参照してるのでエラーとして出てたようだ。</p>

<p>まあ、確かに言われてみればそうだよねとしか...</p>

<pre><code class="diff">  Item {
      id: root
-     property var fuga: null
+     property var fuga_: null

      Hoge {
          id: hoge
-         fuga: fuga // QML Hoge: Binding loop detected for property "fuga"
+         fuga: fuga_
      }
  }
</code></pre>

<p>結局こんな感じに修正</p>

<h3 id="qml%E3%81%8B%E3%82%89qt%E6%A8%99%E6%BA%96%E3%81%AE%E3%82%A2%E3%82%A4%E3%82%B3%E3%83%B3%E3%82%92%E4%BD%BF%E3%81%86">QMLからQt標準のアイコンを使う</h3>

<p>どうも現状はない（少なくとも去年の段階では無い）らしいので <code>QQuickImageProvider</code> を使って自分でアイコン用のプロバイダを作る必要があるとのこと。</p>

<p>参考 <a href="https://senooken.jp/blog/2018/02/04/">QMLからQt付属の標準アイコンを使う方法</a></p>

<h3 id="qml%E3%81%AE%E3%83%97%E3%83%AD%E3%83%91%E3%83%86%E3%82%A3">QMLのプロパティ</h3>

<table>
<thead>
<tr>
  <th>書き方</th>
  <th>概要</th>
</tr>
</thead>
<tbody>
<tr>
  <td><code>property var XXX</code></td>
  <td>プロパティ<code>XXX</code>を作成</td>
</tr>
<tr>
  <td><code>property bool XXX: false</code></td>
  <td>boolean型のプロパティ<code>XXX</code>を作成し<code>false</code>で初期化</td>
</tr>
<tr>
  <td><code>property real XXX: 5</code></td>
  <td>実数型のプロパティ<code>XXX</code>を作成し<code>5</code>で初期化</td>
</tr>
<tr>
  <td><code>property alias XXX: YYY</code></td>
  <td>id:<code>YYY</code>をプロパティ<code>XXX</code>として公開？</td>
</tr>
</tbody>
</table>

<p><code>alias</code> なんてキーワード初めて知った。
<a href="https://doc.qt.io/qt-5/qtqml-syntax-objectattributes.html">QML Object Attributes</a> がドキュメントらしい。</p>

<h2 id="%E6%9C%AC%E6%97%A5%E3%81%AE%E9%80%B2%E6%8D%97">本日の進捗</h2>

<p>とりあえず必死になって前回の状態を記憶から掘り起こし実装を再開。</p>

<p>どうやら画面の再構成が中途になってたのでその続き。</p>

<p>画面を整理しながらちょっとづつ実装...</p>

<pre><code>QML構造
  main.qml ... メイン
    AppWindow.ui.qml
      PageVideoDrop.qml ... 動画読み込みページ
        ComponentDropArea.ui.qml
      PageVideoLoading.qml ... 動画読み込み中ページ
        ComponentLoading.ui.qml
      PageSelectFrame.qml ... 動画のフレーム選択ページ
        ComponentThumbnailList.ui.qml
        ComponentThumbnailSeekBar.ui.qml
      PageExtractFrame.qml ...
        ComponentExtract.ui.qml
</code></pre>

<p>とりあえずこんな感じで実装してみる。</p>

<p>アイコンはいつもの <a href="https://material.io/tools/icons/?style=baseline">Icons - Material Design</a> から。</p>

<p>なぜか画面が真っ白... からは少し進んだけど構造を変えた影響でファイルをドロップしても先に進まない...</p>

<p><img src="/images/20190518_frame_extract.png" alt="成果" /></p>

<h2 id="%E5%8F%82%E8%80%83">参考</h2>

<ul>
<li><a href="/blog/2019/04/27/qt-nagoya-27.html">名古屋Qt勉強会#27 に参加しました</a></li>
<li><a href="https://blog.qt.io/jp/2010/10/27/qml-states-2/">Qt Quick 入門 第5回: 状態遷移 - Qt Japanese Blog</a></li>
<li><a href="https://doc.qt.io/qt-5/qtquick-positioning-layouts.html">Item Positioners | Qt Quick 5</a></li>
<li><a href="https://doc.qt.io/qt-5/qtquicklayouts-index.html">Qt Quick Layouts | Qt Quick 5</a></li>
<li><a href="https://senooken.jp/blog/2018/02/04/">QMLからQt付属の標準アイコンを使う方法</a></li>
<li><a href="http://nukesaq88.hatenablog.com/entry/2013/04/12/005525">Qt デフォルトで使用可能な組み込みアイコン QStyle::StandardPixmaps - unstable diary</a></li>
<li><a href="https://material.io/tools/icons/?style=baseline">Icons - Material Design</a></li>
<li><a href="https://doc.qt.io/qt-5/qtdoc-demos-coffee-choosingcoffee-ui-qml.html">ChoosingCoffee.ui.qml Example File | Qt 5</a></li>
<li><a href="https://doc.qt.io/qt-5/qtqml-syntax-objectattributes.html">QML Object Attributes | Qt QML 5.12.3</a></li>
<li><a href="https://stackoverflow.com/questions/28250710/qt-5-4-qml-prevent-binding-loop">c++ - Qt 5.4/Qml: Prevent binding loop - Stack Overflow</a></li>
</ul>
]]></content>
        </entry>
            <entry>
            <title type="html"><![CDATA[名古屋Qt勉強会#27 に参加しました]]></title>
            <link href="https://www.sharkpp.net/blog/2019/04/27/qt-nagoya-27.html"/>
            <updated>2019-04-27T17:30:00+00:00</updated>
            <id>https://www.sharkpp.net/blog/2019/04/27/qt-nagoya-27.html</id>
            <content type="html"><![CDATA[<p>4月27日(土) に開催された <a href="https://qt-users.connpass.com/event/128431/">Qt 勉強会 @ Nagoya #27 - connpass</a> に久しぶりに参加しました。</p>

<p>そのまとめです。</p>

<p>つぶやきは <a href="https://togetter.com/li/1342294">Qt 勉強会 @ Tokyo # 70 + @ Nagoya # 27 まとめ #qtjp</a> にまとまってます。</p>

<p><img src="/images/20190427_frame_extract.png" alt="成果" /></p>

<h2 id="%E8%87%AA%E5%B7%B1%E7%B4%B9%E4%BB%8B">自己紹介</h2>

<p>毎回の通り、自己紹介と本日やることを宣言。</p>

<h2 id="%E8%87%AA%E5%88%86%E3%81%AE%E6%9C%AC%E6%97%A5%E3%81%AE%E3%82%84%E3%82%8B%E3%81%93%E3%81%A8">自分の本日のやること</h2>

<ul>
<li>動画からフレームを切り出し動画のメタ情報とフレーム位置に応じた時刻を設定するツールを実装</li>
</ul>

<p>機能</p>

<ul>
<li>動画から複数のフレームを選んで画像として抜き出すことができる</li>
<li>抜き出した画像には動画のメタ情報を設定できる</li>
<li>メタ情報としてフレームの位置に応じた時間情報を設定する</li>
</ul>

<p>課題</p>

<ul>
<li>フレームをプレビューする際の大量の画像をどうするか？</li>
<li>フレームの抜き出しや、メタ情報の取得、設定などをどう実現するか？</li>
<li>基本的には <code>ffmpeg</code> や <code>exiftool</code> などを使えばいいが、コマンドを叩く方向性で行くと別のプラットフォームで困るので最終的にはライブラリを使いたい</li>
</ul>

<h2 id="%E6%9C%AC%E6%97%A5%E3%81%AE%E7%9F%A5%E8%A6%8B">本日の知見</h2>

<h3 id="droparea%E3%81%AB%E3%81%A4%E3%81%84%E3%81%A6"><a href="https://doc.qt.io/qt-5/qml-qtquick-droparea.html">DropArea</a>について</h3>

<p><code>DropArea.keys</code> と <code>DragEvent.hasXXX</code> との関係</p>

<table>
<thead>
<tr>
  <th><code>DragEvent</code></th>
  <th><code>DropArea.keys</code></th>
</tr>
</thead>
<tbody>
<tr>
  <td><code>.hasColor == true</code></td>
  <td></td>
</tr>
<tr>
  <td><code>.hasHtml == true</code></td>
  <td><code>text/html</code> たぶん</td>
</tr>
<tr>
  <td><code>.hasText == true</code></td>
  <td><code>text/plain</code></td>
</tr>
<tr>
  <td><code>.hasUrls == true</code></td>
  <td><code>text/uri-list</code></td>
</tr>
</tbody>
</table>

<p><code>DropArea.keys</code> は <code>DragEvent.keys</code> の値をフィルタするもの。
ファイルの内容をもとにMIMEタイプが設定され（そもそもされない）、それをフィルタするわけではない。</p>

<h3 id="qt-creator-%E3%81%A7%E3%83%87%E3%83%90%E3%83%83%E3%82%B0%E5%AF%BE%E8%B1%A1%E3%81%AE%E3%82%A2%E3%83%97%E3%83%AA%E3%82%92%E4%B8%80%E3%81%A4%E3%81%AE%E3%81%BF%E8%B5%B7%E5%8B%95%E3%81%95%E3%81%9B%E3%82%8B%E6%96%B9%E6%B3%95">Qt Creator でデバッグ対象のアプリを一つのみ起動させる方法</h3>

<p>Qt Creatorの「設定」→「ビルドと実行」→「ビルド前にアプリケーションを停止する」で設定できる！</p>

<p><a href="/images/20190427_qtcreator_single_app_debug_config.png"><img src="/thumbs/34d43cc47a3729ad2c1d954456d24233-640x640.png" alt="ビルド前にアプリケーションを停止するの設定"></a></p>

<h3 id=".qml-%E3%81%A8-.ui.qml">.qml と .ui.qml</h3>

<p><code>.qml</code> はJavaScriptのコードを書いたりコンポーネントをレイアウトしたりなんでもできる。</p>

<p><code>.ui.qml</code> は <code>.qml</code> でできることの一部、コードを書いたり、が制限されているが、代わりにデザインツールを使い、GUIでレイアウトを変更できる。</p>

<p>デザインツールではJavaScriptでイベント処理をかけない代わりに、<a href="https://doc.qt.io/qt-5/qml-qtquick-state.html">状態遷移</a>ごとのレイアウトを設定できる。</p>

<p><a href="/images/20190427_qtcreator_design_states.png"><img src="/thumbs/902276ffa87b2353c16384c6a3baa2b4-640x640.png" alt="状態遷移"></a></p>

<h3 id="%E3%83%95%E3%82%A1%E3%82%A4%E3%83%AB%E6%9B%B8%E3%81%8D%E5%87%BA%E3%81%97%E3%81%AA%E3%81%97%E3%81%A7%E3%81%AE%E3%82%B5%E3%83%A0%E3%83%8D%E3%82%A4%E3%83%AB%E3%81%AE%E7%94%9F%E6%88%90">ファイル書き出しなしでのサムネイルの生成</h3>

<p>どうも ffmpeg で標準出力に画像を書き出せ、かつ QML でもオンメモリにダイレクトでファイルを書き出せるらしい？</p>

<h2 id="%E6%9C%AC%E6%97%A5%E3%81%AE%E9%80%B2%E6%8D%97">本日の進捗</h2>

<p>思うようにファイルのドロップがうまくいかずなかなか進まなかったが、結局のところわかれば簡単なことで、要するにドキュメントはちゃんと読もうねって話だった。</p>

<p>デザインツールで画面を作ってくと割とサクサク画面ができるのでもっと活用していきたい。</p>

<p>あと、 <code>.qml</code> と <code>.ui.qml</code> の使い分けとかもパターン化を自分の中で作っていければ、サクサク進められそうな感じがした。</p>

<p>あと、個人的には Visual Studio みたいにデバッグ対象のアプリケーションが１つのみ立ち上がってくれる設定を見つけたのが一番嬉しかったりする。</p>

<h2 id="%E5%8F%82%E8%80%83">参考</h2>

<ul>
<li>ファイルドロップ関連

<ul>
<li><a href="https://doc.qt.io/qt-5/qml-qtquick-droparea.html">DropArea QML Type</a></li>
<li><a href="https://doc.qt.io/qt-5/qml-qtquick-dragevent.html">DragEvent QML Type</a></li>
<li><a href="https://doc.qt.io/qt-5/qtquick-draganddrop-example.html">Qt Quick Examples - Drag and Drop</a></li>
</ul></li>
<li>その他

<ul>
<li><a href="https://doc.qt.io/qt-5/qml-qtquick-state.html">State QML Type</a></li>
</ul></li>
<li>設定関連

<ul>
<li><a href="https://forum.qt.io/post/309613">Running two applications in the same Qt Creator instance</a></li>
</ul></li>
<li>onメモリでの画像の作成など

<ul>
<li><a href="https://stackoverflow.com/questions/23667088/qtquick-dynamic-images-and-c">qml - QtQuick Dynamic Images and C++ - Stack Overflow</a></li>
<li><a href="https://doc.qt.io/qt-5/qquickimageprovider.html">QQuickImageProvider Class</a></li>
<li><a href="https://qiita.com/kokeiro001/items/0e321c30cccc45ae44a4#%E9%80%A3%E7%B6%9A%E3%81%97%E3%81%9F%E7%94%BB%E5%83%8F%E3%82%92%E3%83%91%E3%82%A4%E3%83%97%E3%81%A7%E5%8F%96%E3%82%8A%E5%87%BA%E3%81%99ver">ffmpegを用いて動画から画像を取り出す【C#】 - Qiita</a></li>
</ul></li>
</ul>
]]></content>
        </entry>
            <entry>
            <title type="html"><![CDATA[名古屋Qt勉強会#24 に参加しました]]></title>
            <link href="https://www.sharkpp.net/blog/2019/01/19/qt-nagoya-24.html"/>
            <updated>2019-01-19T17:30:00+00:00</updated>
            <id>https://www.sharkpp.net/blog/2019/01/19/qt-nagoya-24.html</id>
            <content type="html"><![CDATA[<p>1月19日(土) に開催された <a href="https://qt-users.connpass.com/event/113801/">Qt 勉強会 @ Nagoya #24 - connpass</a> に久しぶりに参加しました。</p>

<p>そのまとめです。</p>

<p><img src="/images/20190119_qauthwith1.png" alt="成果" /></p>

<h2 id="%E6%9C%AC%E6%97%A5%E3%81%AE%E7%9F%A5%E8%A6%8B">本日の知見</h2>

<h3 id="listview-%E3%81%AE%E8%83%8C%E6%99%AF%E3%81%AE%E3%83%9E%E3%82%A6%E3%82%B9%E3%82%A4%E3%83%99%E3%83%B3%E3%83%88%E3%82%92%E9%80%8F%E9%81%8E">ListView の背景のマウスイベントを透過</h3>

<p>ListView の背景のマウスイベントを透過する方法。
結構、実現するのに時間がかかったけど、結局はプロパティを一つ変えるだけだった。</p>

<p>まず Qt Quick の <a href="http://doc.qt.io/qt-5/qml-qtquick-listview.html">ListView</a> は次のような派生で実装されています。</p>

<pre><code>QtObject
  +- Item
       +- Flickable
            +- ListView
</code></pre>

<p>それでもって ListView の背景を透明にしても、その下にあるコンポーネントに対しては、マウスのホバー以外のクリックやホイール操作は渡されない。</p>

<p>結局のところ色々調べたところ、 <a href="http://doc.qt.io/qt-5/qml-qtquick-flickable.html">Flickable</a> がフリック操作を検知するためにマウスのイベントを処理している様子。</p>

<p>なので、答えは</p>

<pre><code>    ListView {
        interactive: false
    }
</code></pre>

<p>と、 <code>interactive</code> プロパティを <code>false</code> にすれば良いようです。</p>

<p>ちなみに、この設定を変更すると当然のことながらフリック動作が聞かなくなります。</p>

<h3 id="%E3%83%A9%E3%83%A0%E3%83%80%E5%BC%8F">ラムダ式</h3>

<p>スコープに注意！</p>

<p>コンストラクタでラムダ式を引数に渡してメソッドを呼び出したら（実際の実行は遅延される）スコープ抜けた途端に破棄されていた。</p>

<p>メンバ変数に代入して生存の時間を伸ばして解決。</p>

<h2 id="%E6%87%87%E8%A6%AA%E4%BC%9A">懇親会</h2>

<p>もぐもぐ</p>

<p><img src="/images/20190119_mogmog.jpg" alt="もぐもぐ" /></p>

<h2 id="%E5%8F%82%E8%80%83">参考</h2>

<ul>
<li><a href="http://doc.qt.io/qt-5/qml-qtquick-flickable.html#interactive-prop">Flickable QML Type | Qt Quick 5.12</a></li>
</ul>
]]></content>
        </entry>
            <entry>
            <title type="html"><![CDATA[名古屋Qt勉強会#19 に参加しました]]></title>
            <link href="https://www.sharkpp.net/blog/2018/08/26/qt-nagoya-19.html"/>
            <updated>2018-08-26T09:57:00+00:00</updated>
            <id>https://www.sharkpp.net/blog/2018/08/26/qt-nagoya-19.html</id>
            <content type="html"><![CDATA[<p>8月25日(土) に開催された <a href="https://qt-users.connpass.com/event/98190/">Qt 勉強会 @ Nagoya #19 - connpass</a> に参加しました。</p>

<p>そのまとめなどです。</p>

<p><img src="/images/20180825_qauthwith1.png" alt="成果" /></p>

<h2 id="%E5%8B%95%E7%9A%84%E3%81%AB%E8%BF%BD%E5%8A%A0%E3%81%97%E3%81%9F%E3%82%B3%E3%83%B3%E3%83%9D%E3%83%BC%E3%83%8D%E3%83%B3%E3%83%88%E3%81%ABc%2B%2B%E5%81%B4%E3%81%8B%E3%82%89%E5%80%A4%E3%82%92%E8%A8%AD%E5%AE%9A%E3%81%99%E3%82%8B">動的に追加したコンポーネントにC++側から値を設定する</h2>

<p>たぶんこのままではちゃんと動かないけど、雰囲気それらしいメモ。</p>

<pre><code class="javascript">// .qml
    Component {
        id: hogeHoge
        Label {
            property variant hoge: null
            anchors.right: parent.right
            anchors.left: parent.left
            text: ""
            Component.onCompleted: {
                hoge.bind(this);
            }
        }
    }
            :
    hogeHoge.createObject(container, {
        hoge: hoge
    })

</code></pre>

<pre><code class="cpp">// .h
class Hoge : public QObject {
                  :
    Q_INVOKABLE void bind(QObject* object);
                  :
}
</code></pre>

<pre><code class="cpp">// .cpp
               :
    QQmlApplicationEngine engine;
    Hoge hoge;
    engine.rootContext()-&gt;setContextProperty("hoge", &amp;hoge);
               :
void Hoge::bind(QObject* object)
{
    qDebug() &lt;&lt; object; // QQuickLabel_QML_99(0xffffffffff00)

    // read from
    qDebug()  &lt;&lt; "Property value:" &lt;&lt; object-&gt;property("text").toString();
//or qDebug() &lt;&lt; "Property value:" &lt;&lt; QQmlProperty::read(object, "text").toString();

    // write to
    object-&gt;setProperty("text", "aaaa");
//or QQmlProperty::write(object, "text", aaaa);
}
</code></pre>

<h2 id="%08qt-documentation-%E3%81%AB%E4%B8%80%E7%9E%AC%E8%A1%A8%E7%A4%BA%E3%81%95%E3%82%8C%E3%82%8B%E3%82%A2%E3%82%A4%E3%82%B3%E3%83%B3%E3%81%A8%E3%83%A1%E3%83%83%E3%82%BB%E3%83%BC%E3%82%B8">Qt Documentation に一瞬表示されるアイコンとメッセージ</h2>

<p>Qt の公式ドキュメントを表示すると上部に一瞬だけ表示されるやつ。</p>

<blockquote>
  <p>We bake cookies in your browser for a better experience.  Using this site means that you consent.
  訳：より良いエクスペリエンスのために、ブラウザでクッキーを焼きます。 このサイトを使用することはそれに同意することを意味します。</p>
</blockquote>

<p><img src="/images/20180825_qtdocwebsite.png" alt="クッキーマン？" /></p>

<p>のメッセージとともに <a href="https://www.qt.io/company/?hsLang=en">The Qt Company</a> へのリンクがあるみたい。</p>

<h2 id="%E9%80%B2%E6%8D%97">進捗</h2>

<p>今回は愚直に実装を進めた関係で新たな知見は少ない感じ。</p>

<ul>
<li>signal用のヘルプ表示関連の実装

<ul>
<li>表示用の専用QMLを実装</li>
<li>QMLの切り替え用のコードを実装</li>
<li>C++側にも実装を追加</li>
</ul></li>
<li>signal受信時にどのように通知するか？

<ul>
<li><del>パターン１：スクロール＆フラッシュ</del>

<ol>
<li><del>該当signalにスクロール</del></li>
<li><del>該当signalがフラッシング</del></li>
</ol></li>
<li>パターン２：通知＆クリックでスクロール <strong>採用！</strong>

<ol>
<li>ウインドウ内に通知</li>
<li>通知をクリックすると該当のsignalにスクロール</li>
</ol></li>
</ul></li>
</ul>

<p><img src="/images/20180825_qauthwith2.png" alt="成果" /></p>

<h2 id="%E6%87%87%E8%A6%AA%E4%BC%9A">懇親会</h2>

<p>タコさんウインナーとか、もぐもぐ♪</p>

<p><img src="/images/20180825_mogmog.jpg" alt="もぐもぐ" /></p>

<h2 id="%E5%8F%82%E8%80%83">参考</h2>

<ul>
<li><a href="http://doc.qt.io/qt-5/qtqml-cppintegration-interactqmlfromcpp.html">Interacting with QML Objects from C++ | Qt QML 5.11</a></li>
<li><a href="http://doc.qt.io/qt-5/qtqml-cppintegration-overview.html#choosing-the-correct-integration-method-between-c-and-qml">Overview - QML and C++ Integration | Qt QML 5.11</a></li>
<li><a href="https://gist.github.com/alex-spataru/cba4936a1d555372e898">Notification badge in QML</a></li>
<li><a href="https://doc.qt.io/QtApplicationManager/qml-qtapplicationmanager-notificationmanager.html">NotificationManager QML Type | Qt Application Manager 5.11</a></li>
<li><a href="http://doc.qt.io/qt-5/qml-qtqml-timer.html">Timer QML Type | Qt QML 5.11</a></li>
<li><a href="http://doc.qt.io/qt-5/qml-qtquick-listview.html">ListView QML Type | Qt Quick 5.11</a></li>
</ul>
]]></content>
        </entry>
            <entry>
            <title type="html"><![CDATA[名古屋Qt勉強会#18 に参加しました]]></title>
            <link href="https://www.sharkpp.net/blog/2018/07/21/qt-nagoya-18.html"/>
            <updated>2018-07-21T17:35:00+00:00</updated>
            <id>https://www.sharkpp.net/blog/2018/07/21/qt-nagoya-18.html</id>
            <content type="html"><![CDATA[<p>7月21日(土) に開催された <a href="https://qt-users.connpass.com/event/94197/">Qt 勉強会 @ Nagoya #18 - connpass</a> に参加しました。</p>

<p>そのまとめなどです。</p>

<p><img src="/images/20180721_qauthwith1.png" alt="成果" /></p>

<h2 id="qt-quick-%E3%81%A7%E3%81%AE%E6%96%87%E5%AD%97%E5%88%97%E3%81%AE%E5%A4%9A%E8%A8%80%E8%AA%9E%E5%AF%BE%E5%BF%9C">Qt Quick での文字列の多言語対応</h2>

<p><code>qsTr()</code> で囲う。</p>

<h2 id="toolbutton">ToolButton</h2>

<p>ToolButton タイプで利用できる各種プロパティが QtQuick.Controls 1.x と QtQuick.Controls 2.x とで全然違うのでメモ</p>

<table>
<thead>
<tr>
  <th>version</th>
  <th>QtQuick.Controls 1.x</th>
  <th>QtQuick.Controls 2.x</th>
</tr>
</thead>
<tbody>
<tr>
  <td>派生</td>
  <td><a href="http://doc.qt.io/qt-5/qml-qtquick-controls-button.html">Button</a></td>
  <td><a href="http://doc.qt.io/qt-5/qml-qtquick-controls2-abstractbutton.html">AbstractButton</a></td>
</tr>
<tr>
  <td>アイコン</td>
  <td><code>iconName</code> プロパティ</td>
  <td><code>icon.name</code> プロパティ</td>
</tr>
<tr>
  <td>ツールチップ</td>
  <td><code>tooltip</code> プロパティ</td>
  <td><a href="https://doc.qt.io/Qt-5/qml-qtquick-controls2-tooltip.html#attached-tool-tips">ToolTip QML Type</a></td>
</tr>
<tr>
  <td>&nbsp;&nbsp;要素押下時に表示</td>
  <td>不明</td>
  <td><code>ToolTip.visible: down</code></td>
</tr>
<tr>
  <td>&nbsp;&nbsp;要素クリック時に表示</td>
  <td>不明</td>
  <td><code>ToolTip.visible: pressed</code></td>
</tr>
<tr>
  <td>&nbsp;&nbsp;要素ホバー時に表示</td>
  <td>不明</td>
  <td><code>ToolTip.visible: hovered</code></td>
</tr>
</tbody>
</table>

<h2 id="qml-%E3%81%A7%E5%8F%82%E7%85%A7%E3%81%AE%E3%81%BF%E5%8F%AF%E8%83%BD%E3%81%AA%E3%83%97%E3%83%AD%E3%83%91%E3%83%86%E3%82%A3%E3%82%92%E3%81%A7%E3%81%8D%E3%82%8B%E3%81%A0%E3%81%91%E7%B0%A1%E7%B4%A0%E3%81%AB%E5%AE%9A%E7%BE%A9">QML で参照のみ可能なプロパティをできるだけ簡素に定義</h2>

<pre><code class="cpp">  Q_PROPERTY(QString hoge MEMBER m_hoge CONSTANT)
</code></pre>

<p>new するときとか、C++側からのみアクセスできる setter で値は代入する。</p>

<h2 id="qml-%E3%81%A7%E5%AE%9F%E8%A1%8C%E5%8F%AF%E8%83%BD%E3%81%AA%E9%96%A2%E6%95%B0%E3%82%92%E5%AE%9A%E7%BE%A9">QML で実行可能な関数を定義</h2>

<pre><code class="cpp">  Q_INVOKABLE inline int hoge() {
      return 10;
  }
</code></pre>

<h2 id="%E3%83%88%E3%83%A9%E3%83%96%E3%83%AB%E3%82%B7%E3%83%A5%E3%83%BC%E3%83%86%E3%82%A3%E3%83%B3%E3%82%B0">トラブルシューティング</h2>

<h3 id="invalid-import-qualifier-id">Invalid import qualifier ID</h3>

<blockquote>
  <p>Invalid import qualifier ID
  (訳: インポート修飾識別子が無効)</p>
</blockquote>

<p>エリアスの頭は大文字でないとダメらしい。</p>

<pre><code class="diff">- import "xxx" as my
+ import "xxx" as My
</code></pre>

<h3 id="depends-on-non-notifyable-properties%3A-xxxxx%3Ayyyyy">depends on non-NOTIFYable properties: XXXXX:YYYYY</h3>

<blockquote>
  <p>depends on non-NOTIFYable properties: XXXXX:YYYYY
  (訳: 通知できないプロパティに依存)</p>
</blockquote>

<p>読み取り専用の場合は <code>CONSTANT</code> をつければ良い。</p>

<pre><code class="diff">           :
-     Q_PROPERTY(QString title MEMBER m_title)
+     Q_PROPERTY(QString title MEMBER m_title CONSTANT)
           :
</code></pre>

<h3 id="type-xxxx-unavailable">Type XXXX unavailable</h3>

<blockquote>
  <p>Type XXXX unavailable
  (訳: タイプ XXXX は利用できません)</p>
</blockquote>

<p>XXXX をちゃんと定義しているはずなのに出る場合は、 XXXX の中でエラーになってるかも？
その場合は、該当ファイルを対象としたエラーが出ている。</p>

<h3 id="qt-creator-%E4%B8%8A%E3%81%A7%E3%81%AE%E3%82%A8%E3%83%A9%E3%83%BC%E6%B3%A8%E9%87%88%E8%A1%A8%E7%A4%BA">Qt Creator 上でのエラー注釈表示</h3>

<p>QtQuick.Controls 2 を利用しているのに QtQuick.Controls 1 のエラーが表示される</p>

<p><img src="/images/20180721_qtcreator_annotation.png" alt="Qt Creator エラー注釈表示" /></p>

<p>どうやら Qt 5.11 を利用すれば大丈夫な様子。</p>

<h2 id="qt-quick-%E3%81%A8-c%2B%2B-%E3%81%A8%E3%81%AE%E3%82%84%E3%82%8A%E3%81%A8%E3%82%8A">Qt Quick と C++ とのやりとり</h2>

<h3 id="%E3%82%AB%E3%82%B9%E3%82%BF%E3%83%A0%E3%82%BF%E3%82%A4%E3%83%97%E3%81%AE%E7%99%BB%E9%8C%B2">カスタムタイプの登録</h3>

<p>※ <code>HogeType</code> クラスは <code>QObjct</code> から派生</p>

<pre><code>              :
    qmlRegisterType&lt;HogeType&gt;("net.example.foo", 1, 0, "HogeType");
    QQmlApplicationEngine engine;
              :
</code></pre>

<p>qml では次のように利用</p>

<pre><code>import net.example.foo 1.0
            :
ApplicationWindow {
            :
    HogeType {
        id: hoge
    }
            :
}
</code></pre>

<h3 id="%E3%82%B3%E3%83%B3%E3%83%86%E3%82%AD%E3%82%B9%E3%83%88%E3%81%AB%E7%99%BB%E9%8C%B2">コンテキストに登録</h3>

<p>※ <code>AppData</code> クラスは <code>QObjct</code> から派生</p>

<pre><code>            :
    AppData data;
    QQmlApplicationEngine engine;
    engine.rootContext()-&gt;setContextProperty("appData", &amp;data);
            :
</code></pre>

<p>qml では次のように利用</p>

<pre><code>            :
Window {
            :
    Text {
        text: appData.getTextFromCpp()
            :
    }
}
</code></pre>

<h2 id="%E6%87%87%E8%A6%AA%E4%BC%9A">懇親会</h2>

<p>もぐもぐ♪</p>

<p><img src="/images/20180721_mogmog.jpg" alt="もぐもぐ" /></p>

<h2 id="%E5%8F%82%E8%80%83">参考</h2>

<ul>
<li><a href="http://doc.qt.io/qt-5/qml-qtquick-controls-button.html">Button QML Type | Qt Quick Controls 5.11</a></li>
<li><a href="https://doc.qt.io/Qt-5/qml-qtquick-controls2-abstractbutton.html">AbstractButton QML Type | Qt Quick Controls 2 5.11</a></li>
<li><a href="http://forum.jollausers.com/sailfish-developers/import-js-file-invalid-import-qualifier-id/">[Solved] import js file - Invalid import qualifier ID - Sailfish Developers - Jolla &amp; Sailfish OS Forum</a></li>
<li><a href="http://doc.qt.io/qt-5/qtqml-cppintegration-topic.html">Integrating QML and C++ | Qt QML 5.11</a></li>
<li><a href="https://qiita.com/DAR/items/400a1725ddedcaa6ef0e">QMLとC++のバインディング - Qiita</a></li>
<li><a href="http://tips.hecomi.com/entry/20130503/1367594609">Qt Quick での C++ × QML バインディングについてまとめてみた - 凹みTips</a></li>
<li><a href="https://stackoverflow.com/questions/6728615/warning-about-non-notifyable-properties-in-qml">qt - Warning about non-NOTIFYable properties in QML - Stack Overflow</a></li>
</ul>
]]></content>
        </entry>
            <entry>
            <title type="html"><![CDATA[名古屋Qt勉強会#16 に参加しました]]></title>
            <link href="https://www.sharkpp.net/blog/2018/05/26/qt-nagoya-16.html"/>
            <updated>2018-05-26T23:26:00+00:00</updated>
            <id>https://www.sharkpp.net/blog/2018/05/26/qt-nagoya-16.html</id>
            <content type="html"><![CDATA[<p>5月26日(土) に開催された <a href="https://qt-users.connpass.com/event/88524/">Qt 勉強会 @ Nagoya #16 - connpass</a> に参加しました。</p>

<p>そのまとめ。</p>

<p><img src="/images/20180526_qauthwith2.png" alt="開発中" /></p>

<h2 id="%E4%BC%9A%E5%A0%B4%E5%88%B0%E7%9D%80%E3%81%BE%E3%81%A7">会場到着まで</h2>

<p>前回は、ちょっと迷ってしまったけど、さすがに２回目ともなれば迷うこともなく到着。
電車の時間を少しミスったために、今回もギリギリ（汗</p>

<h2 id="%E8%87%AA%E5%B7%B1%E7%B4%B9%E4%BB%8B">自己紹介</h2>

<p>みんなで自己紹介</p>

<p>今回は２名のご新規さんが参加されました。</p>

<p>東京組２名は少し遅れて到着（やはり迷った様子</p>

<h2 id="%E4%BB%8A%E5%9B%9E%E3%81%AE%E3%81%8A%E8%8F%93%E5%AD%90">今回のお菓子</h2>

<p>今回は、東京からの参加者の <a href="https://twitter.com/hermit4">@hermit4</a> さんが、美味しそうなお菓子を持ち込み。
クッキーなどと合わせてなかなかの量になりました。</p>

<h2 id="%E3%82%82%E3%81%8F%E3%82%82%E3%81%8F">もくもく</h2>

<p>前回の続きをもくもく。</p>

<p>本日は、Qt Quick をサンプルを見ながらUIの作り込み。</p>

<p><img src="/images/20180526_qauthwith1.png" alt="開発中" /></p>

<p>こんな感じに Swagger UI 風の UI を Qt Quick で作ることにした。</p>

<p><img src="/images/20180526_qauthwith2.png" alt="開発中" /></p>

<p>一部、どうしてもわからないことを <a href="https://twitter.com/IoriAYANE">@IoriAYANE</a> さんに聞きつつ、なんとかここまで出来た。</p>

<p>さてはて、中身の実装をどうしようかな？というところで時間切れ。</p>

<h2 id="%E6%87%87%E8%A6%AA%E4%BC%9A">懇親会</h2>

<p>今回は、前回行った串カツ屋さんは入れず。
少し歩いた先の串焼き屋さんで懇親会。</p>

<p><img src="/images/20180526_kushiyaki.jpg" alt="テング酒場で懇親会" /></p>

<h2 id="%E6%9C%80%E5%BE%8C%E3%81%AB">最後に</h2>

<p>久しぶりに集中して趣味プロしたけど、やはりいいものだ。
年々、趣味に割ける時間が減っているけど、なんとか継続して行きたい。</p>

<h2 id="%E5%8F%82%E8%80%83">参考</h2>

<ul>
<li><a href="http://doc.qt.io/qt-5/qtquickcontrols-index.html">Qt Quick Controls 5.11</a></li>
<li><a href="https://doc.qt.io/archives/qt-5.7/qtquickcontrols2-customize.html">Customizing Qt Quick Controls 2 | Qt Quick Controls 2 5.7</a></li>
<li><a href="http://blog.qt.io/jp/2011/03/10/qml-drawing-2/">Qt Quick 入門 第8回: QML の描画処理 - Qt Japanese Blog</a></li>
</ul>
]]></content>
        </entry>
            <entry>
            <title type="html"><![CDATA[名古屋Qt勉強会#15 に参加しました]]></title>
            <link href="https://www.sharkpp.net/blog/2018/04/21/qt-nagoya-15.html"/>
            <updated>2018-04-21T05:50:00+00:00</updated>
            <id>https://www.sharkpp.net/blog/2018/04/21/qt-nagoya-15.html</id>
            <content type="html"><![CDATA[<p>つい先日 4月14日(土) に開催された <a href="https://qt-users.connpass.com/event/84048/">Qt 勉強会 @ Nagoya #15 - connpass</a> に参加しました。</p>

<p>まとめは <a href="https://togetter.com/li/1218135">Qt 勉強会 @ Nagoya # 15 まとめ - Togetter</a> です。</p>

<p>ちょっと遅くなったけど、そのまとめ。</p>

<p><img src="/images/20180414_qauthwith.png" alt="開発中" /></p>

<h2 id="%E4%BC%9A%E5%A0%B4%E5%88%B0%E7%9D%80%E3%81%BE%E3%81%A7">会場到着まで</h2>

<p>会場近くには、あの食器で有名なノリタケの森がある。
それを横目に通り過ぎながら名古屋駅からテクテク歩くこと約20分。
最初、別の場所を会場と思ってたけど間違えてたようで <a href="https://twitter.com/kazuo_asa">@kazuo_asa</a> @主催者さんに助けてもらった。</p>

<h2 id="%E8%87%AA%E5%B7%B1%E7%B4%B9%E4%BB%8B">自己紹介</h2>

<p>みんなで自己紹介</p>

<p>ほぼ何回か参加していて見知っていた人だった。
まあ、久しぶりの参加の人もいたけど。</p>

<h2 id="%E4%BB%8A%E5%9B%9E%E3%81%AE%E3%81%8A%E8%8F%93%E5%AD%90">今回のお菓子</h2>

<p>今回は駄菓子を持って来たけど、横に長く座っていた関係もあったのか、まああまり減らなかった。</p>

<p><img src="/images/20180414_dagashi.jpg" alt="串カツ田中で懇親会" /></p>

<h2 id="%E3%82%82%E3%81%8F%E3%82%82%E3%81%8F">もくもく</h2>

<p>とりあえず、久しぶりに Qt を触る。</p>

<p><a href="https://github.com/sharkpp/qtauthwith">qtauthwith</a> を触ってみるも、ビルドエラーが出るのでひたすら修正。</p>

<p>最終的にビルドは通るようになったけど... UIがそういえば実装するの超面倒だったな、と思い出して QtQuick で実装できないか模索。</p>

<h2 id="%E3%81%A8%E3%81%A4%E3%81%9C%E3%82%93%E3%81%AE%E6%9A%97%E5%8F%B7%E9%80%9A%E8%B2%A8">とつぜんの暗号通貨</h2>

<p>勉強会のイベントページに、なんか企業アカウントっぽいのが登録されているなぁと思ってたけど、開始時間過ぎても来ていなかったので、なんだったんだろうな、とは思ってた。
が、しばらくしてから、２人組の人が来たが、その片方は外国の方だったので、ちとびっくり。</p>

<p>どうやら、外国の方の方は暗号通貨 Dash と言う日本ではマイナーな仮想通貨の伝道師的な人だったようで、公式の Wallet アプリが Qt で作られている関係で参加した様子。</p>

<h3 id="%E6%9A%97%E5%8F%B7%E9%80%9A%E8%B2%A8-dash">暗号通貨 Dash</h3>

<p><a href="https://www.dash.org/jp/">DASH公式サイト | DASH暗号通貨 — Dash</a></p>

<p>どうやら Core Wallet って管理アプリが Qt 4 で作られているらしい。</p>

<p>話してくれたのは、暗号通貨 Dash のコミュニティマネージャ兼伝道師兼いろいろ。</p>

<p>Dash は bitcoin のハードフォークで Core Wallet が Qt 製なのも bitcoin から受け継いだもの。</p>

<p>bitcoin はマイニングで得た報酬はマイニングした人にのみ分配されるが、Dash はマイニングで発掘された報酬を開発者に分ける仕組みがあるとのこと。</p>

<p>分配の割合は 45:45:10 で、マイナー：マスターノード（いっぱいコインを持ってる人？）：コミュニティに分配され、コミュニティに分配された報酬は、投票により開発者やマーケティングなどに使われるらしい。</p>

<p>この辺り、面白い戦略をとってると思う。</p>

<p><a href="https://github.com/dashpay/dash">dashpay/dash: Dash - Reinventing Cryptocurrency</a> が公式リポジトリっぽい。</p>

<h4 id="%E6%A8%99%E6%BA%96-wallet-%E3%81%AB%E3%81%A4%E3%81%84%E3%81%A6">標準 wallet について</h4>

<ul>
<li>Qt 4 で実装</li>
<li>改善する箇所が多い。例えば、

<ul>
<li>エクスポートはCSV形式なので、JSONなどへの対応する、など。</li>
<li>送信先の選択画面、フィルタとかもできないし、一人一人選択しないといけない。</li>
<li>Multisig 機能があるがそのUIがないのでコマンドラインを直接指定しないといけない。</li>
</ul></li>
<li>つまるところ、Qtの開発者がもっと増えて欲しい</li>
<li>先の10%をどういう風に使うかを、フォーラムで提案＆投票し決める仕組みがある。</li>
<li>改善の提案はPRでもフォーラムでもできるけど、大きな改善はフォーラムで提案すると予算が降りるかもしれない。</li>
</ul>

<h3 id="solarcoin">SolarCoin</h3>

<p>公式はたぶんこれ <a href="https://solarcoin.org/">SolarCoin | SolarCoin</a> 。</p>

<p>どうやらこっちにも携わっているみたい。</p>

<p>dash のどこかのバージョンのフォーク。</p>

<p>コアな開発者は３人ぐらいなので、こちらも増えて欲しい、とのこと。</p>

<h2 id="%E6%87%87%E8%A6%AA%E4%BC%9A">懇親会</h2>

<p>会場近くの串カツ屋さん。なんか両隣は結構有名なお店らしい。</p>

<p><img src="/images/20180414_kushikatsu.jpg" alt="串カツ田中で懇親会" /></p>

<h2 id="%E6%9C%80%E5%BE%8C%E3%81%AB">最後に</h2>

<p>久しぶりに参加したけど、久しぶりにQt触っていろいろと忘れていたこともあった。
けど、強制的に時間を確保しもくもくするのはやはり悪くない。
あと、Dash コインの話もいろいろ面白かった。</p>
]]></content>
        </entry>
            <entry>
            <title type="html"><![CDATA[じゅげむったーの開発日記 その８]]></title>
            <link href="https://www.sharkpp.net/blog/2017/10/21/jugemutter-development-diary-8th.html"/>
            <updated>2017-10-21T17:41:00+00:00</updated>
            <id>https://www.sharkpp.net/blog/2017/10/21/jugemutter-development-diary-8th.html</id>
            <content type="html"><![CDATA[<p>今回は、明日行われる <a href="https://techbookfest.org/event/tbf03">技術書典３</a> に前日入りして、<a href="https://qt-users.connpass.com/event/68878/">Qt 勉強会 @ Tokyo #52</a> に参加してきました。</p>

<p>東京の勉強会はすごく久しぶりの参加でした。</p>

<p>以前は、誰かしらが発表をして、それを聞く感じの会でしたが、最近はもくもくがメインのようでした。</p>

<p>レポジトリは ... <a href="https://github.com/sharkpp/Jugemutter">sharkpp/Jugemutter: 長文投稿専用クライアント「じゅげむったー」</a> となります。</p>

<h2 id="twitter-api-%E3%81%AE-%22could-not-authenticate-you.%22-%E5%95%8F%E9%A1%8C">Twitter API の "Could not authenticate you." 問題</h2>

<p>Twitter API への要求で <code>Could not authenticate you.</code> とレスポンスが返ってくる問題、どうも <a href="https://bugreports.qt.io/browse/QTBUG-61125">[QTBUG-61125] QOAuth1 creates an invalid signature for percent encoded query - Qt Bug Tracker</a> のバグが原因ではなかった様子。</p>

<p>なので、ちょっと踏み込んで調べて見ることにする。</p>

<p>とりあえず、比較のために PHP で同じように Twitter API を使って見ることに。</p>

<p>ライブラリは <a href="https://github.com/risan/oauth1">risan/oauth1: 🔐 OAuth 1.0 client library for PHP</a> をとりあえず試して見る。</p>

<p>何はともあれ composer をインストール</p>

<pre><code class="console">$ php -r "copy('https://getcomposer.org/installer', 'composer-setup.php');"
$ php -r "if (hash_file('SHA384', 'composer-setup.php') === '544e09ee996cdf60ece3804abc52599c22b1f40f4323403c44d44fdfdd586475ca9813a858088ffbc1f233e9b180f061') { echo 'Installer verified'; } else { echo 'Installer corrupt'; unlink('composer-setup.php'); } echo PHP_EOL;"
$ php composer-setup.php
$ php -r "unlink('composer-setup.php');"
</code></pre>

<p>ライブラリをインストール</p>

<pre><code class="console">$ php composer.phar require risan/oauth1
</code></pre>

<p>で、いろいろ試している..</p>

<p>ソースは <a href="https://github.com/risan/oauth1#basic-usage">risan/oauth1: Basic Usage</a> を基に <code>$ sudo php -S localhost:80 -t .</code> で動かします。</p>

<pre><code class="php">&lt;?php

// Start session.
session_start();

// Include Composer autoload file.
require 'vendor/autoload.php';

// Create a new instance of OAuth1 client for Twitter.
$oauth1 = new OAuth1\OAuth1([
    'consumer_key'      =&gt; 'YOUR_TWITTER_CONSUMER_KEY',
    'consumer_secret'   =&gt; 'YOUR_TWITTER_CONSUMER_SECRET',
    'request_token_url' =&gt; 'https://api.twitter.com/oauth/request_token',
    'authorize_url'     =&gt; 'https://api.twitter.com/oauth/authorize',
    'access_token_url'  =&gt; 'https://api.twitter.com/oauth/access_token',
    'callback_url'      =&gt; 'http://localhost:80', // Optional
    'resource_base_url' =&gt; 'https://api.twitter.com/1.1/'
]);

// STEP 4: ACCESS PROTECTED RESOURCE.
if (isset($_SESSION['access_token'])) {
    // Retrieve the saved AccessToken instance (see STEP 3).
    $accessToken = unserialize($_SESSION['access_token']);

    // Set access token.
    $oauth1-&gt;setGrantedAccessToken($accessToken);

    // Get authenticated user's timeline.
    // @return Psr\Http\Message\ResponseInterface instance
    //$response = $oauth1-&gt;get('statuses/user_timeline.json');
    $response = $oauth1-&gt;post('statuses/update.json', [
        'query' =&gt; [
        //'form_params' =&gt; [ // risan/oauth1 が対応していない様子
            'status' =&gt; 'test',
        ]
    ]);

    echo $response-&gt;getBody()-&gt;getContents();
}

// STEP 3: GET ACCESS TOKEN.
elseif (isset($_GET['oauth_token']) &amp;&amp; isset($_GET['oauth_verifier'])) {
    // Retrieve the previously generated request token (see STEP 1).
    $requestToken = unserialize($_SESSION['request_token']);

    // Get access token.
    // @return OAuth1\Tokens\AccessToken instance
    $accessToken = $oauth1-&gt;accessToken($requestToken, $_GET['oauth_token'], $_GET['oauth_verifier']);

    // Serialize AccessToken instance and save it to session.
    $_SESSION['access_token'] = serialize($accessToken);

    // No longer need request token.
    unset($_SESSION['request_token']);

    // Reload page.
    header("Location: {$_SERVER['PHP_SELF']}");
    exit();
}

// STEP 1: Get request token.
// STEP 2: Redirect to authorization page.
else {
    // Get request token.
    // @return OAuth1\Tokens\RequestToken instance
    $requestToken = $oauth1-&gt;requestToken();

    // Serialize RequestToken instance and save to session.
    $_SESSION['request_token'] = serialize($requestToken);

    // Redirect to authorization url.
    $authorizationUrl = $oauth1-&gt;buildAuthorizationUrl($requestToken);
    header("Location: {$authorizationUrl}");
    exit();
}
</code></pre>

<p>あれ？</p>

<p><del><code>{"code":32,"message":"Could not authenticate you."}</code> になるっぽい、なぜだろう？</del> <code>risan/oauth1</code> の実装が POST の フォームに対応していなかっただけのようだ。</p>

<p>↑から、URLのクエリ形式で送れば大丈夫っぽい。</p>

<blockquote class="twitter-tweet" data-lang="ja"><p lang="ja" dir="ltr">むぅPOSTのフォームではなくURLのクエリで送れば(や%も大丈夫っぽいなぁ (おわり <a href="https://twitter.com/hashtag/qtjp?src=hash&amp;ref_src=twsrc%5Etfw">#qtjp</a> <a href="https://twitter.com/hashtag/jugemutter?src=hash&amp;ref_src=twsrc%5Etfw">#jugemutter</a></p>&mdash; これでチーム「さめたすたす」は最強だ！ (@sharkpp) <a href="https://twitter.com/sharkpp/status/921656868535021570?ref_src=twsrc%5Etfw">2017年10月21日</a></blockquote>

<script async src="//platform.twitter.com/widgets.js" charset="utf-8"></script>

<p>何か勘違いしているのか？</p>

<p>というところでタイムアップ。</p>

<h2 id="twitter-api-reference-%E3%81%AE-url-%E3%81%8C%E5%A4%89%E3%82%8F%E3%81%A3%E3%81%9F%EF%BC%9F">Twitter API reference の URL が変わった？</h2>

<p>なんか、Twitter API のリファレンスページのアドレスが変わっている様子。</p>

<pre><code>https://dev.twitter.com/rest/reference/post/statuses/update
</code></pre>

<p>↓</p>

<pre><code>https://developer.twitter.com/en/docs/tweets/post-and-engage/api-reference/post-statuses-update
</code></pre>

<p>リダイレクトで飛ばして欲しかったなぁ。</p>

<h2 id="%E5%8B%89%E5%BC%B7%E4%BC%9A">勉強会</h2>

<h3 id="qt-contributors-summit-2017-%E3%81%A8-qt-world-summit-2017-%E3%81%AE%E5%A0%B1%E5%91%8A">Qt contributors summit 2017 と Qt World Summit 2017 の報告</h3>

<p>2017年10月9日〜10月10日に開催された <a href="https://www1.qt.io/event/qt-contributors-summit-2017/">Qt Contributors' Summit 2017</a> および、2017年10月10日〜10月12日に開催された <a href="https://www1.qt.io/event/qt-world-summit-2017/">Qt World Summit</a> の<a href="https://twitter.com/takumiasaki">朝木卓見(@takumiasaki)</a> さんによる報告。</p>

<p>関連するリンク</p>

<ul>
<li><a href="https://wiki.qt.io/Qt_contributors_summit_2017">Qt contributors summit 2017 - Qt Wiki</a></li>
<li><a href="https://wiki.qt.io/Qt_contributors_summit_2017_Program">Qt contributors summit 2017 Program - Qt Wiki</a> - セッションプログラム一覧</li>
<li><a href="https://wiki.qt.io/QtCS2017_QtCore">QtCS2017 QtCore - Qt Wiki</a> - 該当のセッションで出た話</li>
<li><a href="http://blog.qt.io/blog/2017/10/11/qt-3d-studio-source-code-pre-release-snapshots-available/">Qt 3D Studio Source Code and Pre-Release Snapshots Available - Qt Blog</a></li>
<li><a href="https://github.com/KDAB">KDAB</a></li>
</ul>

<h3 id="qt-3d-studio-%E3%81%AE%E7%B4%B9%E4%BB%8B">Qt 3D Studio の紹介</h3>

<p><a href="https://twitter.com/shin1_okada">岡田 真一(@shin1_okada)</a> さんによる、Qt 3D Studio の紹介。</p>

<p>現状、macOS向けは、ビルドできるけど大きなデモを動かす、Qt Creator から動作させる、などでクラッシュする、とのこと。</p>

<p>関連するリンク</p>

<ul>
<li><a href="http://blog.qt.io/blog/2017/10/11/qt-3d-studio-source-code-pre-release-snapshots-available/">Qt 3D Studio Source Code and Pre-Release Snapshots Available - Qt Blog</a></li>
<li><a href="https://codereview.qt-project.org/#/admin/projects/qt3dstudio/qt3dstudio">codereview.qt-project Code Review</a> - デフォルトだと submodule が取得されないので注意</li>
</ul>

<h2 id="%E5%8F%82%E8%80%83">参考</h2>

<ul>
<li><a href="https://qiita.com/hnw/items/d72815e2d45f898d9184">SipHashについてのメモ - Qiita</a></li>
<li><a href="http://docs.guzzlephp.org/en/5.3/clients.html">Clients — Guzzle Documentation</a></li>
<li><a href="https://qiita.com/k-holy/items/4362b8cce85642e477ec">Windows + Goutte 3.0でHTTPSでのリクエストで発生するSSL証明書のエラー - Qiita</a></li>
<li><a href="https://qiita.com/mikakane/items/58c30b243bba697ec3fe">guzzle で Http通信する - Qiita</a></li>
<li><a href="https://developer.twitter.com/en/docs/tweets/post-and-engage/api-reference/post-statuses-update">POST statuses/update — Twitter Developers</a></li>
</ul>
]]></content>
        </entry>
    </feed>