#!/bin/bash

# check cli php
check_php () {
  PHP=php
  for I in php php55cli php55 php54cli php54 php53cli php53 php5cli php5
  do
    if [ "" != "$($I -v 2>/dev/null | grep cli)" ] ; then
      PHP=$I
      break
    fi
  done
}

# check libxml version
check_libxml () {
  $PHP sculpin.phar >/dev/null 2>&1
  if [ 0 -ne $? ] ; then
    export LD_PRELOAD=~/usr/libxml/lib/libxml2.so
  fi
}

exec_usage () {
  echo 'usage: site <command> [option]'
  echo 'commands are:'
  echo '  init                initialize site'
  echo '  clean               cleanup site, remove ignore files'
  echo '  generate [OUT_PATH] generate site'
  echo '  test                launch web server [ http://localhost:8000/ ] for test site'
  echo '  spider              check broken link'
  echo '  diary [STUB]        create new empty page'
}

exec_init () {
  check_php
  # install Sculpin
  if [ ! -e "$(dirname $0)/sculpin.phar" ] ; then
    curl --insecure -L -O https://download.sculpin.io/sculpin.phar
  fi
  check_libxml
  $PHP sculpin.phar self-update
  $PHP sculpin.phar install
  # install Composer
  if [ ! -e "$(dirname $0)/composer.phar" ] ; then
    curl --insecure -L https://getcomposer.org/installer | $PHP
  fi
  $PHP composer.phar self-update
  $PHP composer.phar install
  # install BowerPHP
  $PHP .vendor/bin/bowerphp install
  # create default webhook conf
  if [ ! -e "$(dirname $0)/webhook.conf" ] ; then
    echo "log_file=$(dirname $0)/webhook.log"> $(dirname $0)/webhook.conf
    echo "secret_key=$(cat /dev/urandom | head -n 64 | shasum -a 512 -b | sed -e "s/[\* -]//g")">> $(dirname $0)/webhook.conf
    echo "git_cmd=$(whereis git)">> $(dirname $0)/webhook.conf
    echo "repos_path=$(dirname $0)">> $(dirname $0)/webhook.conf
    echo "output_path=$(dirname $0)/public">> $(dirname $0)/webhook.conf
  fi
}

exec_clean () {
  rm -rf .vendor .sculpin *.lock *.phar
  rm -rf output_* app/cache app/logs
  find source/assets -maxdepth 1 -mindepth 1 -not -name js -and -not -name css -exec rm -rf {} \;
}

exec_generate () {
  if [ ! -e "$(dirname $0)/sculpin.phar" ] ; then
    exec_init
  else
    check_php
    check_libxml
  fi
  #
  rm -rf output_prod/* > /dev/null 2>&1
  $PHP sculpin.phar generate --env=prod > /dev/null
  if [ $? -ne 0 ]; then echo "Could not generate the site"; exit 1; fi
  OUT_PATH=$1
  if [ "" != "$OUT_PATH" ] ; then
    if [ "" != "$(basename $OUT_PATH)" ] ; then
      # swap new/old output directory
      rm -rf ${OUT_PATH}~ > /dev/null 2>&1
      mv $OUT_PATH ${OUT_PATH}~
      mv output_prod $OUT_PATH
      # Move the other files that were generated by sculpin.
      yes no | mv $OUT_PATH~/files/* $OUT_PATH/files/*
      mv -f $OUT_PATH~/{log,.fast-cgi-bin,google*.html} $OUT_PATH
      mv -f $OUT_PATH~/{hsp-users.jp,*.sharkpp.net} $OUT_PATH
    fi
  fi
}

exec_test () {
  if [ ! -e "$(dirname $0)/sculpin.phar" ] ; then
    exec_init
  else
    check_php
    check_libxml
  fi
  #
  rm -rf output_dev/*
  $PHP sculpin.phar generate --watch --server
}

exec_spider () {
  if [ ! -e "$(dirname $0)/sculpin.phar" ] ; then
    exec_init
  else
    check_php
    check_libxml
  fi
  # wget install check
  wget --help > /dev/null
  if [ $? -eq 127 ] ; then
    echo wget command not installed
    exit
  fi
  if [ ! -e "$(dirname $0)/sculpin.phar" ] ; then
    exec_init
  fi
  RUNNING=$(ps ax|grep "$PHP sculpin.phar[ ]"|wc -l|sed -e "s/ //g")
  if [ 0 -eq $RUNNING ] ; then
    rm -rf output_dev/*
    # launch server and waiting for generate
    while read f; do
      if [ "" != "$(echo "$f" | grep "server is running at")" ] ; then break ; fi
    done < <($PHP sculpin.phar generate --watch --server &)
  fi
  wget --spider --no-directories --recursive --page-requisites --level=0 --no-verbose http://localhost:8000
  if [ 0 -eq $RUNNING ] ; then
    killall $PHP
  fi
}

exec_diary () {
  NEW_PAGE=source/_posts/$(date +%Y-%m-%d)-$1.md

  echo "---"                             > $NEW_PAGE
  echo "title: \"$1\""                   >>$NEW_PAGE
  echo "date: $(date +'%Y-%m-%d %H:%M')" >>$NEW_PAGE
  echo "tags: [雑記]"                     >>$NEW_PAGE
  echo "categories: [ブログ]"             >>$NEW_PAGE
  echo ""                                >>$NEW_PAGE
  echo "---"                             >>$NEW_PAGE

  echo create new blog page is $NEW_PAGE
}

case "$1" in
  "init"     ) exec_init ;;
  "i"        ) exec_init ;;
  "clean"    ) exec_clean ;;
  "generate" ) exec_generate $2;;
  "g"        ) exec_generate $2;;
  "test"     ) exec_test ;;
  "t"        ) exec_test ;;
  "spider"   ) exec_spider ;;
  "diary"    ) exec_diary $2;;
  "d"        ) exec_diary $2;;
  *          ) exec_usage ;;
esac
