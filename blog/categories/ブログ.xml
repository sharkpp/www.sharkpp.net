<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
    <title><![CDATA[さめたすたすのお家]]></title>
    <link href="http://www.sharkpp.net/blog/categories/%E3%83%96%E3%83%AD%E3%82%B0.xml" rel="self"/>
    <link href="http://www.sharkpp.net/"/>
    <updated>2021-01-01T13:34:25+00:00</updated>
    <id>http://www.sharkpp.net/</id>
            <author>
            <name><![CDATA[sharkpp]]></name>                    </author>
        <generator uri="http://sculpin.io/">Sculpin</generator>
            <entry>
            <title type="html"><![CDATA[HAPPY NEW YEAR 2021]]></title>
            <link href="http://www.sharkpp.net/blog/2021/01/01/happy-new-year-2021.html"/>
            <updated>2021-01-01T22:30:00+00:00</updated>
            <id>http://www.sharkpp.net/blog/2021/01/01/happy-new-year-2021.html</id>
            <content type="html"><![CDATA[<p>明けましておめでとうございます。</p>

<p>今年もまだまだ新型コロナは収まりそうになさそうですが、それに負けることなく過ごせればと思います。</p>

<p>では、今年の目標をば。</p>

<h2 id="%E7%9B%AE%E6%A8%99">目標</h2>

<h3 id="%E3%83%9B%E3%83%BC%E3%83%A0%E3%83%9A%E3%83%BC%E3%82%B8%E3%81%AE%E6%9B%B4%E6%96%B0">ホームページの更新</h3>

<p>最低でも月一ぐらいでは更新したいと思います。
つまるところ、それには何かしらネタを仕込む必要があるかなと。</p>

<p>とりあえず、ReactJSを使ってウェブアプリをちょこちょこ作りつつ、Qtでも何か作ってみようかなと。</p>

<p>あとは、React native とかも気になっているところ。</p>

<h3 id="%E3%83%9B%E3%83%BC%E3%83%A0%E3%83%9A%E3%83%BC%E3%82%B8%E3%81%AE%E3%83%93%E3%83%AB%E3%83%89%E3%82%B7%E3%82%B9%E3%83%86%E3%83%A0%E3%81%AE%E6%94%B9%E5%96%84">ホームページのビルドシステムの改善</h3>

<p>現状、php 製の Sculpin でホームページをビルドしてます。
が、年末に記事を書いたらビルドが失敗して慌てて応急手当てをした感じで、さすがにこれはなんとかしないとって感じをひしひしと。
で、 Sculpin もそこそこ更新はされているのでいいかもだけど、せっかくなので GatsbyJS で構築してみようかと。
まあ、思い立ったのは去年のことだけど...</p>

<p>あと、CI も GitHub Action に変えて GitHub のみで完結できそうなので変更したいところ。</p>

<p>あとは、今更 http もないだろうから https にもしてみたいな。</p>

<h3 id="%E3%81%9D%E3%81%AE%E4%BB%96">その他</h3>

<p>その他には...</p>

<ul>
<li>ガジェットの記事</li>
<li>DIYの記事</li>
</ul>

<p>とかも随時していきたいところ。</p>

<p>ああ、あとは、お金貯めて Apple MacBook Air (13", M1, 2020) とか欲しいな... そろそろノートPC買い換えたい...</p>

<h2 id="%E3%81%82%E3%81%91%E3%81%8A%E3%82%81%E3%81%93%E3%81%A8%E3%82%88%E3%82%8D">あけおめことよろ</h2>

<p>ではでは、今年もまた一年、よろしくお願いいたします。</p>

<p><img src="/imges/20210101_first_sunrise.jpg" alt="2021年の初日の出" /></p>
]]></content>
        </entry>
            <entry>
            <title type="html"><![CDATA[大晦日@2020]]></title>
            <link href="http://www.sharkpp.net/blog/2020/12/31/new-years-eve-2020.html"/>
            <updated>2020-12-31T21:49:00+00:00</updated>
            <id>http://www.sharkpp.net/blog/2020/12/31/new-years-eve-2020.html</id>
            <content type="html"><![CDATA[<h2 id="1-%E5%B9%B4%E3%82%92%E6%8C%AF%E3%82%8A%E8%BF%94%E3%82%8A">1 年を振り返り</h2>

<p>今年も残すところ大晦日の今日だけとなりました。
つまりは99.7%は終わった感じですね。</p>

<p>世間的なところではコロナ禍が猛威を振るい、今だに収まらないというのは去年の今頃は全く予想できなかったです。
それによって働き方も様変わりし、旅行やイベントも自粛ムードになるなど影響がいたるところに出ている感じですね。</p>

<p>個人的なところでは、お仕事は変わらずだけど、コロナ禍の影響を受けて在宅ワークがメインになったりしました。</p>

<blockquote>
  <p>自分自身のことについてはまあ諸々の理由があって勉強会もほとんど参加できなかったのが残念ですが、来年の後半ぐらいから多少マシになる... といいなと。</p>
</blockquote>

<p>これは、まだもう少しイベントがありそうだけどなんとかしたいですね。</p>

<p>そして、今年も恒例(？)の仮想除夜の鐘アプリ「<a href="https://sharkpp.github.io/joya_no_kane/">除夜の鐘</a>」のリンクを貼っておきます。</p>

<p>さて、前置きいつも通り書いたところで、今年の反省をば。</p>

<h2 id="%E7%B5%90%E6%9E%9C">結果</h2>

<p>まずは、今年の正月 <a href="/blog/2020/01/01/happy-new-year-2020.html">HAPPY NEW YEAR 2020</a> に掲げた目標です。</p>

<ul>
<li>定期的なホムペの更新</li>
<li>ホームページを GitHub Action ＆ GatsbyJS ベースに移行してモダーンな感じに</li>
<li>PWAとかQtとかもろもろ勉強... というか遊ぶ</li>
<li>Rust頑張ってみる... Rust難しい...</li>
<li><a href="https://github.com/sharkpp/FrameExtract">FrameExtract</a> を完成させる</li>
</ul>

<p>と、こんな感じ。</p>

<p>成果としては...</p>

<p>ちょこちょこやっているけど、如何せん時間があまり取れずなかなか進まない感じ。</p>

<p>8月から11月までブログに書けるような内容も何もできていないので、ぐぬぬ。</p>

<p>今年も<a href="https://togetter.com/li/1450054">よんた@keita44_f4 さんの日本酒の感想ツイートまとめ</a>を~~更新してました~~大晦日に慌てて更新しました(汗
お酒たくさん飲めて羨ましい...</p>

<h2 id="%E5%8F%8D%E7%9C%81">反省</h2>

<p>作りたいものはあるけど、なかなか時間がない、というか体力がない感じをなんとかしたい感じ。</p>

<p>と言うあたりで今年の反省会終了です。</p>

<p><img src="/images/20201231_herring_soba.jpg" alt="にしん蕎麦" /></p>

<p>それでは来年もよろしくお願いします。</p>
]]></content>
        </entry>
            <entry>
            <title type="html"><![CDATA[GoPro HERO 6 で撮影した結果 4GB で分割されてしまった映像を繋げ Full HD H264 へエンコードする方法]]></title>
            <link href="http://www.sharkpp.net/blog/2020/12/29/concat-gopro-4gb-files-and-encode.html"/>
            <updated>2020-12-29T17:12:00+00:00</updated>
            <id>http://www.sharkpp.net/blog/2020/12/29/concat-gopro-4gb-files-and-encode.html</id>
            <content type="html"><![CDATA[<p>さてさて、超お久しぶりにブログを書いている sharkpp です。</p>

<p>半年以上更新が止まってしまいましたが、ぼちぼちと再開をさせたいなと思ってる次第...</p>

<p>とりあえず、今回は GoPro HERO 6 で撮影した結果 4GB で分割されてしまった映像を繋げ Full HD H264 へエンコードする方法を忘れないように残しておきたいと思います。</p>

<h2 id="%E8%A6%81%E7%B4%84">要約</h2>

<p>分割された 4K 動画から、結合された Full HD 動画への変換（メタ情報を含む）は</p>

<ol>
<li><code>ls GX0[0-9]*.MP4 | while read L ; do echo file $L ; done &gt; list.txt</code></li>
<li><code>ffmpeg -y -f concat -i list.txt -bsf:v h264_mp4toannexb -vcodec libx264 -vf scale=1920:-1 -r 29.97 -map 0:v -map 0:a -map 0:d -copy_unknown GX0Y0000.MP4</code></li>
<li><code>exiftool -tagsfromfile $(cat list.txt | cut -d " " -f 2 | tail -n 1) "-gps*" -unsafe GX0Y0000.MP4</code></li>
</ol>

<p>このような感じでコマンドを打てば変換できそう。</p>

<h2 id="%E3%81%AF%E3%81%98%E3%82%81%E3%81%AB">はじめに</h2>

<p>久しぶりに GoPro HERO 6 を引っ張り出してきて、よーし張り切って 4K 60fps で撮影しちゃうぞ！みたいなことをしちゃったわけです。</p>

<p>で、結果として...</p>

<pre><code class="console">$ ls -lh
total 52606864
-rwxrwxrwx@ 1 user  staff   3.7G 12 13 12:17 GX012316.MP4
-rwxrwxrwx  1 user  staff   3.7G 12 13 12:24 GX022316.MP4
-rwxrwxrwx  1 user  staff   3.7G 12 13 12:31 GX032316.MP4
-rwxrwxrwx  1 user  staff   3.7G 12 13 12:38 GX042316.MP4
-rwxrwxrwx  1 user  staff   3.7G 12 13 12:45 GX052316.MP4
-rwxrwxrwx  1 user  staff   3.7G 12 13 12:52 GX062316.MP4
-rwxrwxrwx  1 user  staff   1.0G 12 13 12:54 GX072316.MP4
</code></pre>

<p>約 4GB に分割されたファイルができるわけです。</p>

<p>そして、手元には空き容量と性能が乏しいPCがあり、とてもそのまま再生できる感じではない、さてこれをどうやって素材として使おうか、と...</p>

<h2 id="%E7%9B%AE%E6%A8%99">目標</h2>

<p>目指すべき目標をまず設定します。</p>

<table>
<thead>
<tr>
  <th>項目</th>
  <th>元素材</th>
  <th>目標</th>
</tr>
</thead>
<tbody>
<tr>
  <td>ファイル</td>
  <td>最大約 4GB に分割された複数のファイル</td>
  <td>1 ファイル</td>
</tr>
<tr>
  <td>コンテナ</td>
  <td>MP4</td>
  <td>変更なし</td>
</tr>
<tr>
  <td>映像</td>
  <td>H265 3840 x 2160 59.94 fps</td>
  <td>H264 1920 x 1080 29.97 fps</td>
</tr>
<tr>
  <td>音声</td>
  <td>AAC (LC) 48000 Hz, stereo, 128 kb/s</td>
  <td>変更なし</td>
</tr>
</tbody>
</table>

<p>あとは、埋め込まれているメタ情報もなるべくそのままにしたい。</p>

<h2 id="%E3%82%84%E3%82%8A%E6%96%B9">やり方</h2>

<p>4 GB で分割されたファイルを単純に結合すると結合部分が無音になるという情報があったので色々試してみる。</p>

<p>とりあえず、空き容量も少ないので mp4box で２ファイルを結合してみる。</p>

<pre><code class="console">$ mp4box
-bash: mp4box: command not found
</code></pre>

<p>...の前に mp4box がないので Homebrew でインストール</p>

<pre><code class="console">$ brew install mp4box
</code></pre>

<p>で、改めて...</p>

<pre><code class="console">$ mp4box -add GX010000.MP4 -cat GX020000.MP4 -new GX0X0000.MP4
$ ffmpeg -y -i GX0X0000.MP4 -ab 192 GX0X0000.mp3
</code></pre>

<p>そして ffmpeg でも</p>

<pre><code class="console">$ echo file GX010000.MP4 &gt;list.txt
$ echo file GX020000.MP4 &gt;&gt;list.txt
$ ffmpeg -f concat -i list.txt -c copy GX0Y0000.MP4
$ ffmpeg -y -i GX0Y0000.MP4 -ab 192 GX0Y0000.mp3
</code></pre>

<p>それぞれ結合した映像の音声部分を mp3 形式で抜き出し Audacity で波形を確認結果...</p>

<p>mp4box を使わず ffmpeg 単体でもとくに音声の途切れもなさそう、ということがわかった。</p>

<p>なので、</p>

<pre><code class="console">$ ls GX0[0-9]*.MP4 | while read L ; do echo file $L ; done &gt; list.txt
$ ffmpeg -y -f concat -i list.txt -bsf:v h264_mp4toannexb -vcodec libx264 -vf scale=1920:-1 -r 29.97 \
         -map 0:v -map 0:a -map 0:d -copy_unknown GX0Y0000.MP4
</code></pre>

<p>||速度｜45分の動画のエンコード時間|
|60 fps|約 0.150 倍|約5時間|
|30 fps|約 0.165 倍|約4時間30分|</p>

<p>あと、どうしてもGPSの情報がコピーできなかったので exiftool でコピーする</p>

<pre><code class="console">$ exiftool -tagsfromfile $(cat list.txt | cut -d " " -f 2 | tail -n 1) "-gps*" -unsafe GX0Y0000.MP4
</code></pre>

<p>蛇足として <a href="https://code.g-nab.net/archives/73">GoPro HERO7 で撮影した動画からGPS情報をgpxファイルとして抜き出す方法 – Bang's Tmp returned</a> にて知りましたが、 <a href="https://github.com/juanmcasillas/gopro2gpx">GitHub - juanmcasillas/gopro2gpx: Parse the gpmd stream for GOPRO moov track (MP4) and extract the GPS info into a GPX (and kml) file.</a> なるツールで GoPro で撮影した動画からGPS情報を抜き出すことができるようですね。</p>

<h1 id="%E3%81%BE%E3%81%A8%E3%82%81">まとめ</h1>

<ol>
<li><code>ls GX0[0-9]*.MP4 | while read L ; do echo file $L ; done &gt; list.txt</code></li>
<li><code>ffmpeg -y -f concat -i list.txt -bsf:v h264_mp4toannexb -vcodec libx264 -vf scale=1920:-1 -r 29.97 -map 0:v -map 0:a -map 0:d -copy_unknown GX0Y0000.MP4</code></li>
<li><code>exiftool -tagsfromfile $(cat list.txt | cut -d " " -f 2 | tail -n 1) "-gps*" -unsafe GX0Y0000.MP4</code></li>
</ol>

<p>この手順で、 分割された 4K 動画から Full HD 動画へ含まれるメタ情報も含めいい感じにエンコードすることができました。</p>

<h2 id="%E5%8F%82%E8%80%83">参考</h2>

<ul>
<li><a href="https://exiftool.org/forum/index.php?topic=1424.msg15307#msg15307">Import and export of metadata</a></li>
<li><a href="https://superuser.com/questions/996223/using-ffmpeg-to-copy-metadata-from-one-file-to-another">Using ffmpeg to copy metadata from one file to another - Super User</a></li>
<li><a href="http://tech.ckme.co.jp/ffmpeg_frate.shtml">フレームレート及び画面サイズを指定する：tech.ckme.co.jp</a></li>
<li><a href="https://askubuntu.com/questions/707397/batch-convert-h-265-mkv-to-h-264-with-ffmpeg-to-make-files-compatible-for-re-enc">command line - Batch convert H.265 mkv to H.264 with ffmpeg to make files compatible for re-encoding - Ask Ubuntu</a></li>
<li><a href="https://qiita.com/riversun/items/d09d8e596a20ec1798f3">【ffmpeg】動画の解像度を指定してリサイズ、アスペクト比を維持したまま解像度を変更する、回転する - Qiita</a></li>
<li><a href="https://www.ffmpeg.org/ffmpeg-formats.html#Metadata-1">FFmpeg Formats Documentation</a></li>
<li><a href="https://qiita.com/tzhaya/items/6b423872d2ab9f31bf30">exiftoolを使って画像のIPTC情報をcsvでまとめて設定する - Qiita</a></li>
<li><a href="https://exiftool.org/faq.html">ExifTool FAQ</a></li>
</ul>
]]></content>
        </entry>
            <entry>
            <title type="html"><![CDATA[Hubot アダプタを TypeScript を使って作ってみた]]></title>
            <link href="http://www.sharkpp.net/blog/2020/07/29/_posts/2020-xx-xx-hubot-adapter-with-typescript.md.html"/>
            <updated>2020-07-29T23:46:00+00:00</updated>
            <id>http://www.sharkpp.net/blog/2020/07/29/_posts/2020-xx-xx-hubot-adapter-with-typescript.md.html</id>
            <content type="html"><![CDATA[<h2 id="typescrpt-%E3%81%A7%E5%AE%9F%E8%A3%85%E3%81%99%E3%82%8B-hubot-%E3%82%A2%E3%83%80%E3%83%97%E3%82%BF">TypeScrpt で実装する Hubot アダプタ</h2>

<p><a href="https://hubot.github.com/docs/adapters/development/">Development adapter | HUBOT</a> を参考に、起動時に bot へと生成したメッセージを受け渡すだけを行うアダプタを TypeScript で実装してみました。</p>

<p>この記事では次のような名称を利用しているので適時読み替えてください。</p>

<table>
<thead>
<tr>
  <th>項目</th>
  <th>名称</th>
</tr>
</thead>
<tbody>
<tr>
  <td>アダプタプロジェクト名</td>
  <td><code>hubot-sample-adapter</code></td>
</tr>
<tr>
  <td>テスト用のHubotプロジェクト名</td>
  <td><code>hubot-test</code></td>
</tr>
<tr>
  <td>アダプタプロジェクトの親フォルダ</td>
  <td><code>~/</code></td>
</tr>
</tbody>
</table>

<h3 id="typescript-%E3%81%AE%E3%82%A4%E3%83%B3%E3%82%B9%E3%83%88%E3%83%BC%E3%83%AB">TypeScript のインストール</h3>

<p>まず環境を整えていきます。</p>

<pre><code class="console">$ mkdir hubot-sample-adapter
$ cd hubot-sample-adapter
$ npm init -y
</code></pre>

<p>追加で、</p>

<pre><code class="console">$ npm install --save --dev typescript hubot @types/hubot
$ npx tsc --init
</code></pre>

<p>として TypeScript のツール用の設定をします。</p>

<h3 id="visual-studio-code-%E3%81%A7%E6%A7%8B%E6%96%87%E3%83%81%E3%82%A7%E3%83%83%E3%82%AF">Visual Studio Code で構文チェック</h3>

<p>Visual Studio Code で <a href="https://marketplace.visualstudio.com/items?itemName=dbaeumer.vscode-eslint">ESLint</a> を使って構文チェックをできるようにします。</p>

<pre><code class="console">$ npm install --save --dev eslint prettier eslint-config-airbnb-base eslint-config-prettier eslint-plugin-prettier eslint-plugin-import
$ npm install --save --dev @typescript-eslint/parser @typescript-eslint/eslint-plugin
</code></pre>

<p>インストールを行うと <code>The ESLint extension will use 'node_modules/eslint' for validation, which is installed locally in 'hubot-sample-adapter'. If you trust this version of ESLint, press 'Allow', otherwise press 'Do Not Allow'. Press 'Cancel' to disable ESLint for this session.</code> と確認されるので <code>Allow</code> を選択します。</p>

<p>とりあえず、</p>

<table>
<thead>
<tr>
  <th>項目</th>
  <th>説明など</th>
</tr>
</thead>
<tbody>
<tr>
  <td>Javascript style guide</td>
  <td>airbnb-base</td>
</tr>
<tr>
  <td>構文チェック</td>
  <td>基本全てエラー</td>
</tr>
<tr>
  <td>no-unused-vars</td>
  <td><code>_</code> から始まる変数以外の未使用をエラーとする。(TypeScriptの構文を優先)</td>
</tr>
</tbody>
</table>

<p>こんな感じで、設定ファイル <code>.eslintrc.js</code> は</p>

<pre><code class="javascript">module.exports = {
    "env": {
        "browser": false,
        "es2020": true
    },
    "extends": [
        "airbnb-base",
        "plugin:prettier/recommended",
        "prettier/@typescript-eslint"
    ],
    "parser": "@typescript-eslint/parser",
    "parserOptions": {
        "ecmaVersion": 11,
        "sourceType": "module"
    },
    "plugins": [
        "@typescript-eslint",
        "prettier"
    ],
    "rules": {
        "prettier/prettier": "error",
        "no-unused-vars": "off",
        "@typescript-eslint/no-unused-vars": ["error", { argsIgnorePattern: "^_" }]
    }
};
</code></pre>

<p>こんな感じ。</p>

<h2 id="visual-studio-code-%E3%81%A7%E3%83%87%E3%83%90%E3%83%83%E3%82%B0%E3%82%92%E8%A1%8C%E3%81%86%E3%81%9F%E3%82%81%E3%81%AE%E3%81%82%E3%82%8C%E3%81%93%E3%82%8C">Visual Studio Code でデバッグを行うためのあれこれ</h2>

<p>TypeScript のソース上でブレークポイントを設定したりデバッグ実行前にソースをコンパイルするなど、デバッグのための構成を行います。</p>

<ol>
<li>デバッグ用 hubot プロジェクトの作成</li>
<li>デバッグのための構成を追加</li>
</ol>

<h3 id="%E3%83%87%E3%83%90%E3%83%83%E3%82%B0%E7%94%A8-hubot-%E3%83%97%E3%83%AD%E3%82%B8%E3%82%A7%E3%82%AF%E3%83%88%E3%81%AE%E4%BD%9C%E6%88%90">デバッグ用 hubot プロジェクトの作成</h3>

<p><code>yo hubot</code> でテスト用の hubot を作成します。
この時 <code>--defaults</code> オプションをつけることでオーナーなどの指定をよしなにしてくれます。
ここではテスト用に作るため、アダプタプロジェクトの直下に作ります。</p>

<pre><code class="console">$ mkdir hubot-test
$ cd hubot-test
$ npx yo hubot --defaults
                     _____________________________  
                    /                             \ 
   //\              |      Extracting input for    |
  ////\    _____    |   self-replication process   |
 //////\  /_____\   \                             / 
 ======= |[^_/\_]|   /----------------------------  
  |   | _|___@@__|__                                
  +===+/  ///     \_\                               
   | |_\ /// HUBOT/\\                             
   |___/\//      /  \\                            
         \      /   +---+                            
          \____/    |   |                            
           | //|    +===+                            
            \//      |xx|                            

   create bin/hubot
   create bin/hubot.cmd
　　　　　　　　：
added 92 packages from 53 contributors and audited 92 packages in 13.227s
found 0 vulnerabilities

</code></pre>

<p><code>npm link path/to/hubot-adapter</code> とコマンドを実行し、アダプタへリンクを貼り テスト用の Hubot プロジェクトからアダプタが認識できるようにします。</p>

<pre><code class="console">$ pwd

$ npm link ../../hubot-sample-adapter
npm WARN hubot-sample-adapter@1.0.0 No repository field.

audited 373 packages in 3.58s

29 packages are looking for funding
  run `npm fund` for details

found 0 vulnerabilities

/usr/local/lib/node_modules/hubot-sample-adapter -&gt; ~/hubot-sample-adapter
~/hubot-sample-adapter/hubot-test/node_modules/hubot-sample-adapter -&gt; /usr/local/lib/node_modules/hubot-sample-adapter -&gt; ~/hubot-sample-adapter
</code></pre>

<p>注意点として、パスの指定は相対パスで問題ないですが、指定したパスの最後の部分を利用し node_modules にフォルダを作成しているようなので、フォルダ名を指定する必要があります。</p>

<pre><code>○ $ npm link ../../hubot-sample-adapter
× $ npm link ../
</code></pre>

<p>作成されたプロジェクトをデバッグ用にカスタマイズします。</p>

<p><code>hubot-test/external-scripts.json</code> にデフォルトで設定されている外部スクリプトはデバッグの邪魔になるので除外しておきます。</p>

<pre><code class="diff"> [
-  "hubot-diagnostics",
-  "hubot-help",
-  "hubot-heroku-keepalive",
-  "hubot-google-images",
-  "hubot-google-translate",
-  "hubot-pugme",
-  "hubot-maps",
-  "hubot-redis-brain",
-  "hubot-rules",
-  "hubot-shipit"
 ]
</code></pre>

<p>とりあえず、この記事で実装するアダプタは起動時にメッセージを bot へ送るので、どんな内容でも受け取ってり返答する bot を <code>hubot-test/scripts/echo.coffee</code> として追加します。</p>

<p>内容は適時使いやすいように書き換え可能ですが、先頭のコメント行を削除すると <code>using deprecated documentation syntax</code> と警告がログに出ます。</p>

<pre><code class="coffee"># Description:
#   echo bot
#
# Commands:
#   &lt;text&gt; - Reply back with &lt;text&gt;

module.exports = (robot) -&gt;

  robot.hear /(.*)/i, (res) -&gt;
    res.reply "echo \"#{res.match[1]}\""
</code></pre>

<h3 id="%E3%83%87%E3%83%90%E3%83%83%E3%82%B0%E3%81%AE%E3%81%9F%E3%82%81%E3%81%AE%E6%A7%8B%E6%88%90%E3%82%92%E8%BF%BD%E5%8A%A0">デバッグのための構成を追加</h3>

<p>Visual Studio Code で TypeScript で実装された Hubot アダプタをデバッグするため、３つのファイルでデバッグ構成を設定します。</p>

<p>まず、<code>.vscode/launch.json</code> にデバッグ実行のための構成を追加します。</p>

<ol>
<li>「アクティビティーバー」の「実行」を押下し、「launch.json ファイルを作成します」を選択します。</li>
<li>ドロップダウンで指定する環境は「Node.js」を選択します。</li>
<li>すると <code>.vscode/launch.json</code> にプログラムを実行するための構成ファイルが生成されます。</li>
</ol>

<p>作成後のファイルを開き（確認のためファイルはオープンされています）次のような感じに変更します。</p>

<p><code>"outputCapture": "std"</code> (もしくは、ユーザーの入力を受け取る必要があるなら <code>"console": "integratedTerminal"</code> )を設定しない場合、実行時のログを確認することができません。</p>

<pre><code class="diff"> {
   "version": "0.2.0",
   "configurations": [
     {
-      "name": "プログラムの起動",
+      "name": "Debug Adapter",
       "type": "node",
       "request": "launch",
+      "preLaunchTask": "tsc: ビルド - tsconfig.json",
       "skipFiles": [
         "&lt;node_internals&gt;/**"
       ],
-      "program": "${workspaceFolder}/index.js"
+      "program": "${workspaceRoot}/hubot-test/node_modules/.bin/coffee",
+      "cwd": "${workspaceRoot}/hubot-test",
+      "outputCapture": "std",
+      "args": [
+        "${workspaceRoot}/hubot-test/node_modules/.bin/hubot",
+        "-a", "sample-adapter",
+      ],
+      "env": {
+        "HUBOT_LOG_LEVEL": "DEBUG"
+      }
     }
   ]
 }
</code></pre>

<p>まず、<code>.vscode/tasks.json</code> にデバッグ実行前に TypeScript でコンパイルを行うための設定をします。
デバッグ実行との関連付けはすでに <code>"preLaunchTask": "tsc: ビルド - tsconfig.json",</code> にて指定済みです。</p>

<p>メニューから「ターミナル」→「タスクの構成...」を選択し、ドロップダウンの選択ないから「tsc: ビルド - tsconfig.json」を選択します。</p>

<p>すると次のような内容が <code>.vscode/tasks.json</code> に作成されます。</p>

<pre><code class="json">{
    "version": "2.0.0",
    "tasks": [
        {
            "type": "typescript",
            "tsconfig": "tsconfig.json",
            "problemMatcher": [
                "$tsc"
            ],
            "group": "build",
            "label": "tsc: ビルド - tsconfig.json"
        }
    ]
}
</code></pre>

<p>最後に、 <code>tsconfig.json</code> に設定することで、TypeScript のソースでブレイクポイントを設定できるようにします。</p>

<p>デフォルトでは、TypeScript のソースでブレークポイントを設定してもデバッグ実行時には、コンパイル後の JavaScript のソースが実行されるため指定したブレークポイントは無効にされてしまいます。</p>

<p>設定を追加することで TypeScript のソースのコンパイル時に同時にマップファイルが書き出されるようになり、結果としてブレイクポイントを設定できるようになります。</p>

<p><code>tsconfig.json</code> を次のように変更します。</p>

<pre><code class="diff">      // "declaration": true,                   /* Generates corresponding '.d.ts' file. */
      // "declarationMap": true,                /* Generates a sourcemap for each corresponding '.d.ts' file. */
-     // "sourceMap": true,                     /* Generates corresponding '.map' file. */
+     "sourceMap": true,                        /* Generates corresponding '.map' file. */
      // "outFile": "./",                       /* Concatenate and emit output to single file. */
      // "outDir": "./",                        /* Redirect output structure to the directory. */
</code></pre>

<h2 id="%E3%82%A2%E3%83%80%E3%83%97%E3%82%BF%E3%83%97%E3%81%AE%E5%AE%9F%E8%A3%85">アダプタプの実装</h2>

<p><a href="https://hubot.github.com/docs/adapters/development/">Development adapter | HUBOT</a> の <code>src/adapter.coffee</code> を参考に TypeScript で書き換え <code>src/adapter.ts</code> を作成します。</p>

<pre><code class="typescript">import { Robot, Adapter, User, TextMessage } from "hubot";

class Sample extends Adapter {
  robot!: Robot&lt;Adapter&gt;;

  constructor(robot: Robot&lt;Adapter&gt;) {
    super(robot);
    this.robot.logger.info("Constructor");
  }

  send(envelope: any, ...strings: any[]) {
    this.robot.logger.info("Send");
  }

  reply(envelope: any, ...strings: any[]) {
    this.robot.logger.info("Reply");
  }

  run() {
    this.robot.logger.info("Run");
    this.emit("connected");
    const user = new User("1001", { name: "Sample User", });
    const message = new TextMessage(user, "Some Sample Message", "MSG-001");
    this.robot.receive(message);
  }
}

module.exports.use = function createSampleAdapter(
  robot: Robot&lt;Adapter&gt;
) {
  return new Sample(robot);
};
</code></pre>

<p>TypeScript でコンパイルすると <code>src/adapter.js</code> が作成されるので、忘れずに <code>package.json</code> に書かれているエントリポイントは <code>src/adapter.coffee</code> ではなく <code>src/adapter.js</code> にしておきましょう。</p>

<h3 id="%E3%83%87%E3%83%90%E3%83%83%E3%82%B0%E5%AE%9F%E8%A1%8C%E6%99%82%E7%89%B9%E6%9C%89%E3%81%AE%E5%95%8F%E9%A1%8C%E3%81%B8%E3%81%AE%E5%AF%BE%E5%87%A6">デバッグ実行時特有の問題への対処</h3>

<p>ここまでで、ほぼデバッグ実行ができるようになりますが、実はこのままだと Node.js のライブラリの読み込みの仕様が原因で <code>robot.receive()</code> から呼ばれるはずの bot の処理が実行されない状態になっています。</p>

<p>原因としてはどうやら</p>

<ol>
<li><code>hubot</code> コマンドがアダプタを読み込む。</li>
<li>アダプタが <code>hubot</code> ライブラリの読み込みを行う。</li>
<li>パスの解決の結果、 <code>hubot-test/node_modules/hubot</code> が読み込まれることを意図しているところ、 アダプタのコンパイルに必要なため <code>node_modules/hubot</code> が存在していることから、そちらが読み込まれる。</li>
</ol>

<p>結果 <code>hubot</code> コマンド内で行われる <code>instanceof TextMessage</code> などの比較で不一致が発生し bot が処理されないようです。</p>

<p>現状、対処としては動的にデバッグ実行かそうでないかを判断しライブラリの読み込みパスを変更するようにすることで意図しない動きを回避しています。</p>

<pre><code class="diff">-import { Robot, Adapter, User, TextMessage } from "hubot";
+import * as Hubot from "hubot";
+import { Robot, Adapter } from "hubot";
+import * as path from "path";
+
+const isTestHubot =
+  path.join(__dirname, "..") ===
+  // @ts-ignore TS2532: Object is possibly 'undefined'.
+  path.join(require.main.filename.replace(/node_modules\/.*$/, ""), ".."); // (...)/hubot-line-local-tunnel/hubot-test/node_modules/hubot/bin/hubot
+// テスト環境での実行時はテスト用の環境に含まれる Hubot パッケージを読むように指示
+const { User, TextMessage } = !isTestHubot
+  ? Hubot
+  : require(require("path").join(__dirname, "../hubot-test/node_modules/hubot")); // eslint-disable-line import/no-dynamic-require

 class Sample extends Adapter {
   robot!: Robot&lt;Adapter&gt;;
</code></pre>

<h2 id="%E5%AE%9F%E8%A1%8C%E3%81%97%E3%81%A6%E3%81%BF%E3%82%8B">実行してみる</h2>

<p><code>hubot</code> プリフェックスを除いた名前で <code>--adapter</code> オプションを指定し実行します</p>

<pre><code class="console">$ npx hubot -a sample-adapter
[Wed Jul 29 2020 23:44:09 GMT+0900] INFO Constructor
[Wed Jul 29 2020 23:44:09 GMT+0900] INFO Run
[Wed Jul 29 2020 23:44:09 GMT+0900] WARNING Loading scripts from hubot-scripts.json is deprecated and will be removed in 3.0 (https://github.com/github/hubot-scripts/issues/1113) in favor of packages for each script.

Your hubot-scripts.json is empty, so you just need to remove it.
[Wed Jul 29 2020 23:44:09 GMT+0900] INFO Reply
</code></pre>

<p>ログを見ると、ちゃんと <code>Constructor</code> と <code>Run</code> と <code>Reply</code> が印字されています。</p>

<h2 id="%E3%83%A1%E3%83%A2">メモ</h2>

<h3 id="configuration-for-rule-%22import%2Fno-cycle%22-is-invalid">Configuration for rule "import/no-cycle" is invalid</h3>

<pre><code class="console">               :
Configuration for rule "import/no-cycle" is invalid
               :
</code></pre>

<p>と表示され eslint が正常に実行されない場合があった。</p>

<p><a href="https://github.com/airbnb/javascript/issues/2227">Invalid rule configurations compiled by "eslint --print-config" on eslint-config-airbnb-typescript · Issue #2227 · airbnb/javascript</a> によると、どうやら 7.3.0 から 7.2.0 へダウングレードすることで回避できる様子。</p>

<pre><code class="console">$ npm i eslint@7.2.0 --save-dev
</code></pre>

<h2 id="%E5%8F%82%E8%80%83">参考</h2>

<ul>
<li><a href="https://hubot.github.com/docs/adapters/development/">Development adapter | HUBOT</a></li>
<li><a href="https://github.com/airbnb/javascript/issues/2227">Invalid rule configurations compiled by "eslint --print-config" on eslint-config-airbnb-typescript · Issue #2227 · airbnb/javascript</a></li>
<li><a href="https://hiranoon.hatenablog.com/entry/2020/04/13/192746#%E3%81%AF%E3%81%98%E3%82%81%E3%81%AB">TypeScript の開発環境を作る。VSCode を基本に ESLint と Prettier も添えて。 - Multi Vitamin &amp; Mineral</a></li>
<li><a href="http://akiomik.hatenablog.jp/entry/2014/02/12/052703">hubot adapterの作り方 - おみブロZ</a></li>
<li><a href="https://qiita.com/bouzuya/items/11c0c6da2b3ad54b827f#hubot-echo">Hubot のインストール - Qiita</a></li>
<li><a href="https://komari.co.jp/blog/develop/frontend/355/#i-3">Visual Studio Code のデバッグコンソールにログが出力されない話 | 岡山のWEB制作はKOMARI</a></li>
<li><a href="https://qiita.com/n0bisuke/items/12ce4df55a405a62b599">Hubotでusing deprecated documentation syntax - Qiita</a></li>
<li><a href="https://qiita.com/mysticatea/items/f523dab04a25f617c87d">ESLint 最初の一歩 - Qiita</a></li>
<li><a href="https://shotat.hateblo.jp/entry/2016/10/26/000912">Eslintでunderscoreから始まる変数をチェックさせない設定にする - Memento memo.</a></li>
<li><a href="https://stackoverflow.com/questions/57802057/eslint-configuring-no-unused-vars-for-typescript">esLint-Typescriptの「no-unused-vars」の構成-スタックオーバーフロー</a></li>
</ul>
]]></content>
        </entry>
            <entry>
            <title type="html"><![CDATA[ローカルでの HTTPS テスト環境の構築]]></title>
            <link href="http://www.sharkpp.net/blog/2020/05/02/build-local-https-test-environment.html"/>
            <updated>2020-05-02T16:15:00+00:00</updated>
            <id>http://www.sharkpp.net/blog/2020/05/02/build-local-https-test-environment.html</id>
            <content type="html"><![CDATA[<p>ローカルでのウェブアプリの開発では、もはや https が必須ということで動作確認に難儀していましたが、
しばらく前にローカルで認証局を簡単に設置できる <a href="https://github.com/FiloSottile/mkcert">mkcert</a> なるツールがあると知ったので、使い方を調べてみました。</p>

<p>PC上での使い方は結構サクッと出てきたので、実際のユースケースも念頭に Android でもオレオレ証明書が正規の証明書として利用できるような設定方法も調べてみました。</p>

<p><a href="/images/20200501_local_https_secure3.png"><img src="/thumbs/a68a390814458bbfe228d6e6d2fd6032-480x480.png" alt="20200501_local_https_secure3"></a></p>

<h2 id="mkcert-%E3%81%AE-windows-%E3%81%B8%E3%81%AE%E3%82%A4%E3%83%B3%E3%82%B9%E3%83%88%E3%83%BC%E3%83%AB">mkcert の Windows へのインストール</h2>

<p>mkcert の <a href="https://github.com/FiloSottile/mkcert#windows">Windows</a> セクションを参考にしてください。</p>

<h2 id="mkcert-%E3%81%AE-macos-%E3%81%B8%E3%81%AE%E3%82%A4%E3%83%B3%E3%82%B9%E3%83%88%E3%83%BC%E3%83%AB">mkcert の macOS へのインストール</h2>

<p>homebrew を使ったインストールが簡単です。</p>

<p><code>brew install mkcert</code> とターミナルで入力し実行するだけ。</p>

<pre><code class="console">$ brew install mkcert
Updating Homebrew...
==&gt; Auto-updated Homebrew!
           :
==&gt; Downloading https://homebrew.bintray.com/bottles/mkcert-1.4.1.mojave.bottle.tar.gz
==&gt; Downloading from https://akamai.bintray.com/91/9100c7f044d91e6ca0c483ed572217de28daa34c04fa6e2a130116175ba162e9?__gda__=exp=1588341913~hmac=516f50b8cbb6930276b
######################################################################## 100.0%
==&gt; Pouring mkcert-1.4.1.mojave.bottle.tar.gz
🍺  /usr/local/Cellar/mkcert/1.4.1: 6 files, 5.3MB
</code></pre>

<p>Firefox で利用する場合は</p>

<pre><code class="console">$ brew install nss
</code></pre>

<p>も必要なようです。</p>

<p>システムへのローカルの認証局のインストールは <code>mkcert -install</code> を実行するようです。</p>

<pre><code class="console">$ mkcert -install
Created a new local CA at "/Users/▒▒▒▒/Library/Application Support/mkcert" 💥
Sudo password: ******
The local CA is now installed in the system trust store! ⚡️
The local CA is now installed in the Firefox trust store (requires browser restart)! 🦊
</code></pre>

<h2 id="%E8%A8%BC%E6%98%8E%E6%9B%B8%E3%81%AE%E4%BD%9C%E6%88%90">証明書の作成</h2>

<p>証明書の作成は <code>mkcert {hostname_or_ip} ...</code> のような感じで、コマンドの後に証明書に含めたいホスト名もしくはIPを指定します。</p>

<pre><code class="console">$ mkcert 0.0.0.0 localhost 127.0.0.1 ::1
Using the local CA at "/Users/▒▒▒▒/Library/Application Support/mkcert" ✨

Created a new certificate valid for the following names 📜
 - "0.0.0.0"
 - "localhost"
 - "127.0.0.1"
 - "::1"

The certificate is at "./0.0.0.0+3.pem" and the key at "./0.0.0.0+3-key.pem" ✅
</code></pre>

<p>実行時のカレントディレクトリに <code>*.pem</code> = 公開鍵、と <code>*-key.pem</code> = 秘密鍵、が作成されるので、https として動作させる場合の公開鍵と秘密鍵として指定します。</p>

<h2 id="macos-%E3%81%A7%E5%88%A9%E7%94%A8%E3%81%99%E3%82%8B%E5%A0%B4%E5%90%88%E3%81%AE%E8%A8%AD%E5%AE%9A">macOS で利用する場合の設定</h2>

<p>mkcert をインストールしたPCでは、すでに、システムにローカル認証局の証明書がインストールされているので特に何かする必要はないです。</p>

<p>もし、他のPCで利用する場合は、下記に記載の方法で証明書のエクスポートをし、それをシステムにインストールしてください。</p>

<h2 id="android-%E3%81%A7%E5%88%A9%E7%94%A8%E3%81%99%E3%82%8B%E5%A0%B4%E5%90%88%E3%81%AE%E8%A8%AD%E5%AE%9A">Android で利用する場合の設定</h2>

<h3 id="%E8%A8%BC%E6%98%8E%E8%A8%BC%E3%81%AE%E3%82%A8%E3%82%AF%E3%82%B9%E3%83%9D%E3%83%BC%E3%83%88">証明証のエクスポート</h3>

<p>macOS の場合</p>

<p><a href="/images/20200501_ser_export_from_macos_key_chain.png"><img src="/thumbs/c75ff4d1123943a143ac45139cb90bad-320x320.png" alt="20200501_ser_export_from_macos_key_chain"></a></p>

<ol>
<li>「キーチェーン」を開く</li>
<li>左部「ログイン」を選択し <code>mkcert ▒▒▒▒▒▒▒▒▒▒▒▒</code> を探す、</li>
<li>右クリックメニューから「"mkcert ▒▒▒▒▒▒▒▒▒▒▒▒"を書き出す」を選んでファイルに保存</li>
<li>最後に、保存したファイルをなんとかして Android にコピーします。</li>
</ol>

<h3 id="%E8%A8%BC%E6%98%8E%E6%9B%B8%E3%81%AE%E3%82%A4%E3%83%B3%E3%82%B9%E3%83%88%E3%83%BC%E3%83%AB">証明書のインストール</h3>

<ol>
<li>「設定」アプリを開く</li>
<li>「セキュリティ」→「詳細設定」→「暗号化と認証情報」「ストレージからのインストール」<br/>
<a href="/images/20200501_android_ser_install1.png"><img src="/thumbs/6bb42b1c732f71567a936064644ba6d5-320x320.png" alt="20200501_android_ser_install1"></a> &nbsp; 
<a href="/images/20200501_android_ser_install2.png"><img src="/thumbs/88f2d30588e12d32fbf226959ed16813-320x320.png" alt="20200501_android_ser_install2"></a> &nbsp; 
<a href="/images/20200501_android_ser_install3.png"><img src="/thumbs/8bd3d02757906957b760e847338cd7cd-320x320.png" alt="20200501_android_ser_install3"></a></li>
<li>エクスポートした証明書を選択 <br/>
<a href="/images/20200501_android_ser_install4.png"><img src="/thumbs/62c7cfc3933d430dcb897d6bba06275c-320x320.png" alt="20200501_android_ser_install4"></a></li>
<li>「証明書の名前を指定する」欄は、適用に、「認証情報の使用」欄は「VPNとアプリ」を選択 <br/>
<a href="/images/20200501_android_ser_install5.png"><img src="/thumbs/1a96248fbb5fda8bcaad9f0dcbb0542f-320x320.png" alt="20200501_android_ser_install5"></a></li>
<li>「信頼できる認証局」→「ユーザー」タブを選択し、インストールした証明書が含まれていたらOK <br/>
<a href="/images/20200501_android_ser_install6.png"><img src="/thumbs/051861e5fc41fdc0088dc679493cb00a-320x320.png" alt="20200501_android_ser_install6"></a> &nbsp; 
<a href="/images/20200501_android_ser_install7.png"><img src="/thumbs/278ed200c9067da074fd3fa8cf75359c-320x320.png" alt="20200501_android_ser_install7"></a></li>
</ol>

<h2 id="%E8%A8%BC%E6%98%8E%E6%9B%B8%E3%81%AE%E5%88%A9%E7%94%A8">証明書の利用</h2>

<p>適当なウェブサーバーを使って確認します。</p>

<p>Node.js がインストール済みの場合は <a href="https://www.npmjs.com/package/http-server">http-server - npm</a> が簡単そうなので、</p>

<pre><code class="console">$ npm install -g http-server
</code></pre>

<p>としてインストールして試してみます。</p>

<p>HTML は適当に</p>

<pre><code class="html">&lt;html&gt;
  &lt;head&gt;
  &lt;/head&gt;
  &lt;body&gt;
    Is this page visible on https?
  &lt;/body&gt;
&lt;/html&gt;
</code></pre>

<p>みたいな感じに作ります。</p>

<p>カレントディレクトリに、前述の <code>0.0.0.0+3.pem</code> と <code>0.0.0.0+3-key.pem</code> を保存し</p>

<pre><code class="console">$ http-server . -S -C 0.0.0.0+3.pem -K .0.0.0.0+3-key.pem
</code></pre>

<p>とするとローカル認証局の証明書がインストールされていれば、有効な証明書として利用されます。</p>

<p>Chrome for Android で確認するとこんな感じ</p>

<p><a href="/images/20200501_local_https_secure1.png"><img src="/thumbs/dfdd71113e5de0382c1bc5946b5221e4-320x320.png" alt="20200501_local_https_secure1"></a> <a href="/images/20200501_local_https_secure2.png"><img src="/thumbs/066f32b6a759ac9254140508896c90e4-320x320.png" alt="20200501_local_https_secure2"></a></p>

<p>Chrome for macOS で確認するとこんな感じ</p>

<p><a href="/images/20200501_local_https_secure4.png"><img src="/thumbs/c8695d9aee7619d0fe3d7e780ac6cce1-320x320.png" alt="20200501_local_https_secure4"></a></p>

<h2 id="%E5%8F%82%E8%80%83">参考</h2>

<ul>
<li><a href="https://qiita.com/walkers/items/b90a97a99bbb27f6550f">ローカル環境でSSLをオレオレ証明書で行っていて警告が出てる人に朗報 - Qiita</a></li>
<li><a href="https://www.media.hiroshima-u.ac.jp/services/hinet/android-ca2">AndroidのCA証明書のインストールについて — Information Media Center</a></li>
<li><a href="https://support.google.com/pixelphone/answer/2844832?hl=ja">証明書を追加、削除する - Pixel Phone ヘルプ</a></li>
</ul>
]]></content>
        </entry>
            <entry>
            <title type="html"><![CDATA[あれから16年経ったようです]]></title>
            <link href="http://www.sharkpp.net/blog/2020/02/29/happy-anniversary-16th.html"/>
            <updated>2020-02-29T23:30:00+00:00</updated>
            <id>http://www.sharkpp.net/blog/2020/02/29/happy-anniversary-16th.html</id>
            <content type="html"><![CDATA[<p>世間では新型コロナウイルスによって展示会やらイベントが次々に中止や延期に追い込まれています。
個人的な部分でもついにリモートワークが推奨になってきた感じで影響が出始めましたね。</p>

<p>さて、本日はいつの間にかホームページ開設が16年を過ぎ17年目になったことに気がついて、去年何かやっておけばよかったとすこし後悔していたところで今からでも遅くないというそらみみが聞こえてきたので、このページの過去をざっくりと振り返ってみたいと思います。</p>

<h2 id="%E3%83%9B%E3%83%BC%E3%83%A0%E3%83%9A%E3%83%BC%E3%82%B8%E9%96%8B%E8%A8%AD">ホームページ開設</h2>

<p>2004-02-24 ホームページを開設</p>

<p>たしか、契約しているプロバイダのおまけでついてくるジオシティーズのアカウントで公開していたと思う。</p>

<p>phpを動かすために、別のサービス(これもすでに閉鎖)も借りていた記憶もありますね。</p>

<p>ジオシティーズも去年完全閉鎖され時代の流れを感じますのぅ。
<a href="https://info-geocities.yahoo.co.jp/close/"><img src="/images/20200229_geocities_closed.png" alt="サービス終了のお知らせ - Yahoo!ジオシティーズ" /></a></p>

<h2 id="%E3%83%89%E3%83%A1%E3%82%A4%E3%83%B3%E5%8F%96%E5%BE%97">ドメイン取得</h2>

<p>2005-08-13 独自ドメインへ移転</p>

<p>数日前の 2005-08-05 に <code>sharkpp.net</code> を取得し、独自ドメインでの運営に変更。
この当時契約していたドメインレジストラも独自運営からGMOに買収されたりと、これまた結構変遷があります。</p>

<p><a href="http://web.archive.org/">Wayback Machine</a>に残っている最古は 2005-10-20 15:34:50 でこんなデザインでした。</p>

<p><a href="http://web.archive.org/web/20051020153450/http://www.sharkpp.net:80/"><img src="/images/20200229_webarc20051020153450.png" alt="2005-10-20 15:34:50 当時のページ" /></a></p>

<h2 id="%E6%A7%8B%E7%AF%89%E3%82%B7%E3%82%B9%E3%83%86%E3%83%A0%E3%82%92%E6%89%8B%E6%89%93%E3%81%A1%E3%81%8B%E3%82%89-frog-cms-%E3%81%AB%E5%A4%89%E6%9B%B4">構築システムを手打ちから Frog CMS に変更</h2>

<p>2008-08-XX 構築システムを手打ちから Frog CMS に変更</p>

<p>ホームページを手打ちから <a href="https://github.com/philippe/FrogCMS">Frog CMS</a> というCMSに変更。
この時同時に、デザインの変更や、掲示板の廃止などもしています。
Frog CMS も更新が続くと思ってたらしばらくしたら更新されなくなりましたなぁ...</p>

<p><a href="http://web.archive.org/web/20081007190559/http://www.sharkpp.net:80/"><img src="/images/20200229_webarc20081007190559.png" alt="2008-10-07 19:05:59 当時のページ" /></a></p>

<h2 id="%E6%A7%8B%E7%AF%89%E3%82%B7%E3%82%B9%E3%83%86%E3%83%A0%E3%82%92-frog-cms-%E3%81%8B%E3%82%89-sculpin-%2B-github-pages-%E3%81%AB%E5%A4%89%E6%9B%B4">構築システムを Frog CMS から Sculpin + GitHub pages に変更</h2>

<p>2015-05-31 構築システムを Frog CMS から Sculpin + GitHub pages に変更</p>

<p>レンタルサーバーの仕様変更で、しばらく Frog CMS がエラーを吐いていたことやもはや保守されてないものを使うのもってことで、重い腰を上げ <a href="https://sculpin.io/">Sculpin</a> という、php で動作する静的サイトジェネレータを利用し GitHub に push したら GitHub pages で運用しているサイトが更新される仕組みを構築しました。
その時の記録は「<a href="/blog/2015/06/28/site-reboot-by-sculpin.html">Sculpin でホムペを再構築したときのメモ</a>」として記事にしています。
この時同時に、デザインやホームページのタイトルの変更もしています。</p>

<h2 id="%E6%A7%8B%E7%AF%89%E3%82%B7%E3%82%B9%E3%83%86%E3%83%A0%E3%81%AE%E9%81%8B%E7%94%A8%E3%82%92-xrea-%E3%81%8B%E3%82%89-travis-ci-%E3%81%AB%E5%A4%89%E6%9B%B4">構築システムの運用を xrea から Travis CI に変更</h2>

<p>2016-06-12 構築システムの運用を xrea から Travis CI に変更</p>

<p>レンタルサーバーの XREA でサイトのビルドを行なっていたけど、だんだんとビルドに失敗したりすることが多くなってきたので Travis CI を使ってビルドするように変更。
今なら、GitHub Actions を使う感じかも。
今と違って、ヘッダ部分にカテゴリリンクがなかったりしてるけど、それはおいおいと細かく変更していった結果。</p>

<p><a href="http://web.archive.org/web/20150613052025/http://www.sharkpp.net:80/"><img src="/images/20200229_webarc20150613052025.png" alt="2015-06-13 05:20:25 当時のページ" /></a></p>

<h2 id="%E3%81%9D%E3%81%97%E3%81%A6%E7%8F%BE%E5%9C%A8">そして現在</h2>

<p>もろもろ細かなデザインが変わったりしているけど、根本のシステムは変わらず。</p>

<p><img src="/images/20200229_now.png" alt="現在のページ" /></p>

<h2 id="%E3%81%BE%E3%81%A8%E3%82%81">まとめ</h2>

<p>とりあえず、大きな変更をざっくりとまとめてみました。
16年も経つとオギャーといってた赤ちゃんが高校１年とか２年とかになっている感じなので、世間でも大きなところでは、携帯電話がガラゲー（フューチャーフォン）からスマホに変わったりしていますね。</p>

<p>光陰矢の如しとはよくいったもので、ここ数年は一年があっという間に過ぎていく感じで、なかなかに恐ろしいです。</p>

<p>まあ、そんな感じな雑な締めかたですが、16年経ち17年目を迎えた「さめたすたすのお部屋」をよろしくお願いします。</p>
]]></content>
        </entry>
            <entry>
            <title type="html"><![CDATA[macOS 上に Inkscape をインストールする]]></title>
            <link href="http://www.sharkpp.net/blog/2020/01/02/install-inkscape-for-macos-mojave-or-later.html"/>
            <updated>2020-01-02T11:48:00+00:00</updated>
            <id>http://www.sharkpp.net/blog/2020/01/02/install-inkscape-for-macos-mojave-or-later.html</id>
            <content type="html"><![CDATA[<p>macOS を Mojave 10.14 にしてから Inkscape が起動しなくなっていた。
が、まぁ、とりあえず使わないからいいか... と、そのままにしていたところ... 年末に急に使う事態が発生して大慌てで色々調べ入れ直したときの記録。</p>

<p><a href="/blog/2017/04/30/Install-inkscape-using-homebrew-on-macos.html">以前試した方法</a>ではうまくいかなかったので調べました。</p>

<p><img src="/thumbs/0d867646943062ca30f59487e83c8755-384x384.png" alt="Inkscape 1.0beta2 version"></p>

<h2 id="%E7%B5%90%E8%AB%96">結論</h2>

<p>結論から書くと、公式に 0.92.2 もしくは 1.0 beta 2 があるのでそちらを利用しましょうということになります。</p>

<p><img src="/thumbs/7284f6bfabb921bb3c259938794f8558-256x256.png" alt="Inkscape 1.0beta2 download page"></p>

<p>色々調べましたが、どうもそういうことらしいです。</p>

<p><a href="https://inkscape.org/ja/release/inkscape-0.92.4/mac-os-x/dmg/dl/">Inkscape 0.92.4 - macOS : dmg | Inkscape</a> によると</p>

<blockquote>
  <p>Note:
  There is no .dmg file for macOS for the current Inkscape version at this time.
  Please use Inkscape 0.92.2 on macOS &lt;= 10.14. For Catalina (macOS 10.15), there is no stable version available, please use the latest beta version of Inkscape 1.0 or the development version.</p>
  
  <p>There will be a notarized and signed .dmg file for the upcoming Inkscape 1.0.</p>
  
  <blockquote>
    <p>注：
    現時点では、現在の Inkscape バージョンの macOS 用の .dmg ファイルはありません。
    macOS &lt;= 10.14 では Inkscape 0.92.2 を利用してください。Catalina（macOS 10.15）の場合、利用可能な安定バージョンはありません。Inkscape 1.0 の最新ベータバージョンまたは開発バージョンを利用してください。</p>
    
    <p>今後の Inkscape 1.0 には、公証され署名された .dmg ファイルがあります。</p>
  </blockquote>
</blockquote>

<p>と書かれています。</p>

<p><img src="/thumbs/9b8563bd587010d545f5a46a588e4bc4-256x256.png" alt="Inkscape 1.0beta2 download page"></p>

<p>Launchpad やファイルとの関連付けもできるようになって快適です。
ただ、高確率で突然強制終了するので自動保存の設定は必須かなと、思います。</p>

<p><img src="/thumbs/72f639e6f1156f3a2cbd727116bda4ac-256x256.png" alt="Inkscape 1.0beta2 download page"></p>

<h2 id="homebrew-%E7%B5%8C%E7%94%B1%E3%81%A7%E3%81%AE%E3%82%A4%E3%83%B3%E3%82%B9%E3%83%88%E3%83%BC%E3%83%AB">Homebrew 経由でのインストール</h2>

<p><a href="/blog/2017/04/30/Install-inkscape-using-homebrew-on-macos.html">以前はできた</a> Homebrew 経由でのインストールは <code>"cxx11" is not a recognized standard</code> と怒られて、現時点ではできないようです。</p>

<pre><code class="console">$ brew install caskformula/caskformula/inkscape
==&gt; Tapping caskformula/caskformula
Cloning into '/usr/local/Homebrew/Library/Taps/caskformula/homebrew-caskformula'...
remote: Enumerating objects: 5, done.
remote: Counting objects: 100% (5/5), done.
remote: Compressing objects: 100% (4/4), done.
remote: Total 5 (delta 0), reused 3 (delta 0), pack-reused 0
Unpacking objects: 100% (5/5), done.
Error: Invalid formula: /usr/local/Homebrew/Library/Taps/caskformula/homebrew-caskformula/Formula/inkscape.rb
inkscape: "cxx11" is not a recognized standard
Error: Cannot tap caskformula/caskformula: invalid syntax in tap!
</code></pre>

<p>こんな感じでエラーとなります。</p>

<h2 id="%E3%81%BE%E3%81%A8%E3%82%81">まとめ</h2>

<ul>
<li>現状、macOS 10.14 Mojave 以降では Homebrew でのインストールが失敗する</li>
<li>macOS 10.15 Catalina では 1.0 beta 2 以降が唯一の選択</li>
<li>macOS 10.14 Mojave もしくはそれ以下の macOS 10.x では、 1.0 beta 2 もしくは 0.92.2 が利用できる</li>
<li>公式バージョンをインストールすれば Launchpad やファイルの関連付けも設定される</li>
<li>Inkscape 1.0 beta 2 は高確率で強制終了するので自動保存の設定は必須</li>
</ul>

<h2 id="%E5%8F%82%E8%80%83">参考</h2>

<ul>
<li><a href="https://inkscape.org/release/inkscape-1.0/?latest=1">Download Inkscape 1.0beta2 | Inkscape</a></li>
<li><a href="https://inkscape.org/ja/release/inkscape-0.92.4/mac-os-x/dmg/dl/">Inkscape 0.92.4 - macOS : dmg | Inkscape</a></li>
<li><a href="https://github.com/caskformula/homebrew-caskformula/issues/89">brew install fails on bad "cxx11" · Issue #89 · caskformula/homebrew-caskformula</a></li>
<li><a href="https://github.com/caskformula/homebrew-caskformula/issues/90">"cxx11" is not a recognized standard · Issue #90 · caskformula/homebrew-caskformula</a></li>
<li><a href="https://github.com/caskformula/homebrew-caskformula/issues/74">Many brew commands fail with :cxx is disabled! There is no replacement. · Issue #74 · caskformula/homebrew-caskformula</a></li>
<li><a href="https://trsasasusu.com/blog/58/">Error: Calling needs :cxx11 is disabled! There is no replacement. というエラーがbrewで出た話 | 水面下のブログ</a></li>
<li><a href="/blog/2017/04/30/Install-inkscape-using-homebrew-on-macos.html">macOS 上に Homebrew を利用して Inkscape をインストールする — さめたすたすのお家</a></li>
</ul>
]]></content>
        </entry>
            <entry>
            <title type="html"><![CDATA[HAPPY NEW YEAR 2020]]></title>
            <link href="http://www.sharkpp.net/blog/2020/01/01/happy-new-year-2020.html"/>
            <updated>2020-01-01T17:55:00+00:00</updated>
            <id>http://www.sharkpp.net/blog/2020/01/01/happy-new-year-2020.html</id>
            <content type="html"><![CDATA[<p>明けましておめでとうございます。</p>

<p>ほむぺ開設 16 年目🎉 (たぶん)。
今年も色々ありそうですが一年よろしくお願いします。</p>

<p>では、今年の目標をば。</p>

<h2 id="%E7%9B%AE%E6%A8%99">目標</h2>

<ul>
<li>定期的なホムペの更新</li>
<li>ホームページを GitHub Action ＆ GatsbyJS ベースに移行してモダーンな感じに</li>
<li>PWAとかQtとかもろもろ勉強... というか遊ぶ</li>
<li>Rust頑張ってみる... Rust難しい...</li>
<li><a href="https://github.com/sharkpp/FrameExtract">FrameExtract</a> を完成させる</li>
</ul>

<p>ではでは、今年もよろしくお願いいたします。</p>
]]></content>
        </entry>
            <entry>
            <title type="html"><![CDATA[大晦日@2019]]></title>
            <link href="http://www.sharkpp.net/blog/2019/12/31/new-years-eve-2019.html"/>
            <updated>2019-12-31T19:08:00+00:00</updated>
            <id>http://www.sharkpp.net/blog/2019/12/31/new-years-eve-2019.html</id>
            <content type="html"><![CDATA[<h2 id="1-%E5%B9%B4%E3%82%92%E6%8C%AF%E3%82%8A%E8%BF%94%E3%82%8A">1 年を振り返り</h2>

<p>今年も残すところ大晦日、そしてあと数時間で令和二年といったところ。
令和最初の大晦日も暮れようとしています。</p>

<p>しかし、予告ありの改元が発生するとは思わなかったですね... ほんと。</p>

<p>今年は５月に令和になり、新しい時代が始まりつつ、それでも変わったものも変わらないものもたくさんあった一年でした。
個人的には京アニの件が一番の大ニュースでしたね。</p>

<p>自分自身のことについてはまあ諸々の理由があって勉強会もほとんど参加できなかったのが残念ですが、来年の後半ぐらいから多少マシになる... といいなと。</p>

<p>そして、ここ数年恒例の仮想除夜の鐘アプリ「<a href="https://sharkpp.github.io/joya_no_kane/">除夜の鐘</a>」を突いてみては如何でしょうか？
PWAとかにもできた気がしますが、ちょっと間に合わなかったです...</p>

<p>とつらつらと前置きを書いたところで、今年の反省をば。</p>

<h2 id="%E7%B5%90%E6%9E%9C">結果</h2>

<p>まずは、今年の正月 <a href="/blog/2019/01/01/happy-new-year-2019.html">HAPPY NEW YEAR 2019</a> に掲げた目標です。</p>

<ul>
<li>定期的なホムペの更新</li>
<li>HSPコンテスト作品の製作！</li>
<li><a href="http://hsp-users.jp/">HSP関連サイト</a>の定期的な更新。</li>
<li>WINEの最新版でHSPが動くように！</li>
<li><a href="https://github.com/sharkpp/TimestampFreezer">TimestampFreezer</a> のバイナリ公開</li>
<li><a href="https://github.com/sharkpp/Jugemutter">Jugemutter</a> の完成</li>
</ul>

<p>と、こんな感じ。</p>

<p>成果としては...</p>

<ul>
<li><a href="https://github.com/sharkpp/delayedmotion">画像を揺らすと一部がなぜか遅れて揺れる画像を作るジェネレータ</a></li>
<li><a href="https://github.com/sharkpp/amazon-price-check">sharkpp/amazon-price-check</a> ※こちらはまだ記事書いてないけど... まあ一応動く</li>
</ul>

<p>全体的にサボりぐせというか気力がなくなっている感じで、何をするにも億劫な感じ... いかんなぁとは思うのですが...</p>

<p>HSPコンテストは……　見事に落としました。</p>

<p>HSPの関連サイトもだめですね。</p>

<p>Franz 5 recipe 関連はどうもバグっているっぽいですが、かなり放置気味。</p>

<p>Qt 関連も、勉強会でわずかに進む感じ。</p>

<p>今年も<a href="https://togetter.com/li/1343390">よんた@keita44_f4 さんの日本酒の感想ツイートまとめ</a>を更新してました。というか全然更新できてなかったです。
しかし、お酒美味しそうです</p>

<h2 id="%E5%8F%8D%E7%9C%81">反省</h2>

<p>もう、全然全くいろいろ進めてないのでなんとかしたいなって思う今日この頃。</p>

<p>と言うあたりで今年の反省会終了です。</p>

<p>来年もよろしくお願いします。</p>
]]></content>
        </entry>
            <entry>
            <title type="html"><![CDATA[名古屋Qt勉強会#31.1 に参加しました]]></title>
            <link href="http://www.sharkpp.net/blog/2019/11/23/qt-nagoya-31.html"/>
            <updated>2019-11-23T17:38:00+00:00</updated>
            <id>http://www.sharkpp.net/blog/2019/11/23/qt-nagoya-31.html</id>
            <content type="html"><![CDATA[<p>2019年11月23日(土) に開催された <a href="https://qt-users.connpass.com/event/155325/">Qt 勉強会 @ Nagoya #31.1 - connpass</a> へ参加しました。</p>

<p>そのまとめです。</p>

<h2 id="%E8%87%AA%E5%B7%B1%E7%B4%B9%E4%BB%8B">自己紹介</h2>

<p>毎回の通り、自己紹介と本日やることを宣言。</p>

<p>初めて参加の方が一人いた。</p>

<p>久しぶりの開催なのと初めての人がいるためか開催の趣旨などが説明された。</p>

<h2 id="%40kazuo_asa-%E3%81%95%E3%82%93%E3%81%AB%E3%82%88%E3%82%8B%E7%99%BA%E8%A1%A8">@kazuo_asa さんによる発表</h2>

<p><a href="https://twitter.com/kazuo_asa">@kazuo_asa</a> による</p>

<ul>
<li>はじめてのQt入門 シグナルとスロット</li>
</ul>

<p>の発表がありました。</p>

<h2 id="%E8%87%AA%E5%88%86%E3%81%AE%E6%9C%AC%E6%97%A5%E3%81%AE%E3%82%84%E3%82%8B%E3%81%93%E3%81%A8">自分の本日のやること</h2>

<ul>
<li>前回の続きの動画からフレームを切り出し動画のメタ情報とフレーム位置に応じた時刻を設定するツールを実装</li>
</ul>

<p>前回までの状況</p>

<ul>
<li>UIの実装途中</li>
</ul>

<h2 id="%E6%9C%AC%E6%97%A5%E3%81%AE%E7%9F%A5%E8%A6%8B">本日の知見</h2>

<h2 id="path%E7%92%B0%E5%A2%83%E5%A4%89%E6%95%B0">PATH環境変数</h2>

<p>QtCreator で値を上書きできるので、コンソールでの実行結果と違うことがある...</p>

<h2 id="%E3%82%B7%E3%82%B0%E3%83%8A%E3%83%AB%2F%E3%82%B9%E3%83%AD%E3%83%83%E3%83%88%E3%81%A7%E3%81%AE%E6%8E%A5%E7%B6%9A%E3%82%BF%E3%82%A4%E3%83%97">シグナル/スロットでの接続タイプ</h2>

<p>オプションで指定できたみたい... 知らなかった...</p>

<p><a href="https://doc.qt.io/qt-5/qt.html#ConnectionType-enum">enum Qt::ConnectionType</a> より</p>

<table>
<thead>
<tr>
  <th>Constant</th>
  <th>Value</th>
  <th>Description</th>
</tr>
</thead>
<tbody>
<tr>
  <td>Qt::AutoConnection</td>
  <td>0</td>
  <td>（デフォルト）シグナルを発信するスレッド内にレシーバーが存在する場合、Qt::DirectConnection が使用されます。それ以外の場合、Qt::QueuedConnection が使用されます。接続タイプは、信号が発信されるときに決定されます。</td>
</tr>
<tr>
  <td>Qt::DirectConnection</td>
  <td>1</td>
  <td>スロットは、信号が発信されるとすぐに呼び出されます。スロットはシグナリングスレッドで実行されます。</td>
</tr>
<tr>
  <td>Qt::QueuedConnection</td>
  <td>2</td>
  <td>スロットは、制御がレシーバーのスレッドのイベントループに戻るときに呼び出されます。スロットは受信者のスレッドで実行されます。</td>
</tr>
<tr>
  <td>Qt::BlockingQueuedConnection</td>
  <td>3</td>
  <td>Qt::QueuedConnection と同じです。ただし、シグナルスレッドは、スロットが戻るまでブロックします。レシーバがシグナリングスレッドに存在する場合、この接続を使用しないでください。使用すると、アプリケーションがデッドロックします。</td>
</tr>
<tr>
  <td>Qt::UniqueConnection</td>
  <td>0x80</td>
  <td>これは、ビット単位のORを使用して、上記の接続タイプのいずれかと組み合わせることができるフラグです。 Qt::UniqueConnection が設定されている場合、接続が既に存在する場合（つまり、同じオブジェクトの同じペアの同じスロットに同じ信号が既に接続されている場合）、QObject::connect() は失敗します。このフラグはQt 4.6で導入されました。</td>
</tr>
</tbody>
</table>

<h2 id="%E6%9C%AC%E6%97%A5%E3%81%AE%E9%80%B2%E6%8D%97">本日の進捗</h2>

<ul>
<li>前回の続きを思い出すところからスタート</li>
<li>QProcess::start() で絶対パスではなく <code>ffmpeg</code> だけでコマンドが呼び出せないのを調べていたが、結局 QtCreater の設定に追加することで解決</li>
<li>あとは QML で 思った UI の表現がうまくいかなかったのでそれを実現するためにサンプルを作ってたりしてタイムアップ</li>
</ul>

<p>なかなかに、思ったUIを作るのが難しい...</p>

<h2 id="%E3%83%A1%E3%83%A2">メモ</h2>

<ul>
<li><a href="https://scoop.sh/">Scoop</a> いいぞぉ</li>
</ul>

<h2 id="%E5%8F%82%E8%80%83">参考</h2>

<ul>
<li><a href="https://doc.qt.io/qt-5/qt.html#ConnectionType-enum">Qt Namespace | Qt Core 5.13.2</a></li>
</ul>
]]></content>
        </entry>
    </feed>