#!/bin/bash

# redirect to bash
if [ -e /proc/$$/ ] ; then
  PPROC=$(cat /proc/$$/stat | cut -d " " -f 2)
  if [ "(sh)" == "$PPROC" ] ; then
    /bin/bash $0 $*
    exit $?
  fi
fi

# check cli php
check_php () {
  PHP=php
  for I in php56cli php55cli php54cli php53cli php5cli php71cli php70cli php7cli \
           php56    php55    php54    php53    php5    php71    php70    php7    php 
  do
    if [ "" != "$($I -v 2>/dev/null | grep cli)" ] ; then
      PHP=$I
      break
    fi
  done
}

# check libxml version
check_libxml () {
  $PHP -r 'libxml_get_errors();' >/dev/null 2>&1
  if [ 0 -ne $? ] ; then
    export LD_PRELOAD=~/usr/libxml/lib/libxml2.so
  fi
}

# exec composer
_composer () {
  local COMPOSER_PATH=$(dirname $0)/composer.phar
  case "$1" in
    "exist"       ) test -e "$COMPOSER_PATH" ;;
    "self-install") curl --insecure -L https://getcomposer.org/installer | $PHP ;;
    "self-update" ) ;;
    *             ) $PHP "$COMPOSER_PATH" $* ;;
  esac
}

# exec sculpin
_sculpin () {
  local SCULPIN_PATH1=$(dirname $0)/sculpin.phar
  local SCULPIN_PATH2=$(dirname $0)/.vendor/bin/sculpin
  case "$1" in
    "exist"       ) test -e "$SCULPIN_PATH1" || test -e "$SCULPIN_PATH2" ;;
    "self-install") # for I in lock json ; do cp -pf $(dirname $0)/composer.{$I,$I~} ; done
                    $PHP composer.phar require sculpin/sculpin:^2.1@dev dflydev/embedded-composer:@dev
                    # for I in lock json ; do mv -f $(dirname $0)/composer.{$I~,$I} ; done
                    ;;
    "self-update" ) ;;
    *             ) if [ -e "$SCULPIN_PATH1" ] ; then
                      $PHP $SCULPIN_PATH1 $*
                    else
                      $PHP $SCULPIN_PATH2 $*
                    fi ;;
  esac
}

# exec bowerphp
_bower () {
  $PHP .vendor/beelab/bowerphp/bin/bowerphp $*
}

# get config value
get_ini () {
  # $1 : config file
  # $2 : key
  # $3 : default value
  local RESULT
  RESULT=$(cat "$1" | grep "$2" | sed -e 's/^[^=]*=\s*\(.*\)/\1/g')
  if [ "" == "$RESULT" ] ; then
    RESULT=$3
  fi
  echo $RESULT
}

exec_usage () {
  echo 'usage: site <command> [option]'
  echo 'commands are:'
  echo '  init                   initialize site'
  echo '  clean                  cleanup site, remove ignore files'
  echo '  generate [OUT_PATH]    generate site'
  echo '  production [CONF_PATH] production site, set webhook.conf path'
  echo '  deploy                 production site for GitHub Pages with Travis CI'
  echo '  test                   launch web server [ http://localhost:8000/ ] for test site'
  echo '  spider                 check broken link'
  echo '  new [STUB]             create new empty page'
}

core_init () {
  #
  check_php
  check_libxml
  # install Component from Composer and Bower
  _composer exist || _composer self-install
  _composer self-update
  _composer install
  _bower install
  # create default webhook conf
  if [ ! -e "$(dirname $0)/webhook.conf" ] ; then
    pushd $(dirname $0) >/dev/null 2>&1
    echo "log_file=$(pwd)/webhook.log"> $(pwd)/webhook.conf
    echo "secret_key=$(cat /dev/urandom | head -n 64 | shasum -a 512 -b | sed -e "s/[\* -]//g")">> $(pwd)/webhook.conf
    echo "git_cmd=$(whereis git)">> $(pwd)/webhook.conf
    echo "repos_path=$(pwd)">> $(pwd)/webhook.conf
    echo "output_path=$(pwd)/public">> $(pwd)/webhook.conf
    echo "notify_path=$(pwd)/webhook.notify">> $(pwd)/webhook.conf
    popd >/dev/null 2>&1
  fi
}

exec_init () {
  exec 9< $0
  perl -mFcntl=:flock -e "open(LOCK,'<&=9');exit(!flock(LOCK,LOCK_EX|LOCK_NB))" || exit 0
  #
  core_init
}

exec_clean () {
  rm -rf .vendor .sculpin *.lock *.phar
  rm -rf output_* app/cache app/logs
  find source/assets -maxdepth 1 -mindepth 1 -not -name js -and -not -name css -and -not -name fonts -exec rm -rf {} \;
}

core_generate () {
  rm -rf output_prod/* > /dev/null 2>&1
  _sculpin generate --env=prod > /dev/null
  if [ $? -ne 0 ]; then echo "Could not generate the site"; exit 1; fi
  OUT_PATH=$1
  if [ "" != "$OUT_PATH" ] ; then
    if [ "" != "$(basename $OUT_PATH)" ] ; then
      # swap new/old output directory
      rm -rf ${OUT_PATH}~ > /dev/null 2>&1
      mv $OUT_PATH ${OUT_PATH}~
      mv output_prod $OUT_PATH
      # Move the other files that were generated by sculpin.
      mkdir -p $OUT_PATH/files
      yes no | mv $OUT_PATH~/files/* $OUT_PATH/files
      mv -f $OUT_PATH~/{log,.fast-cgi-bin,google*.html} $OUT_PATH
      mv -f $OUT_PATH~/{hsp-users.jp,*.sharkpp.net} $OUT_PATH
    fi
  fi
}

exec_generate () {
  exec 9< $0
  perl -mFcntl=:flock -e "open(LOCK,'<&=9');exit(!flock(LOCK,LOCK_EX|LOCK_NB))" || exit 0
  # init
  check_php
  check_libxml
  _sculpin exist || core_init
  # generate
  core_generate $1
}

exec_production () {
  exec 9< $0
  perl -mFcntl=:flock -e "open(LOCK,'<&=9');exit(!flock(LOCK,LOCK_EX|LOCK_NB))" || exit 0
  # check update
  if [ ! -e "$1" ] ; then
    echo config \"$1\" not found
    exit 1
  fi
  cd $(dirname $0)
  NOTIFY=$(get_ini $1 notify_path notify)
  if [ ! -e "$NOTIFY" ] ; then
    echo not updated
    exit 0
  fi
  rm -f $NOTIFY
  # init
  check_php
  check_libxml
  _sculpin exist || core_init
  # repository update
  GIT=$(get_ini $1 git_cmd git)
  $GIT pull origin master
  if [ 0 -ne $? ] ; then
    exit 1
  fi
  # install assets
  _bower install
  # generate site
  core_generate $(get_ini $1 output_path public)
}

exec_deploy () {
  if [ "" == "$GH_TOKEN" ] ; then
    exit 0
  fi
echo -------------------- ; ls -la . ; echo --------------------
  PHP=php
  #check_php
  #check_libxml
  # install Component from Composer and Bower
  _composer exist || _composer self-install
  _composer self-update
  _composer install
  _bower install
  # set git config
  git config --global user.email "${GIT_EMAIL}"
  git config --global user.name  "${GIT_USERNAME}"
  # clone output repository
  DEPLOY_REPOS="https://${GH_TOKEN}@github.com/${TRAVIS_REPO_SLUG}.git"
  DEPLOY_BRANCH=gh-pages
  rm -rf output_prod
  git clone --quiet -b $DEPLOY_BRANCH $DEPLOY_REPOS output_prod
  if [ ! -e "output_prod" ] ; then
    git init output_prod
    pushd output_prod
    git remote add origin $DEPLOY_REPOS
    git checkout --orphan $DEPLOY_BRANCH
    popd
  else
    pushd output_prod
    git pull
    popd
    rm -rf output_prod/*
  fi
  # production generate
  _sculpin generate --env=prod
  # deploy
  DEPLOY_MSG=$(git log --pretty=format:"Deploy from https://github.com/${TRAVIS_REPO_SLUG}/commit/%H : %s" -1)
  pushd output_prod
  git add . -A
  echo $DEPLOY_MSG | git commit -F -
  git push --quiet origin $DEPLOY_BRANCH
  popd
  # tweet
  return 0
}

exec_test () {
  # init
  check_php
  check_libxml
  _sculpin exist || core_init
  #
  rm -rf output_dev/*
  _sculpin generate --watch --server
}

exec_spider () {
  # wget install check
  wget --help > /dev/null
  if [ $? -eq 127 ] ; then
    echo wget command not installed
    exit
  fi
  # init
  check_php
  check_libxml
  _sculpin exist || exec_init
  RUNNING=$(ps ax|grep "bin/sculpin[ ]"|wc -l|sed -e "s/ //g")
  if [ 0 -eq $RUNNING ] ; then
    rm -rf output_dev/*
    # launch server and waiting for generate
    while read f; do
      if [ "" != "$(echo "$f" | grep "server is running at")" ] ; then break ; fi
    done < <(_sculpin generate --watch --server &)
  fi
  wget --spider --no-directories --recursive --page-requisites --level=0 --no-verbose http://localhost:8000
  if [ 0 -eq $RUNNING ] ; then
    killall $PHP
  fi
}

exec_new () {
  NEW_PAGE=source/_posts/$(date +%Y-%m-%d)-$1.md

  echo "---"                             > $NEW_PAGE
  echo "title: \"$1\""                   >>$NEW_PAGE
  echo "date: $(date +'%Y-%m-%d %H:%M')" >>$NEW_PAGE
  echo "tags: [雑記]"                     >>$NEW_PAGE
  echo "categories: [ブログ]"             >>$NEW_PAGE
  echo ""                                >>$NEW_PAGE
  echo "---"                             >>$NEW_PAGE

  echo create new blog page is $NEW_PAGE
}

exec_update () {
  # init
  check_php
  check_libxml
  _composer exist || _composer self-install
  _composer self-update
  _composer update
  _bower update
}

case "$1" in
  "init"       ) exec_init ;;
  "i"          ) exec_init ;;
  "clean"      ) exec_clean ;;
  "generate"   ) exec_generate $2;;
  "g"          ) exec_generate $2;;
  "production" ) exec_production $2;;
  "deploy"     ) exec_deploy;;
  "test"       ) exec_test ;;
  "t"          ) exec_test ;;
  "spider"     ) exec_spider ;;
  "new"        ) exec_new $2;;
  "n"          ) exec_new $2;;
  "update"     ) exec_update ;;
  "u"          ) exec_update ;;
  *            ) exec_usage ;;
esac
