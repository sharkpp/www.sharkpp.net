<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
    <title><![CDATA[さめたすたすのお家]]></title>
    <link href="http://www.sharkpp.net/blog/tags/SSL.xml" rel="self"/>
    <link href="http://www.sharkpp.net/"/>
    <updated>2019-12-31T10:12:01+00:00</updated>
    <id>http://www.sharkpp.net/</id>
            <author>
            <name><![CDATA[sharkpp]]></name>                    </author>
        <generator uri="http://sculpin.io/">Sculpin</generator>
            <entry>
            <title type="html"><![CDATA[じゅげむったーの開発日記 その６]]></title>
            <link href="http://www.sharkpp.net/blog/2017/09/27/jugemutter-development-diary-6th.html"/>
            <updated>2017-09-27T12:40:00+00:00</updated>
            <id>http://www.sharkpp.net/blog/2017/09/27/jugemutter-development-diary-6th.html</id>
            <content type="html"><![CDATA[<p>遅くなりましたが、今月も引き続き参加した <a href="https://qt-users.connpass.com/event/65548/">Qt 勉強会 @ Nagoya No12 - connpass</a> のまとめです。</p>

<p>重大発表があってちょっとびっくりでした。
それはともかく今回も長文投稿専用Twitterクライアントの開発の続きでした。</p>

<p>レポジトリは ... <a href="https://github.com/sharkpp/Jugemutter">sharkpp/Jugemutter: 長文投稿専用クライアント「じゅげむったー」</a> となります。</p>

<p>画面は...変わってないからいいですね。</p>

<h2 id="%E9%80%B2%E6%8D%97">進捗</h2>

<p>相変わらず <code>Could not authenticate you.</code> がなぜか出る、と。</p>

<p>そこで、先日に <a href="https://github.com/sharkpp/http-peeper">sharkpp/http-peeper: This is a proxy server for peeping HTTP/HTTPS communication, mainly for debugging.</a> と言うツールを NodeJS でサクッと作ってみました。
一言で言うと https 通信の間に割り込んで中身を見てしまうツールです。</p>

<p>今回は、これの改良というか改善？をして、他のソフトの通信の内容と比較してみました。</p>

<p>まあ、結果として、少なくともパラメータやヘッダなどには特に違いがなさそうだ、という事がわかりました。
困ったことに、全く解決になっていないです...</p>

<p>あとは、HMACなどの計算時に無駄にエスケープしている事で、サーバー側での検証時と値が違うのかなぁと。
まあ、そうだとすると Qt 側のバグなのですが...</p>

<p>と、まあそんなところで終了。</p>

<p>まあ、あとは重大発表として Qt 勉強会 @ Nagoya が残念なことに今回で一旦休止の発表があり（次回が一旦の〆）となってしまいました。
なかなか、会場の都合が付かないので難しいですねぇ。</p>

<h2 id="%E4%BB%96%E3%81%AE%E3%82%BD%E3%83%95%E3%83%88%E3%81%AE%E9%80%9A%E4%BF%A1%E3%82%92%E8%A6%97%E3%81%8D%E8%A6%8B">他のソフトの通信を覗き見</h2>

<p>先のツール（<a href="https://github.com/sharkpp/http-peeper">http-peeper</a>）、証明書は当然本物ではなく所謂オレオレ証明書と呼ばれているものを使っている都合、証明書の検証をしている（OpenSSL等のライブラリを使っている場合は基本検証している）とエラーが出てしまうのです。
そのために、そのままだと他のソフトには使えないのでした。
さてどうするか？と考えていたところ、そういえばオレオレ認証局の証明書を作りシステムに登録して信頼、その認証局で署名することで対応と書かれている記事を見かけた覚えがあったので、とりあえずツールに組み込む前に手作業でやって見ました。</p>

<h3 id="%E6%89%8B%E9%A0%86">手順</h3>

<p><code>openssl.conf</code> をコピーして書き換えたり、いろいろして見ましたが結局こんな感じで試しました。</p>

<pre><code class="console">$ mkdir demoCA
$ cd demoCA
$ mkdir newcerts certs crl private
$ chmod 700 private
$ touch index.txt
$ echo 00 |tee serial
$ openssl req -batch -new -x509 -sha256 -days 36500 -newkey rsa:4096 -out ca.crt -keyout demoCA/private/ca.key -subj "/C=JP/ST=Tokyo/L=Tokyo/O=root.http-peeper.local/OU=root.http-peeper.local/CN=root.http-peeper.local"
$ openssl rsa -in demoCA/private/ca.key -out demoCA/private/ca.key
$ openssl req -batch -new -sha256 -days 36500 -newkey rsa:4096 -out demoCA/server.csr -keyout demoCA/private/server.key -batch -subj "/C=JP/ST=Tokyo/L=Tokyo/O=root.http-peeper.local/OU=api.twitter.com/CN=api.twitter.com"
$ openssl rsa -in demoCA/private/server.key -out demoCA/private/server.key
$ openssl ca -batch -days 36500 -keyfile demoCA/private/ca.key -cert demoCA/ca.crt -in demoCA/server.csr -out demoCA/server.crt
</code></pre>

<p>そして <code>ca.crt</code> を開き</p>

<p><img src="/images/2017_0916_macos_cert_reg_to_system.png" alt="証明書の追加" /></p>

<p>と、システムに登録します。</p>

<p>登録したら「キーチェーンアクセス」から証明書を探し</p>

<p><img src="/images/2017_0916_macos_view_cert_detail.png" alt="証明書を右クリック" /></p>

<p>右クリックで「情報を見る」から「常に信頼」を選び</p>

<p><img src="/images/2017_0916_macos_trust_root_cert.png" alt="証明書を信頼" /></p>

<p>と信頼させます。</p>

<p><img src="/images/2017_0916_macos_trusted_cert.png" alt="キーチェーンアクセス" /></p>

<p>「キーチェーンアクセス」では「この証明書はこのアカウントにとって信頼されている物として指定されています」と表示されています。</p>

<p>あとは、 <code>server.key</code> と <code>server.crt</code> を</p>

<pre><code class="console">$ openssl x509 -in server.crt -out tmp.der -outform DER
$ openssl x509 -in tmp.der -inform DER -out server-cert.pem -outform pem
$ openssl rsa -in server.key -out tmp.der -outform DER
$ openssl rsa -in tmp.der -inform DER -out server-key.pem -outform pem
</code></pre>

<p>と .pem 形式に変換（元々.pemで利用していたため）し利用しました。</p>

<p>手順はツールに組み込んで自動化したいところですが、とりあえず他のソフトの通信を覗き見できるようになりました。</p>

<h2 id="%E5%8F%82%E8%80%83">参考</h2>

<ul>
<li><a href="http://qiita.com/mkgask/items/8d66dcada58a485e3585#_reference-0c1fe982bfae4639fb65">Chrome58以降でハネられないSHA-2でオレオレ認証局署名のあるオレオレ証明書 - Qiita</a></li>
<li><a href="http://qiita.com/ll_kuma_ll/items/13c962a6a74874af39c6#20170508%E8%BF%BD%E8%A8%98">オレだよオレオレ認証局で証明書つくる - Qiita</a></li>
<li><a href="http://qiita.com/softark/items/15a5280bd38c5dd97b48">オレオレ認証局とオレオレ証明書 - Qiita</a></li>
<li><a href="http://qiita.com/NakashimaKeisuke_zerodaynet/items/bfc77e5fe98b587532d0">SSL証明書設定でよくやってることをまとめる。 - Qiita</a></li>
<li><a href="http://qiita.com/kunichiko/items/12cbccaadcbf41c72735">RSA鍵、証明書のファイルフォーマットについて - Qiita</a></li>
<li><a href="https://hacknote.jp/archives/13939/">SSL証明書を.crtから.pemに変換する方法 | ハックノート</a></li>
<li><a href="http://certificate.fyicenter.com/2134_OpenSSL_ca_Error_..._directory_for_new_certificate_..._.html">OpenSSL - OpenSSL "ca" Error "... directory for new certificate ..."</a></li>
</ul>
]]></content>
        </entry>
            <entry>
            <title type="html"><![CDATA[じゅげむったーの開発日記 その５]]></title>
            <link href="http://www.sharkpp.net/blog/2017/08/23/jugemutter-development-diary-5th.html"/>
            <updated>2017-08-23T01:50:00+00:00</updated>
            <id>http://www.sharkpp.net/blog/2017/08/23/jugemutter-development-diary-5th.html</id>
            <content type="html"><![CDATA[<p>さて、今月も引き続き参加した <a href="https://qt-users.connpass.com/event/62861/">Qt 勉強会 @ Nagoya No11 - connpass</a> のまとめ。</p>

<p>つぶやきは <a href="https://togetter.com/li/1146658">Qt 勉強会 @ Nagoya No11 つぶやきまとめ - Togetterまとめ</a> でまとめられています。</p>

<p>先月の勉強会から日付(YY.MM)が付かなくなりました。</p>

<p>さて、今回も長文投稿専用Twitterクライアントの開発の続きをしました。</p>

<p>レポジトリは ... <a href="https://github.com/sharkpp/Jugemutter">sharkpp/Jugemutter: 長文投稿専用クライアント「じゅげむったー」</a> です。</p>

<p><img src="/images/2017_0819_jugemutter1.png" alt="画面" /></p>

<h2 id="%E9%80%B2%E6%8D%97">進捗</h2>

<p><img src="/images/2017_0819_jugemutter2.png" alt="テスト画面" /></p>

<p>とりあえず、分割処理のいろんなパターンのテストがやっと通ったので、ようやく一山越えた感じです。
ここまで長かった。</p>

<p>で、<code>Could not authenticate you.</code> がなぜか出る、と。
これは、<a href="https://dev.twitter.com/overview/api/response-codes">Error Codes &amp; Responses — Twitter Developers</a> によると、『<ruby>ダイヤルしても通話を完了できませんでした。<rp>(</rp><rt>Your call could not be completed as dialed.</rt><rp>)</rp></ruby>』って意味らしい。</p>

<h2 id="wireshark-%E3%81%A7-https-%E3%81%AE%E4%B8%AD%E8%BA%AB%E3%81%AE%E7%A2%BA%E8%AA%8D">Wireshark で https の中身の確認</h2>

<p>Twitter の API への指示がおかしいらしいので、なんとか調べられないかとググってた所、Wiresharkでhttpsの中身が確認できるとの記事を発見。</p>

<pre><code># SSLKEYLOGFILE=~/tls_key.log {ChromeやFirefox、cURLなどのパス}
</code></pre>

<p>で起動し、Wireshark で</p>

<p><img src="/images/2017_0819_https_decrypt_in_wireshark.png" alt="Wireshark" /></p>

<p>と、このような設定をすれば良いらしい。</p>

<p>が、解析画面</p>

<p><img src="/images/2017_0819_wireshark.png" alt="Wireshark" /></p>

<p>を見ても、 <del><code>Decrypted SSL Data</code> なんてタブはもちろん、<code>Frame</code> などのタブも表示されていないので、もしかしてUIがQtベースになった時に何か変わったのかもしれない。</del></p>

<p><img src="/images/2017_0831_wireshark.png" alt="Wireshark" /></p>

<p><code>RSA keys list</code> の設定を触って居たら、なぜかタブが出るようになった。
実装自体はされているようだ。</p>

<p>あと、そもそもの話、Qtの通信を覗きたいのが目的。
なので、Qtで上の方法が使えないと意味がないんだけど使えるのだろうか？</p>

<h2 id="%E5%8F%82%E8%80%83">参考</h2>

<ul>
<li><a href="http://qiita.com/Hexa/items/ce0ac23526df12a64ad0">暗号化された Application Data を復号する - Qiita</a></li>
<li><a href="https://f-o.org.uk/2017/decrypting-https-traffic-without-a-key.html">Floating Octothorpe: Decrypting HTTPS traffic without a key</a></li>
<li><a href="https://serverfault.com/questions/263530/how-can-i-filter-https-when-monitoring-traffic-with-wireshark">How can I filter https when monitoring traffic with Wireshark? - Server Fault</a></li>
<li><a href="http://troushoo.blog.fc2.com/blog-entry-234.html">Wireshark を用いて、クライアント側の情報のみでHTTPS 通信を複合する方法</a></li>
<li><a href="http://qiita.com/toshihirock/items/acbf9800f7e784118e46">HTTPSのパケットをwiresharkで見てみる - Qiita</a></li>
<li><a href="https://gist.github.com/summerwind/a482dd1f8e9887d26199">Wireshark で HTTP/2 over TLS の通信をダンプする方法</a></li>
<li><a href="https://developer.mozilla.org/en-US/docs/Mozilla/Projects/NSS/Key_Log_Format">NSS Key Log Format - Mozilla | MDN</a></li>
</ul>
]]></content>
        </entry>
    </feed>