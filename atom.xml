<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
    <title><![CDATA[さめたすたすのお家]]></title>
    <link href="http://www.sharkpp.net/atom.xml" rel="self"/>
    <link href="http://www.sharkpp.net/"/>
    <updated>2017-05-07T15:03:49+00:00</updated>
    <id>http://www.sharkpp.net/</id>
            <author>
            <name><![CDATA[sharkpp]]></name>                    </author>
        <generator uri="http://sculpin.io/">Sculpin</generator>
            <entry>
            <title type="html"><![CDATA[macOS 上に Homebrew を利用して Inkscape をインストールする]]></title>
            <link href="http://www.sharkpp.net/blog/2017/04/30/Install-inkscape-using-homebrew-on-macos.html"/>
            <updated>2017-04-30T23:30:00+00:00</updated>
            <id>http://www.sharkpp.net/blog/2017/04/30/Install-inkscape-using-homebrew-on-macos.html</id>
            <content type="html"><![CDATA[<p>開発中のアプリのアイコンを作成するために <a href="https://inkscape.org/ja/">Inkscape</a> が必要だったのですが、先日に Inkscape と <a href="https://www.xquartz.org/">XQuartz</a> をアップデートしてから何が悪いのか起動しなくて難儀していたところで、解決方法を見つけたのでその方法の記録です。</p>

<p><img src="/_thumbs/632bbe45529a94416b0f7e519f24e6bf-384x384.png" alt="Inkscape 0.92.1 version"></p>

<h2 id="%E3%81%AF%E3%81%98%E3%82%81%E3%81%AB">はじめに</h2>

<p>解決方法ですが、実は公式のダウンロードページにしれっと書いてあったんですよね。</p>

<blockquote>
  <p><a href="https://inkscape.org/ja/download/mac-os/">Mac OS 版 | Inkscape</a></p>
  
  <p>For users who cannot wait to try out the new features and have some technical experience, alternative installation methods are available.</p>
  
  <p>(意訳：腕に覚えがあるなら新しいバージョンをインストールする別の方法があるけどどうする？)</p>
</blockquote>

<p>この記事を書いている時点(2017/04/30)では、どうやら最新バージョンの 0.92 系は .dmg が提供されていないので、ある意味、渡りに船かもと言うところも。</p>

<p>その方法 <a href="https://inkscape.org/ja/download/mac-os/#alternative_install_0.92">alternative installation methods</a> を確認すると、macOS の２大パッケージマネージャーの <a href="https://www.macports.org/">MacPorts</a> と <a href="https://brew.sh/">Homebrew</a> でのインストール方法が書いてあります。</p>

<p>自分の環境は、Homebrew なので、そちらでのビルドとインストールを試してみました。</p>

<p>ビルド時間などは、こんな感じ。</p>

<table>
<thead>
<tr>
  <th>パッケージ</th>
  <th>バージョン</th>
  <th align="right">ファイル数</th>
  <th align="right">サイズ</th>
  <th align="right">ビルド時間</th>
</tr>
</thead>
<tbody>
<tr>
  <td>openssl</td>
  <td>1.0.2k</td>
  <td align="right">1696</td>
  <td align="right">17.5MB</td>
  <td align="right">00:15:56</td>
</tr>
<tr>
  <td>python</td>
  <td>2.7.13</td>
  <td align="right">6337</td>
  <td align="right">86.7MB</td>
  <td align="right">00:04:03</td>
</tr>
<tr>
  <td>inkscape</td>
  <td>0.92.1</td>
  <td align="right">1019</td>
  <td align="right">128.3MB</td>
  <td align="right">00:27:50</td>
</tr>
</tbody>
</table>

<p>ちなみに、どうやらこの方法だとネイティブ版がビルドされるらしく日本語入力やシステムにインストールされているフォントが使えたりとか、嬉しい変化があったりもします。</p>

<h2 id="%E6%BA%96%E5%82%99">準備</h2>

<p>インストール前の準備として、Homebrew の環境を整えておきます。</p>

<p>まれに、パッケージのバージョンが上がっていたりするので、アップデートしておきます。</p>

<pre><code class="bash">$ brew update
</code></pre>

<p>また、以前に Homebrew で Inkscape をインストールしたことがある場合は、どうやらあらかじめアンインストールが必要のようです。</p>

<pre><code class="bash">$ brew uninstall inkscape
$ brew cleanup
</code></pre>

<h2 id="%E3%83%93%E3%83%AB%E3%83%89%EF%BC%86%E3%82%A4%E3%83%B3%E3%82%B9%E3%83%88%E3%83%BC%E3%83%AB">ビルド＆インストール</h2>

<p>実際のところ、ビルド自体はコマンド一行で終わります。</p>

<pre><code class="bash">$ brew install caskformula/caskformula/inkscape
</code></pre>

<p>ビルドとインストールが</p>

<pre><code>$ brew install caskformula/caskformula/inkscape
==&gt; Tapping caskformula/caskformula
Cloning into '/usr/local/Homebrew/Library/Taps/caskformula/homebrew-caskformula'...
remote: Counting objects: 5, done.
           :
==&gt; make
==&gt; make install
🍺 /usr/local/Cellar/inkscape/0.92.1: 1,019 files, 128.3MB, built in 27 minutes 50 seconds
</code></pre>

<p>とこのような感じで終了したら、おもむろに</p>

<pre><code class="bash">$ inkscape
</code></pre>

<p>と入力します。
何もなければ Inkscape を起動できます。</p>

<p>インストール先の <code>/usr/local/Cellar/inkscape/0.92.1</code> は後で利用するので覚えておきます。</p>

<p>インストールした Inkscape のバージョンはこんな感じ。</p>

<p><a href="/images/2017_0430_inkscape_version.png"><img src="/_thumbs/632bbe45529a94416b0f7e519f24e6bf-384x384.png" alt="Inkscape 0.92.1 version"></a></p>

<p>お疲れ様でした、と言いたいところですが、残念ながらこの状態では Launchpad に登録されていないので、もう一手間かける必要があります。</p>

<p>実は、</p>

<pre><code class="bash">$ brew cask install inkscape
</code></pre>

<p>でインストールすると、 .app がインストールされるようですが、現時点(2017/04/30)ではバージョンが 0.91-1 で、XQuartz 版で、実は裏で公式のパッケージをインストールしているだけなので日本語やフォントなどの制限があります。</p>

<h2 id="launchpad-%E3%81%B8%E3%81%AE%E7%99%BB%E9%8C%B2">Launchpad への登録</h2>

<p>以前は</p>

<pre><code class="bash">$ brew linkapps inkscape
</code></pre>

<p>みたいにすれば、できていたらしいけど、</p>

<blockquote>
  <p>Warning: <code>brew linkapps</code> has been deprecated and will eventually be removed!</p>
  
  <p>(訳：<code>brew linkapps</code>は廃止され、最終的に削除されます！)</p>
</blockquote>

<p>と怒られるので、別の方法をとります。</p>

<p>Inksacpe のインストール先は、先のビルド時のログに出てくる、<code>/usr/local/Cellar/inkscape/0.92.1</code> なので、<code>/bin/inkscape</code> を追加して、<code>"/usr/local/Cellar/inkscape/0.92.1/bin/inkscape"</code> が実態となります。</p>

<p>記録し忘れていたら、</p>

<pre><code class="bash">$ realpath $(which inkscape)
/usr/local/Cellar/inkscape/0.92.1/bin/inkscape
</code></pre>

<p>で確認できます。</p>

<p>スクリプトエディタで</p>

<pre><code class="AppleScript">tell application "/usr/local/Cellar/inkscape/0.92.1/bin/inkscape"
    activate
end tell
</code></pre>

<p>と入力して、</p>

<ol>
<li>「ファイル」メニュー</li>
<li>「書き出す...」</li>
<li>書き出し名＝「Inkscape」</li>
<li>ファイルフォーマット＝「アプリケーション」 ※ここが重要</li>
<li>「保存」を押下</li>
</ol>

<p><img src="/images/2017_0430_as2app.png" /></p>

<p>で、Inkscapeのランチャーアプリケーションを作成します。</p>

<p>書き出したアプリケーションを「アプリケーション」フォルダに入れれば完了です。</p>

<p>アプリケーションのアイコンはスクリプトファイルのアイコンがそのまま使われています。</p>

<p>「パッケージの内容を表示」で .app の中に潜ると</p>

<p><img src="/images/2017_0430_app_package_contents.png" /></p>

<p>のような感じになっているので、</p>

<p>るので、気になるようであれば、公式インストーラの .app から <code>Contents/Resources/inkscape.icns</code> を取り出し、 <code>Contents/Resources/applet.icns</code> を置き換えてあげれば</p>

<p><img src="/images/2017_0430_launcher_app_in_launchpad.png" /></p>

<p>こんな感じで Launchpad に表示されていると思います。</p>

<h2 id="%E3%81%BE%E3%81%A8%E3%82%81">まとめ</h2>

<ul>
<li>現状は 0.92.x に公式パッケージ(.dmg ファイル)は存在しない</li>
<li>Macports か Homebrew 経由で Inkscape の 0.92.x のネイティブ版(非XQuartz版)をビルド＆インストール可能</li>
<li>AppleScript でランチャーアプリを作れば Launchpad にも登録可能</li>
</ul>

<h2 id="%E5%8F%82%E8%80%83">参考</h2>

<ul>
<li><a href="http://a244.hateblo.jp/entry/2016/12/10/215848">MacPorts と開発版 Inkscape (0.92pre3) - ながいものには、まかれたくない</a></li>
<li><a href="https://inkscape.org/ja/download/mac-os/#alternative_install_0.92">Mac OS 版 | Inkscape</a></li>
<li><a href="http://qiita.com/nkimra/items/e30b5d120a6cae7ded8d">AppleScriptでアプリケーションの操作 - Qiita</a></li>
<li><a href="https://apple.stackexchange.com/questions/8299/how-do-i-make-an-applescript-file-into-a-mac-app">How do I make an AppleScript file into a Mac App? - Ask Different</a></li>
</ul>
]]></content>
        </entry>
            <entry>
            <title type="html"><![CDATA[じゅげむったー(仮)の開発日記 その１]]></title>
            <link href="http://www.sharkpp.net/blog/2017/04/16/jugemutter-development-diary-1st.html"/>
            <updated>2017-04-16T23:07:00+00:00</updated>
            <id>http://www.sharkpp.net/blog/2017/04/16/jugemutter-development-diary-1st.html</id>
            <content type="html"><![CDATA[<p>さて、先月に続いて今月も参加した <a href="https://qt-users.connpass.com/event/53963/">Qt 勉強会 @ Nagoya No7(17.04) - connpass</a> のまとめ。</p>

<p>つぶやきは <a href="https://togetter.com/li/1101299">Qt勉強会 Tokyo #46 + Nagoya # 7 つぶやきまとめ - Togetterまとめ</a> でまとめられています。</p>

<p>今月は先月から作り始めた、長文投稿専用Twitterクライアントの開発をしました。</p>

<p>レポジトリは ... <a href="https://github.com/sharkpp/Jugemutter">sharkpp/Jugemutter: 長文投稿専用クライアント「じゅげむったー」</a> です。</p>

<h2 id="%E3%81%AF%E3%81%98%E3%82%81%E3%81%AB">はじめに</h2>

<p>会場に到着する前のこと。</p>

<p>マクドナルドで昼食を食べ、いざ会場へ行かん、としたところで、外を見ると土砂降り，とまでは行かないけれど雨がザーザー<ruby><rb>OMG</rb><rp>(</rp><rt>おーまいがー</rt><rp>)</rp></ruby>。</p>

<p>慌ててコンビニで傘を買って行きましたとさ。
いや、まさか雨が降るとは思わず、折り畳み傘をカバンに入れてなかったのです。</p>

<p>会場に着くと、主催の <a href="https://twitter.com/nekomatu">@nekomatu</a> さん以外おらず。
もともと <a href="https://twitter.com/IoriAYANE">@IoriAYANE</a> さんも調子を崩して参加できず、だったので特に人数が少なかった。</p>

<p>しばらくして、最後の一人も到着で、もくもく開始。</p>

<blockquote class="twitter-tweet" data-lang="ja"><p lang="ja" dir="ltr">本日のおやつ <a href="https://twitter.com/hashtag/qtjp?src=hash">#qtjp</a> <a href="https://t.co/HhGVbaUAWk">pic.twitter.com/HhGVbaUAWk</a></p>&mdash; 夜は短し歩けよさめたすたす (@sharkpp) <a href="https://twitter.com/sharkpp/status/853103000910413824">2017年4月15日</a></blockquote>

<h2 id="%E3%82%84%E3%81%A3%E3%81%9F%E3%81%93%E3%81%A8">やったこと</h2>

<p>ドキュメントを見つつ、画面周りを作成。</p>

<p>QtCreator みたいに左側にツールバーを設置してみようと思うが、どうやらデザイナ上ではウィジェットとしてツールバーは設置できないようだ。
「<a href="http://stackoverflow.com/questions/26691010/how-to-change-toolbar-layout-in-qt-creator">How to change toolbar layout in Qt Creator? - Stack Overflow</a>」 を見ると、 <code>.ui</code> を直接触れって書いてあって、確かにできるんだけど... いいのかな？</p>

<p><code>QPlainTextEdit</code> の画面内の余白、
<img src="images/2017_0415_qplaintextedit_margin.png" />
を計算するうまい方法はないものかと、探すも見つからず。
<a href="http://doc.qt.io/qt-5/qwidget.html#contentsMargins">QWidget::contentsMargins()</a>はどうも違うらしい。</p>

<p><code>QLabel</code> の文字色は ... そうだ、そうだ。
<code>foregroundRole()</code> を使うんだ、とか。</p>

<p>調べながら、コードを書いているとなかなか進まないなぁ。</p>

<h2 id="%E6%88%90%E6%9E%9C">成果</h2>

<p>とりあえず、なんとなくの画面はできてきた感じ。</p>

<p><img src="/images/2017_0415_jugemutter.png" /></p>

<p>もうちょっとで文章を分割してつぶやけるところまて行ったけど、残念ながら時間切れ。</p>

<ul>
<li>分割して投稿</li>
<li>文章をWYSIWYGで編集＆プレビューしたい</li>
<li>投稿のレジューム機能</li>
<li>マルチアカウント管理</li>
</ul>

<p>とか、まだまだ先は長そうだ。</p>

<script async src="//platform.twitter.com/widgets.js" charset="utf-8"></script>

<h2 id="%E7%9F%A5%E3%81%A3%E3%81%9F%E3%81%93%E3%81%A8">知ったこと</h2>

<ul>
<li>Qt

<ul>
<li><a href="http://doc.qt.io/qt-5/properties.html"><code>Q_PROPERTY</code></a> は   <code>setProperty()</code> / <code>property()</code> でアクセスできるようにするマクロ。
何回か、同じ勘違いをやっているけど、 setter/getter を自動で作る機能ではない。</li>
<li>パスに日本語が含まれていると qmake が失敗するらしい、このご時世に。</li>
</ul></li>
<li>QtCreator

<ul>
<li>のソースエディタで、変数の後に <code>.</code> を入力すると <code>-&gt;</code> に変換される。便利！</li>
<li>デザイナ上でツールバーを削除してしまった場合は、オブジェクトインスペクタ？上の <code>QMainWIndow</code> を右クリックして「ツールバーを追加」で追加できる。</li>
<li><code>QDesignerCustomWidgetCollectionInterface</code> とか長ったらしい名前は <code>QDCW</code> と入力すれば補完される！
参考：<a href="http://qiita.com/task_jp/items/098319a33bd946955c0a#%E3%82%AD%E3%83%A3%E3%83%A1%E3%83%AB%E3%82%B1%E3%83%BC%E3%82%B9%E5%AF%BE%E5%BF%9C%E3%81%AE%E8%A3%9C%E5%AE%8C%E3%82%92%E6%9C%80%E5%A4%A7%E9%99%90%E3%81%AB%E6%B4%BB%E7%94%A8%E3%81%97%E3%82%88%E3%81%86">Qt Creator を便利に使いこなそう - Qiita # キャメルケース対応の補完を最大限に活用しよう</a></li>
<li><code>QString m_xxx;</code> などとメンバ変数を定義して、「リファクタリング」を実行すれば  <code>setXxx()</code> と <code>xxx()</code> つまり setter/getter の宣言と実装の枠組みが自動で追加される。
参考：* <a href="http://stackoverflow.com/questions/19729288/auto-generate-setters-getters-with-qtcreator">c++ - Auto-generate setters/getters with QTCreator? - Stack Overflow</a></li>
</ul></li>
</ul>

<h2 id="%E5%8F%82%E8%80%83">参考</h2>

<ul>
<li><a href="http://stackoverflow.com/questions/26691010/how-to-change-toolbar-layout-in-qt-creator">How to change toolbar layout in Qt Creator? - Stack Overflow</a></li>
<li><a href="http://stackoverflow.com/questions/18909507/qtextedit-sets-fix-line-height-paragraph-spacing">qt - QTextEdit sets fix line Height, paragraph spacing - Stack Overflow</a></li>
<li><a href="http://stackoverflow.com/questions/10317845/qplaintextedit-line-spacing">c++ - qplaintextedit line spacing - Stack Overflow</a></li>
<li><a href="http://qiita.com/task_jp/items/098319a33bd946955c0a#%E3%82%AD%E3%83%A3%E3%83%A1%E3%83%AB%E3%82%B1%E3%83%BC%E3%82%B9%E5%AF%BE%E5%BF%9C%E3%81%AE%E8%A3%9C%E5%AE%8C%E3%82%92%E6%9C%80%E5%A4%A7%E9%99%90%E3%81%AB%E6%B4%BB%E7%94%A8%E3%81%97%E3%82%88%E3%81%86">Qt Creator を便利に使いこなそう - Qiita</a></li>
<li><a href="http://stackoverflow.com/questions/2749798/qlabel-set-color-of-text-and-background">qt - QLabel: set color of text and background - Stack Overflow</a></li>
<li><a href="http://doc.qt.io/qt-5/properties.html">The Property System | Qt Core 5.8</a></li>
<li><a href="http://stackoverflow.com/questions/19729288/auto-generate-setters-getters-with-qtcreator">c++ - Auto-generate setters/getters with QTCreator? - Stack Overflow</a></li>
</ul>
]]></content>
        </entry>
            <entry>
            <title type="html"><![CDATA[技術書典2に行ってきた]]></title>
            <link href="http://www.sharkpp.net/blog/2017/04/10/techbookfest2.html"/>
            <updated>2017-04-10T23:50:00+00:00</updated>
            <id>http://www.sharkpp.net/blog/2017/04/10/techbookfest2.html</id>
            <content type="html"><![CDATA[<p>去年から始まった技術書オンリーな同人イベント、「<a href="https://techbookfest.org/event/tbf02">技術書典２</a>」が、昨日の 4月9日に開催されました。
今年も小雨が降る天気の中、去年の「技術書典」に引き続き行ってきました。
これは、そのレポート、もしくは戦果報告となります。</p>

<p><img src="/images/2017_0409_tf2.jpg" alt="会場前にて" /></p>

<h2 id="%E5%A7%8B%E3%82%81%E3%81%AB">始めに</h2>

<p>まず、去年のレポートは「<a href="/blog/2016/06/27/techbookfest.html">技術書典に行ってきた — さめたすたすのお家</a>
」です。</p>

<p>去年は、参加サークル数が 57 で、入場者数は、1400 名でした。
今年は、場所を通運会館から秋葉原UDXホールへ移し、サークル数200？、入場者数が3100名 (<a href="https://twitter.com/TechBooster/status/850983169037697024">※</a>)と、大幅に増えています。</p>

<h2 id="%E5%BD%93%E6%97%A5">当日</h2>

<p>時間ピッタリで行ったら、すでに長蛇の列ができていたという去年の反省を踏まえ、かつ、公式より</p>

<blockquote class="twitter-tweet" data-lang="ja"><p lang="ja" dir="ltr"><a href="https://twitter.com/hashtag/%E6%8A%80%E8%A1%93%E6%9B%B8%E5%85%B8?src=hash">#技術書典</a> 当日の一般入場についてお伝えします！ 11時より一般入場開始ですが、前回の反省を踏まえ秋葉原UDXでは10時より列形成開始の予定です。しかしながら、朝が一番人員繰りが厳しい時間帯なのでお手柔らかにお願いします。10時から列整理に割いている人員はわずかです…！</p>&mdash; TechBooster@超技術書典 (@TechBooster) <a href="https://twitter.com/TechBooster/status/849875400465371136">2017年4月6日</a></blockquote>

<p>というアナウンスがあったので、10時に会場へ到着するよう行動しました。
まあ、現実は非情ですでにそこそこ並んでいたわけですが。</p>

<blockquote class="twitter-tweet" data-lang="ja"><p lang="ja" dir="ltr"><a href="https://twitter.com/hashtag/%E6%8A%80%E8%A1%93%E6%9B%B8%E5%85%B82?src=hash">#技術書典2</a> 来たけど10時の時点でエラいことに。列に並んでいると、Androidがとか、gitが、slackが、ハッカソンが、ハンダが、抵抗がとか、技術系の会話がなされてるのは興味深い <a href="https://t.co/Fd3fe2ePzx">pic.twitter.com/Fd3fe2ePzx</a></p>&mdash; ともかく、さめたすたすには気をつけて。 (@sharkpp) <a href="https://twitter.com/sharkpp/status/850878524860669957">2017年4月9日</a></blockquote>

<p>で、列の待機中は、</p>

<p><a href="/images/2017_0409_tf2_map.png"><img src="/_thumbs/76f83f6553b2ac95822f722833c9c297-256x256.png" alt="探索マップ"></a></p>

<p>こんなマップを作っていたり、つぶやいたりして時間を潰していました。
途中、少し肌寒くトイレが近くて危なかったけど、何とかなった。</p>

<p>スタッフさんの「8ビットに並んで」とか、並んでいる人の、git がーとか、Rails がーとか、言う話を BGM で聞きつつ、あぁ、技術系のイベントなんだなぁと、しみじみ。</p>

<p>途中、スタッフさんが、赤い手提げバッグを持って回っているなぁと思ったら、どうやら「技術季報？？？」ってタイトルの要するにはパンフレットを配ってたので、もちろん購入。</p>

<blockquote class="twitter-tweet" data-lang="ja"><p lang="ja" dir="ltr"><a href="https://twitter.com/hashtag/%E6%8A%80%E8%A1%93%E6%9B%B8%E5%85%B82?src=hash">#技術書典2</a> まだ開場前だけどスタッフさんが購入しませんかってまわってきたのでもちろん挙手。技術季報（￥1000）の創刊号をゲットした！超会議の情報も載っているようだ <a href="https://t.co/HjPSDf6GAN">pic.twitter.com/HjPSDf6GAN</a></p>&mdash; ともかく、さめたすたすには気をつけて。 (@sharkpp) <a href="https://twitter.com/sharkpp/status/850885307771650048">2017年4月9日</a></blockquote>

<script async src="//platform.twitter.com/widgets.js" charset="utf-8"></script>

<p>まあ、これは後からでも会場内で買えるのは分かっていたけど、なんとなく先に購入。
手提げバッグだけの場合は、無料で貰えたようです。</p>

<p>そうこうするうちに、半歩前へ詰め、列が更に4列加わり、あ、これはエラいことになるなと。
どうやら最終的にビルを回り込んで反対側まで列が伸びていた様子。</p>

<p>そして、開場時間を超え最終確認に数分を掛けて、ついに開場。
８人✕２“行”ずつの入場で、自分は５番目ぐらいの“行”だったから、前に多分 70 人前後はいた計算。</p>

<p>会場内に入り、早速お目当てのサークルさんを駆け巡る。</p>

<p>戦利品は後ほどで。</p>

<p>知り合いのサークルさんに挨拶しつつ、新刊を買いつつ、本を、時には本以外を購入していると、お金に羽が生えたように財布から飛んで行きました。</p>

<p>ともかく、一時間ぐらい会場内にいたけど、入場制限をしていたため、多少は窮屈だったけどそこまでギュウギュウということはなかったので良かったかなぁ。
まあ、企業ブース前はもう少し広く取ってほしかったけど。
あとは、新刊落としました、とか、未だに来て射ないサークルがあったり、とか、まあそんな感じ。</p>

<p>グルッと一周りして、購入忘れがないことを確認。
知り合いのサークルさんに再度挨拶をして会場を出ました。</p>

<p>最後は、去年と同じように、秋葉原のヤマト運輸営業所で荷物を発送、身軽になって帰りましたとさ。</p>

<h2 id="%E6%88%A6%E5%88%A9%E5%93%81">戦利品</h2>

<p>今回の戦利品</p>

<p><img src="/images/2017_0409_tf2_booty.jpg" alt="戦利品" /></p>

<table>
<thead>
<tr>
  <th>ブース</th>
  <th>サークル名</th>
  <th>備考</th>
</tr>
</thead>
<tbody>
<tr>
  <td></td>
  <td>達人出版会</td>
  <td>「技術季報 2017 SPRING」※技術書典カタログ</td>
</tr>
<tr>
  <td>あ-10</td>
  <td>docker-machine（ドッカーマシーン）</td>
  <td>「技術者のためのやさしい数学」</td>
</tr>
<tr>
  <td>い-05</td>
  <td>空と月</td>
  <td>「兎と亀」</td>
</tr>
<tr>
  <td>い-10</td>
  <td>TOKYO FLIP-FLOP（トーキョーフリップフロップ）</td>
  <td>「フロッピーせんべい」「アクリル製フロッピー」２種</td>
</tr>
<tr>
  <td>う-11</td>
  <td>ひみつラボ</td>
  <td>「RustでGBAのプログラムを作ろう！」</td>
</tr>
<tr>
  <td>え-05</td>
  <td>NP-complete（エヌピーコンプリート）</td>
  <td>「WEBASSEMBLY USUI BOOK</td>
</tr>
<tr>
  <td>え-28</td>
  <td>理ろぐ</td>
  <td>「Qt Quickを使いこなすクロスプラットフォームUIプログラミング2」</td>
</tr>
<tr>
  <td>お-05</td>
  <td>イプシロン</td>
  <td>「立体写真のつくりかた解説」</td>
</tr>
<tr>
  <td>お-12</td>
  <td>めがねをかけるんだ（メガネヲカケルンダ）</td>
  <td>「TensorFlowはじめました」</td>
</tr>
<tr>
  <td>き-10</td>
  <td>ラムダノート株式会社</td>
  <td>「Ruby でつくる Ruby」</td>
</tr>
<tr>
  <td>き-15</td>
  <td>株式会社ブックウォーカー</td>
  <td>「かんたん電子書籍」※無料配布</td>
</tr>
</tbody>
</table>

<p>※敬称略</p>

<h2 id="%E3%81%BE%E3%81%A8%E3%82%81">まとめ</h2>

<p>今回の教訓やメモなど</p>

<ul>
<li>公式のアナウンスをよく見ておこう。</li>
<li>トイレは事前に済ませること。</li>
<li>チラシがぐちゃぐちゃになるから A4 クリアファイルを持って行こう</li>
<li>来年もあれば行こう（超会議はパスしました）</li>
</ul>
]]></content>
        </entry>
            <entry>
            <title type="html"><![CDATA[Qt Network Authorization を使った Twitter API の利用]]></title>
            <link href="http://www.sharkpp.net/blog/2017/03/25/twitter-api-using-qt-network-authorization.html"/>
            <updated>2017-03-25T22:59:00+00:00</updated>
            <id>http://www.sharkpp.net/blog/2017/03/25/twitter-api-using-qt-network-authorization.html</id>
            <content type="html"><![CDATA[<p>さて、先月に続いて今月も参加した <a href="https://qt-users.connpass.com/event/52009/">Qt 勉強会 @ Nagoya No6(17.03)</a> のまとめ。</p>

<p>今回はいつもに増して短め。</p>

<p><a href="https://github.com/sharkpp/Jugemutter">sharkpp/Jugemutter: 長文投稿専用クライアント「じゅげむったー」</a> で成果物を公開しています。</p>

<h2 id="%E3%81%AF%E3%81%98%E3%82%81%E3%81%AB">はじめに</h2>

<p>まずは、クラスの実装をしていきます。</p>

<p><a href="https://doc-snapshots.qt.io/qt5-5.8/examples-qtnetworkauth.html">Qt Network Authorization Examples | Qt Network Authorization 5.8</a> に Twitter認証のサンプルがあるので、それを参考にしつつ <a href="https://github.com/sharkpp/NetworkStorageAccessSample">NetworkStorageAccessSample</a> で実装した認証済みトークンの保存処理を実装していきました。</p>

<p>あ、<a href="http://www.sharkpp.net/blog/2017/01/28/first-impression-qt-network-authorization.html">はじめての Qt Network Authorization</a> も参考にしています。</p>

<p>そろそろ、だれか Qt Network Authorization を触った記事を書いてくれないだろうか？</p>

<h2 id="%E3%83%9D%E3%82%A4%E3%83%B3%E3%83%88">ポイント</h2>

<p>実装するクラスは <code>QOAuth1</code> クラスから派生します。</p>

<p>これは、認証した後のトークンの復帰処理で <code>setStatus(QAbstractOAuth::Status::Granted)</code> の実行が必要となります。
ただし、該当のメソッドが <code>protected</code> として実装されているので、 <code>QOAuth1</code> クラスから派生する必要があるのです。</p>

<p>APIの各エンドポイントを設定</p>

<p>まあ、この辺はサンプルと同じです。</p>

<pre><code class="cpp">setTemporaryCredentialsUrl(QUrl("https://api.twitter.com/oauth/request_token"));
setAuthorizationUrl(QUrl("https://api.twitter.com/oauth/authenticate"));
setTokenCredentialsUrl(QUrl("https://api.twitter.com/oauth/access_token"));
</code></pre>

<p>OAuth の認証を、ブラウザを利用するために、</p>

<pre><code class="cpp">setReplyHandler(new QOAuthHttpServerReplyHandler(this));
</code></pre>

<p>としますが、これを実行するとポートを開きに行くので、必要な時のみポートを開くか PIN 認証にする方が良いかもしれません。</p>

<p>この時、</p>

<pre><code class="cpp">connect(this, &amp;QAbstractOAuth::authorizeWithBrowser,
        this, &amp;Twitter::handleAuthorizeWithBrowser);
</code></pre>

<p>としてシグナルをスロットと関連づけて、</p>

<pre><code class="cpp">void Twitter::handleAuthorizeWithBrowser(QUrl url)
{
    QDesktopServices::openUrl(url);
}
</code></pre>

<p>のような感じで実装することで、ブラウザで認証することができます。</p>

<p><code>grant()</code> を呼び出すことで認証開始するので、適当なメソッドでラップします。</p>

<p>認証後は、</p>

<pre><code>connect(this, &amp;QOAuth1::granted, this, &amp;Twitter::authenticated);
</code></pre>

<p>とすることで、 <code>authenticated()</code> を認証時に呼ばされるシグナルとして登録できます。</p>

<p>つぶやくには</p>

<pre><code>    QUrl url("https://api.twitter.com/1.1/statuses/update.json");
    QUrlQuery query(url);
    query.addQueryItem("status", "hogehoge");
    url.setQuery(query);
    QNetworkReply *reply = post(url);
    connect(reply, &amp;QNetworkReply::finished, this, &amp;Twitter::tweetFinished);
</code></pre>

<p>みたいな感じです。</p>

<p>まあ、後から振り返ると割と簡単な部類になると思うけど、いろいろハマってしまいました。</p>

<h2 id="%E3%81%84%E3%82%8D%E3%81%84%E3%82%8D%E5%A4%B1%E6%95%97%E8%AB%87">いろいろ失敗談</h2>

<p>なぜか今回はハマることハマること。</p>

<p>ハマった所をメモとして残しておきます。</p>

<ul>
<li><code>setClientIdentifier()</code> / <code>setClientSharedSecret()</code> と <code>token()</code> / <code>tokenSecret()</code> をなぜかとり間違える
なぜ間違えたし。</li>
<li>設定したはずの、Consumer Key / Consumer Secret が設定されていなくて、<code>QOAuthOobReplyHandler::networkReplyFinished: Host requires authentication</code> とデバッグ主力に出る。
<code>setModifyParametersFunction</code> で今の Stage とライブラリのソースをにらめっこで原因を見つけた。</li>
<li>呟く内容が別の変数を参照していたために空っぽで <code>Missing required parameter: status.</code> と返答が返ってくる。
うん、たしかに設定されてなかったね。</li>
<li><del><code>connect()</code> でラムダ式を使うとなぜか <code>qobject_cast&lt;QNetworkReply*&gt;(sender())</code> が <code>nullptr</code>。</del>
<del>横着せずに 別メソッドを作って設定すると大丈夫だった。何で？</del>
後で試したら大丈夫だった。</li>
</ul>

<p>と、こんな感じ。</p>

<p>結局、時間内になんとかつぶやきを書き込むまでは行けたけど、先のハマりがなければ、もう少し行けたかもしれない。</p>

<h2 id="%E3%83%84%E3%82%A4%E3%83%83%E3%82%BF%E3%83%BC%E3%81%AE%E3%82%A2%E3%83%97%E3%83%AA%E3%82%B1%E3%83%BC%E3%82%B7%E3%83%A7%E3%83%B3%E7%99%BB%E9%8C%B2">ツイッターのアプリケーション登録</h2>

<p><a href="https://apps.twitter.com/app/new">Create an application | Twitter Application Management</a> でアプリケーションを登録できる。</p>

<p>ただし、電話番号を認証していないと <ruby><rb>You must add your mobile phone to your Twitter profile before creating an application.</rb><rp>(</rp><rt>アプリケーションを作成する前に携帯電話を Twitter プロファイルに追加する必要があります。</rt><rp>)</rp></ruby> って怒られる。</p>

<p>一度登録したら、電話番号の登録を解除しても、登録内容の変更とかは問題なくできる模様。</p>

<p>で、登録時、SMSで飛んでくるトークンを何回入力しても弾かれるので、途方にくれてたけど <a href="http://absg.hatenablog.com/entry/2015/01/26/163057">twitterの電話番号認証がうまくいかないとき - やったこと</a> を見たらリロードすれば大丈夫のようなので試して見たらできた。
何じゃそりゃ？</p>

<p>まあともかく、アプリケーションを登録したら、Consumer Key / Consumer Secret を確認しアプリケーションに設定。</p>

<p>これでOK。</p>

<h2 id="%E5%8F%82%E8%80%83">参考</h2>

<ul>
<li><a href="http://www.sharkpp.net/blog/2017/01/28/first-impression-qt-network-authorization.html">はじめての Qt Network Authorization — さめたすたすのお家</a></li>
<li><a href="https://doc-snapshots.qt.io/qt5-5.8/examples-qtnetworkauth.html">Qt Network Authorization Examples | Qt Network Authorization 5.8</a></li>
<li><a href="https://dev.twitter.com/docs">Twitter Developer Documentation — Twitter Developers</a></li>
<li><a href="https://github.com/sharkpp/NetworkStorageAccessSample">sharkpp/NetworkStorageAccessSample: Qt Network Authorization "Network storage access" sample</a></li>
<li><a href="https://syncer.jp/Web/API/Twitter/REST_API/POST/statuses/update/">POST statuses/update - ツイートを投稿する</a> ※情報が古いようだ</li>
<li><a href="http://westplain.sakuraweb.com/translate/twitter/Documentation/REST-APIs/Public-API/POST-statuses-update.cgi">POST statuses/update - Twitter 開発者ドキュメント 日本語訳</a></li>
<li><a href="https://dev.twitter.com/rest/tools/console">API Console — Twitter Developers</a></li>
<li><a href="http://absg.hatenablog.com/entry/2015/01/26/163057">twitterの電話番号認証がうまくいかないとき - やったこと</a></li>
</ul>
]]></content>
        </entry>
            <entry>
            <title type="html"><![CDATA[Qt Network Authorization を使った Dropbox API　の利用]]></title>
            <link href="http://www.sharkpp.net/blog/2017/02/28/dropbox-api-using-qt-network-authorization.html"/>
            <updated>2017-02-28T01:45:00+00:00</updated>
            <id>http://www.sharkpp.net/blog/2017/02/28/dropbox-api-using-qt-network-authorization.html</id>
            <content type="html"><![CDATA[<p>さて、今月も参加した <a href="https://qt-users.connpass.com/event/50191/">Qt 勉強会 @ Nagoya No5(17.02)</a> のまとめ。</p>

<p>※ <a href="https://togetter.com/li/1092293">Qt 勉強会 @ Nagoya No5(17.02) - Togetterまとめ</a> で当日のつぶやきがまとめられています。</p>

<p>今回も、前回に引き続き、<a href="https://doc.qt.io/qt-5/qtnetworkauth-index.html">Qt Network Authorization</a> を色々さわって見ることにしました。</p>

<p>そして、翌日へとオーバーランをしつつ <a href="https://github.com/sharkpp/NetworkStorageAccessSample">sharkpp/NetworkStorageAccessSample: Qt Network Authorization "Network storage access" sample</a> を作りました。</p>

<p>とりあえず、今時点では、Dropbox への認証と、ファイルのアップロードができます。</p>

<h2 id="dropbox-%E3%81%B8%E3%81%AE%E3%82%A2%E3%83%97%E3%83%AA%E3%82%B1%E3%83%BC%E3%82%B7%E3%83%A7%E3%83%B3%E3%81%AE%E7%99%BB%E9%8C%B2">Dropbox へのアプリケーションの登録</h2>

<p>何はともあれまずはここからです。</p>

<p><a href="https://www.dropbox.com/developers">Developers - Dropbox</a> から "Create your app" を、そして <ruby><rb>Choose the type of access you need</rb><rp>(</rp><rt>必要なアクセスの種類を選択する</rt><rp>)</rp></ruby> は、 "App folder" を選び、アプリケーションを登録します。</p>

<p><a href="http://qiita.com/kz_morita/items/3ae70b10351a48a806eb">スタンドアロンアプリでDropbox APIを使ってaccess_tokenを取得する - Qiita</a> が参考になります。</p>

<p>API の詳細は <a href="https://www.dropbox.com/developers/documentation/http/documentation">HTTP - Developers - Dropbox</a> を。</p>

<h2 id="%E8%BA%93%E3%81%84%E3%81%9F%E3%81%A8%E3%81%93%E3%82%8D">躓いたところ</h2>

<p>Qt Network Authorization で Dropbox API へとアクセスしようと頑張りましたが、 Qt Network Authorization がテクノロジープレビューなためなのか、 Dropbox API が特殊なのか、はたまた両方なのか、現状ハマりどころが多い気がします。</p>

<p>OAuth 1 での Tumblr API アクセスは簡単だったんだけどなぁ、と。</p>

<h3 id="%E8%AA%8D%E8%A8%BC%E5%BE%8C%E3%81%AE%E5%8B%95%E4%BD%9C%E3%82%92-oob-%E6%96%B9%E5%BC%8F%E3%81%AB%E3%81%97%E3%81%9F%E3%81%84%E3%81%8C...">認証後の動作を oob 方式にしたいが...</h3>

<p>色々試して、一応 oob 方式での認証ができた。</p>

<p>もう少し調べたら Qt Network Authorization の redditclient サンプルで、コールバックによる認証を扱っていたのでそれを参考にすればできそうな感じではある。
ただ、Dropbox では、コールバックアドレスを厳密に設定するように求めているようなので、あらかじめ <code>http://localhost:12345/</code> や <code>http://localhost:12346/</code> など何個かのローカルアドレスを設定しておき、その中から開けるポートを開いて認証する、ということをすれば多分動くのではないかと思う。</p>

<p>認証を oob (Out-of-band 要するに pin で認証) で行うためには redirect_uri に <code>oob</code> とか空文字を設定するのではなく、省略しないとダメだった。
API ドキュメントをよく読むと確かに書いてあったけど、見逃していたorz</p>

<p><code>QOAuthOobReplyHandler::callback()</code> メソッドで <code>redirect_uri</code> の値が指定できるが、省略はできないようなので、</p>

<pre><code class="cpp">    setModifyParametersFunction([&amp;](Stage stage, QVariantMap* data) {
        if (Stage::RequestingAuthorization == stage || // 認証要求開始
            Stage::RequestingAccessToken   == stage)   // アクセストークン要求開始
        {
            data-&gt;remove(Key::redirectUri);
        }
    });
</code></pre>

<p>と、このように <code>QAbstractOAuth::setModifyParametersFunction()</code> メソッドでパラメータを削除することで対応。</p>

<h2 id="pin-%E3%81%AE%E8%A8%AD%E5%AE%9A%E3%81%AF%E3%81%A9%E3%81%86%E3%81%99%E3%82%8C%E3%81%B0%EF%BC%9F">Pin の設定はどうすれば？</h2>

<p>ソースを読んでも、特に Pin を設定するメソッドとかなさそうだったので、自分でシグナルを発行してあげることにした。</p>

<pre><code class="cpp">    void setPinCode(const QString&amp; code)
    {
        QVariantMap data;
        data.insert(Key::error, "");
        data.insert(Key::code, code); // code = access token
        data.insert(Key::state, currentState);
        Q_EMIT callbackReceived(data);
    }
</code></pre>

<p>こんな感じで <code>callbackReceived</code> シグナルに適当なパラメータをセットするとうまくいった。</p>

<h2 id="%E3%81%AA%E3%81%9C-%22content-type%3A-text%2Fjavascript%22-%E3%81%AA%E3%81%AE%EF%BC%9F">なぜ "Content-Type: text/javascript" なの？</h2>

<p>アクセストークンを取得するためのエンドポイント <code>https://api.dropboxapi.com/oauth2/token</code> の結果がなんと <code>Content-Type: text/javascript</code> で返ってきていた。</p>

<p>そう、 <code>Content-Type: application/json</code> ではなく。</p>

<p>API ドキュメントを確認すると、他の API では、 <code>Content-Type: application/json</code> を返すのにもかかわらず、である。</p>

<p>まあ、ともかく Qt Network Authorization のソースを見ると、<code>Content-Type: text/javascript</code> との比較は埋め込みでどうにもならないので、</p>

<p><code>QNetworkReply</code> を派生して</p>

<pre><code>    void fixContentType()
    {
        setHeader(QNetworkRequest::ContentTypeHeader, "application/json");
    }
</code></pre>

<p>のようなメソッドを追加し、無理やりキャストして</p>

<pre><code>    void networkReplyFinished(QNetworkReply *reply)
    {
        DropboxOAuthOobReply *reply_ = (DropboxOAuthOobReply *)reply;
        reply_-&gt;fixContentType(); // fix content-type, "text/javascript" to "application/json"
        QOAuthOobReplyHandler::networkReplyFinished(reply);
    }
</code></pre>

<p>このように <code>networkReplyFinished()</code> のタイミングで実行することで対応した。</p>

<p>ただ、コンパイラの実装によってはNGかもしれないので、 Qt Network Authorization 側で対応しないとダメだなーと。</p>

<h2 id="%E3%81%AA%E3%81%9C%E3%80%81%E3%82%AF%E3%82%A8%E3%83%AA%E3%81%97%E3%81%8B%E8%A8%AD%E5%AE%9A%E3%81%A7%E3%81%8D%E3%81%AA%E3%81%84%E3%81%AE%E3%81%A7%E3%81%99%E3%81%8B%EF%BC%9F">なぜ、クエリしか設定できないのですか？</h2>

<p>認証ができて、さあ API を呼び出してみよう、と思ったところで、 Dropbox API は REST API を捨てたようで、全ての呼び出しが POST メソッド、必要なパラメータは <code>Dropbox-API-Arg</code> ヘッダ、と特殊なことをしていたために、<code>QAbstractOAuth::post()</code> では処理が足りなかった。</p>

<p>そういう訳なので、自分でヘッダとかポストデータとかを設定できるようなメソッドを実装した。</p>

<h2 id="%E3%83%88%E3%83%BC%E3%82%AF%E3%83%B3%E3%81%AE%E4%BF%9D%E5%AD%98%E3%81%A8%E5%BE%A9%E5%85%83">トークンの保存と復元</h2>

<p>これはハマりどころではないですが、前回できなかった認証後の状態の保存処理も実装しました。</p>

<p>保存時は、<code>QOAuth2AuthorizationCodeFlow::token()</code> の結果を返すだけです。</p>

<pre><code class="cpp">const QString Dropbox::serialize() const
{
    if (QAbstractOAuth::Status::Granted != status()) {
        return "";
    }
    return token();
}
</code></pre>

<p>読み込み時は、<code>setToken()</code> と <code>setStatus()</code> に <code>QAbstractOAuth::Status::Granted</code> を設定して、擬似的に認証済み、と状態を変更します。</p>

<pre><code class="cpp">void Dropbox::deserialize(const QString&amp; token)
{
    if (token.isEmpty()) {
        return;
    }

    setToken(token);
    setStatus(QAbstractOAuth::Status::Granted);
}
</code></pre>

<p>この時、忘れずに認証したよ、のシグナルを定義しているのであれば呼ぶ必要があります。</p>

<h3 id="%E3%81%9D%E3%81%AE%E4%BB%96">その他</h3>

<p>https なので通信内容を横から解析ができないので、結構面倒。
どうにか、中間者攻撃風に途中で通信を解析できる方法を作らないと結構デバッグが面倒。</p>

<h2 id="%E7%9B%AE%E6%A8%99">目標</h2>

<p>とりあえず、Dropbox の アップロードはできたので、ダウンロードや、削除。
<code>redirect_uri</code> を指定しての認証や、 Box などの別のオンラインストレージへのアクセスなどを追加していきたいな、と。</p>

<h2 id="%E5%8F%82%E8%80%83">参考</h2>

<ul>
<li><a href="http://www.slideshare.net/ginpei_jp/dropbox-api-39190004">Dropbox APIさわってみた</a> ※情報が古いっぽい</li>
<li><a href="https://gist.github.com/voluntas/fe9394ce56ef4a305aa14168c09a3991">Dropbox API v2 仕様まとめ · GitHub</a></li>
<li><a href="https://www.dropbox.com/developers/documentation/http/documentation">HTTP - Developers - Dropbox</a></li>
</ul>
]]></content>
        </entry>
            <entry>
            <title type="html"><![CDATA[はじめての Qt Network Authorization]]></title>
            <link href="http://www.sharkpp.net/blog/2017/01/28/first-impression-qt-network-authorization.html"/>
            <updated>2017-01-28T16:50:00+00:00</updated>
            <id>http://www.sharkpp.net/blog/2017/01/28/first-impression-qt-network-authorization.html</id>
            <content type="html"><![CDATA[<p>先日、ちょうど「<a href="https://mag.osdn.jp/17/01/25/161000">設定を統合した「Qt 5.8」が登場 | OSDN Magazine</a>」の記事が目に入り、ふんふんと読んでいたところで、Qt Lite も気になりましたが、それよりも OAuth 2 と OAuth 2 に対応した <a href="https://doc.qt.io/qt-5/qtnetworkauth-index.html">Qt Network Authorization</a> が技術プレビューで追加、と書かれていたので軽く試して見ました。</p>

<p>と言うことで、新しくなってから２回目の参加になる <a href="https://qt-users.connpass.com/event/48608/">Qt 勉強会 @ Nagoya No4(17.01)</a> は、Qt Network Authorization を触って見ることにしました。</p>

<p>※ <a href="https://togetter.com/li/1092291">Qt 勉強会 @ Nagoya No4(17.01) - Togetterまとめ</a> で当日のつぶやきがまとめられています。</p>

<p>結論を先に言うと、 <strong>Qt Network Authorization</strong> は簡単に OAuth 認証をアプリケーションへ組み込めるようです。</p>

<p>気になる点としては、</p>

<ul>
<li>ドキュメントが少ない</li>
<li>認証が通った後「Callback received. Feel free to close this page.」と書かれたページがブラウザで開いたままになる。

<ul>
<li>これは自動で閉じてほしい</li>
</ul></li>
<li>コールバックを受け取るためにポートを自動で開くのでファイヤーウォールなどでブロックしていると失敗する</li>
</ul>

<p>などですが、まあ現状は技術プレビューの段階なので正式版までになんとかなっていてほしいなと。</p>

<h2 id="%E3%81%BE%E3%81%9A%E5%A7%8B%E3%82%81%E3%81%AB">まず始めに</h2>

<p>まあ、大前提として、Qt Network Authorization を利用するには Qt 5.8 以降が必要となります。</p>

<p>次に <a href="http://doc.qt.io/qt-5/qtnetworkauth-index.html">Qt Network Authorization 5.8</a> を参考に、</p>

<p>.pro に</p>

<pre><code>QT += network networkauth
</code></pre>

<p>と追加しましょう。</p>

<p>あとは、 Twitter なり Tumblr なりなんなりへ、アプリケーションを登録して OAuth Consumer Key と Secret Key を取得しておきましょう。
この時、コールバックURLを書く必要がある場合は、適当なアドレスを書いておけば問題ありません。</p>

<h2 id="%E6%B5%81%E3%82%8C">流れ</h2>

<p>最低限のプログラムの流れです。</p>

<p>OAuth 1.x なら QOAuth1 クラスを基底クラスにして処理を実装していけば良いようです。</p>

<p>今回は、 Tumblr で試していたので OAuth 1.0a 対応の QOAuth1 を触りますが、 QOAuth2 でも多分大体同じだと思います。</p>

<p>ただ、 QOAuth1 のドキュメントがないので <a href="http://doc.qt.io/qt-5/qabstractoauth.html">QAbstractOAuth</a> クラスのドキュメントで我慢しましょう。</p>

<h3 id="url%E3%81%AE%E7%99%BB%E9%8C%B2">URLの登録</h3>

<p>とりあえず３種類のURLを登録する必要があります。</p>

<table>
<thead>
<tr>
  <th>メソッド</th>
  <th>URL例</th>
  <th>説明</th>
</tr>
</thead>
<tbody>
<tr>
  <td>setTemporaryCredentialsUrl</td>
  <td>https://api.twitter.com/oauth/request_token<br/>https://www.tumblr.com/oauth/request_token</td>
  <td>トークンの要求</td>
</tr>
<tr>
  <td>setAuthorizationUrl</td>
  <td>https://api.twitter.com/oauth/authenticate<br/>https://www.tumblr.com/oauth/authorize</td>
  <td>認証</td>
</tr>
<tr>
  <td>setTokenCredentialsUrl</td>
  <td>https://api.twitter.com/oauth/access_token<br/>https://www.tumblr.com/oauth/access_token</td>
  <td>アクセストークン取得</td>
</tr>
</tbody>
</table>

<p>いずれも <code>QAbstractOAuth</code> クラスの public メンバメソッドです。</p>

<p>ここに変なのを指定すると <code>QOAuthOobReplyHandler::networkReplyFinished: Protocol "" is unknown</code> と言われたりします。</p>

<h3 id="consumer-key-%E3%81%A8-secret-key-%E3%81%AE%E6%8C%87%E5%AE%9A">Consumer Key と Secret Key の指定</h3>

<p>OAuth Consumer Key と Secret Key を指定します。
これ自体の扱いはいろいろ厄介なのですが、とりあえずそれは置いておきます。</p>

<p><code>QOAuth1.setClientCredentials()</code> に <code>QPair&lt;QString, QString&gt;</code> で指定します。</p>

<p><code>QPair&lt;QString, QString&gt;().first</code> は Consumer Key で</p>

<p><code>QPair&lt;QString, QString&gt;().second</code> は Secret Key です。</p>

<h3 id="%E8%AA%8D%E8%A8%BC%E8%A6%81%E6%B1%82">認証要求</h3>

<p>ここまで設定できたら <code>grant()</code> を呼ぶことで、認証手続きが開始されます。</p>

<h3 id="%E3%83%96%E3%83%A9%E3%82%A6%E3%82%B6%E3%81%A7%E3%81%AE%E8%AA%8D%E8%A8%BC%E8%A6%81%E6%B1%82%E3%81%AE%E3%82%B7%E3%82%B0%E3%83%8A%E3%83%AB">ブラウザでの認証要求のシグナル</h3>

<p><code>grant()</code> を呼ぶと <code>QAbstractOAuth::authorizeWithBrowser</code> シグナルが飛んでくるので、あらかじめスロットで受け取れるようにしておきましょう。</p>

<p><a href="http://doc.qt.io/qt-5/qabstractoauth.html#authorizeWithBrowser">QAbstractOAuth::authorizeWithBrowser</a> の中で引数に指定されたURLをウェブブラウザで開くことでいつも利用しているブラウザを用いた認証ができるような仕組みになっています。</p>

<p>ただ、この処理を実現するために、アプリケーション自身でポートをリッスンし、そのアドレスをコールバックとして指定しているようで、ファイヤーウォールなどでブロックされる可能性があるので注意が必要です。</p>

<h3 id="%E8%AA%8D%E8%A8%BC%E5%AE%8C%E4%BA%86%E3%81%AE%E3%82%B7%E3%82%B0%E3%83%8A%E3%83%AB">認証完了のシグナル</h3>

<p>認証が完了すると <a href="http://doc.qt.io/qt-5/qabstractoauth.html#grant">QOAuth1::granted</a> シグナルが飛ぶので、必要に応じてメッセージを出すなり、UIを有効化させるなりで利用できると思います。</p>

<p>一応、認証後にはアクセストークンも取れるので、それを保存しておけば次回以降は認証が必要なくなると思いますが、すこし試したところうまくいきませんでした。</p>

<h3 id="api%E3%82%92%E5%91%BC%E3%81%B6">APIを呼ぶ</h3>

<p>ここまできたら、後は簡単で <code>QAbstractOAuth</code> に含まれるメンバメソッドの get() / head() / post() を呼ぶだけで、非同期でコンテンツが取得できます。</p>

<p>要求アドレスへ <code>api_key</code> などというパラメータをユーザーがつける必要はないので扱いやすいと思います。</p>

<h2 id="%E3%81%BE%E3%81%A8%E3%82%81">まとめ</h2>

<ul>
<li><strong>Qt Network Authorization</strong> は簡単に OAuth 認証をアプリケーションへ組み込めそう</li>
<li>サンプルがあるからまあなんとかなりそう</li>
<li>ツイッター連携とか実装するのが簡単になるね！</li>
</ul>

<h2 id="%E5%8F%82%E8%80%83">参考</h2>

<ul>
<li><a href="https://doc.qt.io/qt-5/qtnetworkauth-index.html">Qt Network Authorization 5.8</a></li>
<li><a href="https://doc-snapshots.qt.io/qt5-5.8/examples-qtnetworkauth.html">Qt Network Authorization Examples | Qt Network Authorization 5.8</a></li>
<li><a href="http://code.qt.io/cgit/qt/qtnetworkauth.git/">qt/qtnetworkauth.git - Qt Network Authenticators; QtOAuth in particular</a></li>
<li><a href="http://www.sharkpp.net/blog/2014/03/30/oauth-providers-list.html">oAuth 認証を提供しているサービスをまとめてみました — さめたすたすのお家</a></li>
</ul>
]]></content>
        </entry>
            <entry>
            <title type="html"><![CDATA[HAPPY NEW YEAR 2017]]></title>
            <link href="http://www.sharkpp.net/blog/2017/01/01/happy-new-year-2017.html"/>
            <updated>2017-01-01T10:00:00+00:00</updated>
            <id>http://www.sharkpp.net/blog/2017/01/01/happy-new-year-2017.html</id>
            <content type="html"><![CDATA[<p>明けましておめでとうございます。</p>

<p>ほむぺ開設 13 年目、になるのかな？
今年一年よろしくお願いします。</p>

<p>去年は、コンテストに久しぶりにし応募したので、今年も応募したいなと。</p>

<p>では、今年の目標をば。</p>

<h2 id="%E7%9B%AE%E6%A8%99">目標</h2>

<ul>
<li>ホムペの更新の仕組みが壊れたっぽいのでなんとかする</li>
</ul>

<p>これは、緊急の課題。</p>

<p>どうも、レンタル鯖のプログラムの更新でアップデートがうまくいかなくなったようなので、修正するか、いっそのこと GitHub Pages に移行してもよいかもしれない。</p>

<p>あとは、</p>

<h3 id="hsp%E9%96%A2%E9%80%A3">HSP関連</h3>

<ul>
<li><a href="http://hsp-users.jp/">HSP関連サイト</a>の定期的な更新。</li>
<li>HSPコンテスト作品の製作！</li>
<li>Advent Calendar の開催</li>
<li>macOSで利用できるドキュメントビューアの作成</li>
</ul>

<h3 id="%E3%82%A2%E3%83%97%E3%83%AA%E9%96%A2%E9%80%A3">アプリ関連</h3>

<ul>
<li><a href="https://github.com/sharkpp/TimestampFreezer">TimestampFreezer</a> のバイナリ公開</li>
<li>バイナリエディタを作りたい</li>
<li>macOS用のGUI Diff が欲しい</li>
</ul>

<h3 id="%E3%81%9D%E3%81%AE%E4%BB%96">その他</h3>

<ul>
<li>素材関係をもう少し整理</li>
<li>音素材の公開</li>
</ul>

<p>、、、できるかなぁ？</p>

<p>てなわけで、よろしくお願いいたします。</p>
]]></content>
        </entry>
            <entry>
            <title type="html"><![CDATA[大晦日@2016]]></title>
            <link href="http://www.sharkpp.net/blog/2016/12/31/new-years-eve-2016.html"/>
            <updated>2016-12-31T12:00:00+00:00</updated>
            <id>http://www.sharkpp.net/blog/2016/12/31/new-years-eve-2016.html</id>
            <content type="html"><![CDATA[<h2 id="1-%E5%B9%B4%E3%82%92%E6%8C%AF%E3%82%8A%E8%BF%94%E3%82%8A">1 年を振り返り</h2>

<p>皆さま、今年は良い年だったでしょうか？
それとも、悪い年だったでしょうか？</p>

<p>私は、まあぼちぼちと言ったところでしょうかね。</p>

<p>悪かった人は、「<a href="http://hsproom.me/program/view/?p=146">除夜の鐘</a>」を突いて見るのはどうでしょうか？</p>

<p>と言うことで、今年の反省をば。</p>

<h2 id="%E7%B5%90%E6%9E%9C">結果</h2>

<p>まずは、今年の正月 <a href="/blog/2016/01/01/happy-new-year-2016.html">HAPPY NEW YEAR 2016</a> に掲げた目標です。</p>

<ul>
<li><a href="http://hsp-users.jp/">HSP関連サイト</a>の立ち上げ</li>
<li>HSPコンテスト作品の製作</li>
<li><a href="https://github.com/sharkpp/TimestampFreezer">TimestampFreezer</a> のバイナリ公開</li>
<li>バイナリエディタ作りたい</li>
<li>素材関係をもう少し整理</li>
<li>音素材の公開</li>
</ul>

<p>と、こんな感じ。</p>

<p>「<a href="http://hsp-users.jp/">HSP関連サイト</a>の立ち上げ」は、とりあえず無事？立ち上げましたが、ちょっと色々忙しくて、コンテスト期間中の更新などできなかったのがダメでしたね。
活動報告などは <a href="https://twitter.com/hsp_users_jp">@hsp_users_jp</a> や <a href="https://github.com/hsp-users-jp">GitHub</a> でしています。</p>

<p>「HSPコンテスト作品の製作」の方は、<a href="/blog/2016/10/31/entry-the-HSP-program-contest-2016.html">HSP プログラムコンテスト 2016 へ応募しました(５年ぶり)</a>の通り、久しぶりに応募し、「（有）テクノキット賞」を<a href="http://hsp.tv/contest2016/cntst_fresult.html#1274">受賞</a>しました。
Wineで開発完了を整えたのが功を奏したのかもしれないです。</p>

<p>他には、<a href="/blog/2016/">アーカイブ - 2016</a> にある諸々や、「<a href="https://togetter.com/li/1058301">Qt 勉強会 @ Nagoya No3 #qtjp - Togetterまとめ</a>」に出席してみたり、お酒美味しそうだなーと「<a href="https://togetter.com/li/998224">よんた@keita44_f4 さんの日本酒の感想ツイートまとめ</a>」を作ってみたり、「<a href="http://qiita.com/advent-calendar/2016/hsp">Hot Soup Processor Advent Calendar 2016</a>」を主催してみたりとかして遊んでいました。</p>

<p>まあ、まとめると</p>

<ul>
<li>Sculpin</li>
<li>HSP + Wine</li>
<li>Qt</li>
</ul>

<p>ぐらいかな？</p>

<h2 id="%E5%8F%8D%E7%9C%81">反省</h2>

<p>とりあえず、<a href="http://hsp-users.jp/">hsp-users.jp</a>を立ち上げたら立ち上げたで途中でほったらかしはダメですね。</p>

<p>あとは、いい加減素材関係や途中槍のソフトをなんとかしたいです。</p>

<p>来年はもうちょっとなんとかしたいな、と言うあたりで今年の反省会終了です。</p>

<p>来年もよろしくお願いしますです。</p>
]]></content>
        </entry>
            <entry>
            <title type="html"><![CDATA[Hot Soup Processor Advent Calendar 2016 まとめ]]></title>
            <link href="http://www.sharkpp.net/blog/2016/12/25/hsp-advent-calendar-2016-25th-day.html"/>
            <updated>2016-12-25T15:40:00+00:00</updated>
            <id>http://www.sharkpp.net/blog/2016/12/25/hsp-advent-calendar-2016-25th-day.html</id>
            <content type="html"><![CDATA[<p>こんにちは、こんばんは。</p>

<p><a href="http://qiita.com/advent-calendar/2016/hsp">Hot Soup Processor Advent Calendar 2016</a> の 最終日を担当する <a href="https://twitter.com/sharkpp">@sharkpp</a> です。</p>

<p>まず始めに、呼びかけに応え Hot Soup Processor Advent Calendar 2016 へご参加いただいた11名の皆様に深く感謝を。</p>

<p>今回、多分 HSP 史上初の Advent Calendar を開催して見ましたが、それのまとめ的なものを最後に投稿してみようかと思います。</p>

<h2 id="%E6%8A%95%E7%A8%BF%E3%81%95%E3%82%8C%E3%81%9F%E8%A8%98%E4%BA%8B%E3%81%AE%E4%B8%80%E8%A6%A7">投稿された記事の一覧</h2>

<table>
<thead>
<tr>
  <th>日付</th>
  <th>執筆者</th>
  <th>記事</th>
</tr>
</thead>
<tbody>
<tr>
  <td>12/01</td>
  <td><a href="http://qiita.com/sharkpp">sharkpp</a></td>
  <td><a href="http://www.sharkpp.net/blog/2016/12/01/hsp-advent-calendar-2016-1st-day.html">macOS と Wine で作る HSP 3 の開発環境</a></td>
</tr>
<tr>
  <td>12/02</td>
  <td><a href="http://qiita.com/mjhd-devlion">mjhd-devlion</a></td>
  <td><a href="http://qiita.com/mjhd-devlion/items/375ea9894294919380fd">Linux・MacでVimでHSP開発</a></td>
</tr>
<tr>
  <td>12/03</td>
  <td><a href="http://qiita.com/ptr-yudai">ptr-yudai</a></td>
  <td><a href="http://qiita.com/ptr-yudai/items/3b834cd1765adb17ba96">HSP3のチート対策いろいろ -メモリハック編-</a></td>
</tr>
<tr>
  <td>12/04</td>
  <td><a href="http://qiita.com/theoldmoon0602">theoldmoon0602</a></td>
  <td><a href="http://furutsuki.hatenablog.com/entry/2016/12/03/231056">hsp初心者なのでゲーム作った</a></td>
</tr>
<tr>
  <td>12/05</td>
  <td><a href="http://qiita.com/exrd">exrd</a></td>
  <td><a href="http://qiita.com/exrd/items/8bc0be17a15ff77d3754">HSPで8パズルを高速に解くまで</a></td>
</tr>
<tr>
  <td>12/06</td>
  <td><a href="http://qiita.com/skymonsters_Ks">skymonsters_Ks</a></td>
  <td><a href="http://uchitsukushi2.hatenablog.jp/entry/advent-calendar-2016-hsp-06">Notepad++でHSPスクリプトを編集・実行できるようにする</a></td>
</tr>
<tr>
  <td>12/07</td>
  <td><a href="http://qiita.com/y_tack">y_tack</a></td>
  <td><a href="http://qiita.com/y_tack/items/b31b039ba236d962cf32">えたーなってる中のHSP製インタプリタについてとか</a></td>
</tr>
<tr>
  <td>12/08</td>
  <td><a href="http://qiita.com/zerogen_gre">zerogen_gre</a></td>
  <td><a href="http://hspcube.blogspot.jp/2016/12/hsp.html">HSPでマップ表示</a></td>
</tr>
<tr>
  <td>12/09</td>
  <td><a href="http://qiita.com/hato">hato</a></td>
  <td><a href="http://qiita.com/hato/items/7b720e87a408a6ab147a">HSPTV部門でのstart.ax削減術</a></td>
</tr>
<tr>
  <td>12/10</td>
  <td><a href="http://qiita.com/YSRKEN">YSRKEN</a></td>
  <td><a href="http://qiita.com/YSRKEN/items/c3a69959c88cc56785a1">HSPで画像処理する際の覚書</a></td>
</tr>
<tr>
  <td>12/11</td>
  <td><a href="http://qiita.com/ptr-yudai">ptr-yudai</a></td>
  <td><a href="http://qiita.com/ptr-yudai/items/d1583e3206eca1637fea">HSPのチート対策いろいろ -セーブデータ編-</a></td>
</tr>
<tr>
  <td>12/12</td>
  <td><a href="http://qiita.com/hato">hato</a></td>
  <td><a href="http://qiita.com/hato/items/0d509766e62817da413c">HSPTV部門でのランキング機能活用術</a></td>
</tr>
<tr>
  <td>12/13</td>
  <td><a href="http://qiita.com/Jbox_sandbag">Jbox_sandbag</a></td>
  <td><a href="http://hspboxinggame.blogspot.jp/2013/03/o2.html">O2システムの思い出</a></td>
</tr>
<tr>
  <td>12/14</td>
  <td><a href="http://qiita.com/kureikei">kureikei</a></td>
  <td><a href="http://pronama.azurewebsites.net/2016/12/14/hsp3dish/">HSP3Dish で iOS アプリ開発を体験！</a></td>
</tr>
<tr>
  <td>12/16</td>
  <td><a href="http://qiita.com/skymonsters_Ks">skymonsters_Ks</a></td>
  <td><a href="http://qiita.com/skymonsters_Ks/items/ad28c7a21ea55d2bbed8">HSPプログラムコンテストを振り返る</a></td>
</tr>
<tr>
  <td>12/25</td>
  <td><a href="http://qiita.com/sharkpp">sharkpp</a></td>
  <td><a href="http://www.sharkpp.net/blog/2016-12-25-hsp-advent-calendar-2016-25th-day.html">Hot Soup Processor Advent Calendar 2016 まとめ</a></td>
</tr>
</tbody>
</table>

<h2 id="%E7%B5%90%E6%9E%9C">結果</h2>

<p><code>執筆率 = 16 / 25 = 64%</code></p>

<p>どのぐらいの日付が記事で埋まっているかの割合です。</p>

<p>やはり、投稿募集の開始時期も直前だったことや、日付を詰めてもらった影響か最終週が丸々抜けてしまったのが響いているようですね。</p>

<p>ただ、半分は超えたので、来年はもう少し記事を書いてもらえるように根回しとかもしてみようかと思います。</p>

<p>まあ、来年も自分が主催？するならばですけど。</p>

<p><code>参加率 = 12 / 25 = 48%</code></p>

<p>これは、どのぐらいの人が記事を投稿しているかの割合です。</p>

<p>空きがあったので、ツイートした所、何人かの人は２回目の投稿をしていただいたようで、実際の投稿よりも参加人数は少なっています。</p>

<p><code>参加率 = 12 / 16 = 75%</code></p>

<p>これは、投稿済みの記事に対してどのぐらいの人が記事を投稿しているかの割合です。</p>

<p>一人、一投稿であれば <code>100%</code> で、一人で Advent Calendar な場合は <code>4%</code> になります。</p>

<h2 id="%E6%8A%95%E7%A8%BF%E3%81%95%E3%82%8C%E3%81%9F%E8%A8%98%E4%BA%8B%E3%81%AE%E5%88%86%E9%A1%9E">投稿された記事の分類</h2>

<p><strong>独断と偏見で</strong>カテゴライズ</p>

<table>
<thead>
<tr>
  <th>カテゴリ</th>
  <th>1</th>
  <th>2</th>
  <th>3</th>
  <th>4</th>
  <th>5</th>
  <th>6</th>
  <th>7</th>
  <th>8</th>
  <th>9</th>
  <th>10</th>
  <th>11</th>
  <th>12</th>
  <th>13</th>
  <th>14</th>
  <th>16</th>
  <th>25</th>
</tr>
</thead>
<tbody>
<tr>
  <td>環境構築</td>
  <td>★</td>
  <td>★</td>
  <td></td>
  <td></td>
  <td></td>
  <td>★</td>
  <td></td>
  <td></td>
  <td></td>
  <td></td>
  <td></td>
  <td></td>
  <td></td>
  <td></td>
  <td></td>
  <td></td>
</tr>
<tr>
  <td>初心者向け</td>
  <td></td>
  <td></td>
  <td></td>
  <td>★</td>
  <td></td>
  <td></td>
  <td></td>
  <td>★</td>
  <td></td>
  <td></td>
  <td></td>
  <td></td>
  <td></td>
  <td></td>
  <td></td>
  <td></td>
</tr>
<tr>
  <td>HSP プログラムコンテスト</td>
  <td></td>
  <td></td>
  <td></td>
  <td></td>
  <td></td>
  <td></td>
  <td></td>
  <td></td>
  <td>★</td>
  <td></td>
  <td></td>
  <td>★</td>
  <td></td>
  <td></td>
  <td>★</td>
  <td></td>
</tr>
<tr>
  <td>HSP Dish</td>
  <td></td>
  <td></td>
  <td></td>
  <td></td>
  <td></td>
  <td></td>
  <td></td>
  <td></td>
  <td></td>
  <td></td>
  <td></td>
  <td></td>
  <td></td>
  <td>★</td>
  <td></td>
  <td></td>
</tr>
<tr>
  <td>macOS</td>
  <td>★</td>
  <td>★</td>
  <td></td>
  <td></td>
  <td></td>
  <td></td>
  <td></td>
  <td></td>
  <td></td>
  <td></td>
  <td></td>
  <td></td>
  <td></td>
  <td>★</td>
  <td></td>
  <td></td>
</tr>
<tr>
  <td>チート対策</td>
  <td></td>
  <td></td>
  <td>★</td>
  <td></td>
  <td></td>
  <td></td>
  <td></td>
  <td></td>
  <td></td>
  <td></td>
  <td>★</td>
  <td></td>
  <td></td>
  <td></td>
  <td></td>
  <td></td>
</tr>
<tr>
  <td>アルゴリズム</td>
  <td></td>
  <td></td>
  <td></td>
  <td></td>
  <td>★</td>
  <td></td>
  <td></td>
  <td></td>
  <td></td>
  <td>★</td>
  <td></td>
  <td>★</td>
  <td></td>
  <td></td>
  <td></td>
  <td></td>
</tr>
<tr>
  <td>その他</td>
  <td></td>
  <td></td>
  <td></td>
  <td></td>
  <td></td>
  <td></td>
  <td>★</td>
  <td></td>
  <td></td>
  <td></td>
  <td></td>
  <td></td>
  <td>★</td>
  <td></td>
  <td>★</td>
  <td>★</td>
</tr>
</tbody>
</table>

<h2 id="%E6%B3%A8%E7%9B%AE%E8%A8%98%E4%BA%8B">注目記事</h2>

<p><strong>独断と偏見により</strong>、今回の Advent Calendar での注目記事を選びました。</p>

<p>あっ、紹介の順番がイコールで順位ということではありません。</p>

<ul>
<li><p>10日目の記事「<a href="http://qiita.com/YSRKEN/items/c3a69959c88cc56785a1">HSPで画像処理する際の覚書</a>」</p>

<p>画像処理に関して、標準命令での操作やArtlet2D、HSPCVごとの動作の違い、動作速度などをソースコードを交えながら詳細に解説する記事となっています。</p>

<p>VRAM操作は、ある意味、初心者から中級者への壁の一つかなとも思います。
まあ、手入れイヤーな操作が必要なのはどうなんだと思わなくもないですが、どうなんでしょうね。
HSPCVといえば実装がされたHSP公開数日後(もしかしたら翌日かも)に、それを使った顔認識を作っり、どこかに公開したような記憶がありますが、さてどこへ行ったんだろう。</p></li>
<li><p>11日目の記事「<a href="http://qiita.com/ptr-yudai/items/d1583e3206eca1637fea">HSPのチート対策いろいろ -セーブデータ編-</a>」</p>

<p>ゲームを作る場合に気になる所である、セーブデータの保護の方法の一案をソースコードを交えながら解説してくれる記事となっています。</p>

<p>初めてスコア改ざん検知機能を持ったHSPのゲームを見たのは <a href="http://www.vector.co.jp/soft/win95/game/se093109.html">GEO SHOOTERS</a>でしたね。
ゲームで遊びつつ、セーブデータの解析をしたりとなかなか無茶なことをしていました。</p></li>
<li><p>16日の記事「<a href="http://qiita.com/skymonsters_Ks/items/ad28c7a21ea55d2bbed8">HSPプログラムコンテストを振り返る - Qiita</a>」</p>

<p>今年も含めた、HSPプログラムコンテストの歴史を、参加作品数の統計や考察を交え振り返る記事となっています。</p>

<p>参加作品数のグラフを見るとだんだんと下降気味なのが残念ですね。
近年は洗練された作品も多いですが、上位入賞者も若干固定化されてきている感じで、新しい風がもっと吹いて欲しいなと思ったり、その辺りも少し残念かなと思わなくもないです。
あくまで印象ですが。</p></li>
</ul>

<p>それ以外の記事も、HSPの魅力を教えてくれたり、またHSPのこれまでの歩みを教えてくれる良い記事だと思いました。</p>

<h2 id="%E6%9C%80%E5%BE%8C%E3%81%AB">最後に</h2>

<p>改めて、<a href="http://qiita.com/advent-calendar/2016/hsp">Hot Soup Processor Advent Calendar 2016</a> にご参加いただきました皆様、そして記事を呼んでくださいました読者の方々に感謝を。</p>

<p><strong>メリークリスマス！</strong></p>

<hr />

<p>この投稿は <strong><a href="http://qiita.com/advent-calendar/2016/hsp">Hot Soup Processor Advent Calendar 2016</a></strong> の <strong>25日目</strong>の記事です。</p>

<ul>
<li>16日目の記事: <a href="http://qiita.com/skymonsters_Ks/items/ad28c7a21ea55d2bbed8">HSPプログラムコンテストを振り返る</a></li>
</ul>

<hr />
]]></content>
        </entry>
            <entry>
            <title type="html"><![CDATA[QMacCocoaViewContainer を使ってみる]]></title>
            <link href="http://www.sharkpp.net/blog/2016/12/10/qt-advent-calendar-2016-10th-day.html"/>
            <updated>2016-12-10T17:25:00+00:00</updated>
            <id>http://www.sharkpp.net/blog/2016/12/10/qt-advent-calendar-2016-10th-day.html</id>
            <content type="html"><![CDATA[<p>こんにちは、こんばんは。</p>

<p><a href="http://qiita.com/advent-calendar/2016/qt">Qt Advent Calendar 2016</a> の 10日目を担当する <a href="https://twitter.com/sharkpp">@sharkpp</a> です。</p>

<p>今回は <a href="http://doc.qt.io/qt-5/qmaccocoaviewcontainer.html">QMacCocoaViewContainer</a> Class を触ってみようかと思います。</p>

<p>題して「QMacCocoaViewContainer を使ってみる」です。</p>

<h2 id="%E3%81%AF%E3%81%98%E3%82%81%E3%81%AB">はじめに</h2>

<p>これは、 Qt で macOS Sierra の <a href="https://developer.apple.com/reference/appkit/nstouchbar">Touch Bar</a> を使ってみようとして挫折したあれこれのから生まれた記事であります。</p>

<p>公式の方では <a href="https://bugreports.qt.io/browse/QTBUG-56908">[QTBUG-56908] Support NSTouchBar on latest MacBook Pro - Qt Bug Tracker</a> で 5.9 を目標に実装が提案？されているようです。</p>

<p>まあ、とりあえず Touch Bar の事は忘れましょう。</p>

<h2 id="%E7%92%B0%E5%A2%83">環境</h2>

<table>
<thead>
<tr>
  <th>項目</th>
  <th>値</th>
</tr>
</thead>
<tbody>
<tr>
  <td>OS</td>
  <td>macOS Sierra 10.12.1 (16B2659)</td>
</tr>
<tr>
  <td>Qt</td>
  <td>5.7.0</td>
</tr>
<tr>
  <td>Qt Creator</td>
  <td>4.1.0</td>
</tr>
</tbody>
</table>

<p>この記事では Qt Creator でコードを書いていきます。</p>

<h2 id="%E7%9B%AE%E6%A8%99%E3%81%AA%E3%81%A9">目標など</h2>

<p>今回は <a href="https://developer.apple.com/reference/appkit/nsbutton">NSButton</a> を Qt のウインドウ上に表示してクリックをハンドリングするまでがこの記事の内容になります。</p>

<p>とりあえず作るクラスの階層です。</p>

<pre><code>CocoaButton -- QPushButton を派生
  +-- CocoaButtonWrapper -- NSButton の参照を所有
        +-- CocoaButtonProxy -- NSButton のクリックを CocoaButtonWrapper に送る
</code></pre>

<p><code>CocoaButton</code> が Qt のウィジェットとして利用できるようにするクラスで、そのほかに <code>CocoaButtonWrapper</code> や <code>CocoaButtonProxy</code> があります。</p>

<h2 id="%E3%83%97%E3%83%AD%E3%82%B8%E3%82%A7%E3%82%AF%E3%83%88%E3%82%92%E4%BD%9C%E3%82%8B">プロジェクトを作る</h2>

<p>まず適当なプロジェクトを作り、<code>NSButton</code> ボタン用のクラスを追加します。</p>

<p><a href="http://doc.qt.io/qt-5/ios-support.html#using-objective-c-code-in-qt-applications">Using Objective-C Code in Qt Applications</a> に書かれているように <code>OBJECTIVE_SOURCES</code> に <code>.mm</code> ファイルを追加しますが、「クラスの定義」でソースファイル名の拡張子を <code>.mm</code> に変更した場合は自動で設定してくれるようです。</p>

<p><a href="/images/2016_1210_qtcreator_newclass.png"><img src="/_thumbs/9821c8921f122c38b6db04654a1b4bba-384x384.png" alt="Qt Creator"></a></p>

<p>また、 <code>NSButton</code> などを利用するので .pro に AppKit をリンクするように <code>LIBS</code> に追加します。</p>

<pre><code class="diff"><br />  FORMS    += mainwindow.ui
+ 
+ OBJECTIVE_SOURCES += \
+     cocoabutton.mm
+ 
+ macx: LIBS += -framework AppKit
</code></pre>

<p>こんな感じです。</p>

<p>完全な内容は <a href="https://github.com/sharkpp/MacCocoaWithQtSample/blob/master/MacCocoaWithQtSample.pro">MacCocoaWithQtSample.pro</a> を見てみてください。</p>

<h2 id="cocoabutton-%E3%81%AE%E5%AE%9F%E8%A3%85">CocoaButton の実装</h2>

<p>追加したファイルにクラスの実装をしていきます。</p>

<p><a href="https://github.com/sharkpp/MacCocoaWithQtSample/blob/master/cocoabutton.mm">cocoabutton.mm</a> に <code>CocoaButton</code> を実装してきます。</p>

<p>Qt Cretor のデザイナでボタンを設置したいがために <code>moveEvent</code> や <code>resizeEvent</code> を実装します。</p>

<pre><code class="cpp">void CocoaButton::moveEvent(QMoveEvent *event)
{
    NSRect frame;
    frame = [m_wrpper-&gt;m_refButton frame];
    frame.origin.x = event-&gt;pos().x();
    frame.origin.y = event-&gt;pos().y();
    [m_wrpper-&gt;m_refButton setFrame:frame];
}

void CocoaButton::resizeEvent(QResizeEvent *event)
{
    NSRect frame;
    frame = [m_wrpper-&gt;m_refButton frame];
    frame.size.width = event-&gt;size().width();
    frame.size.height = event-&gt;size().height();
    [m_wrpper-&gt;m_refButton setFrame:frame];
}
</code></pre>

<p><code>setText</code> でボタンのキャプションを変えれるようにしておきます。</p>

<pre><code class="cpp">void CocoaButton::setText(const QString &amp;text)
{
    [m_wrpper-&gt;m_refButton setTitle: text.toNSString()];
}
</code></pre>

<p>あとは、</p>

<pre><code class="cpp">    CocoaButtonProxy *proxy = [[CocoaButtonProxy alloc] init:this];
    [m_refButton setTarget:proxy];
    [m_refButton setAction:@selector(clicked:)];
</code></pre>

<p>みたいな形で Objective-C で実装された target と action を登録して</p>

<pre><code class="objectivec">- (IBAction)clicked:(id)sender
{
    proxyDest-&gt;handleClicked();
}
</code></pre>

<p>とすれば、クリックで C++ で実装されたメソッドが呼び出せます。</p>

<p>最後に <code>CocoaButtonProxy</code> から <code>CocoaButton</code> そしてその上位へとシグナルを飛ばすようにすれば、</p>

<pre><code class="cpp">connect(ui-&gt;buttonCocoa, SIGNAL(clicked()), this, SLOT(onCocoaButtonClick()));
</code></pre>

<p>このような形でシグナルを受け取ることができます。</p>

<p><a href="/images/2016_1210_sample_ss.png"><img src="/_thumbs/199fc30fdfe0a59ceab9e8c4e83bc0e6-384x384.png" alt="Qt Creator"></a></p>

<p>実際に動かすとこんな感じです。</p>

<h2 id="%E6%88%90%E6%9E%9C%E7%89%A9">成果物</h2>

<p><a href="https://github.com/sharkpp/MacCocoaWithQtSample">sharkpp/MacCocoaWithQtSample</a> に今回の記事の完全なソースを置いておきます。</p>

<h2 id="%E5%8F%82%E8%80%83">参考</h2>

<ul>
<li><a href="http://doc.qt.io/qt-5/qmaccocoaviewcontainer.html">QMacCocoaViewContainer Class | Qt Widgets 5.7</a></li>
<li><a href="https://bugreports.qt.io/browse/QTBUG-40583">[QTBUG-40583] Unable to use QMacCocoaViewContainer - Qt Bug Tracker</a></li>
<li><a href="https://github.com/vasi/vdfuse/blob/master/include/VBox/VBoxCocoa.h">vdfuse/VBoxCocoa.h at master - vasi/vdfuse</a></li>
</ul>

<h2 id="%E6%9C%80%E5%BE%8C%E3%81%AB">最後に</h2>

<p>今回は、<a href="https://developer.apple.com/reference/appkit/nstouchbar">Touch Bar</a> を Qt から使ってみたい、から始まり結果、かなりスケールダウンした記事となりましたが、それもこれも、初めてさわる Objective-C が原因でしたが、今回いろいろ調べてなんとなくわかってきたので Touch Bar の方も何かしらためせるといいなと思っています。</p>

<p>それでは、また。</p>

<p>明日は <a href="https://twitter.com/nekomatu">@nekomatu</a> さんによる「<a href="http://nekomatu.blogspot.jp/2016/12/develop-qtapp-with-qtcreator-on-buildroot.html">BuildrootとQtCreatorを使ってQtアプリを開発する方法</a>」です。
お楽しみに。</p>

<hr />

<p>この投稿は <strong><a href="http://qiita.com/advent-calendar/2016/qt">Qt Advent Calendar 2016</a></strong> の <strong>10日目</strong>の記事です。</p>

<ul>
<li>９日目の記事: <a href="http://qiita.com/hermit4/items/6282640a7fe4dbcdec43">スレッドの同期について学ぼう(その１）</a></li>
<li>11日目の記事: <a href="http://nekomatu.blogspot.jp/2016/12/develop-qtapp-with-qtcreator-on-buildroot.html">BuildrootとQtCreatorを使ってQtアプリを開発する方法</a></li>
</ul>

<hr />
]]></content>
        </entry>
    </feed>