<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
    <title><![CDATA[さめたすたすのお家]]></title>
    <link href="https://www.sharkpp.net/blog/tags/Python.xml" rel="self"/>
    <link href="https://www.sharkpp.net/"/>
    <updated>2024-12-31T10:59:09+00:00</updated>
    <id>https://www.sharkpp.net/</id>
            <author>
            <name><![CDATA[sharkpp]]></name>                    </author>
        <generator uri="http://sculpin.io/">Sculpin</generator>
            <entry>
            <title type="html"><![CDATA[Python 3 のメモ諸々]]></title>
            <link href="https://www.sharkpp.net/blog/2022/08/01/python3-memo.html"/>
            <updated>2022-08-01T11:00:00+00:00</updated>
            <id>https://www.sharkpp.net/blog/2022/08/01/python3-memo.html</id>
            <content type="html"><![CDATA[<p>Python 3 を最近ちゃんと触っている。
その途中で知ったこと雑多な諸々をメモ。</p>

<h2 id="%E9%96%8B%E7%99%BA%E9%96%A2%E4%BF%82">開発関係</h2>

<h3 id="venv-%E3%82%92%E4%BD%BF%E3%81%8A%E3%81%86">venv を使おう</h3>

<p>Python 3 でプログラム書くときは、 venv を使おう。</p>

<p>v3 から virtualenv と同等の機能として <a href="https://docs.python.org/ja/3/library/venv.html">venv</a> が組み込まれているのでそれを使ってパッケージを管理するとGOOD</p>

<p>使い方は</p>

<pre><code class="console">$ python3 -m venv .venv
</code></pre>

<p>で実行環境を .venv として作成。
名前は任意の名前だけど、git に登録しないよって意味がわかりやすいように .env としています。</p>

<pre><code class="console">$ source .venv/bin/active
(.venv) $
</code></pre>

<p>で PATH などを適用し利用できるようにする。</p>

<pre><code class="console">(.venv) $ deactivate
</code></pre>

<p>で、専用の環境を解除。</p>

<h3 id="requirements.txt">requirements.txt</h3>

<p><code>requirements.txt</code> でパッケージを管理する場合は <code>requirements.lock</code> を作るといい感じ。</p>

<p><a href="https://zenn.dev/yhay81/articles/yhay81-202102-piplock">pipでもlockで依存パッケージバージョンを管理しよう</a> を参考にした。</p>

<pre><code class="bash">#!/bin/bash
REQUIREMENTS=$1
if [ "" == "$REQUIREMENTS" ]; then
  REQUIREMENTS=requirements.txt
fi
VENV_DIR=.venv_temp_$(date +%s)
python3 -m venv $VENV_DIR
source $VENV_DIR/bin/activate
pip3 install -U pip wheel
pip3 install -r $REQUIREMENTS
(
echo "# auto generated by update-pip-lock.sh"
pip3 freeze
) &gt;| $(basename $REQUIREMENTS .txt).lock
rm -rf $VENV_DIR
</code></pre>

<p>こんな感じ。</p>

<p>また、開発時のみに必要なパッケージをインストールするための <code>requirements.dev.txt</code> と <code>requirements.dev.lock</code> も作成。</p>

<pre><code># common packages
-r requirements.txt
# dev only packages
sphinx
</code></pre>

<p><code>-r FILENAME</code> とすることで別のリストを読み込めるので、それを利用して記述を最小にする。</p>

<h2 id="requests">requests</h2>

<p>HTTP/HTTPS クライアントライブラリ <a href="https://requests-docs-ja.readthedocs.io/en/latest/">requests</a> のメモ</p>

<h3 id="%E4%BD%BF%E3%81%84%E6%96%B9">使い方</h3>

<pre><code class="console">$ pip install requests
</code></pre>

<pre><code class="python">import requests
res = requests.get('https://example.net/hoge/fuga')
print(res.json) # content-type: application/json のみ
print(res.request.url) # 要求した URL
print(res.request.headers) # 要求したヘッダ
print(res.request.body) # 要求したコンテンツ内容
print(res.status_code) # 応答されたステータスコード
print(res.headers) # 応答されたヘッダ
print(res.cookies) # クッキー
print(res.content) # コンテンツ内容(bytes 型)
print(res.text) # コンテンツ内容(str 型)
print(res.history) # リダイレクト処理がされた場合の要求履歴
</code></pre>

<h3 id="%E3%83%AA%E3%83%80%E3%82%A4%E3%83%AC%E3%82%AF%E3%83%88%E5%87%A6%E7%90%86">リダイレクト処理</h3>

<p>requests 標準ではリダイレクトは自動で処理される。
が... リダイレクト処理の流れを取得したり、COOKIEの指定を途中でしたい場合はオプションで指定する必要がある。</p>

<pre><code class="python">import requests
res = requests.get("http://google.co.jp/")
print(res.history[0])                     # &lt;Response [301]&gt;
print(res.history[0].url)                 # 'http://google.co.jp/'
print(res.history[0].headers["Location"]) # 'http://www.google.co.jp/'
print(res.history[0].status_code)         # 301
print(res.url)                            # 'http://www.google.co.jp/'
print(res.status_code)                    # 200
</code></pre>

<p><code>allow_redirects</code> オプションでリダイレクトの自動処理を無効にできる。</p>

<pre><code class="python">import requests
res = requests.get("http://google.co.jp/", allow_redirects=False)
print(res.url)                 # 'http://google.co.jp/'
print(res.headers["Location"]) # 'http://www.google.co.jp/'
print(res.status_code)         # 301
res2 = requests.get(res.headers["Location"], allow_redirects=False)
print(res2.url)                            # 'http://www.google.co.jp/'
print(res2.status_code)                    # 200
</code></pre>

<h3 id="cookie">Cookie</h3>

<p>ログイン処理などを行う場合はセッションを使う、みたいなことを書いてあるところもあるが、クッキーを受け渡すだけで十分処理できそう。</p>

<pre><code class="python">import requests
# Cookieを取得
res = requests.get('http://httpbin.org/cookies/set/foo/bar?domain=mydomain.com&amp;path=%2F&amp;httponly=true&amp;secure=true')
print(res.cookies['foo']) # 'bar'
# Cookieを設定
res2 = requests.get('http://httpbin.org/cookies', cookies=res.cookies)
print(res2.text) # '{"cookies": {"foo": "bar"}}'
# マージしたCookieを設定
res3 = requests.get('http://httpbin.org/cookies/set/hoge/fuga')
print(res3.cookies['hoge']) # 'fuga'
res3.cookies.update(res.cookies)
res4 = requests.get('http://httpbin.org/cookies', cookies=res3.cookies)
print(res4.text) # '{"cookies": {"foo": "bar","hoge": "fuga"}}'
</code></pre>

<h2 id="%E5%8F%82%E8%80%83">参考</h2>

<ul>
<li><a href="https://docs.python.org/ja/3/library/venv.html">venv --- 仮想環境の作成 — Python 3.10.6 ドキュメント</a></li>
<li><a href="https://requests-docs-ja.readthedocs.io/en/latest/">Requests: 人間のためのHTTP — requests-docs-ja 1.0.4 documentation</a></li>
<li><a href="https://dot-blog.jp/news/python-requests-redirect-url-status-code-get/">Pythonの『requests』でリダイレクト時、履歴情報の取得や無効設定｜dot blog</a></li>
<li><a href="https://requests-docs-ja.readthedocs.io/en/latest/user/quickstart/#id11">リダイレクトと履歴 — requests-docs-ja 1.0.4 documentation</a></li>
<li><a href="https://requests-docs-ja.readthedocs.io/en/latest/user/quickstart/#id10">クッキー — requests-docs-ja 1.0.4 documentation</a></li>
<li><a href="https://zenn.dev/yhay81/articles/yhay81-202102-piplock">pipでもlockで依存パッケージバージョンを管理しよう</a></li>
<li><a href="https://qiita.com/key/items/3684ec013c9798c0f02c">requirements.txtを分割する - Qiita</a></li>
</ul>
]]></content>
        </entry>
    </feed>