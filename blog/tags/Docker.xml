<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
    <title><![CDATA[さめたすたすのお家]]></title>
    <link href="https://www.sharkpp.net/blog/tags/Docker.xml" rel="self"/>
    <link href="https://www.sharkpp.net/"/>
    <updated>2025-01-01T10:58:25+00:00</updated>
    <id>https://www.sharkpp.net/</id>
            <author>
            <name><![CDATA[sharkpp]]></name>                    </author>
        <generator uri="http://sculpin.io/">Sculpin</generator>
            <entry>
            <title type="html"><![CDATA[Synology のパッケージのビルド方法について調べてみた]]></title>
            <link href="https://www.sharkpp.net/blog/2021/09/07/synology-package-building.html"/>
            <updated>2021-09-07T22:05:00+00:00</updated>
            <id>https://www.sharkpp.net/blog/2021/09/07/synology-package-building.html</id>
            <content type="html"><![CDATA[<p>Synology の NAS で利用可能なパッケージを作ってみようと思い、色々と調べてみました。
調べている最中に DSM 7.0 も正式リリースされたので、合わせてそのバージョンも調査の対象としました。</p>

<p>また、macOSでパッケージを作る場合の方法についても書きました。</p>

<p><a href="/images/20210907_dsm7_pkg_install_wizard_04.png"><img src="/thumbs/0f8b6887e5a96352c15cf2f29782e189-640x640.png" alt="パッケージインストールウィザード4"></a></p>

<h2 id="%E3%83%91%E3%83%83%E3%82%B1%E3%83%BC%E3%82%B8%E3%81%AE%E3%83%93%E3%83%AB%E3%83%89%E3%81%AB%E5%BF%85%E8%A6%81%E3%81%AA%E7%92%B0%E5%A2%83">パッケージのビルドに必要な環境</h2>

<p>ほぼ同じですが例としてあげられているUbuntuのLTSバージョンに変更がされているようです。</p>

<table>
<thead>
<tr>
  <th></th>
  <th>6.2</th>
  <th>7.0</th>
</tr>
</thead>
<tbody>
<tr>
  <td>OS</td>
  <td>64bitの一般的なLinux環境</br>(例として Ubuntu 16.04 LTS)</td>
  <td>64bitの一般的なLinux環境とルート権限</br>(例として Ubuntu 18.04 LTS)</td>
</tr>
<tr>
  <td>bash</td>
  <td>>= 4.1.5</td>
  <td>>= 4.1.5</td>
</tr>
<tr>
  <td>Python</td>
  <td>>= 2.7.3</td>
  <td>>= 2.7.3</td>
</tr>
</tbody>
</table>

<p>どちらも、NASに直接インストールすることはせず、必要であれば Docker パッケージをインストールしてツールキットを動かしてほしいと書かれています。</p>

<p>macOS は残念ながら一般的なLinux環境ではないので <a href="https://github.com/sharkpp/synology-toolkit-for-non-linux">synology-toolkit-for-non-linux</a> というソリューションを作って開発できるようにしてみました。</p>

<h2 id="dsm-6-%E3%81%A8-dsm-7-%E3%81%A8%E3%81%AE%E3%83%91%E3%83%83%E3%82%B1%E3%83%BC%E3%82%B8%E3%81%AE%E3%83%93%E3%83%AB%E3%83%89%E6%89%8B%E9%A0%86%E3%81%AE%E9%81%95%E3%81%84">DSM 6 と DSM 7 とのパッケージのビルド手順の違い</h2>

<p>どちらも <code>EnvDeploy</code> や <code>PkgCreate․py</code> への引数の与え方に違いはなさそうです。</p>

<p>ただ、処理の内容には多少の違いがあるようです。</p>

<h3 id="dsm-6.x">DSM 6.x</h3>

<p>利用可能なプラットフォーム：</p>

<blockquote>
  <p>6281 alpine alpine4k apollolake armada370 armada375 armada37xx armada38x armadaxp avoton braswell broadwell broadwellnk bromolow cedarview comcerto2k denverton dockerx64 evansport geminilake grantley hi3535 kvmx64 monaco purley qoriq rtd1296 v1000 x64</p>
</blockquote>

<ol>
<li><code>pkgscripts/EnvDeploy -v 6.2 -p x64</code></li>
<li><code>pkgscripts/PkgCreate.py -v 6.2 -p x64 -c ExamplePackage</code></li>
</ol>

<h3 id="dsm-7.x">DSM 7.x</h3>

<p>利用可能なプラットフォーム：</p>

<blockquote>
  <p>bromolow cedarview armadaxp armada370 armada375 evansport comcerto2k avoton alpine braswell apollolake grantley alpine4k monaco broadwell kvmx64 armada38x denverton rtd1296 broadwellnk purley armada37xx geminilake v1000</p>
</blockquote>

<ol>
<li><code>pkgscripts-ng/EnvDeploy -v 7.0 -p braswell</code></li>
<li><code>pkgscripts-ng/PkgCreate.py -v 7.0 -p braswell -c ExamplePackage</code></li>
</ol>

<p>破壊的変更により署名のフェーズがなくなっているようで指定可能な引数が少し変わっていました。</p>

<h2 id="%E3%83%91%E3%83%83%E3%82%B1%E3%83%BC%E3%82%B8%E6%89%8B%E5%8B%95%E3%81%AE%E3%82%A4%E3%83%B3%E3%82%B9%E3%83%88%E3%83%BC%E3%83%AB">パッケージ手動のインストール</h2>

<p>出来たパッケージを試すには、Synology NAS にログインし、パッケージセンターから「手動インストール」を行うことで可能です。</p>

<p><a href="/images/20210907_dsm7_pkg_install_wizard_01.png"><img src="/thumbs/58b7f462919d59664f552ef77692453e-640x640.png" alt="パッケージインストールウィザード1"></a> <a href="/images/20210907_dsm7_pkg_install_wizard_02.png"><img src="/thumbs/0f35caa7d01f65a9fa3ccb4a13634cd8-640x640.png" alt="パッケージインストールウィザード2"></a> <a href="/images/20210907_dsm7_pkg_install_wizard_03.png"><img src="/thumbs/9065d65d3300b28ef4d44bbeff637082-640x640.png" alt="パッケージインストールウィザード3"></a> <a href="/images/20210907_dsm7_pkg_install_wizard_04.png"><img src="/thumbs/0f8b6887e5a96352c15cf2f29782e189-640x640.png" alt="パッケージインストールウィザード4"></a></p>

<p>インストールすると、試した ExamplePackage では、こんな感じにアイコンなどが設置されました。</p>

<p><a href="/images/20210907_dsm7_pkg_installed_01.png"><img src="/thumbs/ad8bc929b38fad225bfc4ef559e72b96-640x640.png" alt="パッケージインストール後1"></a> <a href="/images/20210907_dsm7_pkg_installed_02.png"><img src="/thumbs/7153e28d5b00b6d1ff2caed92e4881af-640x640.png" alt="パッケージインストール後2"></a> <a href="/images/20210907_dsm7_pkg_installed_03.png"><img src="/thumbs/310c04c17c8ae499a3338d6345d4a71e-640x640.png" alt="パッケージインストール後3"></a></p>

<p>なお、後述のパッケージのお作法がちゃんとされていないと、インストール時に「ファイル形式が正しくありません、パッケージ管理者に連絡してください」("Invalid file format. Please contact the package developer.") と表示されるようです。</p>

<p><a href="/images/20210907_dsm7_pkg_invalid_file_type.png"><img src="/thumbs/bfeabb265236ddd91b028498dd139b03-640x640.png" alt="ファイル形式が正しくありません"></a></p>

<h2 id="dsm-6.x-%E3%81%8B%E3%82%89-7.0-%E3%81%B8%E5%AE%9F%E8%A3%85%E3%82%92%E5%A4%89%E6%9B%B4%E3%81%99%E3%82%8B%E5%A0%B4%E5%90%88%E3%81%AE%E4%B8%BB%E3%81%AA%E5%A4%89%E6%9B%B4%E7%82%B9">DSM 6.x から 7.0 へ実装を変更する場合の主な変更点</h2>

<p><a href="https://global.download.synology.com/download/Document/Software/DeveloperGuide/Firmware/DSM/7.0/enu/DSM_Developer_Guide_7_0_Beta.pdf">DSM Developer Guide 7.0 BETA</a> の <code>Breaking Changes in 7.0</code> (7.0 での破壊的変更) によると、DSM 6.x から DSM 7.x へは、パッケージフレームワークの次の点が変更されているようです。
下記の内容に従っていないと、パッケージのビルドが成功してもインストールすることができないなどが起こるようです。</p>

<table>
<thead>
<tr>
  <th>#</th>
  <th>項目</th>
  <th>DSM 6.x</th>
  <th>DSM 7.x</th>
</tr>
</thead>
<tbody>
<tr>
  <td>1</td>
  <td><a href="https://help.synology.com/developer-guide/privilege/privilege_config.html"><code>conf/privilege</code></a></td>
  <td>低い特権での実行をサポートしていないパッケージの場合は必須ではない</td>
  <td>必須</td>
</tr>
<tr>
  <td>2</td>
  <td><code>INFO.sh</code></td>
  <td>必須ではない</td>
  <td><code>package</code></br><code>version</code></br><code>os_min_ver="7.0-40000"</code> ※もしくはそれ以上</br><code>description</code></br><code>arch</code></br><code>maintainer</code></br>以上のフィールドが必要。</br>そうでないない場合は、ビルドは成功するがインストール時に「ファイル形式が正しくありません、パッケージ管理者に連絡してください」("Invalid file format. Please contact the package developer.") と表示される。</td>
</tr>
<tr>
  <td>3</td>
  <td>パッケージ署名</td>
  <td>必要</td>
  <td>不要(つまり、gnupg も不要)</td>
</tr>
<tr>
  <td>4</td>
  <td><code>conf/privilege</code> <code>defaults.run-as</code></td>
  <td><code>"package"</code></br><code>"system"</code></br><code>"root"</code></td>
  <td><code>"package"</code></br><code>"root"</code></br>特権操作はリソースワーカー経由での実行へ変更が必要</td>
</tr>
<tr>
  <td>5</td>
  <td>ホームパス</td>
  <td><code>/var/packages/[package_name]/target</code></td>
  <td><code>/var/packages/[package_name]/home</code></br>権限は <code>0700</code> <code>(rwx------)</code></td>
</tr>
<tr>
  <td>6</td>
  <td><code>PACKAGE_ICON.PNG</code></td>
  <td>72 x 72</td>
  <td>64 x 64</td>
</tr>
<tr>
  <td>7</td>
  <td>FHS ディレクトリの所有者</td>
  <td></td>
  <td><code>target</code> などの FHS ディレクトリは <code>conf/privilege</code> に従って新しい特権設定が行われます。</td>
</tr>
<tr>
  <td>8</td>
  <td>パッケージログの場所</td>
  <td><code>/var/log/synopkg.log</code></td>
  <td>パッケージ操作ログ：<code>/var/log/synopkg.log</code></br>コントロールスクリプトログ：<code>/var/log/packages/[package_name].log</code></td>
</tr>
<tr>
  <td>9</td>
  <td>システム起動時の開始確認</td>
  <td>されない</td>
  <td><code>INFO.sh</code>の<code>precheckstartstop="yes"</code>の場合にされる</td>
</tr>
</tbody>
</table>

<h2 id="pkgcreate%E2%80%A4py-%E3%81%AE%E4%BD%BF%E3%81%84%E6%96%B9">PkgCreate․py の使い方</h2>

<p>とりあえず <code>pkgscripts/PkgCreate.py -v {バージョン} -p {プラットフォーム} -c {パッケージ名}</code> でことは足りる。</p>

<pre><code class="console">usage: PkgCreate.py [-h] [-p PLATFORMS] [-e ENV_SECTION] [-v ENV_VERSION] [-x DEP_LEVEL] [-X PARALLEL_PROJ] [-b BRANCH] [-s SUFFIX] [-c] [--no-collecter] [-L] [-l] [-B] [-I] [-i]
                    [-P PARALLEL] [--build-opt BUILD_OPT] [--install-opt INSTALL_OPT] [--print-log] [--no-tee] [--min-sdk SDK_VER]
                    package

固定引数:
  package               対象のパッケージ

オプションの引数:
  -h, --help            このヘルプメッセージを表示して終了
  -p PLATFORMS          ターゲットプラットフォームを指定。 省略時では、build_env/ 以下の利用可能なプラットフォームを検出。
  -e ENV_SECTION, --env ENV_SECTION
                        環境セクションを SynoBuildConf/depends で指定。省略時は [default] 。
  -v ENV_VERSION, --version ENV_VERSION
                        ターゲットDSMバージョンを手動で指定。
  -x DEP_LEVEL          ビルド依存レベルを指定
  -X PARALLEL_PROJ      SynoBuild　並列ビルドプロジェクト。 0 は 2 つの並列ジョブでビルドすることを意味。
  -b BRANCH             パッケージのブランチを指定。
  -s SUFFIX             ビルド環境のフォルダのサフィックス (build_env/) を指定。
  -c                    パッケージを収集。
  --no-collecter        すべての収集動作をスキップ。
  -L                    プロジェクトをリンクしません。
  -l                    プロジェクトを更新してリンク。
  -B                    プロジェクトを構築しない。
  -I                    プロジェクトをインストールしない。
  -i                    プロジェクトのみをインストール。
  -P PARALLEL           並列プラットフォーム、省略時は 2
  --build-opt BUILD_OPT 
                        SynoBuild への引数パス
  --install-opt INSTALL_OPT
                        SynoInstall への引数パス
  --print-log           SynoBuild/SynoInstall のエラーログを印字。
  --no-tee              stdout/stderr　をログに記録しません。
  --min-sdk SDK_VER     最小 SDK バージョン、省略時=6.2
</code></pre>

<h2 id="envdeploy-%E3%82%84-pkgcreate%E2%80%A4py-%E3%81%AA%E3%81%A9%E3%81%A7%E5%88%A9%E7%94%A8%E5%8F%AF%E8%83%BD%E3%81%AA%E3%83%97%E3%83%A9%E3%83%83%E3%83%88%E3%83%95%E3%82%A9%E3%83%BC%E3%83%A0">EnvDeploy や PkgCreate․py などで利用可能なプラットフォーム</h2>

<p>型番からプラットフォームを調べる場合は <a href="https://kb.synology.com/en-global/DSM/tutorial/What_kind_of_CPU_does_my_NAS_have">What kind of CPU does my Synology NAS have?</a> を参照する。</p>

<table>
<thead>
<tr>
  <th>プラットフォーム</th>
  <th>6.2</th>
  <th>7.0</th>
</tr>
</thead>
<tbody>
<tr>
  <td>6281</td>
  <td>利用可能</td>
  <td>−</td>
</tr>
<tr>
  <td>dockerx64</td>
  <td>利用可能</td>
  <td>−</td>
</tr>
<tr>
  <td>hi3535</td>
  <td>利用可能</td>
  <td>−</td>
</tr>
<tr>
  <td>qoriq</td>
  <td>利用可能</td>
  <td>−</td>
</tr>
<tr>
  <td>x64</td>
  <td>利用可能</td>
  <td>−</td>
</tr>
<tr>
  <td>alpine</td>
  <td>利用可能</td>
  <td>利用可能</td>
</tr>
<tr>
  <td>alpine4k</td>
  <td>利用可能</td>
  <td>利用可能</td>
</tr>
<tr>
  <td>apollolake</td>
  <td>利用可能</td>
  <td>利用可能</td>
</tr>
<tr>
  <td>armada370</td>
  <td>利用可能</td>
  <td>利用可能</td>
</tr>
<tr>
  <td>armada375</td>
  <td>利用可能</td>
  <td>利用可能</td>
</tr>
<tr>
  <td>armada37xx</td>
  <td>利用可能</td>
  <td>利用可能</td>
</tr>
<tr>
  <td>armada38x</td>
  <td>利用可能</td>
  <td>利用可能</td>
</tr>
<tr>
  <td>armadaxp</td>
  <td>利用可能</td>
  <td>利用可能</td>
</tr>
<tr>
  <td>avoton</td>
  <td>利用可能</td>
  <td>利用可能</td>
</tr>
<tr>
  <td>braswell</td>
  <td>利用可能</td>
  <td>利用可能</td>
</tr>
<tr>
  <td>broadwell</td>
  <td>利用可能</td>
  <td>利用可能</td>
</tr>
<tr>
  <td>broadwellnk</td>
  <td>利用可能</td>
  <td>利用可能</td>
</tr>
<tr>
  <td>bromolow</td>
  <td>利用可能</td>
  <td>利用可能</td>
</tr>
<tr>
  <td>cedarview</td>
  <td>利用可能</td>
  <td>利用可能</td>
</tr>
<tr>
  <td>comcerto2k</td>
  <td>利用可能</td>
  <td>利用可能</td>
</tr>
<tr>
  <td>denverton</td>
  <td>利用可能</td>
  <td>利用可能</td>
</tr>
<tr>
  <td>evansport</td>
  <td>利用可能</td>
  <td>利用可能</td>
</tr>
<tr>
  <td>geminilake</td>
  <td>利用可能</td>
  <td>利用可能</td>
</tr>
<tr>
  <td>grantley</td>
  <td>利用可能</td>
  <td>利用可能</td>
</tr>
<tr>
  <td>kvmx64</td>
  <td>利用可能</td>
  <td>利用可能</td>
</tr>
<tr>
  <td>monaco</td>
  <td>利用可能</td>
  <td>利用可能</td>
</tr>
<tr>
  <td>purley</td>
  <td>利用可能</td>
  <td>利用可能</td>
</tr>
<tr>
  <td>rtd1296</td>
  <td>利用可能</td>
  <td>利用可能</td>
</tr>
<tr>
  <td>v1000</td>
  <td>利用可能</td>
  <td>利用可能</td>
</tr>
</tbody>
</table>

<h2 id="macos%E3%81%A7%E3%83%91%E3%83%83%E3%82%B1%E3%83%BC%E3%82%B8%E3%82%92%E3%83%93%E3%83%AB%E3%83%89%E3%81%99%E3%82%8B%E3%81%AB%E3%81%AF%EF%BC%9F">macOSでパッケージをビルドするには？</h2>

<p>macOS で簡単にパッケージがビルドできるように <a href="https://github.com/sharkpp/synology-toolkit-for-non-linux">synology-toolkit-for-non-linux</a> というソリューションを作りました。</p>

<p>使い方は、まずレポジトリを clone して、環境を構築。</p>

<pre><code class="console">$ git clone https://github.com/sharkpp/synology-toolkit-for-non-linux.git
$ cd synology-toolkit-for-non-linux
$ docker/build.sh
</code></pre>

<p>次に、 <code>EnvDeploy</code> でツールキットをダウンロード</p>

<pre><code class="console">$ pkgscripts/EnvDeploy -v 7.0 -p braswell
</code></pre>

<p>最後に <code>source</code> フォルダにパッケージのソースを入れ <code>PkgCreate․py</code> でビルド。
ここでは <a href="https://github.com/SynologyOpenSource/ExamplePackages/tree/main/ExamplePackage"><code>ExamplePackage</code></a> を利用。</p>

<pre><code class="console">$ git clone https://github.com/SynologyOpenSource/ExamplePackages.git source/ExamplePackages
$ mv source/ExamplePackages/ExamplePackage source
$ pkgscripts/PkgCreate.py -v 7.0 -p braswell -c ExamplePackage
</code></pre>

<p><code>result_spk</code> フォルダにビルドされたパッケージが置かれます。</p>

<h2 id="%E5%8F%82%E8%80%83%E3%81%AB%E3%81%AA%E3%82%8A%E3%81%9D%E3%81%86%E3%81%AA%E3%83%91%E3%83%83%E3%82%B1%E3%83%BC%E3%82%B8">参考になりそうなパッケージ</h2>

<p><a href="https://github.com/search?q=os_min_ver+filename%3AINFO&amp;type=Code&amp;ref=advsearch&amp;l=&amp;l=">Search · os_min_ver filename:INFO</a> で適当に検索してリストアップしてみました。</p>

<table>
<thead>
<tr>
  <th>パッケージ名</th>
  <th>DSM</th>
  <th>概要</th>
</tr>
</thead>
<tbody>
<tr>
  <td><a href="https://github.com/SynologyOpenSource/ExamplePackages/tree/main/ExamplePackage"><code>ExamplePackage</code></a></td>
  <td>7.0</td>
  <td>公式サンプルパッケージ</td>
</tr>
<tr>
  <td><a href="https://github.com/SynologyOpenSource/ExamplePackages/tree/main/nmap"><code>nmap</code></a></td>
  <td>7.0</td>
  <td>公式サンプル nmap パッケージ</td>
</tr>
<tr>
  <td><a href="https://github.com/prabirshrestha/synology-package-template"><code>synology-package-template</code></a></td>
  <td>7.0/6.x</td>
  <td>サンプルパッケージ</td>
</tr>
<tr>
  <td><a href="https://github.com/tailscale/tailscale-synology"><code>Tailscale package</code></a></td>
  <td>7.0/6.x</td>
  <td>Tailscale VPN パッケージ？</td>
</tr>
<tr>
  <td><a href="https://github.com/vladlenas/Synology-TorrServer"><code>TorrServer package</code></a></td>
  <td>7.0/6.x</td>
  <td>TorrServerパッケージ</td>
</tr>
<tr>
  <td><a href="https://github.com/runfalk/synology-wireguard"><code>WireGuard package</code></a></td>
  <td>7.0/6.x</td>
  <td>WireGuardパッケージ</td>
</tr>
<tr>
  <td><a href="https://github.com/reidemei/synology-autorun"><code>autorun</code></a></td>
  <td>7.0/6.x</td>
  <td>Synology NASで外付けドライブ（USB / eSATA）を接続するときにスクリプトを実行</td>
</tr>
</tbody>
</table>

<h2 id="%E5%8F%82%E8%80%83">参考</h2>

<ul>
<li><a href="https://github.com/SynologyOpenSource/pkgscripts-ng/tree/DSM6.0">GitHub - SynologyOpenSource/pkgscripts-ng at DSM6.0</a></li>
<li><a href="https://help.synology.com/developer-guide/getting_started/prepare_environment.html">Prepare Envrionment · GitBook</a></li>
<li><a href="https://github.com/SynologyOpenSource/minimalPkg/issues/5">Unable to Sign package with GPG key · Issue #5 · SynologyOpenSource/minimalPkg · GitHub</a></li>
<li><a href="https://qiita.com/yagince/items/deba267f789604643bab">Docker Ubuntu18.04でtzdataをinstallするときにtimezoneの選択をしないでinstallする - Qiita</a></li>
<li><a href="https://kb.synology.com/ja-jp/DSM/tutorial/What_kind_of_CPU_does_my_NAS_have">Synology NAS に搭載されている CPU の種類は？ - Synology ナレッジセンター</a></li>
<li><a href="https://global.download.synology.com/download/Document/Software/DeveloperGuide/Firmware/DSM/7.0/enu/DSM_Developer_Guide_7_0_Beta.pdf">DSM Developer Guide 7.0 BETA</a></li>
<li><a href="https://global.download.synology.com/download/Document/Software/DeveloperGuide/Firmware/DSM/6.0/enu/DSM_Developer_Guide_6_0.pdf">Synology DSM6.0 Developer Guide</a></li>
</ul>
]]></content>
        </entry>
    </feed>