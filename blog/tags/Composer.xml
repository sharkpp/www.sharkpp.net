<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
    <title><![CDATA[さめたすたすのお家]]></title>
    <link href="http://www.sharkpp.net/blog/tags/Composer.xml" rel="self"/>
    <link href="http://www.sharkpp.net/"/>
    <updated>2018-08-23T13:06:58+00:00</updated>
    <id>http://www.sharkpp.net/</id>
            <author>
            <name><![CDATA[sharkpp]]></name>                    </author>
        <generator uri="http://sculpin.io/">Sculpin</generator>
            <entry>
            <title type="html"><![CDATA[Sculpin でリダイレクトページを生成する Sculpin Redirect Bundle を使ってみた]]></title>
            <link href="http://www.sharkpp.net/blog/2016/06/12/using-sculpin-redirect-bundle.html"/>
            <updated>2016-06-12T13:01:00+00:00</updated>
            <id>http://www.sharkpp.net/blog/2016/06/12/using-sculpin-redirect-bundle.html</id>
            <content type="html"><![CDATA[<p>GitHub Pages にホムペを移行させようと考えていたけど、 <a href="https://help.github.com/articles/redirects-on-github-pages/">Redirects on GitHub Pages</a> を見ると</p>

<blockquote>
  <p>For the security of our users, GitHub Pages does not support customer server configuration files such as .htaccess or .conf.
  訳：ユーザーの皆様の安全のために、GitHub Pages は、.htaccess ファイルや .conf のような顧客のサーバ設定ファイルをサポートしていません。</p>
</blockquote>

<p>って記載があるので、ページのリダイレクトを GitHub Pages ではできないのかって思ってたけど、すぐ後に</p>

<blockquote>
  <p>using the <a href="https://github.com/jekyll/jekyll-redirect-from">Jekyll Redirect From plugin</a>, you can automatically redirect visitors to the updated URL.
  訳：<a href="https://github.com/jekyll/jekyll-redirect-from">Jekyll Redirect From プラグイン</a>を使用して、更新された URL への訪問者を自動的にリダイレクトすることができます。</p>
</blockquote>

<p>と、書いてあったので Jekyll は出来ていいな〜と、使いたいのは Sculpin なんだけどなぁって考えて…… そうだ！なければ作ればいいじゃん！</p>

<p>と、その前に、<a href="https://packagist.org/">Packagist</a> で <a href="https://packagist.org/search/?tags=sculpin">#sculpin</a> を探してみたところ、ちょうど良さそうなの <a href="https://packagist.org/packages/mavimo/sculpin-redirect-bundle">mavimo/sculpin-redirect-bundle - Packagist</a>
 があったので使ってみました。</p>

<h2 id="%E3%82%A4%E3%83%B3%E3%82%B9%E3%83%88%E3%83%BC%E3%83%AB">インストール</h2>

<p>内容的には Bundle の README を見れば OK です。</p>

<p><code>sculpin.json</code> にパッケージを追加。</p>

<pre><code class="diff">     "require": {
+        "mavimo/sculpin-redirect-bundle": "@dev"
     },
</code></pre>

<p>次に <code>sculpin update</code> をします。
次の手順を先に行うと実行できると言えばできるのですが、 Bundle のクラスがないよ！って怒られるので先に更新をします。</p>

<pre><code class="bash">$ php sculpin update
Loading composer repositories with package information
      :
Compiling component files
</code></pre>

<p><code>app/SculpinKernel.php</code> にパッケージのクラスを追加。</p>

<pre><code class="diff">     protected function getAdditionalSculpinBundles()
     {
         return array(
+           'Mavimo\Sculpin\Bundle\RedirectBundle\SculpinRedirectBundle'
         );
     }
 }
</code></pre>

<p class="alert alert-info" role="alert">ファイルが存在しない場合は、 <a href="https://github.com/beryllium/icelus#installation">beryllium/icelus § Installation</a> や <a href="https://sculpin.io/documentation/extending-sculpin/configuration/">Configuration — Sculpin</a> を参考にして <code>app/SculpinKernel.php</code> を作ってください。
</p>

<p>次にリダイレクト用のページの元となるテンプレート <code>source/_layouts/redirect.html</code> を作ります。
作る内容は Bundle の README のままでもいいですし、リダイレクト先を <code>{{ site.url }}{{ page.destination.url }}</code> としてもいいでしょう。</p>

<pre><code>&lt;!DOCTYPE html&gt;
{% spaceless %}
&lt;html&gt;
  &lt;head&gt;
    &lt;meta http-equiv="content-type" content="text/html; charset=utf-8" /&gt;
    &lt;meta http-equiv="refresh" content="0;url={{ page.destination.url }}" /&gt;
  &lt;/head&gt;
&lt;/html&gt;
{% endspaceless %}
</code></pre>

<p>そして、これで、準備は完了です。</p>

<p>余談として、 <code>redirect.html</code> を作る場所が README には <code>Then create a redirect.html file in your theme</code> としか書かれていないので、最初 <code>source</code> 直下にファイルを置いてテストしていたところ生成されず小一時間ほど頭を悩ましました。
ページ生成時時には、ログが大量に流れていくのですが、</p>

<pre><code class="bash">$ php sculpin.phar generate
Detected new or updated files
Generating: 100% (80 sources / 0.01 seconds)
Converting:  71% [ Twig_Error_Loader: Template "redirect" is not defined (Sculpin\Bundle\TwigBundle\FlexibleExtensionFilesystemLoader: Template "redirect" is not defined.). ]
              :
</code></pre>

<p>と、このようなログが出ていたので、拡張子を変えてみたり、いろいろ変えてみた結果、もしかして！と思い <code>source/_layouts/redirect.html</code> にファイルを作ると思った通りに動作するようになったのでした。</p>

<h2 id="%E5%88%A9%E7%94%A8%E6%96%B9%E6%B3%95">利用方法</h2>

<p>こちらも基本的には Bundle の README に書かれている通りです。</p>

<p>それぞれのページ用のファイルの先頭部分、ページタイトルや日時が書かれている部分に転送元のパスを列挙するだけで OK です。</p>

<p>例として <code>main.html</code> が転送先とします。</p>

<pre><code class="yaml">          :
redirect:
    - alias-path.html
    - old-path.html

---
        :
</code></pre>

<p>と、このような感じで書くと <code>alias-path.html</code> と <code>old-path.html</code> が生成されて、そのアドレスにアクセスされると <code>main.html</code> へと転送されます。</p>

<p>例えば <a href="https://github.com/sharkpp/travis-ci-pull-test/commit/8888448e41b1439570011158c2be2396f4afbab3#diff-8b370a9f2d572cc50d203266c8281d58">commit 8888448e41b1439570011158c2be2396f4afbab3</a> のように追加すると <a href="http://sharkpp.github.io/travis-ci-pull-test/old-path.html">/old-path.html</a> からアクセスすると <a href="http://sharkpp.github.io/travis-ci-pull-test/blog/2013/02/04/highlight/">/blog/2013/02/04/highlight/</a> へと転送されます。</p>

<h2 id="%E3%83%86%E3%83%B3%E3%83%97%E3%83%AC%E3%83%BC%E3%83%88-redirect.html-%E3%81%A7%E5%88%A9%E7%94%A8%E3%81%A7%E3%81%8D%E3%82%8B%E5%A4%89%E6%95%B0">テンプレート redirect.html で利用できる変数</h2>

<table>
<thead>
<tr>
  <th>変数名</th>
  <th>説明</th>
</tr>
</thead>
<tbody>
<tr>
  <td><code>page.destination</code></td>
  <td>リダイレクト先の <code>page</code> の内容</td>
</tr>
</tbody>
</table>

<h2 id="%E5%8F%82%E8%80%83">参考</h2>

<ul>
<li><a href="https://packagist.org/packages/mavimo/sculpin-redirect-bundle">mavimo/sculpin-redirect-bundle - Packagist</a></li>
<li><a href="https://github.com/mavimo/sculpin-redirect-bundle/blob/master/RedirectGenerator.php">sculpin-redirect-bundle/RedirectGenerator.php at master · mavimo/sculpin-redirect-bundle</a></li>
</ul>
]]></content>
        </entry>
            <entry>
            <title type="html"><![CDATA[Sculpin でサムネイルを自動生成する Icelus Bundle を使ってみた]]></title>
            <link href="http://www.sharkpp.net/blog/2015/11/02/using-sculpin-thumbnail-generator-icelus.html"/>
            <updated>2015-11-02T12:50:00+00:00</updated>
            <id>http://www.sharkpp.net/blog/2015/11/02/using-sculpin-thumbnail-generator-icelus.html</id>
            <content type="html"><![CDATA[<p>Sculpin でページ生成時にサムネイルを作る Bundle 無いかなぁ？</p>

<p>無いなら作ろうかなぁ〜って思って <a href="https://packagist.org/">Packagist</a> を探してみたらそれらしいのを見つけたので試してみた。</p>

<p>見つけたのは <a href="https://packagist.org/packages/beryllium/icelus">beryllium/icelus - Packagist</a> です。</p>

<blockquote>
  <p>Thumbnail generator for Sculpin-based websites</p>
</blockquote>

<p>と書いてありました。</p>

<h2 id="%E3%81%A8%E3%82%8A%E3%81%82%E3%81%88%E3%81%9A%E4%BD%BF%E3%81%A3%E3%81%A6%E3%81%BF%E3%82%8B">とりあえず使ってみる</h2>

<p>完全な差分は <a href="https://github.com/sharkpp/www.sharkpp.net/commit/68efa31f1f13a8db8ab45dd5d1cbfb019fffa316">IcelusBundle を追加してサムネイルを自動で生成するように変更 · sharkpp/www.sharkpp.net@68efa31</a> です。</p>

<h3 id="%E3%82%A4%E3%83%B3%E3%82%B9%E3%83%88%E3%83%BC%E3%83%AB">インストール</h3>

<p><code>sculpin.json</code> にパッケージを追加。</p>

<pre><code class="diff">         "components/jquery": "~1.9.1",
         "components/highlightjs": "~7.3.0",
         "jasny/twig-extensions": "@dev",
-        "sharkpp/sculpin-calendarian-bundle": "dev-master"
+        "sharkpp/sculpin-calendarian-bundle": "dev-master",
+        "beryllium/icelus": "*"
     },
     "autoload": {
         "psr-0": {
</code></pre>

<p>そして、おもむろに <code>sculpin.phar update</code> を実行。</p>

<pre><code class="bash">$ php sculpin.phar update
Loading composer repositories with package information
Updating dependencies
  - Installing imanee/imanee (1.2.2)
    Downloading: 100%         

  - Installing beryllium/icelus (1.0.0)
    Downloading: 100%         

Writing lock file
Generating autoload files
Compiling component files
</code></pre>

<p><code>app/SculpinKernel.php</code> にパッケージのクラスを追加。</p>

<pre><code class="diff">     protected function getAdditionalSculpinBundles()
     {
         return array(
-           'Sharkpp\Sculpin\Bundle\CalendarianBundle\SculpinCalendarianBundle'
+           'Sharkpp\Sculpin\Bundle\CalendarianBundle\SculpinCalendarianBundle',
+           'Beryllium\Icelus\IcelusBundle',
         );
     }
 }
</code></pre>

<p class="alert alert-info" role="alert">ファイルが存在しない場合は、 <a href="https://github.com/beryllium/icelus#installation">beryllium/icelus § Installation</a> や <a href="https://sculpin.io/documentation/extending-sculpin/configuration/">Configuration — Sculpin</a> を参考にして <code>app/SculpinKernel.php</code> を作ってください。
</p>

<h2 id="%E4%BD%BF%E3%81%A3%E3%81%A6%E3%81%BF%E3%82%8B">使ってみる</h2>

<p>の前に、どうやら Markdown Converter と相性というか、タイミングが悪いみたいで、</p>

<pre><code class="markdown">![64 x 64]({{ thumbnail('/images/noname/196x196.png', 64, 64) }})
</code></pre>

<p>と記述すると、</p>

<pre><code class="md">![64 x 64](/_thumbs/b0d061130443fcd10d882073d6ef32f0-64x64.png)
</code></pre>

<p>と、このように惜しい感じになるので</p>

<pre><code class="html">&lt;img src="{{ thumbnail('/images/noname/196x196.png', 64, 64) }}" alt="64 x 64"&gt;
</code></pre>

<p>と、HTMLのタグで直接記述しないとダメなようです。</p>

<h3 id="%E5%85%83%E7%94%BB%E5%83%8F">元画像</h3>

<p><img src="/images/noname/196x196.png" alt="196 x 196" /></p>

<h3 id="64px-%E3%81%AE%E3%82%B5%E3%83%A0%E3%83%8D%E3%82%A4%E3%83%AB">64px のサムネイル</h3>

<p><img src="/thumbs/b0d061130443fcd10d882073d6ef32f0-64x64.png" alt="64 x 64"></p>

<pre><code class="html">&lt;img src="{{ thumbnail('/images/noname/196x196.png', 64, 64) }}" alt="64 x 64"&gt;
</code></pre>

<h3 id="16px-%E3%81%AE%E3%82%B5%E3%83%A0%E3%83%8D%E3%82%A4%E3%83%AB">16px のサムネイル</h3>

<p><img src="/thumbs/b0d061130443fcd10d882073d6ef32f0-16x16.png" alt="16 x 16"></p>

<pre><code class="html">&lt;img src="{{ thumbnail('/images/noname/196x196.png', 16, 16) }}" alt="16 x 16"&gt;
</code></pre>

<h3 id="%E3%83%89%E3%82%AD%E3%83%A5%E3%83%A1%E3%83%B3%E3%83%88%E3%81%AE%E3%83%9F%E3%82%B9%E3%81%AB%E3%81%A4%E3%81%84%E3%81%A6">ドキュメントのミスについて</h3>

<p>あと、最初に使い方を<a href="https://github.com/beryllium/icelus/blob/484174cc735c0589ffe77d94f165e9f6c9f3c726/README.md#usage">ドキュメント</a>で見たところ、</p>

<pre><code class="hmtl">&lt;a href="image.jpg"&gt;&lt;img src="{% thumbnail('image.jpg', 100, 100) %}"&gt;&lt;/a&gt;
</code></pre>

<p>と記述してあったので素直にその通り書いて、実行したところ、</p>

<pre><code class="bash">             :
Generating: 100% (1079 sources / 0.17 seconds)
Converting:  14% [ Twig_Error_Syntax: Unexpected tag name "thumbnail" (expecting closing tag for the "for" tag defined near line 7) in "FileSource:FilesystemDataSource:~/git/test/source:test.html" at line 14 ]
 [ Twig_Error_Syntax: Unexpected tag name "thumbnail" (expecting closing tag for the "for" tag defined near line 7) in "FileSource:FilesystemDataSource:~/git/test/source:test.html" at line 14 ]
100% (1722 sources / 7.49 seconds)
             :
</code></pre>

<p>とエラーが出たので、</p>

<p>しばらく、これ実は使えない？とか、設定が足らない？とか思いながらしばらく試してみて、ふと</p>

<pre><code class="hmtl">&lt;a href="image.jpg"&gt;&lt;img src="{{ thumbnail('image.jpg', 100, 100) }}"&gt;&lt;/a&gt;
</code></pre>

<p>と書かないとダメなのではと思い試してみたところ、うまく動きました。</p>

<p>これは、 もう Pull Request するしかないと思ってサクッと <a href="https://github.com/beryllium/icelus/pull/1">PR</a> しました。</p>

<h3 id="%E8%A8%AD%E5%AE%9A%E3%81%AB%E3%81%A4%E3%81%84%E3%81%A6">設定について</h3>

<p><a href="https://github.com/beryllium/icelus/blob/484174cc735c0589ffe77d94f165e9f6c9f3c726/DependencyInjection/Configuration.php">icelus/DependencyInjection/Configuration.php</a> とかを見ると設定で出力先などが変更できそうな気がしましたが、、、</p>

<p>他のソースを見ると使っている形跡がなく、そもそもドキュメントにも記載がないのできっと作りかけなのでしょう。</p>

<h2 id="%E5%8F%82%E8%80%83">参考</h2>

<ul>
<li><a href="https://packagist.org/packages/beryllium/icelus">beryllium/icelus - Packagist</a></li>
<li><a href="https://github.com/beryllium/icelus">beryllium/icelus</a></li>
<li><a href="http://twig.sensiolabs.org/doc/templates.html">Twig for Template Designers - Documentation - Twig - The flexible, fast, and secure PHP template engine</a></li>
<li><a href="https://sculpin.io/documentation/generators/">Generators — Sculpin — PHP Static Site Generator</a></li>
<li><a href="https://sculpin.io/documentation/extending-sculpin/configuration/">Configuration — Sculpin — PHP Static Site Generator</a></li>
</ul>
]]></content>
        </entry>
            <entry>
            <title type="html"><![CDATA[Sculpin でブログアーカイブの日付ごとにポストをまとめたページを作るバンドルを作ってみた]]></title>
            <link href="http://www.sharkpp.net/blog/2015/08/09/create-sculpin-blog-archive-date-directory-bundle.html"/>
            <updated>2015-08-09T22:00:00+00:00</updated>
            <id>http://www.sharkpp.net/blog/2015/08/09/create-sculpin-blog-archive-date-directory-bundle.html</id>
            <content type="html"><![CDATA[<p><a href="https://sculpin.io/">Sculpin</a> でブログアーカイブの日付ごとにポストをまとめたページを作るバンドルを作ってみました。</p>

<ul>
<li><a href="https://github.com/sharkpp/sculpin-calendarian-bundle">sharkpp/sculpin-calendarian-bundle - GitHub</a></li>
<li><a href="https://packagist.org/packages/sharkpp/sculpin-calendarian-bundle">sharkpp/sculpin-calendarian-bundle - Packagist</a></li>
</ul>

<p>とりあえずは、 generator として指定されたディレクトリ以下にインデックスページをどかどかっと作成します。</p>

<p>ようするに、 <a href="http://www.sharkpp.net/blog/2015/">http://www.sharkpp.net/blog/2015/</a> とかで、この例だと 2015 年に投稿された記事の一覧が列挙されるページを作ることが出来ます。</p>

<h2 id="%E3%81%BE%E3%81%9A%E5%A7%8B%E3%82%81%E3%81%AB">まず始めに</h2>

<p>Sculpin でブログとかを作ると、記事の日付で URL を掘り下げて作ってくれたりするのですが、残念なことに、 Wordpress などでもよくあるような、年月日ごとに記事を列挙したページを作る機能がありませんでした。</p>

<p>で、無ければ作ろう！と思い立ったはいいけど、進捗は思わしくなく、、、ってところで最終的に３時間程度で動く物が出来たのでもにょる所。</p>

<p>それはともかく、公式のドキュメントを見たり、<a href="https://symfony.com/">Symfony</a> のドキュメントを見たり、 Sculpin のソースを見たりと、なんとか形に出来ました。</p>

<h2 id="sculpin-%E3%82%92%E6%8B%A1%E5%BC%B5%E3%81%99%E3%82%8B%E3%81%9F%E3%82%81%E3%81%AE%E5%BF%83%E5%BE%97">Sculpin を拡張するための心得</h2>

<ol>
<li>公式ドキュメントの "<a href="https://sculpin.io/documentation/extending-sculpin">Extending Sculpin</a>" を熟読しよう！</li>
<li>Symfony2 のドキュメント "<a href="http://docs.symfony.gr.jp/symfony2/cookbook/bundles/best_practices.html">バンドルの構造とベストプラクティス</a>"、"<a href="http://docs.symfony.gr.jp/symfony2/cookbook/bundles/extension.html">セマンティックコンフィギュレーションを通してバンドルを設定する方法</a>" を熟読しよう！</li>
<li><a href="https://github.com/mavimo/sculpin-redirect-bundle">mavimo/sculpin-redirect-bundle</a> を熟読しよう！</li>
<li>Sculpin の <a href="https://github.com/sculpin/sculpin/">ソース</a> を熟読しよう！</li>
</ol>

<p>で、なんとなくは作れる気がします。</p>

<h2 id="packagist-%E3%81%AB%E5%85%AC%E9%96%8B%E3%81%97%E3%82%88%E3%81%86%EF%BC%81">Packagist に公開しよう！</h2>

<p>Composer で簡単に使えるようにするに、 Packagist に登録してみます。</p>

<p>というか、登録せずに <code>composer.json</code> 書いて <code>php composer.phar install</code> したら</p>

<pre><code class="bash">$ php sculpin.phar update
Loading composer repositories with package information
Updating dependencies
Your requirements could not be resolved to an installable set of packages.

  Problem 1
    - The requested package sharkpp/sculpin-calendarian-bundle could not be found in any version, there may be a typo in the package name.

Potential causes:
 - A typo in the package name
 - The package is not available in a stable-enough version according to your minimum-stability setting
   see &lt;https://groups.google.com/d/topic/composer-dev/_g3ASeIFlrc/discussion&gt; for more details.

Read &lt;http://getcomposer.org/doc/articles/troubleshooting.md&gt; for further common problems.
</code></pre>

<p>って言われてもにょる。</p>

<p>ってことで、</p>

<ol>
<li>パッケージ用の composer.json を書きましょう！</li>
<li>Packagist への登録時に怒られるので、レポジトリ名は小文字で！</li>
<li>Packagist 登録時には Git or Svn or Hg の公開レポジトリ URL が必要になるので、今回は GitHub に登録！</li>
<li>Packagist に登録です！</li>
</ol>

<p>ってことで、GitHub の <a href="https://github.com/sharkpp/sculpin-calendarian-bundle">sharkpp/sculpin-calendarian-bundle</a> で公開し、 Packagist の <a href="https://packagist.org/packages/sharkpp/sculpin-calendarian-bundle">sharkpp/sculpin-calendarian-bundle</a> でパッケージを登録しました。</p>

<h2 id="%E5%8F%82%E8%80%83">参考</h2>

<ul>
<li><a href="http://docs.symfony.gr.jp/symfony2/book/service_container.html">サービスコンテナ | Symfony2日本語ドキュメント</a></li>
<li><a href="http://docs.symfony.gr.jp/symfony2/cookbook/bundles/extension.html">セマンティックコンフィギュレーションを通してバンドルを設定する方法 | Symfony2日本語ドキュメント</a></li>
<li><a href="http://docs.symfony.gr.jp/symfony2/cookbook/bundles/best_practices.html">バンドルの構造とベストプラクティス | Symfony2日本語ドキュメント</a></li>
<li><a href="https://github.com/sculpin/sculpin/blob/master/src/Sculpin/Bundle/PaginationBundle/PaginationGenerator.php">sculpin/PaginationGenerator.php at master · sculpin/sculpin · GitHub</a></li>
<li><a href="https://sculpin.io/documentation/extending-sculpin/configuration/">Configuration — Sculpin — PHP Static Site Generator</a></li>
<li><a href="https://github.com/mavimo/sculpin-redirect-bundle">mavimo/sculpin-redirect-bundle · GitHub</a></li>
</ul>
]]></content>
        </entry>
            <entry>
            <title type="html"><![CDATA[PHP で日本語を含む HTML から Markdown に変換する方法]]></title>
            <link href="http://www.sharkpp.net/blog/2015/07/05/how-to-japanese-html-to-markdown-in-php.html"/>
            <updated>2015-07-05T12:00:00+00:00</updated>
            <id>http://www.sharkpp.net/blog/2015/07/05/how-to-japanese-html-to-markdown-in-php.html</id>
            <content type="html"><![CDATA[<p>ホムペを再構築するにあたり<a href="/blog/2015/06/28/site-reboot-by-sculpin.html">Sculpin でホムペを再構築したときのメモ</a>でもサラッと書いたけど“.html をスクリプトで .md に変換＆リンクを再構成”というのが割と厄介だった。</p>

<p>PHP で Markdown 記法から HTML への変換を行うライブラリ/パッケージは多数見つかるが、その逆の HTML から Markdown 記法への変換を行う物は数えるほどしかありませんでした。</p>

<p>ざっと探した感じでは</p>

<ul>
<li><a href="https://github.com/nickcernis/html-to-markdown">nickcernis/html-to-markdown</a></li>
<li><a href="https://github.com/Elephant418/Markdownify">Elephant418/Markdownify</a></li>
</ul>

<p>ぐらいのようです。</p>

<p>結局、１番目の <code>html-to-markdown</code> は思ったように動いてくれなかったので、２つ目の <code>Markdownify</code> を使うようにしたのですがこちらも癖があって意図通りに動かすのは大変でした。</p>

<h2 id="%E6%BA%96%E5%82%99">準備</h2>

<p>とりあえず、ライブラリを使えるように準備をします。</p>

<p><strong>composer.json</strong></p>

<pre><code class="json">{
    "require": {
        "pixel418/markdownify": "2.1.*"
    }
}
</code></pre>

<p>と、先の内容で Composer の設定ファイルを作り、</p>

<pre><code class="bash">$ php -r "readfile('https://getcomposer.org/installer');" | php
$ php composer.phar install
</code></pre>

<p>Composer のインストール＆ライブラリのインストール。</p>

<p>コレだけで</p>

<pre><code class="php">&lt;?php

require_once(dirname(__FILE__) . '/vendor/autoload.php');

</code></pre>

<p>とすると使えるようになります。</p>

<p><code>Composer</code> 便利！</p>

<h2 id="%E5%AE%9F%E9%9A%9B%E3%81%AB%E4%BD%BF%E3%81%A3%E3%81%A6%E3%81%BF%E3%82%8B">実際に使ってみる</h2>

<pre><code class="php">&lt;?php

require_once(dirname(__FILE__) . '/vendor/autoload.php');

$html=&lt;&lt;&lt;'EOD'
&lt;h1&gt;てすとヘッダレベル１&lt;/h1&gt;
&lt;p&gt;ぱらぐらふ1234&lt;/p&gt;
&lt;p&gt;ABCDE色々いろいろ&lt;/p&gt;
EOD;

$md = new Markdownify\Converter();
$markdown = $md-&gt;parseString($html . PHP_EOL);
unset($md);

echo $markdown . PHP_EOL;
</code></pre>

<p>こんな感じの内容でテストしてみましょう。</p>

<pre><code class="markdown"># てすとヘッダレベル１

ぱらぐらふ1234

ABCDE色? いろいろ
</code></pre>

<p>とりあえず変換できて、、い、、る？</p>

<p><code>ABCDE色々いろいろ</code> が <code>ABCDE色? いろいろ</code> と文字化けてしまっています。</p>

<p>今回、ここが手子摺ったっ部分です。</p>

<h2 id="markdonify-%E3%81%AE%E4%BD%BF%E3%81%84%E6%96%B9">Markdonify の使い方</h2>

<p>簡単な使い方</p>

<pre><code class="php">    $md = new Markdownify\Converter(/* パラメータ */);
    $markdown = $md-&gt;parseString($html . PHP_EOL);
    unset($md);
</code></pre>

<p>たったコレだけです！</p>

<h3 id="%E3%83%91%E3%83%A9%E3%83%A1%E3%83%BC%E3%82%BF">パラメータ</h3>

<p><code>Markdownify\Converter</code> クラスのコンストラクタで <code>Markdownify\Converter($linkPosition = self::LINK_AFTER_CONTENT, $bodyWidth = MDFY_BODYWIDTH, $keepHTML = MDFY_KEEPHTML)</code> のようにパラメータを与えられるようになっています。</p>

<table>
<thead>
<tr>
  <th>引数名</th>
  <th>デフォルト値</th>
  <th></th>
</tr>
</thead>
<tbody>
<tr>
  <td><code>$linkPosition</code></td>
  <td><code>LINK_AFTER_CONTENT</code></td>
  <td>リンクの位置を定義。<br/><code>Markdownify\Converter::LINK_AFTER_CONTENT</code> の場合は末尾にまとめる。<br/><code>Markdownify\Converter::LINK_AFTER_PARAGRAPH</code> の場合は段落ごとにまとめる。<br/><code>Markdownify\Converter::LINK_IN_PARAGRAPH</code> の場合はその場で定義。</td>
</tr>
<tr>
  <td><code>$bodyWidth</code></td>
  <td><code>false</code></td>
  <td>出力を所定の幅で折り返すかどうか。 <code>false</code> もしくは 26 以上の値。</td>
</tr>
<tr>
  <td><code>$keepHTML</code></td>
  <td><code>true</code></td>
  <td>markdown へ変換できない HTMLを維持するか、それを破棄するかどうか。</td>
</tr>
</tbody>
</table>

<h3 id="%24linkposition-%E3%83%91%E3%83%A9%E3%83%A1%E3%83%BC%E3%82%BF">$linkPosition パラメータ</h3>

<p>リンクの位置を定義するパラメータです。</p>

<p>共通のコードをベースにパラメータを変えて結果を比較してみます。</p>

<pre><code class="php">&lt;?php
require_once(dirname(__FILE__) . '/vendor/autoload.php');

$html=&lt;&lt;&lt;'EOD'
&lt;h1&gt;てすとヘッダレベル１&lt;/h1&gt;
&lt;p&gt;ぱらぐらふ&lt;a href="http://example.net/~hoge/"&gt;xxxx&lt;/a&gt;1234&lt;/p&gt;
&lt;p&gt;ABCDE&lt;a href="http://example.net/~fuga/"&gt;aaaa&lt;/a&gt;いろいろ&lt;/p&gt;
&lt;p&gt;いろいろABCDE&lt;/p&gt;
&lt;h2&gt;てすとヘッダレベル２&lt;/h2&gt;
&lt;p&gt;パラグラフ1234&lt;/p&gt;
&lt;p&gt;いろいろ&lt;a href="http://example.net/~foo/"&gt;bbbb&lt;/a&gt;ABCDE&lt;/p&gt;
&lt;h2&gt;てすとヘッダレベル２&lt;/h2&gt;
&lt;p&gt;いろいろABCDE&lt;/p&gt;
EOD;

$md = new Markdownify\Converter(/* $linkPosition パラメータ */);
echo $md-&gt;parseString($html).PHP_EOL;
</code></pre>

<p>このコードの <code>/* $linkPosition パラメータ */</code> の部分を <code>Markdownify\Converter::LINK_AFTER_CONTENT</code> や <code>Markdownify\Converter::LINK_AFTER_PARAGRAPH</code> に変えた結果を乗せます。</p>

<h4 id="link_after_content">LINK_AFTER_CONTENT</h4>

<p>の結果は</p>

<pre><code class="markdown"># てすとヘッダレベル１

ぱらぐらふ[xxxx][1]＆[xxx2][2]1234

ABCDE[aaaa][3]いろいろ

いろいろABCDE

## てすとヘッダレベル２

パラグラフ1234

いろいろ[bbbb][4]ABCDE

## てすとヘッダレベル２

いろいろABCDE

 [1]: http://example.net/~hoge/
 [2]: http://example.net/~hoge2/
 [3]: http://example.net/~fuga/
 [4]: http://example.net/~foo/
</code></pre>

<p>のように、末尾にリンクがまとめて出力されます。</p>

<h4 id="link_after_paragraph">LINK_AFTER_PARAGRAPH</h4>

<p>の結果は</p>

<pre><code class="markdown"># てすとヘッダレベル１

ぱらぐらふ[xxxx][1]＆[xxx2][2]1234

 [1]: http://example.net/~hoge/
 [2]: http://example.net/~hoge2/

ABCDE[aaaa][3]いろいろ

 [3]: http://example.net/~fuga/

いろいろABCDE

## てすとヘッダレベル２

パラグラフ1234

いろいろ[bbbb][4]ABCDE

 [4]: http://example.net/~foo/

## てすとヘッダレベル２

いろいろABCDE
</code></pre>

<p>のように、段落ごとににリンクがまとめて出力されます。</p>

<h4 id="link_in_paragraph">LINK_IN_PARAGRAPH</h4>

<p>の結果は</p>

<pre><code class="markdown"># てすとヘッダレベル１

ぱらぐらふ[xxxx](http://example.net/~hoge/)＆[xxx2](http://example.net/~hoge2/)1234

ABCDE[aaaa](http://example.net/~fuga/)いろいろ

いろいろABCDE

## てすとヘッダレベル２

パラグラフ1234

いろいろ[bbbb](http://example.net/~foo/)ABCDE

## てすとヘッダレベル２

いろいろABCDE
</code></pre>

<p>のように、リンクはその場で出力されます。</p>

<p>手で記述する場合に近いと思います。</p>

<h3 id="%24bodywidth">$bodyWidth</h3>

<p>出力を所定の幅で折り返すかどうかを指定するパラメータです。
ソースを確認すると <code>false</code> もしくは 26 以上の値が有効なようです。</p>

<p>また、日本語の文字列は容易に文字化けます。</p>

<pre><code class="php">&lt;?php
require_once(dirname(__FILE__) . '/vendor/autoload.php');

$html=&lt;&lt;&lt;'EOD'
&lt;p&gt;government of the people, by the people, for the people&lt;/p&gt;
EOD;

$md = new Markdownify\Converter(Markdownify\Converter::LINK_AFTER_CONTENT, false);
echo $md-&gt;parseString($html).PHP_EOL;
</code></pre>

<p>だと、</p>

<pre><code class="markdown"># government of the people, by the people, for the people

government of the people, by the people, for the people
</code></pre>

<p>こうなりますが、 30 を指定すると</p>

<pre><code class="php"># government of the people, by
the people, for the people

government of the people, by
the people, for the people
</code></pre>

<p>このようになります。</p>

<p>、、、長いヘッダも折り返されてしまうのでちょっと困りますね。</p>

<p>あまりにも長い内容が無い限り、このパラメータは <code>false</code> で問題ないと思います。</p>

<h3 id="%24keephtml">$keepHTML</h3>

<p>markdown に変換できないタグを残す(<code>true</code>)か残さない(<code>false</code>)かを指定するパラメータです。</p>

<pre><code class="php">&lt;?php
require_once(dirname(__FILE__) . '/vendor/autoload.php');

$html=&lt;&lt;&lt;'EOD'
&lt;h1&gt;ほげ&lt;/h1&gt;
&lt;p&gt;ふがふがふが &lt;table&gt;&lt;tr&gt;&lt;td&gt;a&lt;/td&gt;&lt;td&gt;b&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt; &lt;/p&gt;
EOD;

$md = new Markdownify\Converter(Markdownify\Converter::LINK_AFTER_CONTENT, false, true);
echo $md-&gt;parseString($html).PHP_EOL;
</code></pre>

<p>この結果</p>

<pre><code class="markdown"># ほげ

ふがふがふが 

&lt;table&gt;
  &lt;tr&gt;
    &lt;td&gt;
      a
    &lt;/td&gt;

    &lt;td&gt;
      b
    &lt;/td&gt;
  &lt;/tr&gt;
&lt;/table&gt;
</code></pre>

<p>となりますが、<code>false</code> を指定すると</p>

<pre><code class="markdown"># ほげ

ふがふがふが 

a

b
</code></pre>

<p>こうなります。</p>

<p>中身のコンテンツはそのまま残るので<code>table</code>タグ等は意図せぬ結果になってしまうかもしれません。</p>

<h2 id="markdonify-%E3%82%92%E4%BD%BF%E3%81%86%E3%81%A8%E3%81%8D%E3%81%AE%E6%B3%A8%E6%84%8F%E7%82%B9">Markdonify を使うときの注意点</h2>

<ul>
<li>そのまま使うと日本語文字が化ける場合がある
解決方法は次の項で</li>
<li><code>parseString</code> を２回以上呼び出すと結果がおかしくなる
毎回 <code>unset</code> することで解決</li>
</ul>

<h2 id="%E6%97%A5%E6%9C%AC%E8%AA%9E%E6%96%87%E3%81%AE%E6%96%87%E5%AD%97%E5%8C%96%E3%81%91%E3%81%AE%E8%A7%A3%E6%B1%BA%E7%AD%96">日本語文の文字化けの解決策</h2>

<p>いろいろ試行錯誤はすっ飛ばしますが解決策はこれです。</p>

<pre><code class="php">&lt;?php

require_once(dirname(__FILE__) . '/vendor/autoload.php');

function text2entities($text)
{
  return preg_replace_callback('/./u', function($m){
        $s = $m[0];
        $len = strlen($s);
        switch ($len) {
        case 1: return $s;
        case 2: return '&amp;#'.(((ord($s[0])&amp;0x1F)&lt;&lt;6)|(ord($s[1])&amp;0x3F)).';';
        case 3: return '&amp;#'.(((ord($s[0])&amp;0xF)&lt;&lt;12)|((ord($s[1])&amp;0x3F)&lt;&lt;6)|(ord($s[2])&amp;0x3F)).';';
        case 4: return '&amp;#'.(((ord($s[0])&amp;0x7)&lt;&lt;18)|((ord($s[1])&amp;0x3F)&lt;&lt;12)|((ord($s[2])&amp;0x3F)&lt;&lt;6)
                             |(ord($s[3])&amp;0x3F)).';';
        case 5: return '&amp;#'.(((ord($s[0])&amp;0x3)&lt;&lt;24)|((ord($s[1])&amp;0x3F)&lt;&lt;18)|((ord($s[2])&amp;0x3F)&lt;&lt;12)
                            |((ord($s[3])&amp;0x3F)&lt;&lt;6)|(ord($s[4])&amp;0x3F)).';';
        case 6: return '&amp;#'.(((ord($s[0])&amp;0x1)&lt;&lt;30)|((ord($s[1])&amp;0x3F)&lt;&lt;24)|((ord($s[2])&amp;0x3F)&lt;&lt;18)
                            |((ord($s[3])&amp;0x3F)&lt;&lt;12)|((ord($s[4])&amp;0x3F)&lt;&lt;6)|(ord($s[5])&amp;0x3F)).';';
        }
        return $s;
      }, $text);
}

function entities2text($text)
{
  return
    preg_replace_callback('/&amp;#([0-9]+);/u', function($m){
        $u = intval($m[1]);
             if (0x00000000 &lt;= $u &amp;&amp; $u &lt;= 0x0000007F) { return chr($u); }
        else if (0x00000080 &lt;= $u &amp;&amp; $u &lt;= 0x000007FF) { return chr(0xC0|($u&gt;&gt;6)).chr(0x80|($u&amp;0x3F)); }
        else if (0x00000800 &lt;= $u &amp;&amp; $u &lt;= 0x0000FFFF)
             { return chr(0xE0|($u&gt;&gt;12)).chr(0x80|(($u&gt;&gt;6)&amp;0x3F)).chr(0x80|($u&amp;0x3F)); }
        else if (0x00010000 &lt;= $u &amp;&amp; $u &lt;= 0x001FFFFF)
             { return chr(0xF0|($u&gt;&gt;18)).chr(0x80|(($u&gt;&gt;12)&amp;0x3F)).chr(0x80|(($u&gt;&gt;6)&amp;0x3F))
                     .chr(0x80|($u&amp;0x3F)); }
        else if (0x00200000 &lt;= $u &amp;&amp; $u &lt;= 0x03FFFFFF)
             { return chr(0xF8|($u&gt;&gt;24)).chr(0x80|(($u&gt;&gt;18)&amp;0x3F)).chr(0x80|(($u&gt;&gt;12)&amp;0x3F))
                     .chr(0x80|(($u&gt;&gt;6)&amp;0x3F)).chr(0x80|($u&amp;0x3F)); }
        else if (0x04000000 &lt;= $u &amp;&amp; $u &lt;= 0x04000000)
             { return chr(0xFC|($u&gt;&gt;30)).chr(0x80|(($u&gt;&gt;24)&amp;0x3F)).chr(0x80|(($u&gt;&gt;18)&amp;0x3F))
                     .chr(0x80|(($u&gt;&gt;12)&amp;0x3F)).chr(0x80|(($u&gt;&gt;6)&amp;0x3F)).chr(0x80|($u&amp;0x3F)); }
        return $s;
      }, $text);
}

$html=&lt;&lt;&lt;'EOD'
&lt;h1&gt;てすとヘッダレベル１&lt;/h1&gt;
&lt;p&gt;ぱらぐらふ1234&lt;p/&gt;
&lt;p&gt;ABCDE色々いろいろ&lt;p/&gt;
EOD;

$md = new Markdownify\Converter();
$markdown = entities2text( $md-&gt;parseString( text2entities( $html ) . PHP_EOL) );
unset($md);


echo $markdown . PHP_EOL;
</code></pre>

<p>結局のところ、 <code>々</code> などの文字を <code>&amp;#12293;</code> のような数値文字参照に一旦変換し、 Makrdown に変換後にもとに戻すようにしました。</p>

<p>おそらくは、ライブラリの中の文字読み取り処理が ASCII 文字のみ処理することを前提として組んであるのでうまく行かないのではないかと予想できるのですが、変換を間に挟むことでとりあえずうまく動いてしまったので深くは辿ってはいません。</p>

<h2 id="%E3%81%BE%E3%81%A8%E3%82%81">まとめ</h2>

<p>とりあえず、まとめとして、 php を使い日本語を含む HTML を Markdown に変換するには、数値文字参照に変換した後 <a href="https://github.com/Elephant418/Markdownify">Markdownify</a> を使い、元に戻すことで出来る！</p>

<h2 id="%E5%8F%82%E8%80%83">参考</h2>

<ul>
<li><a href="https://getcomposer.org/doc/00-intro.md#installation-linux-unix-osx">Introduction - Composer</a></li>
<li><a href="https://ja.wikipedia.org/wiki/%E6%96%87%E5%AD%97%E5%8F%82%E7%85%A7">文字参照 - Wikipedia</a></li>
<li><a href="https://github.com/Elephant418/Markdownify">Elephant418/Markdownify</a></li>
</ul>
]]></content>
        </entry>
            <entry>
            <title type="html"><![CDATA[FuelPHPをphar化してポータブルに！]]></title>
            <link href="http://www.sharkpp.net/blog/2013/12/01/fuelphp-advent-calendar-2013-1st-day.html"/>
            <updated>2013-12-01T14:57:00+00:00</updated>
            <id>http://www.sharkpp.net/blog/2013/12/01/fuelphp-advent-calendar-2013-1st-day.html</id>
            <content type="html"><![CDATA[<p><a href="http://atnd.org/events/45096">FuelPHP Advent Calendar 2013</a> 1日目の参加記事です。</p>

<p>初めましての方もご存知の方も、よろしくお願いします。</p>

<p><a href="https://twitter.com/sharkpp">@sharkpp</a>です。</p>

<p>さて、昨年の12月1日はアドベント(待降節)ではありませんでしたが、安心してください、今年は12月1日からアドベントは始まります。</p>

<p>とりあえず、初日なので軽い内容でいきたいと思います。</p>

<p>内容は、FuelPHP を phar(PHP Archive) で１ファイルにしてウェブサーバーで動かしてみよう、です。</p>

<p>子ネタをやりつつ phar の紹介も兼ねています。</p>

<p>環境としては、</p>

<ul>
<li>PHP 5.3 以上</li>
<li>FuelPHP 1.7</li>
<li>Apache on CentOS or Windows</li>
</ul>

<p>を想定しています。</p>

<h2 id="pharphp-archive%E3%81%A3%E3%81%A6%E3%81%94%E5%AD%98%E7%9F%A5%E3%81%A7%E3%81%99%E3%81%8B%EF%BC%9F">phar(PHP Archive)ってご存知ですか？</h2>

<p>まず、大前提。</p>

<p><a href="http://jp2.php.net/manual/ja/intro.phar.php">PHP: 導入 - Manual</a>によると、</p>

<blockquote>
  <p>phar 拡張モジュールは、PHP アプリケーション全体をひとつの "phar" (PHP Archive) ファイルにまとめてしまい、配布やインストールを容易にするためのものです。</p>
</blockquote>

<p>となっています。</p>

<p>実際に使われている例としては、</p>

<ul>
<li><a href="http://getcomposer.org/">composer.phar</a> パッケージ管理ツール</li>
<li><a href="https://github.com/fabpot/goutte">goutte.phar</a> スクレイピングライブラリ</li>
<li><a href="https://github.com/guzzle/guzzle">guzzle.phar</a> HTTPクライアントライブラリ</li>
<li><a href="http://pear2.php.net/PEAR2_Pyrus">pyrus.phar</a> PEAR2</li>
</ul>

<p>などがあります。</p>

<p>例として上げた中でも composer は FuelPHP を使っている方であれば</p>

<pre><code>$ php composer.phar update
</code></pre>

<p>と、このような形で触ったことがあると思います。</p>

<h2 id="fuelphp-%E3%82%92%E3%82%A4%E3%83%B3%E3%82%B9%E3%83%88%E3%83%BC%E3%83%AB">FuelPHP をインストール</h2>

<p>Pharクラスの中でも、今回は <a href="http://jp2.php.net/manual/ja/phar.webphar.php">Phar::webPhar</a> を使います。</p>

<p>まずは、FuelPHPを適当なフォルダに配置します。</p>

<p>詳しい手順は<a href="http://fuelphp.jp/docs/1.7/">FuelPHP ドキュメント</a>に書かれているので参考にしてください。</p>

<p>ここでは、<code>~/fuelphp-1.7</code> に配置されるものとします。</p>

<pre><code>$ curl get.fuelphp.com/oil | sh
$ cd ~
$ oil create fuelphp-1.7
</code></pre>

<p>もしくは、</p>

<pre><code>$ wget http://fuelphp.com/files/download/25 -O fuelphp.zip
$ unzip fuelphp.zip
</code></pre>

<p>とすることで、git がインストールされていない場合は fuelphp.com からダウンロードして展開ができます。</p>

<p>次に</p>

<pre><code>$ cd fuelphp-1.7
$ php composer.phar self-update
$ php composer.phar update
</code></pre>

<p>として、composer自身のアップデートとパッケージを更新します。</p>

<p>これで、Apacheなどのウェブサーバー上に公開するとWelcome画面が表示されるはずです。</p>

<h2 id="fuelphp%E3%82%92phar%E3%81%A71%E3%83%95%E3%82%A1%E3%82%A4%E3%83%AB%E3%81%AB%E3%81%BE%E3%81%A8%E3%82%81%E3%82%8B">FuelPHPをPharで1ファイルにまとめる</h2>

<p>まず、そのままでは1ファイルにまとめても動かないのでいくつかソースを変更する必要があります。</p>

<p>残念なことに core の中も変更する必要がありました。</p>

<p>インストール直後のページを表示できるようにするために変更するファイルは</p>

<ul>
<li><code>public/index.php</code></li>
<li><code>fuel/app/config/config.php</code></li>
<li><code>fuel/app/config/asset.php</code> ※ fuel/core/config/asset.php からコピー</li>
<li><code>fuel/core/bootstrap.php</code></li>
<li><code>fuel/core/classes/file/area.php</code></li>
</ul>

<p>の 5 個のファイルです。</p>

<p>実際のアプリケーションの場合は先に挙げたファイル以外にも変更が必要になると思います。</p>

<p>変更のポイントは、</p>

<ul>
<li>phar 内からの realpath が常に空文字で返ってくるのでダミー関数に置き換え</li>
<li>Windows であっても パスの区切りは <code>'/'</code> とする</li>
<li>パスに含まれる親ディレクトリへの移動などを削除し正規化</li>
<li>ログやキャッシュの保存先が .phar 外を示すようにする</li>
</ul>

<p>と、主に、ファイルパスに関する物が主となります。</p>

<p>まず、<code>public/index.php</code> の変更部分です。</p>

<p>パスを正規化する <code>canonicalizePath</code> 関数と <code>realpath</code> 関数のダミーとして <code>realpat_</code> 関数を定義しています。</p>

<pre><code> error_reporting(-1);
 ini_set('display_errors', 1);

 +function canonicalizePath($path) {
 +    $path = 0===strpos($path,'phar://')?'phar://'.preg_replace('!//!', '/', substr($path,7))
 +                                       :preg_replace('!//!', '/', $path);
 +    do {
 +        $tmp  = $path;
 +        $path = preg_replace('!/[^/]+/\.\./!', '/', $tmp);
 +    } while ($tmp != $path);
 +    return rtrim($path, '/');
 +}
 +
 +function realpat_($path) {
 +    return canonicalizePath(str_replace(array('/', '\\'), '/', $path));
 +}
</code></pre>

<p>あとは、<code>realpath</code> 関数の代わりに <code>realpat_</code> 関数を使うようにし、パスの区切りも <code>'/'</code> に変更しています。</p>

<pre><code>-define('DOCROOT', __DIR__.DIRECTORY_SEPARATOR);
+define('DOCROOT', realpat_(__DIR__.'/'));
</code></pre>

<p>　</p>

<pre><code>-define('APPPATH', realpath(__DIR__.'/../fuel/app/').DIRECTORY_SEPARATOR);
+define('APPPATH', realpat_(__DIR__.'/../fuel/app/').'/');
</code></pre>

<p>　</p>

<pre><code>-define('PKGPATH', realpath(__DIR__.'/../fuel/packages/').DIRECTORY_SEPARATOR);
+define('PKGPATH', realpat_(__DIR__.'/../fuel/packages/').'/');
</code></pre>

<p>　</p>

<pre><code>-define('COREPATH', realpath(__DIR__.'/../fuel/core/').DIRECTORY_SEPARATOR);
+define('COREPATH', realpat_(__DIR__.'/../fuel/core/').'/');
</code></pre>

<p><code>fuel/app/config/config.php</code> の変更部分です。 .phar 内には書き込めないので .phar と同じ場所の <code>writable</code> ディレクトリを示すように変更しています。</p>

<p><strong>保存先は公開ディレクトリ外を示すべきなので、さらに一つ上などに示すようにするのが本来は良いでしょう。</strong></p>

<pre><code>-    // 'cache_dir'       =&gt; APPPATH.'cache/',
+    'cache_dir'       =&gt; canonicalizePath(str_replace('phar://', '', APPPATH).'../../../writable/cache/'),
</code></pre>

<p>　</p>

<pre><code>-    // 'log_path'         =&gt; APPPATH.'logs/',
+    'log_path'         =&gt; canonicalizePath(str_replace('phar://', '', APPPATH).'../../../writable/logs/'),
</code></pre>

<p><code>fuel/app/config/asset.php</code> の変更部分です。 <code>fuel/core/config/asset.php</code> をコピーして使うのでそのファイルとの比較になります。 一部、三項演算を使っていますが phar でまとめない場合にもそのまま動くようにとの苦肉の策です。</p>

<pre><code>-    'paths' =&gt; array('assets/'),
+    'paths' =&gt; array(DOCROOT . 'assets/'),
</code></pre>

<p>　</p>

<pre><code>-    'url' =&gt; Config::get('base_url'),
+    'url' =&gt; Config::get('base_url').(0===strpos(__DIR__,'phar://')?'index.phar/':''),
</code></pre>

<p>　</p>

<pre><code>-    'add_mtime' =&gt; true,
+    'add_mtime' =&gt; false,
</code></pre>

<p><code>fuel/core/bootstrap.php</code> の変更部分です。 パスの区切りの変更と関数の置き換えです。</p>

<pre><code>-define('DS', DIRECTORY_SEPARATOR);
+define('DS', '/');

-defined('VENDORPATH') or define('VENDORPATH', realpath(COREPATH.'..'.DS.'vendor').DS);
+defined('VENDORPATH') or define('VENDORPATH', realpat_(COREPATH.'..'.DS.'vendor').DS);
</code></pre>

<p>最後、<code>fuel/core/classes/file/area.php</code> の変更部分です。</p>

<pre><code>         {
-            $this-&gt;basedir = realpath($this-&gt;basedir) ?: $this-&gt;basedir;
+            $this-&gt;basedir = realpat_($this-&gt;basedir) ?: $this-&gt;basedir;
         }
</code></pre>

<p>　</p>

<pre><code>         {
-            $pathinfo['dirname'] = realpath($pathinfo['dirname']);
+            $pathinfo['dirname'] = realpat_($pathinfo['dirname']);
         }
         else
         {
             // attempt to get the realpath(), otherwise just use path with any double dots taken out when basedir is set (for security)
-            $pathinfo['dirname'] = ( ! empty($this-&gt;basedir) ? realpath($this-&gt;basedir.DS.$pathinfo['dirname']) : realpath($pathinfo['dirname']) )
+            $pathinfo['dirname'] = ( ! empty($this-&gt;basedir) ? realpat_($this-&gt;basedir.DS.$pathinfo['dirname']) : realpat_($pathinfo['dirname']) )
                     ?: ( ! empty($this-&gt;basedir) - $this-&gt;basedir.DS.str_replace('..', '', $pathinfo['dirname']) : $pathinfo['dirname']);
</code></pre>

<p>一つ一つ編集するのが大変であれば <a href="https://gist.github.com/sharkpp/7716098">Gist</a> に差分をアップしたので</p>

<pre><code>$ cd fuelphp-1.7
$ wget -q https://gist.github.com/sharkpp/7716098/raw -O - | patch -u -p0
</code></pre>

<p>とすることで変更を適用することができます。</p>

<p>次は、phar の生成スクリプトです。</p>

<pre><code>&lt;?php
/*
 * Copyright (c) 2013 sharkpp
 * This software is released under the MIT License.
 * http://opensource.org/licenses/mit-license.php
 */
// 確実に削除 
@unlink('index.phar');
// phar書庫作成のためクラスを生成 
$phar = new Phar(__DIR__ . '/index.phar', 0, 'index.phar');
// fuelphp17 ディレクトリ丸ごと固める 
$phar-&gt;buildFromDirectory(__DIR__ . '/fuelphp-1.7/');
// gzipで圧縮
//$phar-&gt;compressFiles(Phar::GZ); // ※ css などがうまく取り出せない
// 起動スタブを設定 
$phar-&gt;setStub(&lt;&lt;&lt;'EOD'
&lt;?php
    function phar_rewrites($path) {
        if (0 === strpos($path,'/assets/'))
            return '/public' . $path;     // assets だけはパスを変更 
        return '/public/index.php'.$path; // あとはすべてindexに渡す 
    }
    Phar::interceptFileFuncs();
    Phar::webPhar('index.phar', 'public/index.php', '', array(), 'phar_rewrites');
    __HALT_COMPILER(); ?&gt;
EOD
);
</code></pre>

<p>FuelPHP をインストールした fuelphp-1.7 ディレクトリの上にファイルを保存してください。</p>

<p>こちらも <a href="https://gist.github.com/sharkpp/7716423">Gist</a> にアップしてあるので、</p>

<pre><code>$ cd ~
$ wget -q https://gist.github.com/sharkpp/7716423/raw/mkphar.php
</code></pre>

<p>として、ローカルに保存できます。</p>

<p>準備ができたら</p>

<pre><code>$ php mkphar.php
</code></pre>

<p>と入力して、index.phar を作成すると、70MBぐらいのファイルが出来上がります。</p>

<p>ドキュメントや .git などが含まれているので巨大になってしまいました。</p>

<p><strong>ちなみに、Pharクラスでアーカイブを作成するには設定を変える必要があるかもしれません。</strong></p>

<p>具体的には、<code>php.ini</code> の <code>Phar</code> セクション内で <code>phar.readonly = Off</code> と設定されている必要があります。</p>

<h2 id="%E3%83%96%E3%83%A9%E3%82%A6%E3%82%B6%E3%81%A7%E7%A2%BA%E8%AA%8D">ブラウザで確認</h2>

<p>ここまでできたら index.phar をウェブサーバーの公開フォルダに置きましょう。</p>

<p>と、その前に、 AddType で .phar を php で実行できるように <code>.htaccess</code> を設置しましょう。</p>

<pre><code>Options +FollowSymLinks
DirectoryIndex index.phar
AddType application/x-httpd-php .phar

&lt;IfModule mod_rewrite.c&gt;
    RewriteEngine on
    RewriteCond %{REQUEST_FILENAME} !-f
    RewriteCond %{REQUEST_FILENAME} !-d
    &lt;IfModule mod_fcgid.c&gt;
        RewriteRule ^(.*)$ index.phar?/$1 [QSA,L]
    &lt;/IfModule&gt;
    &lt;IfModule !mod_fcgid.c&gt;
        &lt;IfModule mod_php5.c&gt;
            RewriteRule ^(.*)$ index.phar/$1 [L]
        &lt;/IfModule&gt;
        &lt;IfModule !mod_php5.c&gt;
            RewriteRule ^(.*)$ index.phar?/$1 [QSA,L]
        &lt;/IfModule&gt;
    &lt;/IfModule&gt;
&lt;/IfModule&gt;
</code></pre>

<p>こちらも例によって <a href="https://gist.github.com/sharkpp/7718075">Gist</a> にアップしてあるので、</p>

<pre><code>$ wget -q https://gist.github.com/sharkpp/7718075/raw/.htaccess
</code></pre>

<p>で取得できます。</p>

<p>例えば、ローカルホストでウェブサーバーを動かしていてドキュメントルートに先の .htaccess と共に置いたのであれば、</p>

<pre><code>http://127.0.0.1/
</code></pre>

<p>にブラウザでアクセスすると Welcome 画面が表示されます。</p>

<pre><code>http://127.0.0.1/hello
</code></pre>

<p>にアクセスすると hello と表示されます。</p>

<pre><code>http://127.0.0.1/xxxx
</code></pre>

<p>エラーページも表示できます。</p>

<h2 id="%E3%81%BE%E3%81%A8%E3%82%81">まとめ</h2>

<p>お遊びのつもりで手を出してみたら、かなり時間をかけないとうまくいかなかったりで当てが外れてちょっとションボリ。</p>

<p>実際問題として core の修正が必要となるので実用性となると皆無だと思います。</p>

<p>ただ、１ファイルでウェブサーバーにアプリが公開できるのは、うまく作れば面白いことが出来るのではないかとの期待が持てそうな機能でした。</p>

<p>明日は <a href="https://twitter.com/kenji_s">@kenji_s</a> さんの「<a href="http://blog.a-way-out.net/blog/2013/12/02/quick-mastering-fuelphp/">FuelPHPの開発環境を20分で構築する（Vagrant編）</a>」です。お楽しみに！</p>
]]></content>
        </entry>
    </feed>