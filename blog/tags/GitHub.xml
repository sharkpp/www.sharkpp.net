<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
    <title><![CDATA[さめたすたすのお家]]></title>
    <link href="http://www.sharkpp.net/blog/tags/GitHub.xml" rel="self"/>
    <link href="http://www.sharkpp.net/"/>
    <updated>2017-05-26T04:19:37+00:00</updated>
    <id>http://www.sharkpp.net/</id>
            <author>
            <name><![CDATA[sharkpp]]></name>                    </author>
        <generator uri="http://sculpin.io/">Sculpin</generator>
            <entry>
            <title type="html"><![CDATA[git メモ：ローカルとリモートのブランチ名を変更する]]></title>
            <link href="http://www.sharkpp.net/blog/2016/02/11/git-memo-rename-branches-local-and-remote.html"/>
            <updated>2016-02-11T17:35:00+00:00</updated>
            <id>http://www.sharkpp.net/blog/2016/02/11/git-memo-rename-branches-local-and-remote.html</id>
            <content type="html"><![CDATA[<p>git のブランチ名を変えたい場合のやりかたメモ。</p>

<p>ある所に</p>

<ol>
<li>master から別のブランチ名にブランチを切りました</li>
<li>特定フォルダだけ必要なので subtree (<code>git subtree push --prefix public/ . sub-branch</code>) で push しています。</li>
<li>でも、よく考えたら一手間かかるし、もういっそのこと構造を変更しそのまま master ブランチを名前変えて使えばイイじゃん</li>
</ol>

<p>と考えた男がいました。</p>

<h2 id="%E5%89%8D%E6%8F%90%E6%9D%A1%E4%BB%B6">前提条件</h2>

<p>ということで、まずは条件を設定。</p>

<table>
<thead>
<tr>
  <th>ローカル</th>
  <th>リモート</th>
</tr>
</thead>
<tbody>
<tr>
  <td>master</td>
  <td>master</td>
</tr>
<tr>
  <td>gh-pages</td>
  <td>gh-pages</td>
</tr>
</tbody>
</table>

<p>と設定します。</p>

<pre><code class="bash">$ git branch --all
  gh-pages
* master
  remotes/origin/gh-pages
  remotes/origin/master
</code></pre>

<p>こんな感じです。</p>

<p>これを、</p>

<table>
<thead>
<tr>
  <th>ローカル</th>
  <th>リモート</th>
</tr>
</thead>
<tbody>
<tr>
  <td>gh-pages ※旧master</td>
  <td>gh-pages ※旧master</td>
</tr>
</tbody>
</table>

<p>こうじゃ</p>

<h2 id="%E3%82%84%E3%82%8A%E6%96%B9">やり方</h2>

<p>まずは、現状確認</p>

<pre><code class="bash">$ git checkout master
$ git branch --all
  gh-pages
* master
  remotes/origin/gh-pages
  remotes/origin/master
</code></pre>

<p>おもむろに、いらない子、今の <code>gh-pages</code> ブランチをローカルとリモート両方で削除。</p>

<pre><code class="bash">$ git push origin :gh-pages
To https://github.com/hsp-users-jp/hsp-users.jp.git
 - [deleted]         gh-pages
$ git branch -m gh-pages
</code></pre>

<p><code>gh-pages</code> のみの変更はないので大丈夫。
傷は浅いぞ。</p>

<p><strong>もし、<code>gh-pages</code> 側で変更している場合は、忘れずに <code>master</code> にマージをしましょう。</strong></p>

<p>もう一度確認</p>

<pre><code class="bash">$ git branch --all
* master
  remotes/origin/master
</code></pre>

<p>はい、いらない子は削除される運命だったのです。</p>

<p>次に、ローカルのブランチ名を変更します。
別のブランチで操作している場合は、<code>git branch -m OLD_BRANCH NEW_BRANCH</code> で操作します。</p>

<pre><code class="bash">$ git branch -m gh-pages
$ git branch --all
* gh-pages
  remotes/origin/master
</code></pre>

<p>そして、ローカルの変更をリモートに送ります。</p>

<pre><code class="bash">$ git push origin gh-pages
Total 0 (delta 0), reused 0 (delta 0)
To https://github.com/hsp-users-jp/hsp-users.jp.git
 * [new branch]      gh-pages -&gt; gh-pages
$ git branch --all
* gh-pages
  remotes/origin/gh-pages
  remotes/origin/master
</code></pre>

<p>最後に、リモートの <code>master</code> ブランチを削除して完了です。</p>

<pre><code class="bash">$ git push origin :master
To https://github.com/hsp-users-jp/hsp-users.jp.git
 - [deleted]         master
</code></pre>

<p>確認すると</p>

<pre><code class="bash">$ git branch --all
* gh-pages
  remotes/origin/gh-pages
</code></pre>

<p>はい、できていますね。</p>

<h2 id="%E3%81%BE%E3%81%A8%E3%82%81">まとめ</h2>

<p>変更先のブランチを削除。
ただし、該当ブランチでの作業がないこと。</p>

<pre><code class="bash">$ git branch -D gh-pages
$ git push origin :gh-pages
</code></pre>

<p>ローカルとリモート両方のブランチ名を変更。</p>

<pre><code class="bash">$ git checkout master
$ git branch -m gh-pages
$ git push origin gh-pages
$ git push origin :master
</code></pre>

<p>こんな感じです。</p>

<h2 id="%E5%8F%82%E8%80%83">参考</h2>

<ul>
<li><a href="http://qiita.com/iorionda/items/c7e0aca399371068a9b8">Git で不要になったローカルブランチ・リモートブランチを削除する方法 - Qiita</a></li>
<li><a href="http://qiita.com/kon_yu/items/e9ebd7f778df430a4223">Gitのリモートリポジトリの名前を付け替える　〜Railsのアップグレードを例にして〜 - Qiita</a></li>
<li><a href="http://qiita.com/suin/items/96c110b218d919168d64">git: ローカルのブランチ名を変更したい - Qiita</a></li>
</ul>
]]></content>
        </entry>
            <entry>
            <title type="html"><![CDATA[FuelPHP ドキュメント翻訳のための git メモ]]></title>
            <link href="http://www.sharkpp.net/blog/2015/11/03/git-memo-for-fuel-docs-trans.html"/>
            <updated>2015-11-03T08:54:00+00:00</updated>
            <id>http://www.sharkpp.net/blog/2015/11/03/git-memo-for-fuel-docs-trans.html</id>
            <content type="html"><![CDATA[<p><a href="/blog/2013/06/01/first-github-fork-and-fuelphp-docs-jp.html">初めてのForkとFuelPHP 1.6 翻訳ウィーク参加</a> で git の操作方法をメモってたけど色々おかしかったので新たにメモ。</p>

<p>それ以外にも関連する事柄をメモ。</p>

<h2 id="%E6%9C%AA%E7%BF%BB%E8%A8%B3%E3%81%AE%E3%83%89%E3%82%AD%E3%83%A5%E3%83%A1%E3%83%B3%E3%83%88%E3%82%92%E6%8E%A2%E3%81%99">未翻訳のドキュメントを探す</h2>

<pre><code class="bash">$ grep -RE " [a-zA-Z]+\.\s*$" * | grep -v "MIT license"
</code></pre>

<p>や</p>

<pre><code class="bash">$ grep -RE " you " *
</code></pre>

<p>とすることでなんとなく探せます。</p>

<p>なんとなくですが。</p>

<h2 id="%E8%A6%AA%E3%83%AA%E3%83%9D%E3%82%B8%E3%83%88%E3%83%AA%E3%81%8B%E3%82%89%E3%83%9E%E3%83%BC%E3%82%B8">親リポジトリからマージ</h2>

<p>親リポジトリは</p>

<pre><code class="bash">$ git remote set-url upstream &lt;URL&gt;
</code></pre>

<p>で指定しておき</p>

<pre><code class="bash">$ git remote -v
</code></pre>

<p>で現状を確認できる。</p>

<p>そして、</p>

<pre><code class="bash">$ git pull upstream &lt;BRANCH_NAME&gt;
</code></pre>

<p>でマージする。</p>

<p>さらに、自分の GitHub に pull アンド push でマージ。</p>

<pre><code class="bash">$ git push origin 1.8/develop_japanese
$ git pull origin 1.8/develop_japanese
</code></pre>

<p>ブランチを切って作業していればマージも自動で終わるはず。</p>

<p>upstream から pull した後で↓の</p>

<p><img src="/images/2015_1103_github_desktop_sync_button.png" alt="GitHub Desktop Sync Button" /></p>

<p>GitHub Desktop の Sync ボタンでも自分のレポジトリにマージできるので普段はそっちの方が簡単。</p>

<h2 id="%E3%83%9E%E3%83%BC%E3%82%B8%E6%B8%88%E3%81%BF%E3%81%AE%E3%83%96%E3%83%A9%E3%83%B3%E3%83%81%E3%82%92%E6%8E%A2%E3%81%99">マージ済みのブランチを探す</h2>

<pre><code class="bash">git branch -r --list --merged | grep -vE "((upstream|NEKOGET)/|origin/[0-9]+)"
</code></pre>

<h2 id="pr%E3%81%97%E3%81%9F%E3%83%96%E3%83%A9%E3%83%B3%E3%83%81%E3%81%AE%E5%89%8A%E9%99%A4">PRしたブランチの削除</h2>

<p>GitHub の Pull Request ページから</p>

<p><img src="/images/2015_1103_delete_branch.png" alt="Delete branch" /></p>

<p>のようにブランチを削除したりできる。</p>

<p>が、コマンドラインで処理をすることもできます。</p>

<p>ローカルのブランチを削除するにはこう↓</p>

<pre><code class="bash">git branch -d &lt;branchname&gt;
</code></pre>

<p>リモートのブランチを削除するにはこう↓</p>

<pre><code class="bash">git push origin :&lt;branchname&gt;
</code></pre>

<h2 id="omg%21-%E9%96%93%E9%81%95%E3%81%A3%E3%81%9F%E5%90%8D%E5%89%8D%E3%81%A7%E9%96%93%E9%81%95%E3%81%A3%E3%81%9F%E3%83%A1%E3%83%83%E3%82%BB%E3%83%BC%E3%82%B8%E3%82%92%E6%9B%B8%E3%81%84%E3%81%A6%E3%82%B3%E3%83%9F%E3%83%83%E3%83%88%E3%81%97%E3%81%A6%E3%81%BE%E3%81%A3%E3%81%9F">OMG! 間違った名前で間違ったメッセージを書いてコミットしてまった</h2>

<p>一連の流れはこう↓</p>

<pre><code class="bash">$ git branch -m &lt;OLD_BRANCH_NAME&gt; &lt;NEW_BRANCH_NAME&gt;
$ git checkout &lt;OLD_BRANCH_NAME&gt;
$ git push origin :&lt;OLD_BRANCH_NAME&gt;
$ git branch --unset-upstream
$ git commit --amend -m "&lt;NEW_COMMIT_LOG&gt;"
$ git push origin &lt;NEW_BRANCH_NAME&gt;
</code></pre>

<p>個別解説。</p>

<p>直前のコミットログを修正するにはこう↓</p>

<pre><code class="bash">$ git commit --amend -m "&lt;NEW_COMMIT_LOG&gt;"
</code></pre>

<p>ローカルのブランチ名を変更するにはこう↓</p>

<pre><code class="bash">$ git branch -m &lt;OLD_BRANCH_NAME&gt; &lt;NEW_BRANCH_NAME&gt;
</code></pre>

<p>ローカルと同じ名前のリモートブランチを削除した場合に注意されることがあるので関連付け？を解除するには切り替えたブランチ上でこう↓</p>

<pre><code class="bash">$ git branch --unset-upstream
</code></pre>

<h2 id="%E5%8F%82%E8%80%83">参考</h2>

<ul>
<li><a href="http://d.hatena.ne.jp/hnw/20110528">GitHubへpull requestする際のベストプラクティス - hnwの日記</a></li>
<li><a href="http://qiita.com/makoto_kw/items/c825e17e2a577bb83e19">Gitで使われていないリモートブランチの整理 - Qiita</a></li>
<li><a href="http://qiita.com/kon_yu/items/e9ebd7f778df430a4223">GitHub - Gitのリモートリポジトリの名前を付け替える　〜Railsのアップグレードを例にして〜 - Qiita</a></li>
<li><a href="http://tobysoft.net/wiki/index.php?git%2F%A5%B3%A5%DF%A5%C3%A5%C8%A5%ED%A5%B0%A4%F2%BD%A4%C0%B5%A4%B9%A4%EB%CA%FD%CB%A1#q9692e83">git/コミットログを修正する方法 - TOBY SOFT wiki</a></li>
<li><a href="http://dqn.sakusakutto.jp/2011/10/git_push_origin_master.html">Git超入門："git push origin master"の"push"と"origin"と"master"の意味がわからないあなたへ · DQNEO起業日記</a></li>
</ul>
]]></content>
        </entry>
            <entry>
            <title type="html"><![CDATA[composer で github.com の API 制限を突破せよ]]></title>
            <link href="http://www.sharkpp.net/blog/2015/02/28/composer-github-api-limit-break.html"/>
            <updated>2015-02-28T23:38:00+00:00</updated>
            <id>http://www.sharkpp.net/blog/2015/02/28/composer-github-api-limit-break.html</id>
            <content type="html"><![CDATA[<p>github のレポジトリを参照している場合に composer で update 時に</p>

<pre><code>$ php composer.phar update
Loading composer repositories with package information
    Authentication required (api.github.com):         
      Username: 
      Password: 
</code></pre>

<p>の用な感じでユーザー名とパスワードを入力せよ！な状態になった場合、まあ素直に入力するのも手ですが、 token を発行して処理することも出来るようです。</p>

<h2 id="%E6%89%8B%E9%A0%86">手順</h2>

<ol>
<li><a href="https://github.com/settings/tokens">Personal access tokens</a> にアクセス</li>
<li>"Generate new token" を押下</li>
<li>"Token description" を入力</li>
<li>"Select scopes" の "repo" をチェックし "Generate token" を押下すると token が表示される</li>
<li><p>composer に教える</p>

<pre><code>$ php composer.phar config -g github-oauth.github.com {発行したtoken}
</code></pre></li>
</ol>

<p>で無事 API の制限を超えることが出来ます。</p>

<h2 id="%E5%8F%82%E8%80%83">参考</h2>

<ul>
<li><a href="https://github.com/composer/composer/issues/2439#issuecomment-33034375">Authentication required, while manual file download succeeds ? Issue #2439 ? composer/composer</a></li>
<li><a href="https://github.com/composer/composer/blob/master/doc/articles/troubleshooting.md#api-rate-limit-and-oauth-tokens">composer/troubleshooting.md at master ? composer/composer</a></li>
</ul>
]]></content>
        </entry>
            <entry>
            <title type="html"><![CDATA[github.com へ SVNのレポジトリを取り込んで公開する方法]]></title>
            <link href="http://www.sharkpp.net/blog/2014/10/19/github-import-from-svn.html"/>
            <updated>2014-10-19T13:48:00+00:00</updated>
            <id>http://www.sharkpp.net/blog/2014/10/19/github-import-from-svn.html</id>
            <content type="html"><![CDATA[<p>svn のレポジトリを既存の github レポジトリに取り込む手順をメモ。 多分、既存の git に取り込むのにも使えるはず。</p>

<p>ちなみに取り込むとログに <code>git-svn-id: 〜</code> の用な感じで SVN のリポジトリパスが残るのでパスを秘密にしたい場合は諦めてファイルコピーで取り込んだ方がいいと思います。</p>

<ul>
<li>2016-02-14 git-svn-id を付与せずに clone する方法を追記</li>
</ul>

<h2 id="%E5%89%8D%E6%8F%90%E6%9D%A1%E4%BB%B6">前提条件</h2>

<ul>
<li><code>git clone</code> したディレクトリは <code>~/hoge/</code></li>
<li><code>git checkout</code> したブランチは <code>import_from_svn_example_net</code></li>
<li>取り込みたい SVN レポジトリは <code>http://svn.example.net/path/to/svn/repos/</code></li>
<li>作業用の git レポジトリは <code>tmp</code></li>
</ul>

<h2 id="%E6%BA%96%E5%82%99">準備</h2>

<ol>
<li>github.com からレポジトリを <code>git clone</code> する</li>
<li>ブランチを作り <code>git checkout</code> する <strong>重要</strong></li>
</ol>

<p>ブランチは、</p>

<pre><code>$ git checkout -b import_from_svn_example_net
</code></pre>

<p>みたいな感じで作る</p>

<h2 id="%E6%89%8B%E9%A0%86">手順</h2>

<pre><code>$ cd ~
$ git svn clone http://svn.example.net/path/to/svn/repos/ tmp
$ cd ~/hoge/
$ git pull ~/tmp
$ cd ~
$ rm -rf tmp
</code></pre>

<p>でターミナルでの作業は終了。 あとは githubクライアントで sync するなどして github に push すれば終了です。</p>

<h2 id="git-svn-id-%E3%82%92%E5%89%8A%E9%99%A4%E3%81%97%E3%81%9F%E3%81%84%E5%A0%B4%E5%90%88">git-svn-id を削除したい場合</h2>

<p>git-svn-id を削除したい場合は</p>

<pre><code class="bash">$ git svn clone http://svn.example.net/path/to/svn/repos/ --no-metadata tmp
</code></pre>

<p>とすると良いようです。</p>

<blockquote class="twitter-tweet" data-lang="ja"><p lang="ja" dir="ltr"><a href="https://twitter.com/sharkpp">@sharkpp</a> ところでsvnのリポジトリをもう使わわずgit-svn-idがいらないのでしたら、git svn clone --no-metadataが使えるはずです。 <a href="http://t.co/FRKHmnEj6z">http://t.co/FRKHmnEj6z</a> <a href="http://t.co/ZWGezekJls">http://t.co/ZWGezekJls</a></p>&mdash; zakki (@k_matsuzaki) <a href="https://twitter.com/k_matsuzaki/status/532728589444063232">2014, 11月 13</a></blockquote>

<script async src="//platform.twitter.com/widgets.js" charset="utf-8"></script>

<h2 id="%E5%8F%82%E8%80%83">参考</h2>

<ul>
<li><a href="http://qiita.com/hidekuro/items/4727715fbda8f10b6b11">git-svnでSVN→Gitへの移行をやってみたログ - Qiita</a></li>
<li><a href="http://git-scm.com/book/ja/Git%E3%81%A8%E3%81%9D%E3%81%AE%E4%BB%96%E3%81%AE%E3%82%B7%E3%82%B9%E3%83%86%E3%83%A0%E3%81%AE%E9%80%A3%E6%90%BA-Git-%E3%81%A8-Subversion#はじめましょう">Git - Git と Subversion</a></li>
<li><a href="http://www.backlog.jp/git-guide/reference/remote.html#sec7">リモート操作 | 逆引きGit | サルでもわかるGit入門 〜バージョン管理を使いこなそう〜 | どこでもプロジェクト管理バックログ</a></li>
<li><a href="http://git-scm.com/book/ja/v1/Git%E3%81%A8%E3%81%9D%E3%81%AE%E4%BB%96%E3%81%AE%E3%82%B7%E3%82%B9%E3%83%86%E3%83%A0%E3%81%AE%E9%80%A3%E6%90%BA-Git-%E3%81%B8%E3%81%AE%E7%A7%BB%E8%A1%8C">Git - Git への移行</a></li>
</ul>
]]></content>
        </entry>
            <entry>
            <title type="html"><![CDATA[初めてのForkとFuelPHP 1.6 翻訳ウィーク参加(追記あり)]]></title>
            <link href="http://www.sharkpp.net/blog/2013/06/01/first-github-fork-and-fuelphp-docs-jp.html"/>
            <updated>2013-06-01T00:24:00+00:00</updated>
            <id>http://www.sharkpp.net/blog/2013/06/01/first-github-fork-and-fuelphp-docs-jp.html</id>
            <content type="html"><![CDATA[<p><div class="alert alert-danger alert-dismissible" role="alert">
  <div class="pull-left"><i class="fa fa-warning fa-2x"></i></div>
  <dl style="margin-bottom: 0; margin-left: 35px;">
    <dt>2015-11-03 追記</dt>
    <dd>不適切な内容が書かれているため参考程度に止めてください。
<a href="/blog/2015/11/03/git-memo-for-fuel-docs-trans.html">FuelPHP ドキュメント翻訳のための git メモ</a> で新たにメモされた内容をご覧ください。</dd>
  </dl>
</div>
</p>

<p>FuelPHP 1.6 が公開されたのを記念？してまた <a href="http://atnd.org/events/39849">FuelPHP 1.6 翻訳ウィーク : ATND</a> が行なわれるとのことなので参加してみました。</p>

<p>とりあえず、<a href="http://pneskin2.nekoget.com/press/?p=1044">FuelPHP ドキュメント翻訳へのお誘い</a>とか<a href="http://d.hatena.ne.jp/Kenji_s/20130117/edit_fuel_docs">FuelPHP の日本語ドキュメントを 5分で修正する</a>を参考に自分はgithubのクライアントを基本に翻訳してみることにしました。</p>

<p>さあ、とりあえず翻訳できたし、とりあえずコミットしてみるかってんでコミットしてみたらここで事件発生！ なんか全行削除されて全行追加された感じになっていました。</p>

<p><a href="/images/2013_0601_line_end_fail.png"><img src="/images/2013_0601_line_end_fail_s.png" alt="全行変更あり" /></a></p>

<p>※そのままgithubにまでコミットしてしまい大変になったのはまた別の話。</p>

<p>で、ピンときて元を確認してみると案の定、改行コードがCrLfではなくLfだった。</p>

<p><a href="/images/2013_0601_github_client_setting.png"><img src="/images/2013_0601_github_client_setting_s.png" alt="githubクライアント設定" /></a></p>

<p>設定を確認すると .gitattributes で指定できるっぽいけど、、、余計なファイルを入れたくないなーと思って探してみたらどうも git コマンドで設定ができるっぽい。</p>

<p>見つけたページ <a href="https://help.github.com/articles/dealing-with-line-endings">Dealing with line endings - GitHub Help</a> を参考に Git Shell 起動して</p>

<pre><code>git config --global core.autocrlf false
</code></pre>

<p>としてやると改行コードが勝手に変わるのが直った。</p>

<p>デフォルトが改行コードを変更するようになってるなんてヒドイorz</p>

<blockquote class="twitter-tweet" lang="ja"><p>初めてのPR <a href="https://t.co/glnaIRBvE2" title="https://github.com/NEKOGET/FuelPHP_docs_jp/pull/280">github.com/NEKOGET/FuelPH…</a> <a href="http://t.co/HFy9inhvgx" title="http://atnd.org/events/39849">atnd.org/events/39849</a> <a href="https://twitter.com/search/%23fueldocsja">#fueldocsja</a></p>&mdash; さめたすたす?(^o^)／さん (@sharkpp) <a href="https://twitter.com/sharkpp/status/339041311573286913">2013年5月27日</a></blockquote>

<script async src="//platform.twitter.com/widgets.js" charset="utf-8"></script>

<p>で、いろいろ翻訳して Pull Request をしてみてさあマージされたと思って、、、あれ？更新を取り込むにはどうしたら？と思ったので試行錯誤をしてフォーク元から変更を取り込みました。</p>

<p>試行錯誤した後で<a href="http://d.hatena.ne.jp/hnw/20110528">GitHubへpull requestする際のベストプラクティス - hnwの日記</a>などを見つけてorz状態になったけどとりあえず後で考えるようにした。</p>

<p>なので以下に書かれているのは良くない方法ではあると思うので参考にしてはいけないのです。</p>

<p>とりあえず、githubクライアントでcloneするとう upstream って名前はあるけどURLが指定されていないようです。</p>

<pre><code>$ git remote -v
origin  https://github.com/sharkpp/FuelPHP_docs_jp.git (fetch)
origin  https://github.com/sharkpp/FuelPHP_docs_jp.git (push)
upstream
</code></pre>

<p>で、URLを指定します。</p>

<pre><code>$ git remote set-url upstream https://github.com/NEKOGET/FuelPHP_docs_jp
</code></pre>

<p>ここからは行儀が良くないやり方。 Pull Request で余計な変更が含まれたりしてしまいます。</p>

<p>フォーク元から変更を取り込みます。 --rebase を付けるのがポイントのようです。</p>

<pre><code>$ git pull --rebase upstream 1.6/develop_japanese
From https://github.com/NEKOGET/FuelPHP_docs_jp
 * branch            1.6/develop_japanese -&gt; FETCH_HEAD
First, rewinding head to replay your work on top of it...
</code></pre>

<p>そして、変更をプッシュ。</p>

<pre><code>$ git push -f origin 1.6/develop_japanese
Counting objects: 222, done.
Delta compression using up to 2 threads.
Compressing objects: 100% (140/140), done.
Writing objects: 100% (185/185), 27.32 KiB, done.
Total 185 (delta 127), reused 77 (delta 45)
To https://github.com/sharkpp/FuelPHP_docs_jp.git
 + d1c090c...214104c 1.6/develop_japanese -&gt; 1.6/develop_japanese (forced update)
</code></pre>

<p>あとは、思うように翻訳して、githubクライアント上で commit ＆ sync 。 そして、github上で Pull Request です。</p>

<p>git fetch とか git merge とかやってみたけどひどいことになりながら↑のやり方にたどり着きました。</p>

<p>まあ、もっとましなやり方を覚えないと、ですが、、、、順番になれていきたいです。</p>

<p>参考：</p>

<ul>
<li><a href="https://help.github.com/articles/syncing-a-fork">Syncing a fork - GitHub Help</a></li>
<li><a href="http://d.hatena.ne.jp/wats/20100915/1284478558">gitのoriginのurlを変更する。 - 僕の今さら日記</a></li>
<li><a href="http://processwire.com/talk/topic/1565-github-for-windows/">Github for Windows - Tutorials - ProcessWire Support Forums</a></li>
</ul>
]]></content>
        </entry>
            <entry>
            <title type="html"><![CDATA[githubを使い始めました]]></title>
            <link href="http://www.sharkpp.net/blog/2011/09/18/started-using-the-github.html"/>
            <updated>2011-09-18T12:16:00+00:00</updated>
            <id>http://www.sharkpp.net/blog/2011/09/18/started-using-the-github.html</id>
            <content type="html"><![CDATA[<p>githubを今更ながら始めました。</p>

<p>食わず嫌いってほどでは無いですが、Windowsをメインにしている関係で、Subversion + TortoiseSVN のコンボが最強すぎてなかなか使い始める機会が無かったです。</p>

<p>で、ある人に進めた手前、自分が使っていないのはどうなのかと思って、どうやって使ったもんかと思い考えた末、</p>

<p><strong>Subversion → フックスクリプト → git → github</strong></p>

<p>と、Subversion と git のリポジトリを同期させSubversion から一方的にpushする方法を思いつきました。</p>

<p>まあ、まったくもってgitである必要は無いので世の中の使い方としては下の下に入る方法ではないかと思いますが...</p>

<p>とりあえず、</p>

<ul>
<li><a href="http://blog.makotokw.com/memo/github/">github</a></li>
<li><a href="http://blog.livedoor.jp/dankogai/archives/51194979.html">tips - svnメイン、でもgithubでも公開したい場合の最小手順</a></li>
</ul>

<p>辺りを見ながらセットアップしました。</p>

<p>試行錯誤の結果は↓のレポジトリに公開しました。</p>

<p><a href="https://github.com/sharkpp/win-batch-utils">https://github.com/sharkpp/win-batch-utils</a></p>

<p>リポジトリの公開は、</p>

<ol>
<li>githubでレポジトリを作る(たとえば、<em>example-test</em>)</li>
<li>ローカルのgitレポジトリのフォルダへ移動</li>
<li><a href="https://github.com/sharkpp/win-batch-utils/blob/master/git/svn2github.cmd">svn2github.cmd</a> <em>http://svn.example.net/test</em> <em>example-test</em> を実行</li>
</ol>

<p>てな感じで簡単に出来るようにしました。</p>

<p>フックスクリプトは↓のような設定で使っています。</p>

<p>が、なんかどうもうまく動いていない気も... 単に遅いだけかな？</p>

<p>直接実行する分には問題ないのだけれど...</p>

<p><img src="/images/2011_0918_svn-hook-sync-git.png" alt="" /></p>

<ol>
<li>TortoiseSVNの設定画面を開き、「フックスクリプト」の設定を選択</li>
<li>「追加」を選択</li>
<li>「Post-Commit フック」を選択</li>
<li>ローカルの作業フォルダのパスを指定</li>
<li>「<a href="https://github.com/sharkpp/win-batch-utils/blob/master/error_report.cmd">error_report.cmd</a> <a href="https://github.com/sharkpp/win-batch-utils/blob/master/git/sync4git.cmd">sync4git.cmd</a> ローカルのgitレポジトリのパス」をそれぞれフルパスで入力</li>
</ol>

<p>全部が全部公開しているわけではないけど、こんな感じでオープンな感じでやるのもいいかなーと最近思い始めてます。</p>
]]></content>
        </entry>
    </feed>