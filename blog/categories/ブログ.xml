<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
    <title><![CDATA[さめたすたすのお家]]></title>
    <link href="http://www.sharkpp.net/blog/categories/%E3%83%96%E3%83%AD%E3%82%B0.xml" rel="self"/>
    <link href="http://www.sharkpp.net/"/>
    <updated>2018-09-30T08:01:18+00:00</updated>
    <id>http://www.sharkpp.net/</id>
            <author>
            <name><![CDATA[sharkpp]]></name>                    </author>
        <generator uri="http://sculpin.io/">Sculpin</generator>
            <entry>
            <title type="html"><![CDATA[Franz 5 のレシピに関するメモ]]></title>
            <link href="http://www.sharkpp.net/blog/2018/09/26/franz-recipe-memo.html"/>
            <updated>2018-09-26T00:00:00+00:00</updated>
            <id>http://www.sharkpp.net/blog/2018/09/26/franz-recipe-memo.html</id>
            <content type="html"><![CDATA[<p>Franz 5 用のレシピを作る際にいろいろソース読んだり調べたりしたのでそれのメモです。</p>

<p>現状 Franz 5 は、まだまだベータバージョンです。
なので仕様が変わることがあるため、ここに書かれている内容と違う動きをする場合もあります。</p>

<h2 id="%E3%81%9D%E3%82%82%E3%81%9D%E3%82%82-franz-%E3%81%A8%E3%81%AF%E3%81%AA%E3%82%93%E3%81%9E%E3%82%84%EF%BC%9F">そもそも Franz とはなんぞや？</h2>

<p>簡単にいうと Franz は、各種 SNS をタブでまとめて管理できるデスクトップアプリです。</p>

<p><a href="https://meetfranz.com/">Franz – a free messaging app for Slack, Facebook Messenger, WhatsApp, Telegram and more</a> からダウンロードできますが、利用するにはアカウント登録が必要です。</p>

<p>特徴として</p>

<ul>
<li>レシピ（＝拡張）を追加することで様々な SNS などの Webサービスに対応可能</li>
<li>レシピごとに複数のアカウントを割り当て可能（＝マルチアカウント対応）</li>
<li>クロスプラットフォームなデスクトップアプリ</li>
</ul>

<p>などがあります。</p>

<p>まあ、仕組みとしては Webで提供されているページをタブで表示しているのでブラウザで表示できるページであれば基本はなんでも表示できます。</p>

<h2 id="recipe-%E3%81%AE%E4%BD%9C%E3%82%8A%E6%96%B9">Recipe の作り方</h2>

<p>レシピの作り方を超簡単、ざっくりと説明</p>

<ol>
<li>Franz でサポートしたいSNS等を決める</li>
<li><a href="https://github.com/meetfranz/plugins/tree/master/docs">Franz Integration Documentation</a> をじっくりよく読む</li>
<li>既存のレシピのソースを眺め参考にしながら対象のSNSを表示するように実装</li>
<li>デバッグは <a href="https://github.com/meetfranz/plugins/blob/master/docs/integration.md#user-content-installation">Franz Recipe Documentation / Overview - Installation</a> を参考に</li>
<li>完成したら <a href="https://github.com/meetfranz/plugins/issues/new?title=[Deploy]%20@@@@">New Issue - meetfranz/plugins</a> からレシピのデプロイを要望しましょう</li>
</ol>

<p>ほら簡単！</p>

<h2 id="webview.js-%E3%81%AE-exports-%E9%96%A2%E6%95%B0%E3%81%AE%E7%AC%AC%EF%BC%92%E5%BC%95%E6%95%B0">webview.js の exports 関数の第２引数</h2>

<p><code>webview.js</code> の <code>module.exports</code> で公開する関数の引数は通常</p>

<pre><code class="javascript">      :
module.exports = (Franz) =&gt; {
      :
</code></pre>

<p>と、このようになっています。</p>

<p><a href="https://github.com/meetfranz/plugins/blob/master/docs/frontend_api.md#usage-2">プラグインドキュメント frontend_api.md</a> でも同様です。</p>

<p>この定義に、第２引数を追加し</p>

<pre><code class="javascript">      :
module.exports = (Franz, data) =&gt; {
      :
</code></pre>

<p>と、このようにすると</p>

<pre><code class="javascript">data = {
    customUrl: "",
    hasCrashed: false,
    hasCustomUploadedIcon: false,
    iconUrl: "",                                // アカウントで設定しているアイコンを指定
    id: "0ea52f93-9c9a-4d07-a40e-876aacabce81", // サービスの識別子
    isActive: true,                             // 現在アクティブ（表示されている）か？
    isAttached: true,
    isBadgeEnabled: true,                       // 通知バッジが有効？
    isEnabled: true,                            // サービスが有効？
    isIndirectMessageBadgeEnabled: true,        // DM用のバッチが有効？
    isMuted: false,                             // オーディオでの通知が無効？
    isNotificationEnabled: true,                // 通知が有効？
    name: "hoge fuga",                          // サービスの名称（ユーザーが自由に設定）
    order: 5,                                   // 並び順
    recipe: {...},                              // サービスの元となる recipe
    team: "",                                   // チーム名
    timer: 29,
    unreadDirectMessageCount: 0,                // 未読なDMの個数
    unreadIndirectMessageCount: 0,              // 未読な返信の個数
    webview: {...}
};
</code></pre>

<p>とこのような感じで色々情報が取得できるようです。
ただ、これらはコピーされた値のようで受け取った以後は一切更新がされないようです。
ちなみに、呼び出し元は <code>/src/webview/plugin.js</code> の <code>initializeRecipe</code> イベントのリスナののようです。</p>

<h2 id="developper-tools">Developper Tools</h2>

<p>Franz には、Developper Tools が <code>index.js</code> 用と <code>webview.js</code> 用の２種類あります。</p>

<p>それぞれの動作をまとめました。</p>

<table>
<thead>
<tr>
  <th>対象</th>
  <th>メニュー</th>
  <th><code>Reload Franz</code> 時の動作</th>
  <th><code>Reload Service</code> 時の動作</th>
</tr>
</thead>
<tbody>
<tr>
  <td><code>index.js</code></td>
  <td><code>View</code> → <code>Toggle Developper Tools</code></td>
  <td>全てのServiceで共通</td>
  <td><code>Preserve log</code> オプションが非チェックだとログがクリアされる|影響なし</td>
</tr>
<tr>
  <td><code>webview.js</code></td>
  <td><code>View</code> → <code>Toggle Service Developper Tools</code></td>
  <td>それぞれのServiceごと</td>
  <td>ウインドウが破棄される|<code>Preserve log</code> オプションが非チェックだとログがクリアされる</td>
</tr>
</tbody>
</table>

<h2 id="%E9%80%9A%E7%9F%A5%E3%81%A8%E3%82%AA%E3%83%BC%E3%83%87%E3%82%A3%E3%82%AA%E3%81%AB%E3%81%A4%E3%81%84%E3%81%A6">通知とオーディオについて</h2>

<p>Franz自体での通知の有効と無効は</p>

<pre><code class="javascript">// webview.js

const { ipcRenderer } = require('electron');

ipcRenderer.on('settings-update', (sender, settings) =&gt; {
  console.log(`isAppMuted = ${settings.isAppMuted}`);
  // isAppMuted = true  = ミュート状態
  // isAppMuted = false = ミュート解除状態
});

         :
</code></pre>

<p>と、することで確認可能。</p>

<p>ただし、 <code>Franz v5.0.0 bata 18</code> 以降実装が変わったのか、最初に一回呼び出されて以後一切呼ばれなくなります。なんとなくバグっぽい気もします。</p>

<p>Backend 側で <code>window.franz.stores.services</code> を定期的に参照し変化があった場合に Frontend 側に通知すれば自力で同様のことができるようです。</p>

<p><a href="https://github.com/sharkpp/franz-recipe-mastodon/commit/e6e3db9ab3e04aa9f35cdac59b01bba145ae3029">この辺</a> のソースを参考に、です。</p>

<p>個別のサービスの「通知を無効にする」や「オーディオの無効化」の状態は、<code>exports</code> する関数に２つ目の引数を追加することで...</p>

<pre><code class="javascript">      :
module.exports = (Franz, data) =&gt; {
    console.log(`isMuted = ${data.isMuted}`);
    console.log(`isNotificationEnabled = ${data.isNotificationEnabled}`);
      :
</code></pre>

<p>どうもイベント通知で送られて来るために引数は Deep Copy された値が渡されるようです。
そのため初期状態は取得できますが、変化があっても反映されることはありません。</p>

<p>ちなみに <code>Franz.onNotify()</code> は、Franz自体の設定で「通知とオーディオを無効化」したり、それぞれのサービスで個別に「通知を無効にする」としても必ず呼び出されます。</p>

<h2 id="%E3%83%87%E3%82%B9%E3%82%AF%E3%83%88%E3%83%83%E3%83%97%E9%80%9A%E7%9F%A5">デスクトップ通知</h2>

<p>デスクトップ通知は</p>

<pre><code class="javascript">    Franz.onNotify(notification =&gt; {
        // ToDo ...
        return notification;
    });
</code></pre>

<p>で実際にデスクトップに通知する直前に情報を取得できます。</p>

<p>参考：<a href="https://github.com/meetfranz/plugins/blob/master/docs/frontend_api.md#onnotifyfn">frontend_api.md#onnotifyfn</a></p>

<p>そして <code>return false;</code> とすることで通知を握りつぶすことができます。</p>

<pre><code class="javascript">    Franz.onNotify(notification =&gt; {
        // destroy the notification
        return false;
    });
</code></pre>

<h2 id="%E3%82%B5%E3%83%BC%E3%83%93%E3%82%B9%E3%81%AE%E8%AD%98%E5%88%A5%E5%AD%90%E3%82%92%E5%8F%96%E5%BE%97%E3%81%99%E3%82%8B">サービスの識別子を取得する</h2>

<p><code>webview.js</code> の exports 関数の二つ目の引数で取得できます。</p>

<pre><code class="javascript">      :
module.exports = (Franz, data) =&gt; {
    console.log('id = "${data.id}"'); // id = "0ea52f93-9c9a-4d07-a40e-876aacabce81"
</code></pre>

<p>この値が、 recipe からインスタンスとして起動した service の識別子となります。</p>

<h2 id="backend-api-%E3%81%A7%E5%8F%97%E3%81%91%E5%8F%96%E3%82%8C%E3%82%8B%E5%90%84%E7%A8%AE%E3%82%A4%E3%83%99%E3%83%B3%E3%83%88">Backend API で受け取れる各種イベント</h2>

<p>イベントを受け取るためにどんなイベントを受け取るかあらかじめ定義します。</p>

<pre><code class="javascript">module.exports = Franz =&gt; class HogeHoge extends Franz {

  constructor(...args) {
    let _temp;
    return _temp = super(...args), this.events = {
        // ここで受け取るイベントを定義
        'did-navigate': 'handleDidNavigate',
    }, _temp;
  }

  handleDidNavigate (event) {
      // 諸々の処理を行う
  }
                   :
};
</code></pre>

<p>受け取れる主なイベントはこんな感じ</p>

<table>
<thead>
<tr>
  <th>イベント名</th>
  <th>概要</th>
</tr>
</thead>
<tbody>
<tr>
  <td><code>before-input-event</code></td>
  <td></td>
</tr>
<tr>
  <td><code>certificate-error</code></td>
  <td></td>
</tr>
<tr>
  <td><code>console-message</code></td>
  <td><code>console.*</code> で表示する内容</td>
</tr>
<tr>
  <td><code>context-menu</code></td>
  <td></td>
</tr>
<tr>
  <td><code>crashed</code></td>
  <td></td>
</tr>
<tr>
  <td><code>cursor-changed</code></td>
  <td></td>
</tr>
<tr>
  <td><code>destroyed</code></td>
  <td></td>
</tr>
<tr>
  <td><code>devtools-closed</code></td>
  <td>開発者ツールが閉じられた</td>
</tr>
<tr>
  <td><code>devtools-focused</code></td>
  <td>開発者ツールがにフォーカスが当たった</td>
</tr>
<tr>
  <td><code>devtools-opened</code></td>
  <td>開発者ツールが表示された</td>
</tr>
<tr>
  <td><code>devtools-reload-page</code></td>
  <td></td>
</tr>
<tr>
  <td><code>did-attach-webview</code></td>
  <td></td>
</tr>
<tr>
  <td><code>did-change-theme-color</code></td>
  <td></td>
</tr>
<tr>
  <td><code>did-fail-load</code></td>
  <td></td>
</tr>
<tr>
  <td><code>did-finish-load</code></td>
  <td></td>
</tr>
<tr>
  <td><code>did-frame-finish-load</code></td>
  <td></td>
</tr>
<tr>
  <td><code>did-get-redirect-request</code></td>
  <td></td>
</tr>
<tr>
  <td><code>did-get-response-details</code></td>
  <td></td>
</tr>
<tr>
  <td><code>did-navigate</code></td>
  <td></td>
</tr>
<tr>
  <td><code>did-navigate-in-page</code></td>
  <td></td>
</tr>
<tr>
  <td><code>did-start-loading</code></td>
  <td></td>
</tr>
<tr>
  <td><code>did-stop-loading</code></td>
  <td></td>
</tr>
<tr>
  <td><code>dom-ready</code></td>
  <td>コンテンツのDOMの準備ができた</td>
</tr>
<tr>
  <td><code>found-in-page</code></td>
  <td></td>
</tr>
<tr>
  <td><code>login</code></td>
  <td></td>
</tr>
<tr>
  <td><code>media-paused</code></td>
  <td></td>
</tr>
<tr>
  <td><code>media-started-playing</code></td>
  <td></td>
</tr>
<tr>
  <td><code>new-window</code></td>
  <td></td>
</tr>
<tr>
  <td><code>page-favicon-updated</code></td>
  <td></td>
</tr>
<tr>
  <td><code>paint</code></td>
  <td></td>
</tr>
<tr>
  <td><code>plugin-crashed</code></td>
  <td></td>
</tr>
<tr>
  <td><code>select-bluetooth-device</code></td>
  <td></td>
</tr>
<tr>
  <td><code>select-client-certificate</code></td>
  <td></td>
</tr>
<tr>
  <td><code>update-target-url</code></td>
  <td></td>
</tr>
<tr>
  <td><code>will-attach-webview</code></td>
  <td></td>
</tr>
<tr>
  <td><code>will-navigate</code></td>
  <td></td>
</tr>
<tr>
  <td><code>will-prevent-unload</code></td>
  <td></td>
</tr>
</tbody>
</table>

<p>概要がブランクの部分はまだ調べきれていない部分です。
まあ、イベント名でなんとなく想像はできると思います。</p>

<h2 id="backend-api-%E3%81%8B%E3%82%89-frontend-api-%E3%81%B8">Backend API から Frontend API へ</h2>

<p>Backend API (index.js) から Frontend API (webview.js) へのデータの受け渡しの方法。</p>

<p>送り側：</p>

<pre><code class="javascript">// index.js

    // this は webview のインスタンスである必要があります。
    // コンストラクタの this では WebView のインスタンスへアクセスできないようです。
    this.send('test', { foo: 'bar' });
</code></pre>

<p>受け取り側：</p>

<pre><code class="javascript">// webview.js

const { ipcRenderer } = require('electron');

ipcRenderer.on('test', (sender, data) =&gt; {
    console.log(data); // { foo: 'bar' }
});
</code></pre>

<h2 id="frontend-api-%E3%81%8B%E3%82%89-backend-api-%E3%81%B8">Frontend API から Backend API へ</h2>

<p>Frontend から Backend への通知方法はまだ見つかっていません。
おそらく出来るとは思います...</p>

<h2 id="%E5%8F%82%E8%80%83">参考</h2>

<ul>
<li><a href="https://github.com/meetfranz/plugins">meetfranz/plugins: Official Franz Plugin Repository</a></li>
<li><a href="https://qiita.com/kan/items/571b2f56c54e1e3b6516">Franz Pluginを作ってみよう - Qiita</a></li>
<li><a href="https://github.com/meetfranz/recipe-rocketchat/blob/master/webview.js">recipe-rocketchat/webview.js at master · meetfranz/recipe-rocketchat</a></li>
<li><a href="https://github.com/meetfranz/franz/blob/a4b665ef5f218313e524f0582d08cde6aa5d7049/src/webview/notifications.js">franz/notifications.js at a4b665ef5f218313e524f0582d08cde6aa5d7049 · meetfranz/franz</a></li>
<li><a href="https://github.com/meetfranz/recipe-messenger/blob/0df2bea55d7775a70d73a93663520d1fe8982241/webview.js">recipe-messenger/webview.js at 0df2bea55d7775a70d73a93663520d1fe8982241 · meetfranz/recipe-messenger</a></li>
<li><a href="https://github.com/meetfranz/franz/blob/a4b665ef5f218313e524f0582d08cde6aa5d7049/src/webview/lib/RecipeWebview.js">franz/RecipeWebview.js at a4b665ef5f218313e524f0582d08cde6aa5d7049 · meetfranz/franz</a></li>
<li><a href="https://github.com/tootsuite/mastodon/blob/master/app/javascript/mastodon/actions/notifications.js">mastodon/notifications.js at master · tootsuite/mastodon</a></li>
<li><a href="https://github.com/tsadiq/mastodon-franz/blob/master/index.js">mastodon-franz/index.js at master · tsadiq/mastodon-franz</a></li>
<li><a href="https://github.com/kan/franz-plugin-mastodon/blob/master/webview.js">franz-plugin-mastodon/webview.js at master · kan/franz-plugin-mastodon</a></li>
<li><a href="https://github.com/electron/electron/blob/master/docs/api/web-contents.md">electron/web-contents.md at master · electron/electron</a></li>
<li><a href="https://electronjs.org/docs/api/webview-tag#dom-events"><webview> Tag | Electron</a></li>
</ul>
]]></content>
        </entry>
            <entry>
            <title type="html"><![CDATA[Franz 用の Misskey レシピを作りました！]]></title>
            <link href="http://www.sharkpp.net/blog/2018/08/27/franz-recipe-misskey.html"/>
            <updated>2018-08-27T00:00:00+00:00</updated>
            <id>http://www.sharkpp.net/blog/2018/08/27/franz-recipe-misskey.html</id>
            <content type="html"><![CDATA[<p>先日から話題になってた分散マイクロブログSNSであるところの <a href="https://github.com/syuilo/misskey">syuilo/misskey: A planet of fediverse ✨🐢🚀✨</a> があります。
それに対応したクライアント <a href="https://github.com/sharkpp/franz-recipe-misskey">Franz 5 recipe for Misskey</a> を昨晩公開したので紹介します。</p>

<h2 id="%E3%81%9D%E3%82%82%E3%81%9D%E3%82%82-franz-%E3%81%A8%E3%81%AF%E3%81%AA%E3%82%93%E3%81%9E%E3%82%84%EF%BC%9F">そもそも Franz とはなんぞや？</h2>

<p>簡単にいうと Franz は、各種 SNS をタブでまとめて管理できるデスクトップアプリです。</p>

<p><a href="https://meetfranz.com/">Franz – a free messaging app for Slack, Facebook Messenger, WhatsApp, Telegram and more</a> からダウンロードできますが、利用するにはアカウント登録が必要です。</p>

<p>特徴として</p>

<ul>
<li>レシピ（＝拡張）を追加することで様々な SNS などの Webサービスに対応可能</li>
<li>レシピごとに複数のアカウントを割り当て可能（＝マルチアカウント対応）</li>
<li>クロスプラットフォームなデスクトップアプリ</li>
</ul>

<p>などがあります。</p>

<p>まあ、要するに Webで提供されているページをタブで表示している訳です。
そのため、LINE など Webページが存在しないサービスに対しては逆立ちしても利用できないのですが...</p>

<h2 id="%E5%BF%85%E8%A6%81%E3%81%AA%E3%82%82%E3%81%AE">必要なもの</h2>

<ul>
<li><a href="https://meetfranz.com/">Franz</a> 5 以降<br />古いバージョンはサポートしていません。</li>
<li><a href="https://joinmisskey.github.io/">Misskey</a> アカウント<br />アカウントを持っていない場合は、自分で Misskey インスタンスを立ち上げるか <a href="https://joinmisskey.github.io/ja/wiki/instances/">Misskey instances</a> から探して見てください</li>
</ul>

<h2 id="%E3%82%A4%E3%83%B3%E3%82%B9%E3%83%88%E3%83%BC%E3%83%AB%E6%96%B9%E6%B3%95">インストール方法</h2>

<h3 id="%E9%96%8B%E7%99%BA%E3%83%90%E3%83%BC%E3%82%B8%E3%83%A7%E3%83%B3">開発バージョン</h3>

<ol>
<li><code>franz-recipe-misskey</code> をダウンロードします。</li>
<li>PC上の Franz Plugins フォルダを開きます<br />(メモ： <strong><code>dev</code> ディレクトリが存在しない場合は作成する必要があります</strong>)

<ul>
<li>Mac: <code>~/Library/Application Support/Franz/recipes/dev/</code></li>
<li>Windows: <code>%AppData%\Franz\recipes\dev\</code></li>
<li>Linux: <code>~/.config/Franz/recipes/dev</code></li>
</ul></li>
<li><code>franz-recipe-misskey</code> フォルダを plugins ディレクトリにコピーします</li>
<li>Franz を再起動する</li>
</ol>

<p>詳しくは <a href="https://github.com/meetfranz/plugins/blob/master/docs/integration.md">Franz Recipe Documentation / Overview</a> を参照してください。</p>

<h3 id="%E5%AE%89%E5%AE%9A%E7%89%88">安定版</h3>

<p>準備中...</p>

<p>※ <a href="https://github.com/meetfranz/plugins/issues/194">[Deploy] Misskey - Issue #194 - meetfranz/plugins</a> で公式リポジトリへの登録をリクエストをしているけど、どうなることやら</p>

<h2 id="%E5%88%A9%E7%94%A8%E6%96%B9%E6%B3%95">利用方法</h2>

<h3 id="%E6%96%B0%E3%81%97%E3%81%84%E3%82%B5%E3%83%BC%E3%83%93%E3%82%B9%E3%82%92%E8%BF%BD%E5%8A%A0%E3%81%99%E3%82%8B">新しいサービスを追加する</h3>

<p><img src="/images/20180826_add-service.png" alt="サービスの追加" /></p>

<p><em>開発バージョン</em></p>

<h3 id="%E8%A8%AD%E5%AE%9A">設定</h3>

<p><img src="/images/20180826_add-service-settings.png" alt="サービスの追加" /></p>

<table>
<thead>
<tr>
  <th>#</th>
  <th>フィールド</th>
  <th>説明</th>
</tr>
</thead>
<tbody>
<tr>
  <td>①</td>
  <td>サービス名</td>
  <td>自由に設定してください</td>
</tr>
<tr>
  <td>②</td>
  <td>Misskey インスタンスのホスト名</td>
  <td>Misskey を実行しているホストを入力してください。 httpsのみがサポートされています</td>
</tr>
</tbody>
</table>

<h3 id="%E3%82%B5%E3%82%A4%E3%83%B3%E3%82%A4%E3%83%B3">サインイン</h3>

<p><img src="/images/20180826_misskey-signin.png" alt="" /></p>

<p>登録されたアカウント情報を入力してください。</p>

<h3 id="%E9%80%9A%E7%9F%A5%E3%83%90%E3%83%83%E3%82%B8%E3%81%AB%E3%81%A4%E3%81%84%E3%81%A6">通知バッジについて</h3>

<p><img src="/images/20180826_notification-badge-example.png" alt="" /></p>

<p>通知を確認すると同時にクリアされます。</p>
]]></content>
        </entry>
            <entry>
            <title type="html"><![CDATA[名古屋Qt勉強会#19 に参加しました]]></title>
            <link href="http://www.sharkpp.net/blog/2018/08/26/qt-nagoya-19.html"/>
            <updated>2018-08-26T09:57:00+00:00</updated>
            <id>http://www.sharkpp.net/blog/2018/08/26/qt-nagoya-19.html</id>
            <content type="html"><![CDATA[<p>8月25日(土) に開催された <a href="https://qt-users.connpass.com/event/98190/">Qt 勉強会 @ Nagoya #19 - connpass</a> に参加しました。</p>

<p>そのまとめなどです。</p>

<p><img src="/images/20180825_qauthwith1.png" alt="成果" /></p>

<h2 id="%E5%8B%95%E7%9A%84%E3%81%AB%E8%BF%BD%E5%8A%A0%E3%81%97%E3%81%9F%E3%82%B3%E3%83%B3%E3%83%9D%E3%83%BC%E3%83%8D%E3%83%B3%E3%83%88%E3%81%ABc%2B%2B%E5%81%B4%E3%81%8B%E3%82%89%E5%80%A4%E3%82%92%E8%A8%AD%E5%AE%9A%E3%81%99%E3%82%8B">動的に追加したコンポーネントにC++側から値を設定する</h2>

<p>たぶんこのままではちゃんと動かないけど、雰囲気それらしいメモ。</p>

<pre><code class="javascript">// .qml
    Component {
        id: hogeHoge
        Label {
            property variant hoge: null
            anchors.right: parent.right
            anchors.left: parent.left
            text: ""
            Component.onCompleted: {
                hoge.bind(this);
            }
        }
    }
            :
    hogeHoge.createObject(container, {
        hoge: hoge
    })

</code></pre>

<pre><code class="cpp">// .h
class Hoge : public QObject {
                  :
    Q_INVOKABLE void bind(QObject* object);
                  :
}
</code></pre>

<pre><code class="cpp">// .cpp
               :
    QQmlApplicationEngine engine;
    Hoge hoge;
    engine.rootContext()-&gt;setContextProperty("hoge", &amp;hoge);
               :
void Hoge::bind(QObject* object)
{
    qDebug() &lt;&lt; object; // QQuickLabel_QML_99(0xffffffffff00)

    // read from
    qDebug()  &lt;&lt; "Property value:" &lt;&lt; object-&gt;property("text").toString();
//or qDebug() &lt;&lt; "Property value:" &lt;&lt; QQmlProperty::read(object, "text").toString();

    // write to
    object-&gt;setProperty("text", "aaaa");
//or QQmlProperty::write(object, "text", aaaa);
}
</code></pre>

<h2 id="%08qt-documentation-%E3%81%AB%E4%B8%80%E7%9E%AC%E8%A1%A8%E7%A4%BA%E3%81%95%E3%82%8C%E3%82%8B%E3%82%A2%E3%82%A4%E3%82%B3%E3%83%B3%E3%81%A8%E3%83%A1%E3%83%83%E3%82%BB%E3%83%BC%E3%82%B8">Qt Documentation に一瞬表示されるアイコンとメッセージ</h2>

<p>Qt の公式ドキュメントを表示すると上部に一瞬だけ表示されるやつ。</p>

<blockquote>
  <p>We bake cookies in your browser for a better experience.  Using this site means that you consent.
  訳：より良いエクスペリエンスのために、ブラウザでクッキーを焼きます。 このサイトを使用することはそれに同意することを意味します。</p>
</blockquote>

<p><img src="/images/20180825_qtdocwebsite.png" alt="クッキーマン？" /></p>

<p>のメッセージとともに <a href="https://www.qt.io/company/?hsLang=en">The Qt Company</a> へのリンクがあるみたい。</p>

<h2 id="%E9%80%B2%E6%8D%97">進捗</h2>

<p>今回は愚直に実装を進めた関係で新たな知見は少ない感じ。</p>

<ul>
<li>signal用のヘルプ表示関連の実装

<ul>
<li>表示用の専用QMLを実装</li>
<li>QMLの切り替え用のコードを実装</li>
<li>C++側にも実装を追加</li>
</ul></li>
<li>signal受信時にどのように通知するか？

<ul>
<li><del>パターン１：スクロール＆フラッシュ</del>

<ol>
<li><del>該当signalにスクロール</del></li>
<li><del>該当signalがフラッシング</del></li>
</ol></li>
<li>パターン２：通知＆クリックでスクロール <strong>採用！</strong>

<ol>
<li>ウインドウ内に通知</li>
<li>通知をクリックすると該当のsignalにスクロール</li>
</ol></li>
</ul></li>
</ul>

<p><img src="/images/20180825_qauthwith2.png" alt="成果" /></p>

<h2 id="%E6%87%87%E8%A6%AA%E4%BC%9A">懇親会</h2>

<p>タコさんウインナーとか、もぐもぐ♪</p>

<p><img src="/images/20180825_mogmog.jpg" alt="もぐもぐ" /></p>

<h2 id="%E5%8F%82%E8%80%83">参考</h2>

<ul>
<li><a href="http://doc.qt.io/qt-5/qtqml-cppintegration-interactqmlfromcpp.html">Interacting with QML Objects from C++ | Qt QML 5.11</a></li>
<li><a href="http://doc.qt.io/qt-5/qtqml-cppintegration-overview.html#choosing-the-correct-integration-method-between-c-and-qml">Overview - QML and C++ Integration | Qt QML 5.11</a></li>
<li><a href="https://gist.github.com/alex-spataru/cba4936a1d555372e898">Notification badge in QML</a></li>
<li><a href="https://doc.qt.io/QtApplicationManager/qml-qtapplicationmanager-notificationmanager.html">NotificationManager QML Type | Qt Application Manager 5.11</a></li>
<li><a href="http://doc.qt.io/qt-5/qml-qtqml-timer.html">Timer QML Type | Qt QML 5.11</a></li>
<li><a href="http://doc.qt.io/qt-5/qml-qtquick-listview.html">ListView QML Type | Qt Quick 5.11</a></li>
</ul>
]]></content>
        </entry>
            <entry>
            <title type="html"><![CDATA[Qt Quick メモ]]></title>
            <link href="http://www.sharkpp.net/blog/2018/08/22/qt-quick-memo.html"/>
            <updated>2018-08-22T00:40:00+00:00</updated>
            <id>http://www.sharkpp.net/blog/2018/08/22/qt-quick-memo.html</id>
            <content type="html"><![CDATA[<p><a href="https://github.com/sharkpp/qtauthwith">sharkpp/qtauthwith</a> を実装中に調べメモした、 Qt Quick 関連の事をとりあえず記事にしました。</p>

<h2 id="listview-%E3%82%BF%E3%82%A4%E3%83%97%E3%81%AE%E7%89%B9%E5%AE%9A%E9%A0%85%E7%9B%AE%E3%81%B8%E3%82%B9%E3%82%AF%E3%83%AD%E3%83%BC%E3%83%AB%E3%81%99%E3%82%8B">ListView タイプの特定項目へスクロールする</h2>

<pre><code class="javascript">    listView.currentIndex = index
</code></pre>

<p>のような感じでインデックスを代入すればスクロールする</p>

<h2 id="gridlayout-%E3%81%A8-grid">GridLayout と Grid</h2>

<p><code>GridLayout</code> は <code>Layout.row</code> と <code>Layout.column</code> が効く。</p>

<p><code>Grid</code> は <code>Layout.row</code> と <code>Layout.column</code> が効かない。</p>

<h2 id="%E3%83%A2%E3%83%87%E3%83%AB%E3%82%92%E3%83%86%E3%83%BC%E3%83%96%E3%83%AB%E4%B8%8A%E3%81%AB%E4%B8%A6%E3%81%B9%E3%82%8B">モデルをテーブル上に並べる</h2>

<pre><code class="javascript">[
    { foo: XXX1, bar: YYY1 },
    { foo: XXX2, bar: YYY2 }
]
</code></pre>

<p>を返すモデルが例。</p>

<pre><code class="javascript">import QtQuick.Layouts 1.11
         :
    GridLayout {
        id: grid
        anchors.fill: parent
        columns: 2
        rowSpacing: 5
        columnSpacing: 5
        anchors.margins: 5

        Repeater {
            model: hoge // [ { foo: XXX1, bar: YYY1 }, { foo: XXX2, bar: YYY2 } ]
            Label {
                Layout.row: index
                Layout.column: 0
                text: modelData.foo
            }
        }

        Repeater {
            model: hoge
            TextArea {
                Layout.row: index
                Layout.column: 1
                text: modelData.bar
            }
        }
    }
</code></pre>

<h2 id="qml%E3%81%A7%E5%AE%9A%E6%95%B0%E3%82%92%E5%88%A9%E7%94%A8%E3%81%99%E3%82%8B">QMLで定数を利用する</h2>

<p>定数が大量にある場合は</p>

<pre><code class="javascript">// hoge.js
var xxx = "aa";
var yyy = "bb";
</code></pre>

<p>と登録したソースを import して</p>

<pre><code class="javascript">// fuga.qml
import "hoge.js" as Hoge
          :
        Label {
            text: Hoge.xxx
        }
        Label {
            text: Hoge.yyy
        }
          :
</code></pre>

<p>のような感じで利用すると管理が楽そう。
他の QML で使い回すならなおさら。</p>

<h2 id="qml%E5%81%B4%E3%81%8B%E3%82%89%E5%91%BC%E3%81%B3%E5%87%BA%E3%81%99%E9%96%A2%E6%95%B0%E3%81%AE%E5%BC%95%E6%95%B0%E3%81%AB%E3%82%AA%E3%83%96%E3%82%B8%E3%82%A7%E3%82%AF%E3%83%88%E3%82%92%E6%B8%A1%E3%81%97%E3%81%9F%E5%A0%B4%E5%90%88%E3%81%AE%E5%8B%95%E3%81%8D">qml側から呼び出す関数の引数にオブジェクトを渡した場合の動き</h2>

<pre><code class="javascript">// xxx.qml
   var xxx = { aa: 10, bb: "bb" };
   hoge(xxx);
</code></pre>

<p>と QML 側で C++ で定義した関数を呼び出す場合は</p>

<pre><code class="cpp">#include &lt;QJSValue&gt;
            :
   Q_INVOKABLE void hoge(const QJSValue&amp; abc);
</code></pre>

<p>という関数定義にする必要がある。</p>

<h2 id="qml-%E3%81%A7%E7%A9%BA%E3%81%A3%E3%81%BD%E3%81%AE%E3%82%AA%E3%83%96%E3%82%B8%E3%82%A7%E3%82%AF%E3%83%88%E3%82%92%E5%AE%9A%E7%BE%A9%E3%81%99%E3%82%8B">qml で空っぽのオブジェクトを定義する</h2>

<pre><code class="javascript">Item {
    property var badSyntax:   {}   // ng, empty block statement
    property var emptyObject: ({}) // ok
}
</code></pre>

<p>その他の JavaScript 標準な型のプロパティを定義</p>

<pre><code class="javascript">Item {
    property var aNumber: 100
    property var aBool: false
    property var aString: "Hello world!"
    property var anotherString: String("#FF008800")
    property var aColor: Qt.rgba(0.2, 0.3, 0.4, 0.5)
    property var aRect: Qt.rect(10, 10, 10, 10)
    property var aPoint: Qt.point(10, 10)
    property var aSize: Qt.size(10, 10)
    property var aVector3d: Qt.vector3d(100, 100, 100)
    property var anArray: [1, 2, 3, "four", "five", (function() { return "six"; })]
    property var anObject: { "foo": 10, "bar": 20 }
    property var aFunction: (function() { return "one"; })
}
</code></pre>

<h2 id="%E5%8F%82%E8%80%83">参考</h2>

<ul>
<li><a href="https://stackoverflow.com/questions/32969414/populate-gridlayout-with-repeater">qt - Populate GridLayout with Repeater - Stack Overflow</a></li>
<li><a href="http://relog.xii.jp/mt5r/2011/10/qmlqt-9.html">QML(Qt)アプリ全体で使いたいグローバルな設定値の扱い方 - 理ろぐ</a></li>
<li><a href="http://doc.qt.io/qt-5/qml-var.html#property-value-initialization-semantics">var QML Basic Type | Qt QML 5.11</a></li>
</ul>
]]></content>
        </entry>
            <entry>
            <title type="html"><![CDATA[名古屋Qt勉強会#18 に参加しました]]></title>
            <link href="http://www.sharkpp.net/blog/2018/07/21/qt-nagoya-18.html"/>
            <updated>2018-07-21T17:35:00+00:00</updated>
            <id>http://www.sharkpp.net/blog/2018/07/21/qt-nagoya-18.html</id>
            <content type="html"><![CDATA[<p>7月21日(土) に開催された <a href="https://qt-users.connpass.com/event/94197/">Qt 勉強会 @ Nagoya #18 - connpass</a> に参加しました。</p>

<p>そのまとめなどです。</p>

<p><img src="/images/20180721_qauthwith1.png" alt="成果" /></p>

<h2 id="qt-quick-%E3%81%A7%E3%81%AE%E6%96%87%E5%AD%97%E5%88%97%E3%81%AE%E5%A4%9A%E8%A8%80%E8%AA%9E%E5%AF%BE%E5%BF%9C">Qt Quick での文字列の多言語対応</h2>

<p><code>qsTr()</code> で囲う。</p>

<h2 id="toolbutton">ToolButton</h2>

<p>ToolButton タイプで利用できる各種プロパティが QtQuick.Controls 1.x と QtQuick.Controls 2.x とで全然違うのでメモ</p>

<table>
<thead>
<tr>
  <th>version</th>
  <th>QtQuick.Controls 1.x</th>
  <th>QtQuick.Controls 2.x</th>
</tr>
</thead>
<tbody>
<tr>
  <td>派生</td>
  <td><a href="http://doc.qt.io/qt-5/qml-qtquick-controls-button.html">Button</a></td>
  <td><a href="http://doc.qt.io/qt-5/qml-qtquick-controls2-abstractbutton.html">AbstractButton</a></td>
</tr>
<tr>
  <td>アイコン</td>
  <td><code>iconName</code> プロパティ</td>
  <td><code>icon.name</code> プロパティ</td>
</tr>
<tr>
  <td>ツールチップ</td>
  <td><code>tooltip</code> プロパティ</td>
  <td><a href="https://doc.qt.io/Qt-5/qml-qtquick-controls2-tooltip.html#attached-tool-tips">ToolTip QML Type</a></td>
</tr>
<tr>
  <td>&nbsp;&nbsp;要素押下時に表示</td>
  <td>不明</td>
  <td><code>ToolTip.visible: down</code></td>
</tr>
<tr>
  <td>&nbsp;&nbsp;要素クリック時に表示</td>
  <td>不明</td>
  <td><code>ToolTip.visible: pressed</code></td>
</tr>
<tr>
  <td>&nbsp;&nbsp;要素ホバー時に表示</td>
  <td>不明</td>
  <td><code>ToolTip.visible: hovered</code></td>
</tr>
</tbody>
</table>

<h2 id="qml-%E3%81%A7%E5%8F%82%E7%85%A7%E3%81%AE%E3%81%BF%E5%8F%AF%E8%83%BD%E3%81%AA%E3%83%97%E3%83%AD%E3%83%91%E3%83%86%E3%82%A3%E3%82%92%E3%81%A7%E3%81%8D%E3%82%8B%E3%81%A0%E3%81%91%E7%B0%A1%E7%B4%A0%E3%81%AB%E5%AE%9A%E7%BE%A9">QML で参照のみ可能なプロパティをできるだけ簡素に定義</h2>

<pre><code class="cpp">  Q_PROPERTY(QString hoge MEMBER m_hoge CONSTANT)
</code></pre>

<p>new するときとか、C++側からのみアクセスできる setter で値は代入する。</p>

<h2 id="qml-%E3%81%A7%E5%AE%9F%E8%A1%8C%E5%8F%AF%E8%83%BD%E3%81%AA%E9%96%A2%E6%95%B0%E3%82%92%E5%AE%9A%E7%BE%A9">QML で実行可能な関数を定義</h2>

<pre><code class="cpp">  Q_INVOKABLE inline int hoge() {
      return 10;
  }
</code></pre>

<h2 id="%E3%83%88%E3%83%A9%E3%83%96%E3%83%AB%E3%82%B7%E3%83%A5%E3%83%BC%E3%83%86%E3%82%A3%E3%83%B3%E3%82%B0">トラブルシューティング</h2>

<h3 id="invalid-import-qualifier-id">Invalid import qualifier ID</h3>

<blockquote>
  <p>Invalid import qualifier ID
  (訳: インポート修飾識別子が無効)</p>
</blockquote>

<p>エリアスの頭は大文字でないとダメらしい。</p>

<pre><code class="diff">- import "xxx" as my
+ import "xxx" as My
</code></pre>

<h3 id="depends-on-non-notifyable-properties%3A-xxxxx%3Ayyyyy">depends on non-NOTIFYable properties: XXXXX:YYYYY</h3>

<blockquote>
  <p>depends on non-NOTIFYable properties: XXXXX:YYYYY
  (訳: 通知できないプロパティに依存)</p>
</blockquote>

<p>読み取り専用の場合は <code>CONSTANT</code> をつければ良い。</p>

<pre><code class="diff">           :
-     Q_PROPERTY(QString title MEMBER m_title)
+     Q_PROPERTY(QString title MEMBER m_title CONSTANT)
           :
</code></pre>

<h3 id="type-xxxx-unavailable">Type XXXX unavailable</h3>

<blockquote>
  <p>Type XXXX unavailable
  (訳: タイプ XXXX は利用できません)</p>
</blockquote>

<p>XXXX をちゃんと定義しているはずなのに出る場合は、 XXXX の中でエラーになってるかも？
その場合は、該当ファイルを対象としたエラーが出ている。</p>

<h3 id="qt-creator-%E4%B8%8A%E3%81%A7%E3%81%AE%E3%82%A8%E3%83%A9%E3%83%BC%E6%B3%A8%E9%87%88%E8%A1%A8%E7%A4%BA">Qt Creator 上でのエラー注釈表示</h3>

<p>QtQuick.Controls 2 を利用しているのに QtQuick.Controls 1 のエラーが表示される</p>

<p><img src="/images/20180721_qtcreator_annotation.png" alt="Qt Creator エラー注釈表示" /></p>

<p>どうやら Qt 5.11 を利用すれば大丈夫な様子。</p>

<h2 id="qt-quick-%E3%81%A8-c%2B%2B-%E3%81%A8%E3%81%AE%E3%82%84%E3%82%8A%E3%81%A8%E3%82%8A">Qt Quick と C++ とのやりとり</h2>

<h3 id="%E3%82%AB%E3%82%B9%E3%82%BF%E3%83%A0%E3%82%BF%E3%82%A4%E3%83%97%E3%81%AE%E7%99%BB%E9%8C%B2">カスタムタイプの登録</h3>

<p>※ <code>HogeType</code> クラスは <code>QObjct</code> から派生</p>

<pre><code>              :
    qmlRegisterType&lt;HogeType&gt;("net.example.foo", 1, 0, "HogeType");
    QQmlApplicationEngine engine;
              :
</code></pre>

<p>qml では次のように利用</p>

<pre><code>import net.example.foo 1.0
            :
ApplicationWindow {
            :
    HogeType {
        id: hoge
    }
            :
}
</code></pre>

<h3 id="%E3%82%B3%E3%83%B3%E3%83%86%E3%82%AD%E3%82%B9%E3%83%88%E3%81%AB%E7%99%BB%E9%8C%B2">コンテキストに登録</h3>

<p>※ <code>AppData</code> クラスは <code>QObjct</code> から派生</p>

<pre><code>            :
    AppData data;
    QQmlApplicationEngine engine;
    engine.rootContext()-&gt;setContextProperty("appData", &amp;data);
            :
</code></pre>

<p>qml では次のように利用</p>

<pre><code>            :
Window {
            :
    Text {
        text: appData.getTextFromCpp()
            :
    }
}
</code></pre>

<h2 id="%E6%87%87%E8%A6%AA%E4%BC%9A">懇親会</h2>

<p>もぐもぐ♪</p>

<p><img src="/images/20180721_mogmog.jpg" alt="もぐもぐ" /></p>

<h2 id="%E5%8F%82%E8%80%83">参考</h2>

<ul>
<li><a href="http://doc.qt.io/qt-5/qml-qtquick-controls-button.html">Button QML Type | Qt Quick Controls 5.11</a></li>
<li><a href="https://doc.qt.io/Qt-5/qml-qtquick-controls2-abstractbutton.html">AbstractButton QML Type | Qt Quick Controls 2 5.11</a></li>
<li><a href="http://forum.jollausers.com/sailfish-developers/import-js-file-invalid-import-qualifier-id/">[Solved] import js file - Invalid import qualifier ID - Sailfish Developers - Jolla &amp; Sailfish OS Forum</a></li>
<li><a href="http://doc.qt.io/qt-5/qtqml-cppintegration-topic.html">Integrating QML and C++ | Qt QML 5.11</a></li>
<li><a href="https://qiita.com/DAR/items/400a1725ddedcaa6ef0e">QMLとC++のバインディング - Qiita</a></li>
<li><a href="http://tips.hecomi.com/entry/20130503/1367594609">Qt Quick での C++ × QML バインディングについてまとめてみた - 凹みTips</a></li>
<li><a href="https://stackoverflow.com/questions/6728615/warning-about-non-notifyable-properties-in-qml">qt - Warning about non-NOTIFYable properties in QML - Stack Overflow</a></li>
</ul>
]]></content>
        </entry>
            <entry>
            <title type="html"><![CDATA[名古屋Qt勉強会#16 に参加しました]]></title>
            <link href="http://www.sharkpp.net/blog/2018/05/26/qt-nagoya-16.html"/>
            <updated>2018-05-26T23:26:00+00:00</updated>
            <id>http://www.sharkpp.net/blog/2018/05/26/qt-nagoya-16.html</id>
            <content type="html"><![CDATA[<p>5月26日(土) に開催された <a href="https://qt-users.connpass.com/event/88524/">Qt 勉強会 @ Nagoya #16 - connpass</a> に参加しました。</p>

<p>そのまとめ。</p>

<p><img src="/images/20180526_qauthwith2.png" alt="開発中" /></p>

<h2 id="%E4%BC%9A%E5%A0%B4%E5%88%B0%E7%9D%80%E3%81%BE%E3%81%A7">会場到着まで</h2>

<p>前回は、ちょっと迷ってしまったけど、さすがに２回目ともなれば迷うこともなく到着。
電車の時間を少しミスったために、今回もギリギリ（汗</p>

<h2 id="%E8%87%AA%E5%B7%B1%E7%B4%B9%E4%BB%8B">自己紹介</h2>

<p>みんなで自己紹介</p>

<p>今回は２名のご新規さんが参加されました。</p>

<p>東京組２名は少し遅れて到着（やはり迷った様子</p>

<h2 id="%E4%BB%8A%E5%9B%9E%E3%81%AE%E3%81%8A%E8%8F%93%E5%AD%90">今回のお菓子</h2>

<p>今回は、東京からの参加者の <a href="https://twitter.com/hermit4">@hermit4</a> さんが、美味しそうなお菓子を持ち込み。
クッキーなどと合わせてなかなかの量になりました。</p>

<h2 id="%E3%82%82%E3%81%8F%E3%82%82%E3%81%8F">もくもく</h2>

<p>前回の続きをもくもく。</p>

<p>本日は、Qt Quick をサンプルを見ながらUIの作り込み。</p>

<p><img src="/images/20180526_qauthwith1.png" alt="開発中" /></p>

<p>こんな感じに Swagger UI 風の UI を Qt Quick で作ることにした。</p>

<p><img src="/images/20180526_qauthwith2.png" alt="開発中" /></p>

<p>一部、どうしてもわからないことを <a href="https://twitter.com/IoriAYANE">@IoriAYANE</a> さんに聞きつつ、なんとかここまで出来た。</p>

<p>さてはて、中身の実装をどうしようかな？というところで時間切れ。</p>

<h2 id="%E6%87%87%E8%A6%AA%E4%BC%9A">懇親会</h2>

<p>今回は、前回行った串カツ屋さんは入れず。
少し歩いた先の串焼き屋さんで懇親会。</p>

<p><img src="/images/20180526_kushiyaki.jpg" alt="テング酒場で懇親会" /></p>

<h2 id="%E6%9C%80%E5%BE%8C%E3%81%AB">最後に</h2>

<p>久しぶりに集中して趣味プロしたけど、やはりいいものだ。
年々、趣味に割ける時間が減っているけど、なんとか継続して行きたい。</p>

<h2 id="%E5%8F%82%E8%80%83">参考</h2>

<ul>
<li><a href="http://doc.qt.io/qt-5/qtquickcontrols-index.html">Qt Quick Controls 5.11</a></li>
<li><a href="https://doc.qt.io/archives/qt-5.7/qtquickcontrols2-customize.html">Customizing Qt Quick Controls 2 | Qt Quick Controls 2 5.7</a></li>
<li><a href="http://blog.qt.io/jp/2011/03/10/qml-drawing-2/">Qt Quick 入門 第8回: QML の描画処理 - Qt Japanese Blog</a></li>
</ul>
]]></content>
        </entry>
            <entry>
            <title type="html"><![CDATA[技術書典4に行ってきた]]></title>
            <link href="http://www.sharkpp.net/blog/2018/05/18/techbookfest4.html"/>
            <updated>2018-05-18T01:10:00+00:00</updated>
            <id>http://www.sharkpp.net/blog/2018/05/18/techbookfest4.html</id>
            <content type="html"><![CDATA[<p>一昨年から始まった技術書オンリーな同人イベント、「<a href="https://techbookfest.org/event/tbf04">技術書典４</a>」が、4月22日に開催されました。
今回はイベントが始まって以来の快晴で運営さんも大慌てだった、とか言う話も。
まあ、ともかく今回も昨年に引き続き「技術書典」に引き続き行ってきました。
これは、そのレポート、もしくは戦果報告となります。
いやはや、かなり周回遅れながらなんとかアップしました。</p>

<p><img src="/images/20180422_tf4.jpg" alt="会場前にて" /></p>

<h2 id="%E5%A7%8B%E3%82%81%E3%81%AB">始めに</h2>

<p>まず、前回のレポートは「<a href="/blog/2017/10/23/techbookfest3.html">技術書典３にサークル手伝いとして参加してきた - さめたすたすのお家</a>
」です。</p>

<p>今回は、サークル数 246 、入場者数 6380 人だったようです。前回から二倍以上増えていて、もう人高密度が大変なことになっていました。</p>

<p><a href="https://docs.google.com/spreadsheets/d/1gNVy9ukLn3kYzOC0nyOpysD-Xl3fIzHl26WSSLHC-HY/edit?usp=sharing"><img src="/images/20180430_tf1_tf4_graph.png" alt="参加人数" /></a></p>

<h2 id="%E5%BD%93%E6%97%A5">当日</h2>

<p>09:45ぐらいに行ったところ、すでに結構な人数が集まってました。
まあ、集まってるとは言っても、その時点では一般参加者の列形成はされてなかったのでばらばらと散らばっている感じ。</p>

<blockquote class="twitter-tweet" data-lang="ja"><p lang="ja" dir="ltr">技術書典4 <a href="https://twitter.com/hashtag/%E6%8A%80%E8%A1%93%E6%9B%B8%E5%85%B8?src=hash&amp;ref_src=twsrc%5Etfw">#技術書典</a> 入場待機中<br>9:45ぐらいで一般参加者が集まってた <a href="https://t.co/eXsELI3LRW">pic.twitter.com/eXsELI3LRW</a></p>&mdash; 俺はさめたすたすでいく！！！ (@sharkpp) <a href="https://twitter.com/sharkpp/status/987863108789063680?ref_src=twsrc%5Etfw">2018年4月22日</a></blockquote>

<script async src="https://platform.twitter.com/widgets.js" charset="utf-8"></script>

<p>そして、10:00 すこし前に一般参加者の列形成を開始。
整理券を配ってましたがどうやら並んでないと入れない、との話が漏れ聞えて来ました。</p>

<blockquote class="twitter-tweet" data-lang="ja"><p lang="ja" dir="ltr"><a href="https://twitter.com/hashtag/%E6%8A%80%E8%A1%93%E6%9B%B8%E5%85%B8?src=hash&amp;ref_src=twsrc%5Etfw">#技術書典</a> <a href="https://twitter.com/hashtag/%E6%8A%80%E8%A1%93%E6%9B%B8%E5%85%B84?src=hash&amp;ref_src=twsrc%5Etfw">#技術書典4</a> サークル一覧のサークル配置図がお亡くなりに <a href="https://t.co/IJBzP4d5n7">pic.twitter.com/IJBzP4d5n7</a></p>&mdash; 俺はさめたすたすでいく！！！ (@sharkpp) <a href="https://twitter.com/sharkpp/status/987869942820163585?ref_src=twsrc%5Etfw">2018年4月22日</a></blockquote>

<script async src="https://platform.twitter.com/widgets.js" charset="utf-8"></script>

<p>サークル配置図を見ようとしたらお亡くなりになっていたり、トイレが近くて危なかったけど、何とかなった。
なんか、以前も同じようなことを...</p>

<p>スタッフさんが、毎度おなじみ手提げバッグを持って回っていて、今回は（前回も？）どうやら後払い公式アプリでも払えるようだったけど、時間かかりそうだったので現金払いにした。
まあ、毎度のことながら会場内でも購入できるんだけどね。</p>

<p>そして、11:00 会場内で拍手があり、ついに会場。</p>

<p>「この列の人、手をあげてください！」ってスタッフさんが来たので、前後を見てなんとなく手をあげたところ、どうやら第一陣の入場対象に含まれたらしく、最初に入場することができました。</p>

<p>とりあえず、最初に入場できたので、知り合いのところなどなど、早速お目当てのサークルさんを駆け巡ることに。</p>

<p>なんかブースの配置が一部ぐるっと回り込まないとダメな構造だったので、買い忘れで戻った時には人が多くて大変だった。</p>

<p>前回から実装された、後払い公式アプリで決済をしつつ、たまに現金払い。</p>

<p>後払いは簡単に決済できるから、面白いようにお金が飛んでく...</p>

<p>戦利品は後ほどで。</p>

<p>最後は前回と同じように、秋葉原のヤマト運輸営業所で荷物を発送しました。</p>

<p>さすがに今回は購入した量が多く、紙袋的なものだと破けそうだったので箱で送ることに。</p>

<p><img src="/images/20180422_tf4_packing.jpg" alt="梱包" /></p>

<p>無事発送もすんだので、今回の技術書典４を抜け、身軽になって観光しました。</p>

<h2 id="%E6%88%A6%E5%88%A9%E5%93%81">戦利品</h2>

<p>今回の戦利品</p>

<p><img src="/images/20180429_tf4_booty.jpg" alt="戦利品" /></p>

<table>
<thead>
<tr>
  <th>ブース</th>
  <th>サークル名/ペンネーム</th>
  <th>備考</th>
</tr>
</thead>
<tbody>
<tr>
  <td></td>
  <td>達人出版会</td>
  <td>「<a href="https://techbookfest.org/journal/3">技術季報 2018 SPRING</a>」※技術書典カタログ</td>
</tr>
<tr>
  <td><a href="https://techbookfest.org/event/tbf04/circle/17450001">い15</a></td>
  <td><a href="https://mzp.booth.pm/">SKK=さらに かしこく かわいい</a></td>
  <td>「工場実習日記」「日本語入力を作るのに必要だった本」</td>
</tr>
<tr>
  <td><a href="https://techbookfest.org/event/tbf04/circle/12820001">か22</a></td>
  <td>理ろぐ/<a href="https://twitter.com/IoriAYANE">理音伊織</a></td>
  <td>「インストーラーで配ろう！」</td>
</tr>
<tr>
  <td><a href="https://techbookfest.org/event/tbf04/circle/12820001">か22</a></td>
  <td><a href="https://qiita.com/MegaBlackLabel">底なし沼の魔女</a>/<a href="https://twitter.com/MegaBlackLabel">れいな</a></td>
  <td>「Libraries of React・Get ready for Next.jsのセット」</td>
</tr>
<tr>
  <td><a href="https://techbookfest.org/event/tbf04/circle/16430002">お09</a></td>
  <td>Secure旅団</td>
  <td>「俺らの愛したセキュリティ」「ニッチ・セキュリティ - 明星へ登る」</td>
</tr>
<tr>
  <td><a href="https://techbookfest.org/event/tbf04/circle/17570001">か24</a></td>
  <td><a href="http://www.chirashiura.com/">楽描帳</a>/<a href="https://twitter.com/tomato360">@tomato360</a></td>
  <td>「Hello Nuxt !!」「Hello!! Vue.js 最新プログレッシブフレームワーク入門」</td>
</tr>
<tr>
  <td><a href="https://techbookfest.org/event/tbf04/circle/19150009">か23</a></td>
  <td><a href="https://mya-ake.com/">ねこの手@福岡</a>/<a href="https://twitter.com/mya_ake">mya-ake</a></td>
  <td>「知らないと損するCSS」「現場で使えるVue.js tips集」</td>
</tr>
<tr>
  <td><a href="https://techbookfest.org/event/tbf04/circle/14560006">く36</a></td>
  <td><a href="http://blogs.yahoo.co.jp/rem1988stores">紙印</a>/おたべ</td>
  <td>「【フルセット】テスト設計入門 2018年度版」</td>
</tr>
<tr>
  <td><a href="https://techbookfest.org/event/tbf04/circle/19150006">く02</a></td>
  <td><a href="https://www.wakamesoba98.net/circle/">53鍵盤</a>/わかめそば</td>
  <td>「初めてのsystemd-nspawn」</td>
</tr>
<tr>
  <td><a href="https://techbookfest.org/event/tbf04/circle/16620002">け15</a></td>
  <td><a href="https://staff.aist.go.jp/tominaga-daisuke/sliderule/rectilinear/index.html">お台場計算尺</a>/とみながだいすけ</td>
  <td>「新世紀の計算尺入門」「作って使おう計算尺」</td>
</tr>
<tr>
  <td><a href="https://techbookfest.org/event/tbf04/circle/21060002">き17</a></td>
  <td>めがねをかけるんだ/<a href="https://twitter.com/keiji_ariyama">Keiji ARIYAMA</a></td>
  <td>「本当はおそろしい商業出版！？」「茶色いトイプードルは食べ物じゃないっ！」</td>
</tr>
<tr>
  <td><a href="https://techbookfest.org/event/tbf04/circle/14520005">き02</a></td>
  <td>越後屋/なかざん</td>
  <td>「Cheap Dive into React Native」</td>
</tr>
<tr>
  <td><a href="https://techbookfest.org/event/tbf04/circle/11830001">お08</a></td>
  <td><a href="https://twitter.com/cpaw_account">Cpaw</a></td>
  <td>「RustによるWebアプリケーション作成入門」</td>
</tr>
<tr>
  <td><a href="https://techbookfest.org/event/tbf04/circle/18420001">お02</a></td>
  <td><a href="http://yoshikawaweb.com/">吉川雅彦</a></td>
  <td>「z-indexを倒す」</td>
</tr>
<tr>
  <td><a href="https://techbookfest.org/event/tbf04/circle/16430001">い05</a></td>
  <td><a href="http://webdesign-manga.com/">マンガでわかるWebデザイン＋Git</a>/湊川あい</td>
  <td>「マンガでわかるDocker」「マンガでわかるScrapbox【無料頒布】」</td>
</tr>
<tr>
  <td><a href="https://techbookfest.org/event/tbf04/circle/14570001">け51</a></td>
  <td><a href="https://www.facebook.com/windholep/">windhole</a>/風穴 江</td>
  <td>「USB3.0 ホストドライバ自作入門」</td>
</tr>
<tr>
  <td><a href="https://techbookfest.org/event/tbf04/circle/21040009">あ01</a></td>
  <td>日経BP出版局</td>
  <td>「日経電子の本」※無料配布</td>
</tr>
</tbody>
</table>

<p>※敬称略、順不同</p>

<h2 id="%E3%81%BE%E3%81%A8%E3%82%81">まとめ</h2>

<ul>
<li>そろそろ会場に対して人が多いのではないかと...</li>
<li>並ぶ前にトイレを済まそう(二度目)</li>
<li>段々と購入数が多くなっていく...</li>
<li>公式後払いアプリ怖い（お金に羽が生えて飛んでいく的な意味で</li>
</ul>
]]></content>
        </entry>
            <entry>
            <title type="html"><![CDATA[名古屋Qt勉強会#15 に参加しました]]></title>
            <link href="http://www.sharkpp.net/blog/2018/04/21/qt-nagoya-15.html"/>
            <updated>2018-04-21T05:50:00+00:00</updated>
            <id>http://www.sharkpp.net/blog/2018/04/21/qt-nagoya-15.html</id>
            <content type="html"><![CDATA[<p>つい先日 4月14日(土) に開催された <a href="https://qt-users.connpass.com/event/84048/">Qt 勉強会 @ Nagoya #15 - connpass</a> に参加しました。</p>

<p>まとめは <a href="https://togetter.com/li/1218135">Qt 勉強会 @ Nagoya # 15 まとめ - Togetter</a> です。</p>

<p>ちょっと遅くなったけど、そのまとめ。</p>

<p><img src="/images/20180414_qauthwith.png" alt="開発中" /></p>

<h2 id="%E4%BC%9A%E5%A0%B4%E5%88%B0%E7%9D%80%E3%81%BE%E3%81%A7">会場到着まで</h2>

<p>会場近くには、あの食器で有名なノリタケの森がある。
それを横目に通り過ぎながら名古屋駅からテクテク歩くこと約20分。
最初、別の場所を会場と思ってたけど間違えてたようで <a href="https://twitter.com/kazuo_asa">@kazuo_asa</a> @主催者さんに助けてもらった。</p>

<h2 id="%E8%87%AA%E5%B7%B1%E7%B4%B9%E4%BB%8B">自己紹介</h2>

<p>みんなで自己紹介</p>

<p>ほぼ何回か参加していて見知っていた人だった。
まあ、久しぶりの参加の人もいたけど。</p>

<h2 id="%E4%BB%8A%E5%9B%9E%E3%81%AE%E3%81%8A%E8%8F%93%E5%AD%90">今回のお菓子</h2>

<p>今回は駄菓子を持って来たけど、横に長く座っていた関係もあったのか、まああまり減らなかった。</p>

<p><img src="/images/20180414_dagashi.jpg" alt="串カツ田中で懇親会" /></p>

<h2 id="%E3%82%82%E3%81%8F%E3%82%82%E3%81%8F">もくもく</h2>

<p>とりあえず、久しぶりに Qt を触る。</p>

<p><a href="https://github.com/sharkpp/qtauthwith">qtauthwith</a> を触ってみるも、ビルドエラーが出るのでひたすら修正。</p>

<p>最終的にビルドは通るようになったけど... UIがそういえば実装するの超面倒だったな、と思い出して QtQuick で実装できないか模索。</p>

<h2 id="%E3%81%A8%E3%81%A4%E3%81%9C%E3%82%93%E3%81%AE%E6%9A%97%E5%8F%B7%E9%80%9A%E8%B2%A8">とつぜんの暗号通貨</h2>

<p>勉強会のイベントページに、なんか企業アカウントっぽいのが登録されているなぁと思ってたけど、開始時間過ぎても来ていなかったので、なんだったんだろうな、とは思ってた。
が、しばらくしてから、２人組の人が来たが、その片方は外国の方だったので、ちとびっくり。</p>

<p>どうやら、外国の方の方は暗号通貨 Dash と言う日本ではマイナーな仮想通貨の伝道師的な人だったようで、公式の Wallet アプリが Qt で作られている関係で参加した様子。</p>

<h3 id="%E6%9A%97%E5%8F%B7%E9%80%9A%E8%B2%A8-dash">暗号通貨 Dash</h3>

<p><a href="https://www.dash.org/jp/">DASH公式サイト | DASH暗号通貨 — Dash</a></p>

<p>どうやら Core Wallet って管理アプリが Qt 4 で作られているらしい。</p>

<p>話してくれたのは、暗号通貨 Dash のコミュニティマネージャ兼伝道師兼いろいろ。</p>

<p>Dash は bitcoin のハードフォークで Core Wallet が Qt 製なのも bitcoin から受け継いだもの。</p>

<p>bitcoin はマイニングで得た報酬はマイニングした人にのみ分配されるが、Dash はマイニングで発掘された報酬を開発者に分ける仕組みがあるとのこと。</p>

<p>分配の割合は 45:45:10 で、マイナー：マスターノード（いっぱいコインを持ってる人？）：コミュニティに分配され、コミュニティに分配された報酬は、投票により開発者やマーケティングなどに使われるらしい。</p>

<p>この辺り、面白い戦略をとってると思う。</p>

<p><a href="https://github.com/dashpay/dash">dashpay/dash: Dash - Reinventing Cryptocurrency</a> が公式リポジトリっぽい。</p>

<h4 id="%E6%A8%99%E6%BA%96-wallet-%E3%81%AB%E3%81%A4%E3%81%84%E3%81%A6">標準 wallet について</h4>

<ul>
<li>Qt 4 で実装</li>
<li>改善する箇所が多い。例えば、

<ul>
<li>エクスポートはCSV形式なので、JSONなどへの対応する、など。</li>
<li>送信先の選択画面、フィルタとかもできないし、一人一人選択しないといけない。</li>
<li>Multisig 機能があるがそのUIがないのでコマンドラインを直接指定しないといけない。</li>
</ul></li>
<li>つまるところ、Qtの開発者がもっと増えて欲しい</li>
<li>先の10%をどういう風に使うかを、フォーラムで提案＆投票し決める仕組みがある。</li>
<li>改善の提案はPRでもフォーラムでもできるけど、大きな改善はフォーラムで提案すると予算が降りるかもしれない。</li>
</ul>

<h3 id="solarcoin">SolarCoin</h3>

<p>公式はたぶんこれ <a href="https://solarcoin.org/">SolarCoin | SolarCoin</a> 。</p>

<p>どうやらこっちにも携わっているみたい。</p>

<p>dash のどこかのバージョンのフォーク。</p>

<p>コアな開発者は３人ぐらいなので、こちらも増えて欲しい、とのこと。</p>

<h2 id="%E6%87%87%E8%A6%AA%E4%BC%9A">懇親会</h2>

<p>会場近くの串カツ屋さん。なんか両隣は結構有名なお店らしい。</p>

<p><img src="/images/20180414_kushikatsu.jpg" alt="串カツ田中で懇親会" /></p>

<h2 id="%E6%9C%80%E5%BE%8C%E3%81%AB">最後に</h2>

<p>久しぶりに参加したけど、久しぶりにQt触っていろいろと忘れていたこともあった。
けど、強制的に時間を確保しもくもくするのはやはり悪くない。
あと、Dash コインの話もいろいろ面白かった。</p>
]]></content>
        </entry>
            <entry>
            <title type="html"><![CDATA[Franz 用の Mastodon レシピを作りました！]]></title>
            <link href="http://www.sharkpp.net/blog/2018/03/27/franz-recipe-mastodon.html"/>
            <updated>2018-03-27T01:10:00+00:00</updated>
            <id>http://www.sharkpp.net/blog/2018/03/27/franz-recipe-mastodon.html</id>
            <content type="html"><![CDATA[<p>ネタがない... ことはないけど、これまた先日公開した <a href="https://github.com/sharkpp/franz-recipe-mastodon">Franz 5 recipe for Mastodon</a> の紹介です。</p>

<h2 id="%E3%81%9D%E3%82%82%E3%81%9D%E3%82%82-franz-%E3%81%A8%E3%81%AF%E3%81%AA%E3%82%93%E3%81%9E%E3%82%84%EF%BC%9F">そもそも Franz とはなんぞや？</h2>

<p>簡単にいうと Franz は、各種 SNS をタブでまとめて管理できるデスクトップアプリです。</p>

<p><a href="https://meetfranz.com/">Franz – a free messaging app for Slack, Facebook Messenger, WhatsApp, Telegram and more</a> からダウンロードできますが、利用するにはアカウント登録が必要です。</p>

<p>特徴として</p>

<ul>
<li>レシピ（＝拡張）を追加することで様々な SNS などの Webサービスに対応可能</li>
<li>レシピごとに複数のアカウントを割り当て可能（＝マルチアカウント対応）</li>
<li>クロスプラットフォームなデスクトップアプリ</li>
</ul>

<p>などがあります。</p>

<p>まあ、要するに Webで提供されているページをタブで表示している訳です。
そのため、LINE など Webページが存在しないサービスに対しては逆立ちしても利用できないのですが...</p>

<h2 id="%E5%BF%85%E8%A6%81%E3%81%AA%E3%82%82%E3%81%AE">必要なもの</h2>

<ul>
<li><a href="https://meetfranz.com/">Franz</a> 5 以降<br />古いバージョンはサポートしていません。</li>
<li><a href="https://joinmastodon.org/">Mastodon</a> アカウント<br />アカウントを持っていない場合は、自分で Mastodon インスタンスを立ち上げるか <a href="https://instances.social/list">Mastodon instances</a> から探して見てください</li>
</ul>

<h2 id="%E3%82%A4%E3%83%B3%E3%82%B9%E3%83%88%E3%83%BC%E3%83%AB%E6%96%B9%E6%B3%95">インストール方法</h2>

<h3 id="%E9%96%8B%E7%99%BA%E3%83%90%E3%83%BC%E3%82%B8%E3%83%A7%E3%83%B3">開発バージョン</h3>

<ol>
<li><code>franz-recipe-mastodon</code> をダウンロードします。</li>
<li>PC上の Franz Plugins フォルダを開きます<br />(メモ： <strong><code>dev</code> ディレクトリが存在しない場合は作成する必要があります</strong>)

<ul>
<li>Mac: <code>~/Library/Application Support/Franz/recipes/dev/</code></li>
<li>Windows: <code>%AppData%\Franz\recipes\dev\</code></li>
<li>Linux: <code>~/.config/Franz/recipes/dev</code></li>
</ul></li>
<li><code>franz-recipe-mastodon</code> フォルダを plugins ディレクトリにコピーします</li>
<li>Franz をリロードする</li>
</ol>

<p>詳しくは <a href="https://github.com/meetfranz/plugins/blob/master/docs/integration.md">Franz Recipe Documentation / Overview</a> を参照してください。</p>

<h3 id="%E5%AE%89%E5%AE%9A%E7%89%88">安定版</h3>

<p>準備中...</p>

<p>※ <a href="https://github.com/meetfranz/plugins/issues/137">[Deploy] Mastodon - Issue #137 - meetfranz/plugins</a> で公式リポジトリへの登録をリクエストをしているけど、どうなることやら</p>

<h2 id="%E5%88%A9%E7%94%A8%E6%96%B9%E6%B3%95">利用方法</h2>

<h3 id="%E6%96%B0%E3%81%97%E3%81%84%E3%82%B5%E3%83%BC%E3%83%93%E3%82%B9%E3%82%92%E8%BF%BD%E5%8A%A0%E3%81%99%E3%82%8B">新しいサービスを追加する</h3>

<p><img src="/images/20180327_add-service.png" alt="" /></p>

<p><em>開発バージョン</em></p>

<h3 id="%E8%A8%AD%E5%AE%9A">設定</h3>

<p><img src="/images/20180327_add-service-settings.png" alt="" /></p>

<table>
<thead>
<tr>
  <th>#</th>
  <th>フィールド</th>
  <th>説明</th>
</tr>
</thead>
<tbody>
<tr>
  <td>①</td>
  <td>サービス名</td>
  <td>自由に設定してください</td>
</tr>
<tr>
  <td>②</td>
  <td>Mastodon インスタンスのホスト名</td>
  <td>Mastodon を実行しているホストを入力してください。 httpsのみがサポートされています</td>
</tr>
</tbody>
</table>

<h3 id="%E3%82%B5%E3%82%A4%E3%83%B3%E3%82%A4%E3%83%B3">サインイン</h3>

<p><img src="/images/20180327_mstdn_jp-signin.png" alt="" /></p>

<p>登録されたアカウント情報を入力してください。</p>

<h3 id="%E9%80%9A%E7%9F%A5%E3%83%90%E3%83%83%E3%82%B8%E3%81%AB%E3%81%A4%E3%81%84%E3%81%A6">通知バッジについて</h3>

<p><img src="/images/20180327_notification-badge-example.png" alt="" /></p>

<p>利用するには <em>mastodon</em> 側でデスクトップ通知を有効にする必要があります。</p>

<p>バッジのクリア条件</p>

<table>
<thead>
<tr>
  <th>現在アクティブなサービス</th>
  <th>バッジのクリア</th>
</tr>
</thead>
<tbody>
<tr>
  <td>このサービス</td>
  <td>最後の通知から10秒後</td>
</tr>
<tr>
  <td>その他のサービス</td>
  <td>このサービスがアクティブになった時</td>
</tr>
</tbody>
</table>

<h2 id="%E3%81%8A%E3%81%BE%E3%81%91">おまけ</h2>

<p>Franz で Mastodon を管理したいなーと思って、github とかとか探して見たけど、どうやら最新版ではまともに動かないらしい、という所からじゃあ自分で作ってみようかと思って作って見ました。</p>

<p>まあ、表示するだけならなんとかなったんですが...</p>

<ul>
<li>ログイン画面へのリダイレクト（トップ画面はごちゃごちゃ表示されているので）</li>
<li>新着の通知（画面に通知が出ない）</li>
</ul>

<p>あたりの実装がすっごく大変でした。
この辺り、色々調べたことをまとめたいなとは思います。</p>
]]></content>
        </entry>
            <entry>
            <title type="html"><![CDATA[Qt 用の QDialog をベースとした吹き出し型のウィジェット]]></title>
            <link href="http://www.sharkpp.net/blog/2018/02/27/popover-widget-for-qt.html"/>
            <updated>2018-02-27T01:01:00+00:00</updated>
            <id>http://www.sharkpp.net/blog/2018/02/27/popover-widget-for-qt.html</id>
            <content type="html"><![CDATA[<p>とりあえず、ネタがないので先日に公開した <a href="https://github.com/sharkpp/qtpopover">Popover - QDialog base balloon shape widget</a> の紹介。</p>

<h2 id="%E4%BD%95%E3%81%8C%E3%81%A7%E3%81%8D%E3%82%8B%EF%BC%9F">何ができる？</h2>

<p><img src="/images/20180227_qtpopover.png" alt="スクリーンショット" /></p>

<p>こんな感じの切り欠き付きのポップアップが簡単に実装できます。</p>

<p><a href="https://developer.apple.com/documentation/appkit/nspopover">NSPopover</a> みたいなやつ。</p>

<h2 id="%E3%81%A9%E3%81%93%E3%81%A7%E5%88%A9%E7%94%A8%E3%81%A7%E3%81%8D%E3%82%8B%EF%BC%9F">どこで利用できる？</h2>

<p>現状は macOS しか動作の確認をしてないです。
もしかしたら Windows とか Linux でも動作するかも？</p>

<h2 id="%E3%81%A9%E3%81%86%E3%82%84%E3%81%A3%E3%81%A6%E4%BD%BF%E3%81%86%EF%BC%9F">どうやって使う？</h2>

<p>使い方は、</p>

<ul>
<li>ソースを組み込んで利用(a)</li>
<li>ライブラリとしてビルドして利用(b)</li>
</ul>

<p>の２種類です。</p>

<p>組み込みのサンプルは <a href="https://github.com/sharkpp/qtpopover/tree/master/examples">master/examples - qtpopover</a> あたりに。</p>

<h3 id="%E7%92%B0%E5%A2%83%E4%BE%8B">環境例</h3>

<table>
<thead>
<tr>
  <th>項目</th>
  <th>内容</th>
</tr>
</thead>
<tbody>
<tr>
  <td>アプリケーション名</td>
  <td>test</td>
</tr>
<tr>
  <td>ライブラリフォルダ</td>
  <td><code>libs</code></td>
</tr>
</tbody>
</table>

<h3 id="1%E3%82%BD%E3%83%BC%E3%82%B9%E3%82%92%E5%8F%96%E5%BE%97">1)ソースを取得</h3>

<pre><code class="console"># git submodule add git@github.com:sharkpp/qtpopover.git libs/qtpopover
# git submodule update
</code></pre>

<h3 id="2a%E3%82%BD%E3%83%BC%E3%82%B9%E3%82%92%E5%8F%96%E3%82%8A%E8%BE%BC%E3%82%80">2a)ソースを取り込む</h3>

<h4 id="2a.1%E3%83%97%E3%83%AD%E3%82%B8%E3%82%A7%E3%82%AF%E3%83%88%E3%83%95%E3%82%A1%E3%82%A4%E3%83%AB%60.pro%60%E3%82%92%E5%A4%89%E6%9B%B4">2a.1)プロジェクトファイル(<code>.pro</code>)を変更</h4>

<p>アプリケーションの <code>.pro</code> を変更する。
プロジェクトインクルードファイル（？）を追加します。</p>

<p>変更例</p>

<pre><code class="diff">+ # You can also select to disable deprecated APIs only up to a certain version of Qt.
+ #DEFINES += QT_DISABLE_DEPRECATED_BEFORE=0x060000    # disables all the APIs deprecated before Qt 6.0.0
+
+ include(./libs/qtpopover/sources/popover.pri)
+
+ SOURCES += \
+         main.cpp \
+         mainwindow.cpp \
</code></pre>

<h3 id="2b%E3%83%A9%E3%82%A4%E3%83%96%E3%83%A9%E3%83%AA%E3%82%92%E5%8F%96%E3%82%8A%E8%BE%BC%E3%82%80">2b)ライブラリを取り込む</h3>

<h4 id="2b.1%E3%83%A9%E3%82%A4%E3%83%96%E3%83%A9%E3%83%AA%E3%82%92%E3%83%93%E3%83%AB%E3%83%89">2b.1)ライブラリをビルド</h4>

<p><code>./libs/qtpopover/popover.pro</code> を <code>Qt Creator</code> で開きビルドする。</p>

<h4 id="2b.2%E3%83%97%E3%83%AD%E3%82%B8%E3%82%A7%E3%82%AF%E3%83%88%E3%83%95%E3%82%A1%E3%82%A4%E3%83%AB%60.pro%60%E3%82%92%E5%A4%89%E6%9B%B4">2b.2)プロジェクトファイル(<code>.pro</code>)を変更</h4>

<p>アプリケーションの <code>.pro</code> を変更する。</p>

<p><code>POPOVER_USE_STATIC_LIB=1</code> とプロジェクトインクルードファイル（？）を追加します。</p>

<p>変更例</p>

<pre><code class="diff">+ # You can also select to disable deprecated APIs only up to a certain version of Qt.
+ #DEFINES += QT_DISABLE_DEPRECATED_BEFORE=0x060000    # disables all the APIs deprecated before Qt 6.0.0
+
+ POPOVER_USE_STATIC_LIB=1
+ include(./libs/qtpopover/sources/popover.pri)
+
+ SOURCES += \
+         main.cpp \
+         mainwindow.cpp \
</code></pre>

<h3 id="3%60qdialog%60-%E3%83%99%E3%83%BC%E3%82%B9%E3%81%AE%E3%82%AF%E3%83%A9%E3%82%B9%E3%82%92%E4%BD%9C%E3%82%8B%E3%80%82">3)<code>QDialog</code> ベースのクラスを作る。</h3>

<h3 id="4%E3%82%BD%E3%83%BC%E3%82%B9%E3%81%AE%E5%A4%89%E6%9B%B4">4)ソースの変更</h3>

<p>変更例</p>

<pre><code class="cpp">  #include &lt;QApplication&gt;

  TaskTrayPopup::TaskTrayPopup(QWidget *parent)
-     : QDialog(parent)
+     : Popover(parent)
      , ui(new Ui::TaskTrayPopup)
  {
      ui-&gt;setupUi(this);
</code></pre>

<h3 id="5%E3%83%98%E3%83%83%E3%83%80%E3%81%AE%E5%A4%89%E6%9B%B4">5)ヘッダの変更</h3>

<p>変更例</p>

<pre><code class="cpp">  #ifndef TASKTRAYPOPUP_H
  #define TASKTRAYPOPUP_H

+ #include "popover.h"

  namespace Ui {
  class TaskTrayPopup;
  }

  class TaskTrayPopup
-         : public QDialog
+         : public Popover
  {
      Q_OBJECT

</code></pre>

<h2 id="%E3%81%AA%E3%81%9C%E4%BD%9C%E3%81%A3%E3%81%9F%EF%BC%9F">なぜ作った？</h2>

<p>いろんなところで利用できそうな Qt のクラス作ったけど、簡単に利用できる方法がないかなと、捏ねくり回して作って見ました。</p>

<p>どこかに、<code>npm i HOGE</code> とか <code>composer require HOGE</code> みたいに手軽に利用できる Qt の標準的なパッケージの仕組みはないものですかね。</p>
]]></content>
        </entry>
    </feed>