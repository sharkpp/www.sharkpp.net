<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
    <title><![CDATA[さめたすたすのお家]]></title>
    <link href="http://www.sharkpp.net/blog/tags/%E9%9B%91%E8%A8%98.xml" rel="self"/>
    <link href="http://www.sharkpp.net/"/>
    <updated>2021-08-07T12:57:45+00:00</updated>
    <id>http://www.sharkpp.net/</id>
            <author>
            <name><![CDATA[sharkpp]]></name>                    </author>
        <generator uri="http://sculpin.io/">Sculpin</generator>
            <entry>
            <title type="html"><![CDATA[Chromecast with Google TV の開封の儀と３ヶ月ぐらい使ってみた]]></title>
            <link href="http://www.sharkpp.net/blog/2021/02/28/unboxing-and-used-three-month-of-chromecast-with-google-tv.html"/>
            <updated>2021-02-28T22:45:00+00:00</updated>
            <id>http://www.sharkpp.net/blog/2021/02/28/unboxing-and-used-three-month-of-chromecast-with-google-tv.html</id>
            <content type="html"><![CDATA[<p>10月1日に発表され、これは欲しいって思いつつ日本発売の情報が流れずやきもきしていたところで、
やっと11月25日に発売された <a href="https://store.google.com/jp/product/chromecast_google_tv">Chromecast with Google TV</a> を
しばらく使ってみた感想などを毎度のごとくの開封の儀とともに記事にしました。</p>

<p>今度の Chromecast はスマホなしでいろいろできていいね！</p>

<h2 id="%E9%96%8B%E5%B0%81%E3%81%AE%E5%84%80">開封の儀</h2>

<p>箱はまあ、一般的(？)な化粧箱に入った感じですね。
周りを全部写真撮ったので六面体の展開図風にしてみました。</p>

<p><a href="/images/20201128_chromecast_box.jpg"><img src="/thumbs/6650ec61e09199521c279f1ecbc8994e-640x640.jpg" alt="Chromecast箱"></a></p>

<p>ぱかっとな。</p>

<p><a href="/images/20201128_chromecast_box_open.jpg"><img src="/thumbs/a8be2c001947c34f7907a49c5a16cf05-640x640.jpg" alt="Chromecast箱オープン"></a></p>

<p>付属品はこんな感じ。</p>

<p><a href="/images/20201128_chromecast_open_all.jpg"><img src="/thumbs/4c6fa44000361f934e27bc77ebaf7cde-640x640.jpg" alt="Chromecast箱の中身"></a></p>

<h2 id="%E3%82%BB%E3%83%83%E3%83%88%E3%82%A2%E3%83%83%E3%83%97">セットアップ</h2>

<p>テレビの裏のHDMIに接続。 
最終的には<a href="https://www.amazon.co.jp/dp/B071JTQW19/">HDMI切替器</a>を買って切り替えできるようにしています。</p>

<p><a href="/images/20201128_chromecast_connected.jpg"><img src="/thumbs/e5f4826f55917d2eb6c777c5b090ce11-640x640.jpg" alt="Chromecastテレビに接続"></a></p>

<p>Chromecasy 起動</p>

<p><a href="/images/20201128_chromecast_logo.jpg"><img src="/thumbs/8df9d169db2ecd8a6a5fbd6e9bb08f3a-640x640.jpg" alt="Chromecastロゴ"></a></p>

<p>リモコンをセットアップ</p>

<p><a href="/images/20201128_chromecast_remocon_setup.jpg"><img src="/thumbs/a7e34c5302e3833d8324551119147bdb-640x640.jpg" alt="Chromecastリモコンセットアップ"></a></p>

<p>QRコードでスマホアプリと連携することでセットアップが簡単にできました。</p>

<p>※スマホなしでもセットアップできたと思う...</p>

<p><a href="/images/20201128_chromecast_app_setup.jpg"><img src="/thumbs/86fe527fc915953a97173642f776f3ba-640x640.jpg" alt="Chromecastアプリセットアップ(テレビで)"></a>
<a href="/images/20201128_chromecast_app_setup_phone1.png"><img src="/thumbs/ead66e12ba066e67d6df27b39ba08696-640x640.png" alt="Chromecastアプリセットアップ(スマホで１)"></a>
<a href="/images/20201128_chromecast_app_setup_phone2.png"><img src="/thumbs/797aef6b50dfb96157ecd303160c795b-640x640.png" alt="Chromecastアプリセットアップ(スマホで２)"></a></p>

<p>ホーム画面を見ると Netflixなどなどある程度いろいろインストールされてますが Abema 以外の初期インストールされた動画配信サービスのアプリは一旦アンインストール。</p>

<p><a href="/images/20201128_chromecast_home_screen.jpg"><img src="/thumbs/bb6d95a290d1e9b6ed2d69aeb0c66ba4-640x640.jpg" alt="Chromecastホーム画面"></a></p>

<p>そして、GyaO! をインストール。
これも、QRコードで簡単に連携可能。</p>

<p><a href="/images/20201128_gyao_pairing.jpg"><img src="/thumbs/46dfc00402b5c9abc5ef1f641b832480-640x640.jpg" alt="Chromecast GyaO! ペアリング"></a></p>

<p>のちに、Abemaもアカウント登録＆QRコードで連携して、マイリストを同期しました。</p>

<h2 id="%EF%BC%93%E3%83%B6%E6%9C%88%E3%81%90%E3%82%89%E3%81%84%E4%BD%BF%E3%81%A3%E3%81%A6%E3%81%BF%E3%81%9F%E6%84%9F%E3%81%98">３ヶ月ぐらい使ってみた感じ</h2>

<p>３ヶ月みっちりというよりゆるーく使ってみた感じの感想。</p>

<p><strong>GyaO! アプリ</strong></p>

<ul>
<li>現時点ではホーム画面にお勧めなどが列挙されないのがイマイチ。</li>
<li>Android スマホ版やウェブ版だと配信されているバラエティー番組などが配信されていない

<ul>
<li>たとえば、「吉田類の酒場放浪記」や「秘密のケンミンSHOW極」など</li>
</ul></li>
<li>映画の音量調整がイマイチ。

<ul>
<li>効果音と声の音量がアンマッチで効果音に合わせると声が聞き取り辛く、声に合わせると効果音が大きすぎる感じ。</li>
</ul></li>
</ul>

<p><strong>Abema</strong></p>

<ul>
<li>マイビデオへの登録に操作が多いのでちょっとむず</li>
<li>スマホアプリからキャストで見るのが一番楽...</li>
<li>ホーム画面に番組が出るのはいいかも</li>
</ul>

<p><strong>TVer</strong></p>

<p>入れたけどそんなに使ってない...</p>

<p>アニメあんまりないので...</p>

<h2 id="%E3%81%BE%E3%81%A8%E3%82%81">まとめ</h2>

<p>現状は、ほぼアニメでたまに映画とかみてるけど、買ってよかったガジェットにランクインな感じ。</p>

<p>7000円ぐらいするけど、元は十分取れると思う。</p>
]]></content>
        </entry>
            <entry>
            <title type="html"><![CDATA[HAPPY NEW YEAR 2021]]></title>
            <link href="http://www.sharkpp.net/blog/2021/01/01/happy-new-year-2021.html"/>
            <updated>2021-01-01T22:30:00+00:00</updated>
            <id>http://www.sharkpp.net/blog/2021/01/01/happy-new-year-2021.html</id>
            <content type="html"><![CDATA[<p>明けましておめでとうございます。</p>

<p>今年もまだまだ新型コロナは収まりそうになさそうですが、それに負けることなく過ごせればと思います。</p>

<p>では、今年の目標をば。</p>

<h2 id="%E7%9B%AE%E6%A8%99">目標</h2>

<h3 id="%E3%83%9B%E3%83%BC%E3%83%A0%E3%83%9A%E3%83%BC%E3%82%B8%E3%81%AE%E6%9B%B4%E6%96%B0">ホームページの更新</h3>

<p>最低でも月一ぐらいでは更新したいと思います。
つまるところ、それには何かしらネタを仕込む必要があるかなと。</p>

<p>とりあえず、ReactJSを使ってウェブアプリをちょこちょこ作りつつ、Qtでも何か作ってみようかなと。</p>

<p>あとは、React native とかも気になっているところ。</p>

<h3 id="%E3%83%9B%E3%83%BC%E3%83%A0%E3%83%9A%E3%83%BC%E3%82%B8%E3%81%AE%E3%83%93%E3%83%AB%E3%83%89%E3%82%B7%E3%82%B9%E3%83%86%E3%83%A0%E3%81%AE%E6%94%B9%E5%96%84">ホームページのビルドシステムの改善</h3>

<p>現状、php 製の Sculpin でホームページをビルドしてます。
が、年末に記事を書いたらビルドが失敗して慌てて応急手当てをした感じで、さすがにこれはなんとかしないとって感じをひしひしと。
で、 Sculpin もそこそこ更新はされているのでいいかもだけど、せっかくなので GatsbyJS で構築してみようかと。
まあ、思い立ったのは去年のことだけど...</p>

<p>あと、CI も GitHub Action に変えて GitHub のみで完結できそうなので変更したいところ。</p>

<p>あとは、今更 http もないだろうから https にもしてみたいな。</p>

<h3 id="%E3%81%9D%E3%81%AE%E4%BB%96">その他</h3>

<p>その他には...</p>

<ul>
<li>ガジェットの記事</li>
<li>DIYの記事</li>
</ul>

<p>とかも随時していきたいところ。</p>

<p>ああ、あとは、お金貯めて Apple MacBook Air (13", M1, 2020) とか欲しいな... そろそろノートPC買い換えたい...</p>

<h2 id="%E3%81%82%E3%81%91%E3%81%8A%E3%82%81%E3%81%93%E3%81%A8%E3%82%88%E3%82%8D">あけおめことよろ</h2>

<p>ではでは、今年もまた一年、よろしくお願いいたします。</p>

<p><img src="/images/20210101_first_sunrise.jpg" alt="2021年の初日の出" /></p>
]]></content>
        </entry>
            <entry>
            <title type="html"><![CDATA[大晦日@2020]]></title>
            <link href="http://www.sharkpp.net/blog/2020/12/31/new-years-eve-2020.html"/>
            <updated>2020-12-31T21:49:00+00:00</updated>
            <id>http://www.sharkpp.net/blog/2020/12/31/new-years-eve-2020.html</id>
            <content type="html"><![CDATA[<h2 id="1-%E5%B9%B4%E3%82%92%E6%8C%AF%E3%82%8A%E8%BF%94%E3%82%8A">1 年を振り返り</h2>

<p>今年も残すところ大晦日の今日だけとなりました。
つまりは99.7%は終わった感じですね。</p>

<p>世間的なところではコロナ禍が猛威を振るい、今だに収まらないというのは去年の今頃は全く予想できなかったです。
それによって働き方も様変わりし、旅行やイベントも自粛ムードになるなど影響がいたるところに出ている感じですね。</p>

<p>個人的なところでは、お仕事は変わらずだけど、コロナ禍の影響を受けて在宅ワークがメインになったりしました。</p>

<blockquote>
  <p>自分自身のことについてはまあ諸々の理由があって勉強会もほとんど参加できなかったのが残念ですが、来年の後半ぐらいから多少マシになる... といいなと。</p>
</blockquote>

<p>これは、まだもう少しイベントがありそうだけどなんとかしたいですね。</p>

<p>そして、今年も恒例(？)の仮想除夜の鐘アプリ「<a href="https://sharkpp.github.io/joya_no_kane/">除夜の鐘</a>」のリンクを貼っておきます。</p>

<p>さて、前置きいつも通り書いたところで、今年の反省をば。</p>

<h2 id="%E7%B5%90%E6%9E%9C">結果</h2>

<p>まずは、今年の正月 <a href="/blog/2020/01/01/happy-new-year-2020.html">HAPPY NEW YEAR 2020</a> に掲げた目標です。</p>

<ul>
<li>定期的なホムペの更新</li>
<li>ホームページを GitHub Action ＆ GatsbyJS ベースに移行してモダーンな感じに</li>
<li>PWAとかQtとかもろもろ勉強... というか遊ぶ</li>
<li>Rust頑張ってみる... Rust難しい...</li>
<li><a href="https://github.com/sharkpp/FrameExtract">FrameExtract</a> を完成させる</li>
</ul>

<p>と、こんな感じ。</p>

<p>成果としては...</p>

<p>ちょこちょこやっているけど、如何せん時間があまり取れずなかなか進まない感じ。</p>

<p>8月から11月までブログに書けるような内容も何もできていないので、ぐぬぬ。</p>

<p>今年も<a href="https://togetter.com/li/1450054">よんた@keita44_f4 さんの日本酒の感想ツイートまとめ</a>を~~更新してました~~大晦日に慌てて更新しました(汗
お酒たくさん飲めて羨ましい...</p>

<h2 id="%E5%8F%8D%E7%9C%81">反省</h2>

<p>作りたいものはあるけど、なかなか時間がない、というか体力がない感じをなんとかしたい感じ。</p>

<p>と言うあたりで今年の反省会終了です。</p>

<p><img src="/images/20201231_herring_soba.jpg" alt="にしん蕎麦" /></p>

<p>それでは来年もよろしくお願いします。</p>
]]></content>
        </entry>
            <entry>
            <title type="html"><![CDATA[Hubot アダプタを TypeScript を使って作ってみた]]></title>
            <link href="http://www.sharkpp.net/blog/2020/07/29/hubot-adapter-with-typescript.html"/>
            <updated>2020-07-29T23:46:00+00:00</updated>
            <id>http://www.sharkpp.net/blog/2020/07/29/hubot-adapter-with-typescript.html</id>
            <content type="html"><![CDATA[<h2 id="typescrpt-%E3%81%A7%E5%AE%9F%E8%A3%85%E3%81%99%E3%82%8B-hubot-%E3%82%A2%E3%83%80%E3%83%97%E3%82%BF">TypeScrpt で実装する Hubot アダプタ</h2>

<p><a href="https://hubot.github.com/docs/adapters/development/">Development adapter | HUBOT</a> を参考に、起動時に bot へと生成したメッセージを受け渡すだけを行うアダプタを TypeScript で実装してみました。</p>

<p>この記事では次のような名称を利用しているので適時読み替えてください。</p>

<table>
<thead>
<tr>
  <th>項目</th>
  <th>名称</th>
</tr>
</thead>
<tbody>
<tr>
  <td>アダプタプロジェクト名</td>
  <td><code>hubot-sample-adapter</code></td>
</tr>
<tr>
  <td>テスト用のHubotプロジェクト名</td>
  <td><code>hubot-test</code></td>
</tr>
<tr>
  <td>アダプタプロジェクトの親フォルダ</td>
  <td><code>~/</code></td>
</tr>
</tbody>
</table>

<h3 id="typescript-%E3%81%AE%E3%82%A4%E3%83%B3%E3%82%B9%E3%83%88%E3%83%BC%E3%83%AB">TypeScript のインストール</h3>

<p>まず環境を整えていきます。</p>

<pre><code class="console">$ mkdir hubot-sample-adapter
$ cd hubot-sample-adapter
$ npm init -y
</code></pre>

<p>追加で、</p>

<pre><code class="console">$ npm install --save --dev typescript hubot @types/hubot
$ npx tsc --init
</code></pre>

<p>として TypeScript のツール用の設定をします。</p>

<h3 id="visual-studio-code-%E3%81%A7%E6%A7%8B%E6%96%87%E3%83%81%E3%82%A7%E3%83%83%E3%82%AF">Visual Studio Code で構文チェック</h3>

<p>Visual Studio Code で <a href="https://marketplace.visualstudio.com/items?itemName=dbaeumer.vscode-eslint">ESLint</a> を使って構文チェックをできるようにします。</p>

<pre><code class="console">$ npm install --save --dev eslint prettier eslint-config-airbnb-base eslint-config-prettier eslint-plugin-prettier eslint-plugin-import
$ npm install --save --dev @typescript-eslint/parser @typescript-eslint/eslint-plugin
</code></pre>

<p>インストールを行うと <code>The ESLint extension will use 'node_modules/eslint' for validation, which is installed locally in 'hubot-sample-adapter'. If you trust this version of ESLint, press 'Allow', otherwise press 'Do Not Allow'. Press 'Cancel' to disable ESLint for this session.</code> と確認されるので <code>Allow</code> を選択します。</p>

<p>とりあえず、</p>

<table>
<thead>
<tr>
  <th>項目</th>
  <th>説明など</th>
</tr>
</thead>
<tbody>
<tr>
  <td>Javascript style guide</td>
  <td>airbnb-base</td>
</tr>
<tr>
  <td>構文チェック</td>
  <td>基本全てエラー</td>
</tr>
<tr>
  <td>no-unused-vars</td>
  <td><code>_</code> から始まる変数以外の未使用をエラーとする。(TypeScriptの構文を優先)</td>
</tr>
</tbody>
</table>

<p>こんな感じで、設定ファイル <code>.eslintrc.js</code> は</p>

<pre><code class="javascript">module.exports = {
    "env": {
        "browser": false,
        "es2020": true
    },
    "extends": [
        "airbnb-base",
        "plugin:prettier/recommended",
        "prettier/@typescript-eslint"
    ],
    "parser": "@typescript-eslint/parser",
    "parserOptions": {
        "ecmaVersion": 11,
        "sourceType": "module"
    },
    "plugins": [
        "@typescript-eslint",
        "prettier"
    ],
    "rules": {
        "prettier/prettier": "error",
        "no-unused-vars": "off",
        "@typescript-eslint/no-unused-vars": ["error", { argsIgnorePattern: "^_" }]
    }
};
</code></pre>

<p>こんな感じ。</p>

<h2 id="visual-studio-code-%E3%81%A7%E3%83%87%E3%83%90%E3%83%83%E3%82%B0%E3%82%92%E8%A1%8C%E3%81%86%E3%81%9F%E3%82%81%E3%81%AE%E3%81%82%E3%82%8C%E3%81%93%E3%82%8C">Visual Studio Code でデバッグを行うためのあれこれ</h2>

<p>TypeScript のソース上でブレークポイントを設定したりデバッグ実行前にソースをコンパイルするなど、デバッグのための構成を行います。</p>

<ol>
<li>デバッグ用 hubot プロジェクトの作成</li>
<li>デバッグのための構成を追加</li>
</ol>

<h3 id="%E3%83%87%E3%83%90%E3%83%83%E3%82%B0%E7%94%A8-hubot-%E3%83%97%E3%83%AD%E3%82%B8%E3%82%A7%E3%82%AF%E3%83%88%E3%81%AE%E4%BD%9C%E6%88%90">デバッグ用 hubot プロジェクトの作成</h3>

<p><code>yo hubot</code> でテスト用の hubot を作成します。
この時 <code>--defaults</code> オプションをつけることでオーナーなどの指定をよしなにしてくれます。
ここではテスト用に作るため、アダプタプロジェクトの直下に作ります。</p>

<pre><code class="console">$ mkdir hubot-test
$ cd hubot-test
$ npx yo hubot --defaults
                     _____________________________  
                    /                             \ 
   //\              |      Extracting input for    |
  ////\    _____    |   self-replication process   |
 //////\  /_____\   \                             / 
 ======= |[^_/\_]|   /----------------------------  
  |   | _|___@@__|__                                
  +===+/  ///     \_\                               
   | |_\ /// HUBOT/\\                             
   |___/\//      /  \\                            
         \      /   +---+                            
          \____/    |   |                            
           | //|    +===+                            
            \//      |xx|                            

   create bin/hubot
   create bin/hubot.cmd
　　　　　　　　：
added 92 packages from 53 contributors and audited 92 packages in 13.227s
found 0 vulnerabilities

</code></pre>

<p><code>npm link path/to/hubot-adapter</code> とコマンドを実行し、アダプタへリンクを貼り テスト用の Hubot プロジェクトからアダプタが認識できるようにします。</p>

<pre><code class="console">$ pwd

$ npm link ../../hubot-sample-adapter
npm WARN hubot-sample-adapter@1.0.0 No repository field.

audited 373 packages in 3.58s

29 packages are looking for funding
  run `npm fund` for details

found 0 vulnerabilities

/usr/local/lib/node_modules/hubot-sample-adapter -&gt; ~/hubot-sample-adapter
~/hubot-sample-adapter/hubot-test/node_modules/hubot-sample-adapter -&gt; /usr/local/lib/node_modules/hubot-sample-adapter -&gt; ~/hubot-sample-adapter
</code></pre>

<p>注意点として、パスの指定は相対パスで問題ないですが、指定したパスの最後の部分を利用し node_modules にフォルダを作成しているようなので、フォルダ名を指定する必要があります。</p>

<pre><code>○ $ npm link ../../hubot-sample-adapter
× $ npm link ../
</code></pre>

<p>作成されたプロジェクトをデバッグ用にカスタマイズします。</p>

<p><code>hubot-test/external-scripts.json</code> にデフォルトで設定されている外部スクリプトはデバッグの邪魔になるので除外しておきます。</p>

<pre><code class="diff"> [
-  "hubot-diagnostics",
-  "hubot-help",
-  "hubot-heroku-keepalive",
-  "hubot-google-images",
-  "hubot-google-translate",
-  "hubot-pugme",
-  "hubot-maps",
-  "hubot-redis-brain",
-  "hubot-rules",
-  "hubot-shipit"
 ]
</code></pre>

<p>とりあえず、この記事で実装するアダプタは起動時にメッセージを bot へ送るので、どんな内容でも受け取ってり返答する bot を <code>hubot-test/scripts/echo.coffee</code> として追加します。</p>

<p>内容は適時使いやすいように書き換え可能ですが、先頭のコメント行を削除すると <code>using deprecated documentation syntax</code> と警告がログに出ます。</p>

<pre><code class="coffee"># Description:
#   echo bot
#
# Commands:
#   &lt;text&gt; - Reply back with &lt;text&gt;

module.exports = (robot) -&gt;

  robot.hear /(.*)/i, (res) -&gt;
    res.reply "echo \"#{res.match[1]}\""
</code></pre>

<h3 id="%E3%83%87%E3%83%90%E3%83%83%E3%82%B0%E3%81%AE%E3%81%9F%E3%82%81%E3%81%AE%E6%A7%8B%E6%88%90%E3%82%92%E8%BF%BD%E5%8A%A0">デバッグのための構成を追加</h3>

<p>Visual Studio Code で TypeScript で実装された Hubot アダプタをデバッグするため、３つのファイルでデバッグ構成を設定します。</p>

<p>まず、<code>.vscode/launch.json</code> にデバッグ実行のための構成を追加します。</p>

<ol>
<li>「アクティビティーバー」の「実行」を押下し、「launch.json ファイルを作成します」を選択します。</li>
<li>ドロップダウンで指定する環境は「Node.js」を選択します。</li>
<li>すると <code>.vscode/launch.json</code> にプログラムを実行するための構成ファイルが生成されます。</li>
</ol>

<p>作成後のファイルを開き（確認のためファイルはオープンされています）次のような感じに変更します。</p>

<p><code>"outputCapture": "std"</code> (もしくは、ユーザーの入力を受け取る必要があるなら <code>"console": "integratedTerminal"</code> )を設定しない場合、実行時のログを確認することができません。</p>

<pre><code class="diff"> {
   "version": "0.2.0",
   "configurations": [
     {
-      "name": "プログラムの起動",
+      "name": "Debug Adapter",
       "type": "node",
       "request": "launch",
+      "preLaunchTask": "tsc: ビルド - tsconfig.json",
       "skipFiles": [
         "&lt;node_internals&gt;/**"
       ],
-      "program": "${workspaceFolder}/index.js"
+      "program": "${workspaceRoot}/hubot-test/node_modules/.bin/coffee",
+      "cwd": "${workspaceRoot}/hubot-test",
+      "outputCapture": "std",
+      "args": [
+        "${workspaceRoot}/hubot-test/node_modules/.bin/hubot",
+        "-a", "sample-adapter",
+      ],
+      "env": {
+        "HUBOT_LOG_LEVEL": "DEBUG"
+      }
     }
   ]
 }
</code></pre>

<p>まず、<code>.vscode/tasks.json</code> にデバッグ実行前に TypeScript でコンパイルを行うための設定をします。
デバッグ実行との関連付けはすでに <code>"preLaunchTask": "tsc: ビルド - tsconfig.json",</code> にて指定済みです。</p>

<p>メニューから「ターミナル」→「タスクの構成...」を選択し、ドロップダウンの選択ないから「tsc: ビルド - tsconfig.json」を選択します。</p>

<p>すると次のような内容が <code>.vscode/tasks.json</code> に作成されます。</p>

<pre><code class="json">{
    "version": "2.0.0",
    "tasks": [
        {
            "type": "typescript",
            "tsconfig": "tsconfig.json",
            "problemMatcher": [
                "$tsc"
            ],
            "group": "build",
            "label": "tsc: ビルド - tsconfig.json"
        }
    ]
}
</code></pre>

<p>最後に、 <code>tsconfig.json</code> に設定することで、TypeScript のソースでブレイクポイントを設定できるようにします。</p>

<p>デフォルトでは、TypeScript のソースでブレークポイントを設定してもデバッグ実行時には、コンパイル後の JavaScript のソースが実行されるため指定したブレークポイントは無効にされてしまいます。</p>

<p>設定を追加することで TypeScript のソースのコンパイル時に同時にマップファイルが書き出されるようになり、結果としてブレイクポイントを設定できるようになります。</p>

<p><code>tsconfig.json</code> を次のように変更します。</p>

<pre><code class="diff">      // "declaration": true,                   /* Generates corresponding '.d.ts' file. */
      // "declarationMap": true,                /* Generates a sourcemap for each corresponding '.d.ts' file. */
-     // "sourceMap": true,                     /* Generates corresponding '.map' file. */
+     "sourceMap": true,                        /* Generates corresponding '.map' file. */
      // "outFile": "./",                       /* Concatenate and emit output to single file. */
      // "outDir": "./",                        /* Redirect output structure to the directory. */
</code></pre>

<h2 id="%E3%82%A2%E3%83%80%E3%83%97%E3%82%BF%E3%83%97%E3%81%AE%E5%AE%9F%E8%A3%85">アダプタプの実装</h2>

<p><a href="https://hubot.github.com/docs/adapters/development/">Development adapter | HUBOT</a> の <code>src/adapter.coffee</code> を参考に TypeScript で書き換え <code>src/adapter.ts</code> を作成します。</p>

<pre><code class="typescript">import { Robot, Adapter, User, TextMessage } from "hubot";

class Sample extends Adapter {
  robot!: Robot&lt;Adapter&gt;;

  constructor(robot: Robot&lt;Adapter&gt;) {
    super(robot);
    this.robot.logger.info("Constructor");
  }

  send(envelope: any, ...strings: any[]) {
    this.robot.logger.info("Send");
  }

  reply(envelope: any, ...strings: any[]) {
    this.robot.logger.info("Reply");
  }

  run() {
    this.robot.logger.info("Run");
    this.emit("connected");
    const user = new User("1001", { name: "Sample User", });
    const message = new TextMessage(user, "Some Sample Message", "MSG-001");
    this.robot.receive(message);
  }
}

module.exports.use = function createSampleAdapter(
  robot: Robot&lt;Adapter&gt;
) {
  return new Sample(robot);
};
</code></pre>

<p>TypeScript でコンパイルすると <code>src/adapter.js</code> が作成されるので、忘れずに <code>package.json</code> に書かれているエントリポイントは <code>src/adapter.coffee</code> ではなく <code>src/adapter.js</code> にしておきましょう。</p>

<h3 id="%E3%83%87%E3%83%90%E3%83%83%E3%82%B0%E5%AE%9F%E8%A1%8C%E6%99%82%E7%89%B9%E6%9C%89%E3%81%AE%E5%95%8F%E9%A1%8C%E3%81%B8%E3%81%AE%E5%AF%BE%E5%87%A6">デバッグ実行時特有の問題への対処</h3>

<p>ここまでで、ほぼデバッグ実行ができるようになりますが、実はこのままだと Node.js のライブラリの読み込みの仕様が原因で <code>robot.receive()</code> から呼ばれるはずの bot の処理が実行されない状態になっています。</p>

<p>原因としてはどうやら</p>

<ol>
<li><code>hubot</code> コマンドがアダプタを読み込む。</li>
<li>アダプタが <code>hubot</code> ライブラリの読み込みを行う。</li>
<li>パスの解決の結果、 <code>hubot-test/node_modules/hubot</code> が読み込まれることを意図しているところ、 アダプタのコンパイルに必要なため <code>node_modules/hubot</code> が存在していることから、そちらが読み込まれる。</li>
</ol>

<p>結果 <code>hubot</code> コマンド内で行われる <code>instanceof TextMessage</code> などの比較で不一致が発生し bot が処理されないようです。</p>

<p>現状、対処としては動的にデバッグ実行かそうでないかを判断しライブラリの読み込みパスを変更するようにすることで意図しない動きを回避しています。</p>

<pre><code class="diff">-import { Robot, Adapter, User, TextMessage } from "hubot";
+import * as Hubot from "hubot";
+import { Robot, Adapter } from "hubot";
+import * as path from "path";
+
+const isTestHubot =
+  path.join(__dirname, "..") ===
+  // @ts-ignore TS2532: Object is possibly 'undefined'.
+  path.join(require.main.filename.replace(/node_modules\/.*$/, ""), ".."); // (...)/hubot-line-local-tunnel/hubot-test/node_modules/hubot/bin/hubot
+// テスト環境での実行時はテスト用の環境に含まれる Hubot パッケージを読むように指示
+const { User, TextMessage } = !isTestHubot
+  ? Hubot
+  : require(require("path").join(__dirname, "../hubot-test/node_modules/hubot")); // eslint-disable-line import/no-dynamic-require

 class Sample extends Adapter {
   robot!: Robot&lt;Adapter&gt;;
</code></pre>

<h2 id="%E5%AE%9F%E8%A1%8C%E3%81%97%E3%81%A6%E3%81%BF%E3%82%8B">実行してみる</h2>

<p><code>hubot</code> プリフェックスを除いた名前で <code>--adapter</code> オプションを指定し実行します</p>

<pre><code class="console">$ npx hubot -a sample-adapter
[Wed Jul 29 2020 23:44:09 GMT+0900] INFO Constructor
[Wed Jul 29 2020 23:44:09 GMT+0900] INFO Run
[Wed Jul 29 2020 23:44:09 GMT+0900] WARNING Loading scripts from hubot-scripts.json is deprecated and will be removed in 3.0 (https://github.com/github/hubot-scripts/issues/1113) in favor of packages for each script.

Your hubot-scripts.json is empty, so you just need to remove it.
[Wed Jul 29 2020 23:44:09 GMT+0900] INFO Reply
</code></pre>

<p>ログを見ると、ちゃんと <code>Constructor</code> と <code>Run</code> と <code>Reply</code> が印字されています。</p>

<h2 id="%E3%83%A1%E3%83%A2">メモ</h2>

<h3 id="configuration-for-rule-%22import%2Fno-cycle%22-is-invalid">Configuration for rule "import/no-cycle" is invalid</h3>

<pre><code class="console">               :
Configuration for rule "import/no-cycle" is invalid
               :
</code></pre>

<p>と表示され eslint が正常に実行されない場合があった。</p>

<p><a href="https://github.com/airbnb/javascript/issues/2227">Invalid rule configurations compiled by "eslint --print-config" on eslint-config-airbnb-typescript · Issue #2227 · airbnb/javascript</a> によると、どうやら 7.3.0 から 7.2.0 へダウングレードすることで回避できる様子。</p>

<pre><code class="console">$ npm i eslint@7.2.0 --save-dev
</code></pre>

<h2 id="%E5%8F%82%E8%80%83">参考</h2>

<ul>
<li><a href="https://hubot.github.com/docs/adapters/development/">Development adapter | HUBOT</a></li>
<li><a href="https://github.com/airbnb/javascript/issues/2227">Invalid rule configurations compiled by "eslint --print-config" on eslint-config-airbnb-typescript · Issue #2227 · airbnb/javascript</a></li>
<li><a href="https://hiranoon.hatenablog.com/entry/2020/04/13/192746#%E3%81%AF%E3%81%98%E3%82%81%E3%81%AB">TypeScript の開発環境を作る。VSCode を基本に ESLint と Prettier も添えて。 - Multi Vitamin &amp; Mineral</a></li>
<li><a href="http://akiomik.hatenablog.jp/entry/2014/02/12/052703">hubot adapterの作り方 - おみブロZ</a></li>
<li><a href="https://qiita.com/bouzuya/items/11c0c6da2b3ad54b827f#hubot-echo">Hubot のインストール - Qiita</a></li>
<li><a href="https://komari.co.jp/blog/develop/frontend/355/#i-3">Visual Studio Code のデバッグコンソールにログが出力されない話 | 岡山のWEB制作はKOMARI</a></li>
<li><a href="https://qiita.com/n0bisuke/items/12ce4df55a405a62b599">Hubotでusing deprecated documentation syntax - Qiita</a></li>
<li><a href="https://qiita.com/mysticatea/items/f523dab04a25f617c87d">ESLint 最初の一歩 - Qiita</a></li>
<li><a href="https://shotat.hateblo.jp/entry/2016/10/26/000912">Eslintでunderscoreから始まる変数をチェックさせない設定にする - Memento memo.</a></li>
<li><a href="https://stackoverflow.com/questions/57802057/eslint-configuring-no-unused-vars-for-typescript">esLint-Typescriptの「no-unused-vars」の構成-スタックオーバーフロー</a></li>
</ul>
]]></content>
        </entry>
            <entry>
            <title type="html"><![CDATA[あれから16年経ったようです]]></title>
            <link href="http://www.sharkpp.net/blog/2020/02/29/happy-anniversary-16th.html"/>
            <updated>2020-02-29T23:30:00+00:00</updated>
            <id>http://www.sharkpp.net/blog/2020/02/29/happy-anniversary-16th.html</id>
            <content type="html"><![CDATA[<p>世間では新型コロナウイルスによって展示会やらイベントが次々に中止や延期に追い込まれています。
個人的な部分でもついにリモートワークが推奨になってきた感じで影響が出始めましたね。</p>

<p>さて、本日はいつの間にかホームページ開設が16年を過ぎ17年目になったことに気がついて、去年何かやっておけばよかったとすこし後悔していたところで今からでも遅くないというそらみみが聞こえてきたので、このページの過去をざっくりと振り返ってみたいと思います。</p>

<h2 id="%E3%83%9B%E3%83%BC%E3%83%A0%E3%83%9A%E3%83%BC%E3%82%B8%E9%96%8B%E8%A8%AD">ホームページ開設</h2>

<p>2004-02-24 ホームページを開設</p>

<p>たしか、契約しているプロバイダのおまけでついてくるジオシティーズのアカウントで公開していたと思う。</p>

<p>phpを動かすために、別のサービス(これもすでに閉鎖)も借りていた記憶もありますね。</p>

<p>ジオシティーズも去年完全閉鎖され時代の流れを感じますのぅ。
<a href="https://info-geocities.yahoo.co.jp/close/"><img src="/images/20200229_geocities_closed.png" alt="サービス終了のお知らせ - Yahoo!ジオシティーズ" /></a></p>

<h2 id="%E3%83%89%E3%83%A1%E3%82%A4%E3%83%B3%E5%8F%96%E5%BE%97">ドメイン取得</h2>

<p>2005-08-13 独自ドメインへ移転</p>

<p>数日前の 2005-08-05 に <code>sharkpp.net</code> を取得し、独自ドメインでの運営に変更。
この当時契約していたドメインレジストラも独自運営からGMOに買収されたりと、これまた結構変遷があります。</p>

<p><a href="http://web.archive.org/">Wayback Machine</a>に残っている最古は 2005-10-20 15:34:50 でこんなデザインでした。</p>

<p><a href="http://web.archive.org/web/20051020153450/http://www.sharkpp.net:80/"><img src="/images/20200229_webarc20051020153450.png" alt="2005-10-20 15:34:50 当時のページ" /></a></p>

<h2 id="%E6%A7%8B%E7%AF%89%E3%82%B7%E3%82%B9%E3%83%86%E3%83%A0%E3%82%92%E6%89%8B%E6%89%93%E3%81%A1%E3%81%8B%E3%82%89-frog-cms-%E3%81%AB%E5%A4%89%E6%9B%B4">構築システムを手打ちから Frog CMS に変更</h2>

<p>2008-08-XX 構築システムを手打ちから Frog CMS に変更</p>

<p>ホームページを手打ちから <a href="https://github.com/philippe/FrogCMS">Frog CMS</a> というCMSに変更。
この時同時に、デザインの変更や、掲示板の廃止などもしています。
Frog CMS も更新が続くと思ってたらしばらくしたら更新されなくなりましたなぁ...</p>

<p><a href="http://web.archive.org/web/20081007190559/http://www.sharkpp.net:80/"><img src="/images/20200229_webarc20081007190559.png" alt="2008-10-07 19:05:59 当時のページ" /></a></p>

<h2 id="%E6%A7%8B%E7%AF%89%E3%82%B7%E3%82%B9%E3%83%86%E3%83%A0%E3%82%92-frog-cms-%E3%81%8B%E3%82%89-sculpin-%2B-github-pages-%E3%81%AB%E5%A4%89%E6%9B%B4">構築システムを Frog CMS から Sculpin + GitHub pages に変更</h2>

<p>2015-05-31 構築システムを Frog CMS から Sculpin + GitHub pages に変更</p>

<p>レンタルサーバーの仕様変更で、しばらく Frog CMS がエラーを吐いていたことやもはや保守されてないものを使うのもってことで、重い腰を上げ <a href="https://sculpin.io/">Sculpin</a> という、php で動作する静的サイトジェネレータを利用し GitHub に push したら GitHub pages で運用しているサイトが更新される仕組みを構築しました。
その時の記録は「<a href="/blog/2015/06/28/site-reboot-by-sculpin.html">Sculpin でホムペを再構築したときのメモ</a>」として記事にしています。
この時同時に、デザインやホームページのタイトルの変更もしています。</p>

<h2 id="%E6%A7%8B%E7%AF%89%E3%82%B7%E3%82%B9%E3%83%86%E3%83%A0%E3%81%AE%E9%81%8B%E7%94%A8%E3%82%92-xrea-%E3%81%8B%E3%82%89-travis-ci-%E3%81%AB%E5%A4%89%E6%9B%B4">構築システムの運用を xrea から Travis CI に変更</h2>

<p>2016-06-12 構築システムの運用を xrea から Travis CI に変更</p>

<p>レンタルサーバーの XREA でサイトのビルドを行なっていたけど、だんだんとビルドに失敗したりすることが多くなってきたので Travis CI を使ってビルドするように変更。
今なら、GitHub Actions を使う感じかも。
今と違って、ヘッダ部分にカテゴリリンクがなかったりしてるけど、それはおいおいと細かく変更していった結果。</p>

<p><a href="http://web.archive.org/web/20150613052025/http://www.sharkpp.net:80/"><img src="/images/20200229_webarc20150613052025.png" alt="2015-06-13 05:20:25 当時のページ" /></a></p>

<h2 id="%E3%81%9D%E3%81%97%E3%81%A6%E7%8F%BE%E5%9C%A8">そして現在</h2>

<p>もろもろ細かなデザインが変わったりしているけど、根本のシステムは変わらず。</p>

<p><img src="/images/20200229_now.png" alt="現在のページ" /></p>

<h2 id="%E3%81%BE%E3%81%A8%E3%82%81">まとめ</h2>

<p>とりあえず、大きな変更をざっくりとまとめてみました。
16年も経つとオギャーといってた赤ちゃんが高校１年とか２年とかになっている感じなので、世間でも大きなところでは、携帯電話がガラゲー（フューチャーフォン）からスマホに変わったりしていますね。</p>

<p>光陰矢の如しとはよくいったもので、ここ数年は一年があっという間に過ぎていく感じで、なかなかに恐ろしいです。</p>

<p>まあ、そんな感じな雑な締めかたですが、16年経ち17年目を迎えた「さめたすたすのお部屋」をよろしくお願いします。</p>
]]></content>
        </entry>
            <entry>
            <title type="html"><![CDATA[HAPPY NEW YEAR 2020]]></title>
            <link href="http://www.sharkpp.net/blog/2020/01/01/happy-new-year-2020.html"/>
            <updated>2020-01-01T17:55:00+00:00</updated>
            <id>http://www.sharkpp.net/blog/2020/01/01/happy-new-year-2020.html</id>
            <content type="html"><![CDATA[<p>明けましておめでとうございます。</p>

<p>ほむぺ開設 16 年目🎉 (たぶん)。
今年も色々ありそうですが一年よろしくお願いします。</p>

<p>では、今年の目標をば。</p>

<h2 id="%E7%9B%AE%E6%A8%99">目標</h2>

<ul>
<li>定期的なホムペの更新</li>
<li>ホームページを GitHub Action ＆ GatsbyJS ベースに移行してモダーンな感じに</li>
<li>PWAとかQtとかもろもろ勉強... というか遊ぶ</li>
<li>Rust頑張ってみる... Rust難しい...</li>
<li><a href="https://github.com/sharkpp/FrameExtract">FrameExtract</a> を完成させる</li>
</ul>

<p>ではでは、今年もよろしくお願いいたします。</p>
]]></content>
        </entry>
            <entry>
            <title type="html"><![CDATA[大晦日@2019]]></title>
            <link href="http://www.sharkpp.net/blog/2019/12/31/new-years-eve-2019.html"/>
            <updated>2019-12-31T19:08:00+00:00</updated>
            <id>http://www.sharkpp.net/blog/2019/12/31/new-years-eve-2019.html</id>
            <content type="html"><![CDATA[<h2 id="1-%E5%B9%B4%E3%82%92%E6%8C%AF%E3%82%8A%E8%BF%94%E3%82%8A">1 年を振り返り</h2>

<p>今年も残すところ大晦日、そしてあと数時間で令和二年といったところ。
令和最初の大晦日も暮れようとしています。</p>

<p>しかし、予告ありの改元が発生するとは思わなかったですね... ほんと。</p>

<p>今年は５月に令和になり、新しい時代が始まりつつ、それでも変わったものも変わらないものもたくさんあった一年でした。
個人的には京アニの件が一番の大ニュースでしたね。</p>

<p>自分自身のことについてはまあ諸々の理由があって勉強会もほとんど参加できなかったのが残念ですが、来年の後半ぐらいから多少マシになる... といいなと。</p>

<p>そして、ここ数年恒例の仮想除夜の鐘アプリ「<a href="https://sharkpp.github.io/joya_no_kane/">除夜の鐘</a>」を突いてみては如何でしょうか？
PWAとかにもできた気がしますが、ちょっと間に合わなかったです...</p>

<p>とつらつらと前置きを書いたところで、今年の反省をば。</p>

<h2 id="%E7%B5%90%E6%9E%9C">結果</h2>

<p>まずは、今年の正月 <a href="/blog/2019/01/01/happy-new-year-2019.html">HAPPY NEW YEAR 2019</a> に掲げた目標です。</p>

<ul>
<li>定期的なホムペの更新</li>
<li>HSPコンテスト作品の製作！</li>
<li><a href="http://hsp-users.jp/">HSP関連サイト</a>の定期的な更新。</li>
<li>WINEの最新版でHSPが動くように！</li>
<li><a href="https://github.com/sharkpp/TimestampFreezer">TimestampFreezer</a> のバイナリ公開</li>
<li><a href="https://github.com/sharkpp/Jugemutter">Jugemutter</a> の完成</li>
</ul>

<p>と、こんな感じ。</p>

<p>成果としては...</p>

<ul>
<li><a href="https://github.com/sharkpp/delayedmotion">画像を揺らすと一部がなぜか遅れて揺れる画像を作るジェネレータ</a></li>
<li><a href="https://github.com/sharkpp/amazon-price-check">sharkpp/amazon-price-check</a> ※こちらはまだ記事書いてないけど... まあ一応動く</li>
</ul>

<p>全体的にサボりぐせというか気力がなくなっている感じで、何をするにも億劫な感じ... いかんなぁとは思うのですが...</p>

<p>HSPコンテストは……　見事に落としました。</p>

<p>HSPの関連サイトもだめですね。</p>

<p>Franz 5 recipe 関連はどうもバグっているっぽいですが、かなり放置気味。</p>

<p>Qt 関連も、勉強会でわずかに進む感じ。</p>

<p>今年も<a href="https://togetter.com/li/1343390">よんた@keita44_f4 さんの日本酒の感想ツイートまとめ</a>を更新してました。というか全然更新できてなかったです。
しかし、お酒美味しそうです</p>

<h2 id="%E5%8F%8D%E7%9C%81">反省</h2>

<p>もう、全然全くいろいろ進めてないのでなんとかしたいなって思う今日この頃。</p>

<p>と言うあたりで今年の反省会終了です。</p>

<p>来年もよろしくお願いします。</p>
]]></content>
        </entry>
            <entry>
            <title type="html"><![CDATA[名古屋Qt勉強会#31.1 に参加しました]]></title>
            <link href="http://www.sharkpp.net/blog/2019/11/23/qt-nagoya-31.html"/>
            <updated>2019-11-23T17:38:00+00:00</updated>
            <id>http://www.sharkpp.net/blog/2019/11/23/qt-nagoya-31.html</id>
            <content type="html"><![CDATA[<p>2019年11月23日(土) に開催された <a href="https://qt-users.connpass.com/event/155325/">Qt 勉強会 @ Nagoya #31.1 - connpass</a> へ参加しました。</p>

<p>そのまとめです。</p>

<h2 id="%E8%87%AA%E5%B7%B1%E7%B4%B9%E4%BB%8B">自己紹介</h2>

<p>毎回の通り、自己紹介と本日やることを宣言。</p>

<p>初めて参加の方が一人いた。</p>

<p>久しぶりの開催なのと初めての人がいるためか開催の趣旨などが説明された。</p>

<h2 id="%40kazuo_asa-%E3%81%95%E3%82%93%E3%81%AB%E3%82%88%E3%82%8B%E7%99%BA%E8%A1%A8">@kazuo_asa さんによる発表</h2>

<p><a href="https://twitter.com/kazuo_asa">@kazuo_asa</a> による</p>

<ul>
<li>はじめてのQt入門 シグナルとスロット</li>
</ul>

<p>の発表がありました。</p>

<h2 id="%E8%87%AA%E5%88%86%E3%81%AE%E6%9C%AC%E6%97%A5%E3%81%AE%E3%82%84%E3%82%8B%E3%81%93%E3%81%A8">自分の本日のやること</h2>

<ul>
<li>前回の続きの動画からフレームを切り出し動画のメタ情報とフレーム位置に応じた時刻を設定するツールを実装</li>
</ul>

<p>前回までの状況</p>

<ul>
<li>UIの実装途中</li>
</ul>

<h2 id="%E6%9C%AC%E6%97%A5%E3%81%AE%E7%9F%A5%E8%A6%8B">本日の知見</h2>

<h2 id="path%E7%92%B0%E5%A2%83%E5%A4%89%E6%95%B0">PATH環境変数</h2>

<p>QtCreator で値を上書きできるので、コンソールでの実行結果と違うことがある...</p>

<h2 id="%E3%82%B7%E3%82%B0%E3%83%8A%E3%83%AB%2F%E3%82%B9%E3%83%AD%E3%83%83%E3%83%88%E3%81%A7%E3%81%AE%E6%8E%A5%E7%B6%9A%E3%82%BF%E3%82%A4%E3%83%97">シグナル/スロットでの接続タイプ</h2>

<p>オプションで指定できたみたい... 知らなかった...</p>

<p><a href="https://doc.qt.io/qt-5/qt.html#ConnectionType-enum">enum Qt::ConnectionType</a> より</p>

<table>
<thead>
<tr>
  <th>Constant</th>
  <th>Value</th>
  <th>Description</th>
</tr>
</thead>
<tbody>
<tr>
  <td>Qt::AutoConnection</td>
  <td>0</td>
  <td>（デフォルト）シグナルを発信するスレッド内にレシーバーが存在する場合、Qt::DirectConnection が使用されます。それ以外の場合、Qt::QueuedConnection が使用されます。接続タイプは、信号が発信されるときに決定されます。</td>
</tr>
<tr>
  <td>Qt::DirectConnection</td>
  <td>1</td>
  <td>スロットは、信号が発信されるとすぐに呼び出されます。スロットはシグナリングスレッドで実行されます。</td>
</tr>
<tr>
  <td>Qt::QueuedConnection</td>
  <td>2</td>
  <td>スロットは、制御がレシーバーのスレッドのイベントループに戻るときに呼び出されます。スロットは受信者のスレッドで実行されます。</td>
</tr>
<tr>
  <td>Qt::BlockingQueuedConnection</td>
  <td>3</td>
  <td>Qt::QueuedConnection と同じです。ただし、シグナルスレッドは、スロットが戻るまでブロックします。レシーバがシグナリングスレッドに存在する場合、この接続を使用しないでください。使用すると、アプリケーションがデッドロックします。</td>
</tr>
<tr>
  <td>Qt::UniqueConnection</td>
  <td>0x80</td>
  <td>これは、ビット単位のORを使用して、上記の接続タイプのいずれかと組み合わせることができるフラグです。 Qt::UniqueConnection が設定されている場合、接続が既に存在する場合（つまり、同じオブジェクトの同じペアの同じスロットに同じ信号が既に接続されている場合）、QObject::connect() は失敗します。このフラグはQt 4.6で導入されました。</td>
</tr>
</tbody>
</table>

<h2 id="%E6%9C%AC%E6%97%A5%E3%81%AE%E9%80%B2%E6%8D%97">本日の進捗</h2>

<ul>
<li>前回の続きを思い出すところからスタート</li>
<li>QProcess::start() で絶対パスではなく <code>ffmpeg</code> だけでコマンドが呼び出せないのを調べていたが、結局 QtCreater の設定に追加することで解決</li>
<li>あとは QML で 思った UI の表現がうまくいかなかったのでそれを実現するためにサンプルを作ってたりしてタイムアップ</li>
</ul>

<p>なかなかに、思ったUIを作るのが難しい...</p>

<h2 id="%E3%83%A1%E3%83%A2">メモ</h2>

<ul>
<li><a href="https://scoop.sh/">Scoop</a> いいぞぉ</li>
</ul>

<h2 id="%E5%8F%82%E8%80%83">参考</h2>

<ul>
<li><a href="https://doc.qt.io/qt-5/qt.html#ConnectionType-enum">Qt Namespace | Qt Core 5.13.2</a></li>
</ul>
]]></content>
        </entry>
            <entry>
            <title type="html"><![CDATA[技術書典7に行ってきた]]></title>
            <link href="http://www.sharkpp.net/blog/2019/09/28/techbookfest7.html"/>
            <updated>2019-09-28T18:02:00+00:00</updated>
            <id>http://www.sharkpp.net/blog/2019/09/28/techbookfest7.html</id>
            <content type="html"><![CDATA[<p>2016年から始まった技術書オンリーな同人イベント「<a href="https://techbookfest.org/">技術書典</a>」が、
「<a href="https://techbookfest.org/event/tbf07">技術書典７</a>」として、2019年9月22日に開催されたので、今回も一般参加してきました。
場所は前回と変わらず、池袋のサンシャインシティですが、今回は文化会館ビルの 展示ホールD と 展示ホールC の２ホールを使っての開催です。</p>

<p><a href="/images/20190922_tbf7.jpg"><img src="/thumbs/40e6e2ca46fa8422b7e8c7ceb6d3c470-640x640.jpg" alt="技術書典7"></a></p>

<h2 id="%E5%A7%8B%E3%82%81%E3%81%AB">始めに</h2>

<p>前回のレポートは「<a href="/blog/2019/04/24/techbookfest6.html">技術書典6に行ってきた</a>」となります。</p>

<p>今回は、サークル数 650、参加者数は 9,700 人(速報値)だったようです。<br />
前回に引き続き、今回も開場直後に入場するには一般入場整理券の購入が必要でした。
ただ、前回は列待機中に販売していましたが、今回から約２週間前の9月10日にウェブで販売を開始し、11時に入場可能な先行発売分はCホールとDホールともに前日までには売り切れていたようです。</p>

<p>今回はお目当のサークルさんがCホールに多かったのでCホールから先に入場できる整理券を購入しました。</p>

<p><a href="https://docs.google.com/spreadsheets/d/1gNVy9ukLn3kYzOC0nyOpysD-Xl3fIzHl26WSSLHC-HY/edit?usp=sharing"><img src="/images/20190928_tbf1_tbf7_graph.png" alt="参加人数" /></a></p>

<h2 id="%E5%BD%93%E6%97%A5">当日</h2>

<p><a href="/images/20190922_tbf7_waiting.jpg"><img src="/thumbs/5ee55853d620c0901deeb03d713fb7a4-640x640.jpg" alt="待機列"></a></p>

<p>今回もいつもの通り09:30頃に会場に到着したところ、前回はほとんどなかったサークル入場の待機列ができていました。
公式には10時ごろから列待機可能ということでしたが、前回と同じぐらいにはすでに並んでいました。自分も含めなんだかな。<br />
一般参加者の列に並んでいる際に、その横に屋内から続いているであろうサークル参加者の列がどんどん伸びていくのが見えて、これはなかなかにやばいぞと思いながらただ眺めていましたが、10時を超えたあたりからだんだんとサークル入場待機列も解消していきました。</p>

<p>今回、ウェブで入場整理券を購入したのでそれをスマホに表示し入り口などで掲げ目視チェックを通り抜けながら案内に沿って列を移動していきました。</p>

<p><a href="/images/20190922_tbf7_ticket.png"><img src="/thumbs/65b00409c1e94200dc8287c2dd6aba9b-640x640.png" alt="入場券"></a></p>

<p>少なくとも今回に関しては特にバーコードをスキャンして確認するなどといったことはなかったので偽造し放題だったのかも...</p>

<p><a href="/images/20190922_tbf7_2f_to_3f.jpg"><img src="/thumbs/c80a2200cfa5464da3d2f88e834bb25f-640x640.jpg" alt="2Fから3Fへ"></a></p>

<p>屋外の待機列、DホールのCホール入場待機場所、Cホールの待機場所、の順に移動し10:40頃にはCホールの入場ゲート前で待機してました。
今回は、どうも全体的に時間が押していたようで、サークルの入場手続きや入場規制、開場も５分前後遅れた感じでした。</p>

<p>11:00になっても開場しなかったため戸惑う雰囲気がでてくる中、５分ほど経ち、開場しますのアナウンスがあり会場全体から拍手が上がり、２列づつの入場となりました。<br />
入場ゲートはまさかの組み立て式の机でした...</p>

<p><a href="/images/20190922_tbf7_hall_c1.jpg"><img src="/thumbs/355ac181b23ce537572932ab1e44cca6-640x640.jpg" alt="Cホールの様子"></a></p>

<p>Cホールにいた時間は50分ほどでしたが、サークル数もDホールと比べて少なかったというのもあるのか、それほど混んでおらず余裕を持って買い物ができた感じでした。</p>

<p><a href="/images/20190922_tbf7_hall_c2.jpg"><img src="/thumbs/39ce7611a5e8d53130ded5e1b98bb407-640x640.jpg" alt="Cホールの様子(開場直後))"></a></p>

<p>Cホールで思うままに買い物をした後はDホールに移動しました。</p>

<p><a href="/images/20190922_tbf7_3f_to_2f.jpg"><img src="/thumbs/95d4afa9ab89a574c09d78990ab9116e-640x640.jpg" alt="Cホールの様子"></a></p>

<p>少しわかりにくい案内に沿って移動し、Dホールに到着するとちょうど12時入場組の手続きが始まるところを横目に見につつそのままするっと会場に入れました。</p>

<p>Dホールは前回と同様か少し少ないぐらいの人口密度で人でごった返していました。
もっとも、当日分の入場整理券で入れる時間とホールとが重なっていた（当日分は12時にDホールからのみ入場可能）ために、人が多かった可能性もありますが...</p>

<p><a href="/images/20190922_tbf7_hall_d.jpg"><img src="/thumbs/e10f438c8cc19ce6980e536241a37fc5-640x640.jpg" alt="Dホールの様子"></a></p>

<p>戦利品はまた後ほどです。</p>

<p><a href="/images/20190922_tbf7_kanban.jpg"><img src="/thumbs/86c0a0f7891808f297277bc04c1bb39b-640x640.jpg" alt="看板"></a></p>

<p>運営ブースで、今回は公式カタログと２種類のトートバッグを買いました。</p>

<p>あと、Cホールになぜか進捗神社が出現していました。</p>

<p><a href="/images/20190922_tbf7_jinja1.jpg"><img src="/thumbs/682b811ebe1f28ae17da55ffd37a4226-640x640.jpg" alt="看板"></a>
<a href="/images/20190922_tbf7_jinja2.jpg"><img src="/thumbs/183c64ca49d20e73085a53d5e8909e78-640x640.jpg" alt="看板"></a></p>

<p>また、なぜか傘が置いてあって何かなって思ってたけど、どうやら写真撮影用のセットも設置してあったようです。</p>

<p><a href="/images/20190922_tbf7_booty_base.jpg"><img src="/thumbs/f0293f33f67c88e6f8e0218b4a6b7821-640x640.jpg" alt="看板"></a></p>

<p>今回もぐるっと回ったところで、蒸し暑いのと体力の限界を感じ、会場を後にしました。</p>

<h2 id="%E6%88%A6%E5%88%A9%E5%93%81">戦利品</h2>

<p>今回の戦利品</p>

<p><a href="/images/20190922_tbf7_booty.jpg"><img src="/thumbs/16785070cd442d1a6303d3aa87c940ce-640x640.jpg" alt="戦利品"></a></p>

<table>
<thead>
<tr>
  <th>配置</th>
  <th>サークル名/ペンネーム</th>
  <th>頒布物</th>
</tr>
</thead>
<tbody>
<tr>
  <td><a href="https://techbookfest.org/event/tbf07/circle/5681471662587904">運01</a></td>
  <td><a href="https://techbookfest.org/event/tbf07/">運営事務局</a></td>
  <td>技術季報 vol.7</td>
</tr>
<tr>
  <td><a href="https://techbookfest.org/event/tbf07/circle/5681471662587904">運01</a></td>
  <td><a href="https://techbookfest.org/event/tbf07/">運営事務局</a></td>
  <td>BIGトートバック＋缶バッチ 2つ</td>
</tr>
<tr>
  <td><a href="https://techbookfest.org/event/tbf07/circle/5743731428818944">協09</a></td>
  <td><a href="https://yumenosora.co.jp/tora-lab">虎の穴ラボ</a></td>
  <td>虎の穴ラボの薄い本。vol.3 ※無償配布</td>
</tr>
<tr>
  <td><a href="https://techbookfest.org/event/tbf07/circle/5639891278888960">協06</a></td>
  <td><a href="https://www.mediado.jp/">Tech Do Book 編集部</a></td>
  <td>Tech Do Book ※無償配布</td>
</tr>
<tr>
  <td><a href="https://techbookfest.org/event/tbf07/circle/5681561387139072">あ19C</a></td>
  <td><a href="http://techbooster.org/">TechBooster</a>/<a href="https://twitter.com/mhidaka">mhidaka</a></td>
  <td>ていねいに学ぶAndroidアプリ開発：Android 10 Modern Functions</td>
</tr>
<tr>
  <td><a href="https://techbookfest.org/event/tbf07/circle/5637818621624320">い21C</a></td>
  <td><a href="https://qiita.com/argama147">エゥーゴ</a>/<a href="https://twitter.com/argama147">argama147</a></td>
  <td>QtでAndroidアプリを作ろう</td>
</tr>
<tr>
  <td><a href="https://techbookfest.org/event/tbf07/circle/4826840938053632">い22C</a></td>
  <td><a href="https://twpf.jp/CassisTurn">単体かしす</a>/<a href="https://twitter.com/CassisTurn">月見円</a></td>
  <td>Qt 2D Graphics 入門</td>
</tr>
<tr>
  <td><a href="https://techbookfest.org/event/tbf07/circle/5199792342827008">い24C</a></td>
  <td><a href="http://relog.xii.jp/">理ろぐ</a>/<a href="https://twitter.com/IoriAYANE">理音伊織</a></td>
  <td>始める！Qt for WebAssembly</td>
</tr>
<tr>
  <td><a href="https://techbookfest.org/event/tbf07/circle/5711109487067136">い25C</a></td>
  <td>豆部/<a href="https://twitter.com/shin1_okada">shin1</a></td>
  <td>Qt 3D を使ってみよう</td>
</tr>
<tr>
  <td><a href="https://techbookfest.org/event/tbf07/circle/5651492576952320">え04C</a></td>
  <td><a href="http://ankokudan.org/d/d.htm?index-J.html">暗黒通信団</a>/<a href="https://twitter.com/ankokudan">シ</a></td>
  <td>暗黒通信団Tシャツ</td>
</tr>
<tr>
  <td><a href="https://techbookfest.org/event/tbf07/circle/5651492576952320">え04C</a></td>
  <td><a href="http://ankokudan.org/d/d.htm?index-J.html">暗黒通信団</a>/<a href="https://twitter.com/ankokudan">シ</a></td>
  <td>円周率100万桁表</td>
</tr>
<tr>
  <td><a href="https://techbookfest.org/event/tbf07/circle/5651492576952320">え04C</a></td>
  <td><a href="http://ankokudan.org/d/d.htm?index-J.html">暗黒通信団</a>/<a href="https://twitter.com/ankokudan">シ</a></td>
  <td>素数表150000個</td>
</tr>
<tr>
  <td><a href="https://techbookfest.org/event/tbf07/circle/5694333814571008">え08C</a></td>
  <td><a href="https://chofu.tech/">調布技研</a>/<a href="https://twitter.com/chibiegg">chibiegg</a></td>
  <td>写真フィルムデジタイズ入門</td>
</tr>
<tr>
  <td><a href="https://techbookfest.org/event/tbf07/circle/5760394706550784">え25C</a></td>
  <td><a href="http://agepeanuts.strikingly.com/">揚げピーナッツ</a>/<a href="https://twitter.com/nichi_DQX">nishiuchi</a></td>
  <td>プログラム言語神経衰弱 拡張セット3</td>
</tr>
<tr>
  <td><a href="https://techbookfest.org/event/tbf07/circle/5982162377506816">お26C</a></td>
  <td><a href="https://blog.takuros.net/entry/2019/07/31/152210">ササキです</a>/<a href="https://twitter.com/dkfj">佐々木拓郎</a></td>
  <td>AWSの薄い本 IAMのマニアックな話</td>
</tr>
<tr>
  <td><a href="https://techbookfest.org/event/tbf07/circle/5088238888812544">お41C</a></td>
  <td><a href="https://note.mu/oyakata2438">親方Project</a>/<a href="https://twitter.com/oyakata2438">親方</a></td>
  <td>ワンストップ見積もり</td>
</tr>
<tr>
  <td><a href="https://techbookfest.org/event/tbf07/circle/5088238888812544">お41C</a></td>
  <td><a href="https://note.mu/oyakata2438">親方Project</a>/<a href="https://twitter.com/oyakata2438">親方</a></td>
  <td>ワンストップ目標設定 ※おまけでもらった</td>
</tr>
<tr>
  <td><a href="https://techbookfest.org/event/tbf07/circle/5088238888812544">お41C</a></td>
  <td><a href="https://note.mu/oyakata2438">親方Project</a>/<a href="https://twitter.com/oyakata2438">親方</a></td>
  <td>レーザープロジェクターを作って学ぶESP32/Arduino ※おまけでもらった</td>
</tr>
<tr>
  <td><a href="https://techbookfest.org/event/tbf07/circle/5171055656173568">お43C</a></td>
  <td><a href="https://llminatoll.booth.pm/">湊川あいの、わかば家。</a>/<a href="https://twitter.com/webdesignManga">湊川あい</a></td>
  <td>マンガでわかる痩せる技術【2ヶ月半で−8kg】デスクワークのエンジニア・デザイナーを救う</td>
</tr>
<tr>
  <td><a href="https://techbookfest.org/event/tbf07/circle/5743121476354048">お47C</a></td>
  <td><a href="https://allsafe.booth.pm/">Allsafe</a>/er28-0652 <a href="https://twitter.com/PINKSAWTOOTH">@PINKSAWTOOTH</a></td>
  <td>Ghidra Pro Book</td>
</tr>
<tr>
  <td><a href="https://techbookfest.org/event/tbf07/circle/5104458442735616">お56C</a></td>
  <td>そんなことより背脂食べたい/<a href="https://twitter.com/hasegawayosuke">はせがわようすけ</a></td>
  <td>難読化JavaScriptの本</td>
</tr>
<tr>
  <td><a href="https://techbookfest.org/event/tbf07/circle/5634804615741440">お57C</a></td>
  <td>noraneco/<a href="https://twitter.com/graneed111">graneed</a></td>
  <td>curlコマンド完全に理解する</td>
</tr>
<tr>
  <td><a href="https://techbookfest.org/event/tbf07/circle/5067313418076160">お73C</a></td>
  <td><a href="https://twitter.com/i10r_inc">インターステラ株式会社出版部</a>/<a href="https://twitter.com/i10r_inc">インターステラ株式会社出版部</a></td>
  <td>非エンジニアでもできるWebスクレイピング入門</td>
</tr>
<tr>
  <td><a href="https://techbookfest.org/event/tbf07/circle/5654463700271104">か10C</a></td>
  <td>ブライトシステム/<a href="https://twitter.com/sapi_kawahara/status/1177563691874566146">さっぴー川原</a></td>
  <td>迷惑メールにされないメール設定方法 G Suite編</td>
</tr>
<tr>
  <td><a href="https://techbookfest.org/event/tbf07/circle/5702345325281280">か23C</a></td>
  <td><a href="https://kauplan.org/books/wakarimisql/">カウプラン機関極東支部</a>/<a href="https://twitter.com/_kauplan">wanda4</a></td>
  <td>わかりみSQL</td>
</tr>
<tr>
  <td><a href="https://techbookfest.org/event/tbf07/circle/5739755899715584">き15D</a></td>
  <td><a href="https://blog.mtb-production.info/">足跡出版</a>/<a href="https://twitter.com/mtb_beta">的場達矢</a> <a href="https://twitter.com/RyoheiKishi">岸良平</a></td>
  <td>デザイナーはどうやって作るか</td>
</tr>
<tr>
  <td><a href="https://techbookfest.org/event/tbf07/circle/5645050461552640">き17D</a></td>
  <td><a href="https://out-of-kaya.hatenablog.com/entry/2019/08/27/225716">笹書房</a>/<a href="https://twitter.com/out_of_kaya">out_of_kaya</a></td>
  <td>入門リモートワーク</td>
</tr>
<tr>
  <td><a href="https://techbookfest.org/event/tbf07/circle/5682501179670528">き50D</a></td>
  <td><a href="https://masuipeo.com/">増井技術士事務所</a>/<a href="https://twitter.com/masuipeo">masuipeo</a></td>
  <td>Composerの教科書</td>
</tr>
<tr>
  <td><a href="https://techbookfest.org/event/tbf07/circle/5688901205229568">く50D</a></td>
  <td><a href="http://yuma.ohgami.jp/">へにゃぺんて</a>/<a href="https://twitter.com/yohgami">yohgami</a></td>
  <td>作って分かる！x86_64機械語入門</td>
</tr>
<tr>
  <td><a href="https://techbookfest.org/event/tbf07/circle/5648262224674816">く60D</a></td>
  <td><a href="http://zob.club/">ZOB.Club</a>/<a href="https://twitter.com/yyhayami">速水 祐</a></td>
  <td>The Advanced Assembler 386 上ノ巻 第２版</td>
</tr>
<tr>
  <td><a href="https://techbookfest.org/event/tbf07/circle/5648262224674816">く60D</a></td>
  <td><a href="http://zob.club/">ZOB.Club</a>/<a href="https://twitter.com/yyhayami">速水 祐</a></td>
  <td>The Advanced Assembler 386 下ノ巻 第２版</td>
</tr>
<tr>
  <td><a href="https://techbookfest.org/event/tbf07/circle/5675663591735296">け26D</a></td>
  <td>じがへるつ工房/<a href="https://twitter.com/10mozet">Tomo</a></td>
  <td>USB雑記帳</td>
</tr>
<tr>
  <td><a href="https://techbookfest.org/event/tbf07/circle/5675663591735296">け26D</a></td>
  <td>じがへるつ工房/<a href="https://twitter.com/10mozet">Tomo</a></td>
  <td>ディジタル変調復調の方式と仕組み</td>
</tr>
<tr>
  <td><a href="https://techbookfest.org/event/tbf07/circle/5675663591735296">け26D</a></td>
  <td>じがへるつ工房/<a href="https://twitter.com/10mozet">Tomo</a></td>
  <td>伝送路とSパラメータ・スミスチャート</td>
</tr>
<tr>
  <td><a href="https://techbookfest.org/event/tbf07/circle/5675663591735296">け26D</a></td>
  <td>じがへるつ工房/<a href="https://twitter.com/10mozet">Tomo</a></td>
  <td>電子工作でのType-C/USB PD活用の勘所</td>
</tr>
<tr>
  <td><a href="https://techbookfest.org/event/tbf07/circle/5675663591735296">け26D</a></td>
  <td>じがへるつ工房/<a href="https://twitter.com/10mozet">Tomo</a></td>
  <td>電話交換機の歴史と仕組み</td>
</tr>
<tr>
  <td><a href="https://techbookfest.org/event/tbf07/circle/4806559565611008">け28D</a></td>
  <td>Motomation/<a href="https://twitter.com/yuki_eddy">zhiyou</a></td>
  <td>はじめてのケーブル・ハーネスの作り方</td>
</tr>
<tr>
  <td><a href="https://techbookfest.org/event/tbf07/circle/5116704724090880">し21D</a></td>
  <td><a href="https://nico-lab.net/">ニコラボ</a>/<a href="https://twitter.com/nico_lab">ニコラボ</a></td>
  <td>FFmpegの本</td>
</tr>
<tr>
  <td><a href="https://techbookfest.org/event/tbf07/circle/5756204831735808">し35D</a></td>
  <td><a href="http://affiliate-with.hatenablog.com/">こじくれワークス</a>/<a href="https://twitter.com/affiliate_with">ふくふく亭</a></td>
  <td>SSDとHDDが壊れるまで</td>
</tr>
<tr>
  <td><a href="https://techbookfest.org/event/tbf07/circle/6219803601666048">し36D</a></td>
  <td><a href="https://crystalmark.info/">水晶雫世界</a>/<a href="https://twitter.com/openlibsys">hiyohiyo</a></td>
  <td>水晶雫クリアファイル ※無償配布</td>
</tr>
<tr>
  <td><a href="https://techbookfest.org/event/tbf07/circle/5189022846550016">せ06D</a></td>
  <td><a href="https://pomepons.com/">秘密結社ポメポンズ</a>/<a href="https://twitter.com/SierYuki">Yuki</a></td>
  <td>超初心者向けの実用LINUXコマンド集</td>
</tr>
</tbody>
</table>

<p>※敬称略、配置順</p>

<h2 id="%E3%81%BE%E3%81%A8%E3%82%81">まとめ</h2>

<p>反省点</p>

<ul>
<li>サークル＆頒布物チェックブラウザを自分用に作ってみたがいまいち機能が足りなかった

<ul>
<li>タグをつけたり、会場のブース順（≠配置順）でソートしたり、買い物リスト的な感じにしたり、圧倒的に時間が足りなかった...</li>
</ul></li>
<li>購入委託を受けてたが、微妙にジャンルがかぶっていたので購入数の判断で混乱した</li>
<li>買いすぎた...

<ul>
<li>前回、購入したものを会場でもらった袋を利用したためセーブしてしまったので今回はちゃんとしたカバンを持ってったら、簡単後払いに対応しているブールが多かった部分もあって逆に買いすぎた。</li>
</ul></li>
</ul>

<p>次回、参加することがあったらまた自重せずに購入したい</p>

<h2 id="%E5%8F%82%E8%80%83">参考</h2>

<ul>
<li><a href="https://twitter.com/techbookfest/status/1175683304797794307">(1) 技術書典公式アカウントさんはTwitterを使っています: 「#技術書典 7は17:00をもちまして無事閉会いたしました。来場者数は速報値となりますが9,700人（再入場を含まず）でした。正確な来場者数は後日改めて発表いたします。ご来場、誠にありがとうございました。また次の技術書典でお会いしましょう！ https://t.co/57YAwkG6sG https://t.co/5xO4WISlnF」 / Twitter</a></li>
</ul>
]]></content>
        </entry>
            <entry>
            <title type="html"><![CDATA[名古屋Qt勉強会#30.1 に参加しました]]></title>
            <link href="http://www.sharkpp.net/blog/2019/08/24/qt-nagoya-30.html"/>
            <updated>2019-08-24T17:13:00+00:00</updated>
            <id>http://www.sharkpp.net/blog/2019/08/24/qt-nagoya-30.html</id>
            <content type="html"><![CDATA[<p>2019年8月24日(土) に開催された <a href="https://qt-users.connpass.com/event/143118/">Qt 勉強会 @ Nagoya #30.1 - connpass</a> へ参加しました。</p>

<p>そのまとめです。</p>

<p><img src="/images/20190824_frame_extract.png" alt="成果" /></p>

<h2 id="%E8%87%AA%E5%B7%B1%E7%B4%B9%E4%BB%8B">自己紹介</h2>

<p>毎回の通り、自己紹介と本日やることを宣言。</p>

<p>初めて参加の方が一人いた。</p>

<h2 id="%40kazuo_asa-%E3%81%95%E3%82%93%E3%81%AB%E3%82%88%E3%82%8B%E7%99%BA%E8%A1%A8">@kazuo_asa さんによる発表</h2>

<p><a href="https://twitter.com/kazuo_asa">@kazuo_asa</a> による</p>

<ul>
<li>Yoctoを使用して、Boot2Qtをraspberry pi用に構築してみよう。</li>
<li>Qt Creatorを使用して、raspberry piで動作するQtアプリのリモートデバックの仕方。</li>
</ul>

<p>の発表がありました。</p>

<p>発表資料: <a href="https://qiita.com/sazus/items/e3c12dc67b8d38667a20">Raspberry Pi 3 で Qt 5 をビルドして動かす方法(Yocto layer Boot2Qt編)</a></p>

<h2 id="%E8%87%AA%E5%88%86%E3%81%AE%E6%9C%AC%E6%97%A5%E3%81%AE%E3%82%84%E3%82%8B%E3%81%93%E3%81%A8">自分の本日のやること</h2>

<ul>
<li>前回の続きの動画からフレームを切り出し動画のメタ情報とフレーム位置に応じた時刻を設定するツールを実装</li>
</ul>

<p>前回までの状況</p>

<ul>
<li>フレームの取得の高速化（フレーム数で取得するのを諦めフレーム数とフレームレートで秒数を求めて指定するようにした）</li>
<li>なぜかフレームデータの受け渡しでアクセス違反が... なぜだ！？</li>
</ul>

<h2 id="%E6%9C%AC%E6%97%A5%E3%81%AE%E7%9F%A5%E8%A6%8B">本日の知見</h2>

<h3 id="void%2A-%E2%86%92-qvariant">void* → QVariant</h3>

<p>たぶんこう。</p>

<p>```c++
    Hoge* hogePointer = this->getHoge();
    QVariant a = QVariant::fromValue(reinterpret_cast&lt;void*>(hogePointer));</p>

<pre><code><br />ただ、なんか逆がうまくいかないので Q_DECLARE_METATYPE で型を登録して利用するようにした。

### QVariant で自作のクラスのポインタを扱う

QVariant で自作のクラスのポインタを扱うための実装。 

定義 

このとき、一部だけで `Q_DECLARE_METATYPE` を使うと `static_assert failed "Type is not registered, please use the Q_DECLARE_METATYPE macro to make it known to Qt's meta-object system"` とエラーが出る。

```c++
// hoge.hpp

#include &lt;QObject&gt;

class Hoge {
  // ...
};

Q_DECLARE_METATYPE(Hoge*)
</code></pre>

<p>利用方法</p>

<pre><code>#include &lt;hoge.hpp&gt;

void fuga() {

  // to  QVariant()
  Hoge* hoge1 = new Hoge();
  QVariant a = QVariant::fromValue(hoge1);

  // from QVariant()
  Hoge* hoge2 = a.value&lt;Hoge*&gt;();
}
</code></pre>

<h3 id="qqmlengine%EF%BC%9Aqml%E3%82%A8%E3%83%B3%E3%82%B8%E3%83%B3%E3%81%A8%E3%81%AF%E7%95%B0%E3%81%AA%E3%82%8B%E3%82%B9%E3%83%AC%E3%83%83%E3%83%89%E3%81%AB%E3%81%82%E3%82%8B%E3%82%AF%E3%83%A9%E3%82%B9%E3%81%B8%E3%81%AE%E4%B8%8D%E6%AD%A3%E3%81%AA%E6%8E%A5%E7%B6%9A%E8%A9%A6%E8%A1%8C">QQmlEngine：QMLエンジンとは異なるスレッドにあるクラスへの不正な接続試行</h3>

<p><code>QQmlEngine: Illegal attempt to connect to XXXXXXX(0x99999999) that is in a different thread than the QML engine QQmlApplicationEngine(0x99999999.</code> というエラーが出た。</p>

<p>どうやら <code>QQmlApplicationEngine</code> とは別のスレッドで作成したインスタンスにアクセスしようとすると出るっぽい。</p>

<h2 id="%E6%9C%AC%E6%97%A5%E3%81%AE%E9%80%B2%E6%8D%97">本日の進捗</h2>

<p>なぜかアクセス違反で落ちると思ってたらそもそも想定した値が入ってなかった（つまるところ未初期化）
それは落ちるわけだ... とりあえずこれは直った。</p>

<p>やっとサムネイルが出るようになった。</p>

<p>画面はこんな感じで行きたいな。</p>

<p><img src="/images/20190824_frame_extract_ui1.png" alt="秒単位でのフレームの一覧" /> <img src="/images/20190824_frame_extract_ui2.png" alt="フレーム単位でのフレームの一覧" /></p>

<p>とりあえずの成果はこんな感じ</p>

<p><img src="/images/20190824_frame_extract.png" alt="成果" /></p>

<h2 id="%E3%83%A1%E3%83%A2">メモ</h2>

<ul>
<li>UIどうするか？

<ul>
<li>最終的にはスマホでも動くようにしたいなぁ</li>
</ul></li>
<li>複数の動画をドロップして全部一度に選べると良さそう</li>
</ul>

<h2 id="%E5%8F%82%E8%80%83">参考</h2>

<ul>
<li><a href="https://qiita.com/dNaga392/items/3b32fdb3d59b3c25fa6c">QVariantを便利に使おう - Qiita</a></li>
<li><a href="https://stackoverflow.com/questions/44501171/qvariant-with-custom-class-pointer-does-not-return-same-address">qt - QVariant with custom class pointer does not return same address - Stack Overflow</a></li>
<li><a href="https://forum.qt.io/topic/30169/qt-5-1-qml-property-through-threads">Qt 5.1 QML property through Threads | Qt Forum</a> の翻訳→ <a href="https://codeday.me/jp/qa/20190228/335153.html">c – スレッドを通したQt 5.1 QMLプロパティ - コードログ</a></li>
<li><a href="https://getting-started-qml-ja.readthedocs.io/ja/latest/chapter06.html">Qt C++を用いたQMLの拡張 — Getting started QML programming Japanese translation 2014.04.05 ドキュメント</a></li>
</ul>
]]></content>
        </entry>
    </feed>