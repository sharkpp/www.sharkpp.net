<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
    <title><![CDATA[さめたすたすのお家]]></title>
    <link href="http://www.sharkpp.net/blog/tags/C%2B%2B.xml" rel="self"/>
    <link href="http://www.sharkpp.net/"/>
    <updated>2017-08-22T16:53:38+00:00</updated>
    <id>http://www.sharkpp.net/</id>
            <author>
            <name><![CDATA[sharkpp]]></name>                    </author>
        <generator uri="http://sculpin.io/">Sculpin</generator>
            <entry>
            <title type="html"><![CDATA[じゅげむったーの開発日記 その５]]></title>
            <link href="http://www.sharkpp.net/blog/2017/08/23/jugemutter-development-diary-5th.html"/>
            <updated>2017-08-23T01:50:00+00:00</updated>
            <id>http://www.sharkpp.net/blog/2017/08/23/jugemutter-development-diary-5th.html</id>
            <content type="html"><![CDATA[<p>さて、今月も引き続き参加した <a href="https://qt-users.connpass.com/event/62861/">Qt 勉強会 @ Nagoya No11 - connpass</a> のまとめ。</p>

<p>先月の勉強会から日付(YY.MM)が付かなくなりました。</p>

<p>さて、今回も長文投稿専用Twitterクライアントの開発の続きをしました。</p>

<p>レポジトリは ... <a href="https://github.com/sharkpp/Jugemutter">sharkpp/Jugemutter: 長文投稿専用クライアント「じゅげむったー」</a> です。</p>

<p><img src="/images/2017_0819_jugemutter1.png" alt="画面" /></p>

<h2 id="%E9%80%B2%E6%8D%97">進捗</h2>

<p><img src="/images/2017_0819_jugemutter2.png" alt="テスト画面" /></p>

<p>とりあえず、分割処理のいろんなパターンのテストがやっと通ったので、ようやく一山越えた感じです。
ここまで長かった。</p>

<p>で、<code>Could not authenticate you.</code> がなぜか出る、と。
これは、<a href="https://dev.twitter.com/overview/api/response-codes">Error Codes &amp; Responses — Twitter Developers</a> によると、『<ruby>ダイヤルしても通話を完了できませんでした。<rp>(</rp><rt>Your call could not be completed as dialed.</rt><rp>)</rp></ruby>』って意味らしい。</p>

<h2 id="wireshark-%E3%81%A7-https-%E3%81%AE%E4%B8%AD%E8%BA%AB%E3%81%AE%E7%A2%BA%E8%AA%8D">Wireshark で https の中身の確認</h2>

<p>Twitter の API への指示がおかしいらしいので、なんとか調べられないかとググってた所、Wiresharkでhttpsの中身が確認できるとの記事を発見。</p>

<pre><code># SSLKEYLOGFILE=~/tls_key.log {ChromeやFirefox、cURLなどのパス}
</code></pre>

<p>で起動し、Wireshark で</p>

<p><img src="/images/2017_0819_https_decrypt_in_wireshark.png" alt="Wireshark" /></p>

<p>と、このような設定をすれば良いらしい。</p>

<p>が、解析画面</p>

<p><img src="/images/2017_0819_wireshark.png" alt="Wireshark" /></p>

<p>を見ても、<code>Decrypted SSL Data</code> なんてタブはもちろん、<code>Frame</code> などのタブも表示されて居ないので、もしかしてUIがQtベースになった時に何か変わったのかもしれない。</p>

<p>あと、そもそもの問題、Qtの通信を覗きたいわけだから、Qtで使えないと意味がないんだけど、使えるのだろうか？</p>

<h2 id="%E5%8F%82%E8%80%83">参考</h2>

<ul>
<li><a href="http://qiita.com/Hexa/items/ce0ac23526df12a64ad0">暗号化された Application Data を復号する - Qiita</a></li>
<li><a href="https://f-o.org.uk/2017/decrypting-https-traffic-without-a-key.html">Floating Octothorpe: Decrypting HTTPS traffic without a key</a></li>
<li><a href="https://serverfault.com/questions/263530/how-can-i-filter-https-when-monitoring-traffic-with-wireshark">How can I filter https when monitoring traffic with Wireshark? - Server Fault</a></li>
<li><a href="http://troushoo.blog.fc2.com/blog-entry-234.html">Wireshark を用いて、クライアント側の情報のみでHTTPS 通信を複合する方法</a></li>
<li><a href="http://qiita.com/toshihirock/items/acbf9800f7e784118e46">HTTPSのパケットをwiresharkで見てみる - Qiita</a></li>
<li><a href="https://gist.github.com/summerwind/a482dd1f8e9887d26199">Wireshark で HTTP/2 over TLS の通信をダンプする方法</a></li>
<li><a href="https://developer.mozilla.org/en-US/docs/Mozilla/Projects/NSS/Key_Log_Format">NSS Key Log Format - Mozilla | MDN</a></li>
</ul>
]]></content>
        </entry>
            <entry>
            <title type="html"><![CDATA[じゅげむったーの開発日記 その４]]></title>
            <link href="http://www.sharkpp.net/blog/2017/07/16/jugemutter-development-diary-4th.html"/>
            <updated>2017-07-16T18:10:00+00:00</updated>
            <id>http://www.sharkpp.net/blog/2017/07/16/jugemutter-development-diary-4th.html</id>
            <content type="html"><![CDATA[<p>ただいま、<a href="https://github.com/sharkpp/Jugemutter">じゅげむったー</a> の実装中なのです。</p>

<p>まあ、それはともかくとして、「じゅげむったー」実装中に Qt 関連で躓いた部分や発生した問題の解決方法を、メモしておいたら溜まってきたので一度放出しようかと。</p>

<h2 id="%E3%83%89%E3%83%AD%E3%83%83%E3%83%97%E3%83%80%E3%82%A6%E3%83%B3%E5%9E%8B%E3%81%AE%E3%83%80%E3%82%A4%E3%82%A2%E3%83%AD%E3%82%B0%E3%82%92%E8%A1%A8%E7%A4%BA%E3%81%99%E3%82%8Bmacos">ドロップダウン型のダイアログを表示する(macOS)</h2>

<p>macOS でウインドウのタイトルバーの直下からまるで舌ベロのように垂れ下がるドロップダウン形式のダイアログの実装方法。</p>

<p><img src="/images/2017_0716_macOS_QDialog_sheet_style.png" alt="QDialogのSheetスタイル" /></p>

<p>こんな感じのダイアログの表示スタイルです。</p>

<p>Apple 的には <code>[Sheet](https://developer.apple.com/library/content/documentation/Cocoa/Conceptual/Sheets/Concepts/AboutSheets.html)</code> って名称らしいですね。</p>

<pre><code class="cpp">#if defined(Q_OS_MAC)
    setWindowFlags(Qt::Sheet);
#endif
</code></pre>

<p>これだけです。</p>

<p><code>#if</code> と <code>#endif</code> はなくても良さそうですが、一応。</p>

<p>そうして <code>.exec()</code> などを呼び出せば表示できます。</p>

<h2 id="%E3%83%AA%E3%82%B9%E3%83%88%E4%B8%8B%E9%83%A8%E3%81%AE%E8%BF%BD%E5%8A%A0%E3%82%84%E5%89%8A%E9%99%A4%E3%83%9C%E3%82%BF%E3%83%B3macos">リスト下部の追加や削除ボタン(macOS)</h2>

<p><img src="/images/2017_0716_macOS_list_buttons.png" alt="リスト下部のボタン" /></p>

<p>こんな感じでリストの下部に追加や削除のボタンがついているやつ。</p>

<p>これは Apple 的には <code>NSAddTemplate</code> と <code>NSRemoveTemplate</code> って言うらしい。</p>

<p>この機能はどうやら実装されていないようなので、レイアウトとボタンをそれらしく配置することで再現するしかない様です。
まあ、Windows や Linux でも同じ機能にしたいなら、そちらの方が良いかもですね。</p>

<h2 id="qdialog-%E3%81%AE%E5%A4%A7%E3%81%8D%E3%81%95%E3%82%92%E3%82%B3%E3%83%B3%E3%83%86%E3%83%B3%E3%83%84%E3%81%AB%E5%90%88%E3%82%8F%E3%81%9B%E3%82%8B">QDialog の大きさをコンテンツに合わせる</h2>

<p>コンストラクタで <a href="http://doc.qt.io/qt-5/qwidget.html#adjustSize">void QWidget::adjustSize()</a> を呼び出せばOK。</p>

<pre><code class="cpp">MyDialog::MyDialog(QWidget *parent)
    : QDialog(parent)
    , ui(new Ui::MyDialog)
{
    ui-&gt;setupUi(this);
    adjustSize();
}
</code></pre>

<h2 id="%E3%82%AA%E3%83%BC%E3%83%90%E3%83%BC%E3%83%AD%E3%83%BC%E3%83%89%E3%81%95%E3%82%8C%E3%81%9F%E3%82%B7%E3%82%B0%E3%83%8A%E3%83%AB%E3%81%A8%E3%81%AE%E6%8E%A5%E7%B6%9A%E6%96%B9%E6%B3%95">オーバーロードされたシグナルとの接続方法</h2>

<p>Qt 5 から？だったか <code>connect(hoge, SIGNAL(...), ...)</code> ではなく <code>connect(hoge, &amp;..., ...)</code> で記述できるようになった。
なったのだけど、じゃあオーバーロードして宣言されているシグナルとの接続はどうするんだろう、と。</p>

<p>ちょうど必要な状況にぶち当たったので調べてみることに。</p>

<p>まず、</p>

<pre><code class="cpp">    connect(m_tagListWidget, &amp;QComboBox::currentIndexChanged,
            this, &amp;TagInput::onTagListSelected);
</code></pre>

<p>こんな感じで記述すると <code>error: no matching member function for call to 'connect'</code> みたいなエラーが出ます。</p>

<p>解決方法は、<code>QtGlobal</code> の <a href="http://doc.qt.io/qt-5/qtglobal.html#qOverload">QOverload</a> テンプレートクラスを利用すればいいみたいです。</p>

<pre><code class="cpp">    connect(m_tagListWidget, QOverload&lt;int&gt;::of(&amp;QComboBox::currentIndexChanged),
            this, &amp;MyClass::onCurrentIndexChanged);
</code></pre>

<p>C++14 が有効であれば、</p>

<pre><code class="cpp">    connect(m_tagListWidget, qOverload&lt;int&gt;(&amp;QComboBox::currentIndexChanged),
            this, &amp;MyClass::onCurrentIndexChanged);
</code></pre>

<p>こうれば良いようです。</p>

<h2 id="%E5%AD%90%E8%A6%81%E7%B4%A0%E3%81%B8%E3%82%B9%E3%82%BF%E3%82%A4%E3%83%AB%E3%82%B7%E3%83%BC%E3%83%88%E3%82%92%E9%81%A9%E7%94%A8%E3%81%95%E3%81%9B%E3%81%AA%E3%81%84">子要素へスタイルシートを適用させない</h2>

<p>ウィジェットをカスタマイズするためにスタイルシートで単純に</p>

<pre><code class="css">QFrame { background: #F90; }
</code></pre>

<p>とした場合、これはもちろん、指定した要素に適用されます。</p>

<p>そして、実はこの時に子要素が存在していた場合、その子要素にまでその指定が効いてしまいます。
まあ、HTML のスタイルシートとして考えた場合には、確かにそれはそれで正しいのですが、ちょっと困り者ですね。</p>

<p>では、どうするか？</p>

<pre><code class="css">.QFrame { background: #F90; }
</code></pre>

<p>もしくは</p>

<pre><code class="css">#orangeColor { background: #F90; }
</code></pre>

<p>と要素を限定すればOKです。</p>

<h2 id="qtcreator-%E3%81%A7-qtoolbar-%E3%82%92%E8%87%AA%E7%94%B1%E3%81%AB%E8%A8%AD%E7%BD%AE%E3%81%99%E3%82%8B">QtCreator で QToolBar を自由に設置する</h2>

<p>QtCreator のデザイナでは、どうやら <a href="http://doc.qt.io/qt-5/qtoolbar.html">QToolBar</a> は、ウインドウ内に一つで、<code>QLabel</code> など他のウィジェットのように自由には配置できないようです。
もっとも、普通のアプリケーションでは問題ないとは思います。</p>

<p><code>QToolBar</code> をウィジェット的に扱う場合にはどうするか？</p>

<p>直接 .ui ファイルを編集します。
開くと、「このファイルはデザインモード以外では編集できません。」と出ますし、本来はダメなのですが...
どうしてもデザイナ上で扱いたかったんです。</p>

<p>手順は</p>

<ol>
<li>デザイナで QWidget を追加し、<code>objectName</code> を指定</li>
<li>対象の .ui を「エディタを指定して開く」→「テキストエディタ」で開く</li>
<li>1で指定した名前を探す</li>
<li>クラス名を変更する</li>
<li>ファイルを保存し閉じる</li>
<li>デザイナで開き直す</li>
</ol>

<p>となります。</p>

<p>クラス名の変更は</p>

<pre><code class="diff">      &lt;item&gt;
-      &lt;widget class="QWidget" name="widget1"&gt;
+      &lt;widget class="QToolBar" name="widget1"&gt;
        &lt;property name="sizePolicy"&gt;
</code></pre>

<p>こんな感じですね。</p>

<h2 id="qtoolbar-%E3%81%A7%E3%82%B9%E3%82%BF%E3%82%A4%E3%83%AB%E3%82%B7%E3%83%BC%E3%83%88%E3%81%AE%E6%8C%87%E5%AE%9A%E3%81%8C%E5%8F%8D%E6%98%A0%E3%81%95%E3%82%8C%E3%81%AA%E3%81%84macos%E9%99%90%E5%AE%9A%EF%BC%9F">QToolbar でスタイルシートの指定が反映されない(macOS限定？)</h2>

<p>macOS ではどうやらスタイルシートの実装に不具合なのか仕様なのかがあるようで、背景色の指定がうまくできない時があるようです。
<a href="https://bugreports.qt.io/browse/QTBUG-12717?focusedCommentId=216435&amp;page=com.atlassian.jira.plugin.system.issuetabpanels%3Acomment-tabpanel#comment-216435">[QTBUG-12717] Background color for QToolBar is not stylable on Mac - Qt Bug Tracker</a> では <code>border</code> を指定し問題を回避できると書かれていました。</p>

<pre><code class="css">QToolBar {
    background: red;
    border: none;
}
</code></pre>

<p>こんな感じです。</p>

<h2 id="qtoolbar-%E3%81%AE%E3%83%87%E3%82%B6%E3%82%A4%E3%83%B3%E3%82%92%E3%82%AB%E3%82%B9%E3%82%BF%E3%83%9E%E3%82%A4%E3%82%BA">QToolbar のデザインをカスタマイズ</h2>

<p>完全にメモです。</p>

<p><a href="https://github.com/sharkpp/QToolbarCustomStyleSample">sharkpp/QToolbarCustomStyleSample</a> で利用したサンプルを公開しています。</p>

<h3 id="%E3%81%98%E3%82%85%E3%81%92%E3%82%80%E3%81%A3%E3%81%9F%E3%83%BC">じゅげむったー</h3>

<p><img src="/images/2017_0716_QToolbar_customize_Jugemutter.png" alt="QToolbar カスタマイズ：じゅげむったー" /></p>

<pre><code class="css">QToolBar {
    background: qlineargradient(spread:pad, x1:0, y1:0, x2:1, y2:0, stop:0 rgba(54, 54, 67, 255), stop:1 rgba(84, 84, 104, 255));
    border: none;
    icon-size: 48px;
}
QToolButton {
    background: transparent;
    padding: 2px;
    margin: 0;
    spacing: 0;
    border: none;
    width: 56px;
    height: 48px;
}
QToolButton:checked {
    background-color: qlineargradient(spread:pad, x1:0, y1:0, x2:1, y2:0, stop:0 rgba(13, 13, 16, 255), stop:1 rgba(33, 33, 41, 255));
}
QToolButton:hover, QToolButton:checked:hover {
    background-color: rgb(96, 96, 96);
}
QToolButton:pressed {
    background-color: rgb(64, 64, 64);
}
</code></pre>

<h3 id="qt-creator-%E9%A2%A8">Qt Creator 風</h3>

<p>あくまで、Qt Creator 風です。
選択時にアイコンの色が変わるとかその辺りは実装できていません。</p>

<p><img src="/images/2017_0716_QToolbar_customize_QtCreatorLike.png" alt="QToolbar カスタマイズ：Qt Creator 風" /></p>

<pre><code class="css">QToolBar {
    background: #444;
    border: none;
    icon-size: 24px;
    padding: 0;
    margin: 0;
    spacing: 0;
}
QToolBar QToolButton {
    background: transparent;
    border: none;
    width: 70px;
    padding: 4px;
    margin: 0;
    spacing: 0;
    color: #fff;
}
QToolBar QToolButton:checked,
QToolBar QToolButton:pressed {
    background: #282828;
}
</code></pre>

<h2 id="%E5%8F%82%E8%80%83">参考</h2>

<ul>
<li><a href="http://qiita.com/false-git@github/items/cbda9ddaaac5b6c81427">Qtアプリのサンプル - Qiita</a></li>
<li><a href="http://doc.qt.io/qt-5/appicon.html">Setting the Application Icon | Qt 5.8</a></li>
<li><a href="http://doc.qt.io/qt-5/qtwidgets-widgets-windowflags-example.html">Window Flags Example | Qt Widgets 5.8</a></li>
<li><a href="http://doc.qt.io/qt-5/qt.html#WindowType-enum">Qt Namespace #WindowType-enum | Qt Core 5.8</a></li>
<li><a href="https://developer.apple.com/library/content/documentation/Cocoa/Conceptual/Sheets/Concepts/AboutSheets.html">About Sheets</a></li>
<li><a href="https://forum.qt.io/topic/33448/solved-resize-qdialog-to-fit-all-contents/9">[Solved] Resize QDialog to fit all contents? | Qt Forum</a></li>
<li><a href="http://www.qtcentre.org/threads/14099-How-to-stop-child-widgets-from-inheriting-parent-s-StyleSheet-and-use-system-default">How to stop child widgets from inheriting parent's StyleSheet and use system default?</a></li>
<li><a href="https://stackoverflow.com/questions/16794695/connecting-overloaded-signals-and-slots-in-qt-5">c++ - Connecting overloaded signals and slots in Qt 5 - Stack Overflow</a></li>
<li><a href="https://bugreports.qt.io/browse/QTBUG-12717">[QTBUG-12717] Background color for QToolBar is not stylable on Mac - Qt Bug Tracker</a></li>
<li><a href="https://stackoverflow.com/questions/10706357/nstableview-with-plus-and-minus-buttons">cocoa - NSTableView with Plus and Minus buttons - Stack Overflow</a></li>
</ul>
]]></content>
        </entry>
            <entry>
            <title type="html"><![CDATA[じゅげむったーの開発日記 その３]]></title>
            <link href="http://www.sharkpp.net/blog/2017/06/17/jugemutter-development-diary-3rd.html"/>
            <updated>2017-06-17T22:57:00+00:00</updated>
            <id>http://www.sharkpp.net/blog/2017/06/17/jugemutter-development-diary-3rd.html</id>
            <content type="html"><![CDATA[<p>さて、先月に引き続いて今月も参加した <a href="https://qt-users.connpass.com/event/58337/">Qt 勉強会 @ Nagoya No9(17.06) - connpass</a> のまとめ。</p>

<p>つぶやきは <a href="https://togetter.com/li/1127556">Qt勉強会 Tokyo #48 + @Nagoya #9 つぶやきまとめ</a> でまとめられています。</p>

<p>今回も長文投稿専用Twitterクライアントの開発の続きをしました。
そろそろ終わらせたいです...</p>

<p>レポジトリは ... <a href="https://github.com/sharkpp/Jugemutter">sharkpp/Jugemutter: 長文投稿専用クライアント「じゅげむったー」</a> です。</p>

<p><img src="/images/2017_0617_jugemutter1.png" alt="画面" /></p>

<h2 id="%E9%80%B2%E6%8D%97">進捗</h2>

<p>とりあえず、作ってた設定画面ができて、設定した内容も保存できたぞ！</p>

<p><img src="/images/2017_0617_jugemutter1.png" alt="設定画面" /></p>

<p>投稿画面の本文前後のテキストも表示できるようになったし、</p>

<p><img src="/images/2017_0617_jugemutter2.png" alt="投稿画面" /></p>

<p>インストーラ作るの？って聞かれた。
たしかに、配布どうするか、って問題はある。</p>

<p><a href="https://booth.pm/ja/items/122098">インストーラを作ろう！</a> を持ってたはずなので、それを参考にやってみようかとは思ってる。</p>

<h2 id="%E3%81%9D%E3%81%AE%E4%BB%96%E3%83%A1%E3%83%A2">その他メモ</h2>

<h3 id="%E3%83%87%E3%83%BC%E3%82%BF%E3%83%90%E3%82%A4%E3%83%B3%E3%83%87%E3%82%A3%E3%83%B3%E3%82%B0%E3%81%AB%E3%81%A4%E3%81%84%E3%81%A6">データバインディングについて</h3>

<p>データバインディングは QML の方が Widget より素直？直感的？で実装が楽、らしい。</p>

<p>QML は、かなり昔( <a href="https://github.com/sharkpp/TaskMemGraph">sharkpp/TaskMemGraph: sample of QtQuick2 application</a> )に触ってそれっきりなので、また色々覚えないとダメかもしれないけど、 Android とか iOS のアプリ作るなら Widget よりも最近は QML っぽいので、またやってみようと思う。</p>

<p>そういえば、 <a href="https://github.com/sharkpp/TaskMemGraph">TaskMemGraph</a> っていまビルド通るのだろうか？</p>

<h3 id="%E3%83%87%E3%82%A3%E3%83%AC%E3%82%AF%E3%83%88%E3%83%AA%E6%A7%8B%E6%88%90">ディレクトリ構成</h3>

<p>ファイル数増えて困る、って問題。</p>

<p>何かキッチリ答えがあるわけでもないけど、</p>

<ul>
<li>機能ごと</li>
<li>モジュールごと</li>
</ul>

<p>みたいな感じで良いのでは、とアドバイス。</p>

<h3 id="qt-%E6%9C%AC%E4%BD%93%E3%81%AB%E3%81%A4%E3%81%84%E3%81%A6">Qt 本体について</h3>

<p>Qt 5.9 は、ある人曰く、アップデートしても大丈夫なバージョンな気がする、とのこと。</p>

<p>LTS(=Long Term Support)版だけあって、最初から安定しているのかも。</p>

<h3 id="qtcretor-%E3%81%AB%E3%81%A4%E3%81%84%E3%81%A6">QtCretor について</h3>

<p>QtCretor 4.3.0 はどうも動作が怪しい部分があるらしい（自分はまだ 4.2.1 なので、あくまでらしい）。</p>

<p>前のバージョン、 4.2.1 では大丈夫だけど、ある機能のメニューをクリックしても反応しなかったり、クラスを追加しても、プロジェクトビューに追加されなかったり（再起動すると追加されている）、など。</p>

<p>Qt 5.9 に付属の QtCretor 4.3.1 は大丈夫かも？と言う話。
なお QtCretor 4.3.1 はこの記事を書いている時点では、単体でのダウンロードはできないようです。</p>

<h2 id="%E5%8F%82%E8%80%83">参考</h2>

<ul>
<li><a href="https://www.qt.io/download-open-source/#section-9">Qt - Download Open Source Step 3</a></li>
</ul>
]]></content>
        </entry>
            <entry>
            <title type="html"><![CDATA[じゅげむったーの開発日記 その２]]></title>
            <link href="http://www.sharkpp.net/blog/2017/05/20/jugemutter-development-diary-2nd.html"/>
            <updated>2017-05-20T17:04:00+00:00</updated>
            <id>http://www.sharkpp.net/blog/2017/05/20/jugemutter-development-diary-2nd.html</id>
            <content type="html"><![CDATA[<p>さて、先月に引き続いて今月も参加した <a href="https://qt-users.connpass.com/event/57080/">Qt 勉強会 @ Nagoya No8(17.05) - connpass</a> のまとめ。</p>

<p>今月も、長文投稿専用Twitterクライアントの開発の続きをしました。</p>

<p>レポジトリは ... <a href="https://github.com/sharkpp/Jugemutter">sharkpp/Jugemutter: 長文投稿専用クライアント「じゅげむったー」</a> です。</p>

<p><img src="/images/2017_0520_jugemutter.png" alt="画面" /></p>

<h2 id="%E3%81%AF%E3%81%98%E3%82%81%E3%81%AB">はじめに</h2>

<p>今日は、会場にほぼ時間ぴったりで到着(どうやら参加者中、最後だった模様)。</p>

<p>反時計回りで、本日のやることを宣言。</p>

<p>自分は、「じゅげむったー」の続き。</p>

<h2 id="%E3%82%84%E3%81%A3%E3%81%9F%E3%81%93%E3%81%A8">やったこと</h2>

<p>アカウント周りの管理処理の実装を組んだ。</p>

<p>とりあえず、アカウントの管理がUIが主だったのを別のクラスで管理するようにして、それの変更でUIが変わるように変更をした。</p>

<p>いつのまにか、投稿ができなくなってたので、ソースを追ったら、今表示しているビューに対してドキュメントが設定されてなかった様子。</p>

<p>なので、ビューにドキュメントを設定する処理を実装するが、完了にはもう少し時間が足らなかった。</p>

<p>暗号化処理、Qt標準でないのでどうしたものか？
<a href="https://github.com/roop/qblowfish">roop/qblowfish</a> とか <a href="https://github.com/xcoder123/QBlowfish">xcoder123/QBlowfish</a> とか使おうかな？
でも、<a href="https://ja.wikipedia.org/wiki/Twofish">Twofish</a> よりも設計年代が古いので Twofish のラッパーを作ったほうがいいのかも？</p>

<h2 id="%E5%8F%82%E8%80%83">参考</h2>

<ul>
<li><a href="https://github.com/roop/qblowfish">roop/qblowfish: An implementation of the Blowfish encryption algorithm in Qt.</a></li>
<li><a href="https://github.com/xcoder123/QBlowfish">xcoder123/QBlowfish: Simple blowfish encryption implementation in Qt with QByteArray support</a></li>
<li><a href="https://ja.wikipedia.org/wiki/Twofish">Twofish - Wikipedia</a></li>
</ul>
]]></content>
        </entry>
            <entry>
            <title type="html"><![CDATA[じゅげむったー(仮)の開発日記 その１]]></title>
            <link href="http://www.sharkpp.net/blog/2017/04/16/jugemutter-development-diary-1st.html"/>
            <updated>2017-04-16T23:07:00+00:00</updated>
            <id>http://www.sharkpp.net/blog/2017/04/16/jugemutter-development-diary-1st.html</id>
            <content type="html"><![CDATA[<p>さて、先月に続いて今月も参加した <a href="https://qt-users.connpass.com/event/53963/">Qt 勉強会 @ Nagoya No7(17.04) - connpass</a> のまとめ。</p>

<p>つぶやきは <a href="https://togetter.com/li/1101299">Qt勉強会 Tokyo #46 + Nagoya # 7 つぶやきまとめ - Togetterまとめ</a> でまとめられています。</p>

<p>今月は先月から作り始めた、長文投稿専用Twitterクライアントの開発をしました。</p>

<p>レポジトリは ... <a href="https://github.com/sharkpp/Jugemutter">sharkpp/Jugemutter: 長文投稿専用クライアント「じゅげむったー」</a> です。</p>

<h2 id="%E3%81%AF%E3%81%98%E3%82%81%E3%81%AB">はじめに</h2>

<p>会場に到着する前のこと。</p>

<p>マクドナルドで昼食を食べ、いざ会場へ行かん、としたところで、外を見ると土砂降り，とまでは行かないけれど雨がザーザー<ruby><rb>OMG</rb><rp>(</rp><rt>おーまいがー</rt><rp>)</rp></ruby>。</p>

<p>慌ててコンビニで傘を買って行きましたとさ。
いや、まさか雨が降るとは思わず、折り畳み傘をカバンに入れてなかったのです。</p>

<p>会場に着くと、主催の <a href="https://twitter.com/nekomatu">@nekomatu</a> さん以外おらず。
もともと <a href="https://twitter.com/IoriAYANE">@IoriAYANE</a> さんも調子を崩して参加できず、だったので特に人数が少なかった。</p>

<p>しばらくして、最後の一人も到着で、もくもく開始。</p>

<blockquote class="twitter-tweet" data-lang="ja"><p lang="ja" dir="ltr">本日のおやつ <a href="https://twitter.com/hashtag/qtjp?src=hash">#qtjp</a> <a href="https://t.co/HhGVbaUAWk">pic.twitter.com/HhGVbaUAWk</a></p>&mdash; 夜は短し歩けよさめたすたす (@sharkpp) <a href="https://twitter.com/sharkpp/status/853103000910413824">2017年4月15日</a></blockquote>

<h2 id="%E3%82%84%E3%81%A3%E3%81%9F%E3%81%93%E3%81%A8">やったこと</h2>

<p>ドキュメントを見つつ、画面周りを作成。</p>

<p>QtCreator みたいに左側にツールバーを設置してみようと思うが、どうやらデザイナ上ではウィジェットとしてツールバーは設置できないようだ。
「<a href="http://stackoverflow.com/questions/26691010/how-to-change-toolbar-layout-in-qt-creator">How to change toolbar layout in Qt Creator? - Stack Overflow</a>」 を見ると、 <code>.ui</code> を直接触れって書いてあって、確かにできるんだけど... いいのかな？</p>

<p><code>QPlainTextEdit</code> の画面内の余白、
<img src="images/2017_0415_qplaintextedit_margin.png" />
を計算するうまい方法はないものかと、探すも見つからず。
<a href="http://doc.qt.io/qt-5/qwidget.html#contentsMargins">QWidget::contentsMargins()</a>はどうも違うらしい。</p>

<p><code>QLabel</code> の文字色は ... そうだ、そうだ。
<code>foregroundRole()</code> を使うんだ、とか。</p>

<p>調べながら、コードを書いているとなかなか進まないなぁ。</p>

<h2 id="%E6%88%90%E6%9E%9C">成果</h2>

<p>とりあえず、なんとなくの画面はできてきた感じ。</p>

<p><img src="/images/2017_0415_jugemutter.png" /></p>

<p>もうちょっとで文章を分割してつぶやけるところまて行ったけど、残念ながら時間切れ。</p>

<ul>
<li>分割して投稿</li>
<li>文章をWYSIWYGで編集＆プレビューしたい</li>
<li>投稿のレジューム機能</li>
<li>マルチアカウント管理</li>
</ul>

<p>とか、まだまだ先は長そうだ。</p>

<script async src="//platform.twitter.com/widgets.js" charset="utf-8"></script>

<h2 id="%E7%9F%A5%E3%81%A3%E3%81%9F%E3%81%93%E3%81%A8">知ったこと</h2>

<ul>
<li>Qt

<ul>
<li><a href="http://doc.qt.io/qt-5/properties.html"><code>Q_PROPERTY</code></a> は   <code>setProperty()</code> / <code>property()</code> でアクセスできるようにするマクロ。
何回か、同じ勘違いをやっているけど、 setter/getter を自動で作る機能ではない。</li>
<li>パスに日本語が含まれていると qmake が失敗するらしい、このご時世に。</li>
</ul></li>
<li>QtCreator

<ul>
<li>のソースエディタで、変数の後に <code>.</code> を入力すると <code>-&gt;</code> に変換される。便利！</li>
<li>デザイナ上でツールバーを削除してしまった場合は、オブジェクトインスペクタ？上の <code>QMainWIndow</code> を右クリックして「ツールバーを追加」で追加できる。</li>
<li><code>QDesignerCustomWidgetCollectionInterface</code> とか長ったらしい名前は <code>QDCW</code> と入力すれば補完される！
参考：<a href="http://qiita.com/task_jp/items/098319a33bd946955c0a#%E3%82%AD%E3%83%A3%E3%83%A1%E3%83%AB%E3%82%B1%E3%83%BC%E3%82%B9%E5%AF%BE%E5%BF%9C%E3%81%AE%E8%A3%9C%E5%AE%8C%E3%82%92%E6%9C%80%E5%A4%A7%E9%99%90%E3%81%AB%E6%B4%BB%E7%94%A8%E3%81%97%E3%82%88%E3%81%86">Qt Creator を便利に使いこなそう - Qiita # キャメルケース対応の補完を最大限に活用しよう</a></li>
<li><code>QString m_xxx;</code> などとメンバ変数を定義して、「リファクタリング」を実行すれば  <code>setXxx()</code> と <code>xxx()</code> つまり setter/getter の宣言と実装の枠組みが自動で追加される。
参考：* <a href="http://stackoverflow.com/questions/19729288/auto-generate-setters-getters-with-qtcreator">c++ - Auto-generate setters/getters with QTCreator? - Stack Overflow</a></li>
</ul></li>
</ul>

<h2 id="%E5%8F%82%E8%80%83">参考</h2>

<ul>
<li><a href="http://stackoverflow.com/questions/26691010/how-to-change-toolbar-layout-in-qt-creator">How to change toolbar layout in Qt Creator? - Stack Overflow</a></li>
<li><a href="http://stackoverflow.com/questions/18909507/qtextedit-sets-fix-line-height-paragraph-spacing">qt - QTextEdit sets fix line Height, paragraph spacing - Stack Overflow</a></li>
<li><a href="http://stackoverflow.com/questions/10317845/qplaintextedit-line-spacing">c++ - qplaintextedit line spacing - Stack Overflow</a></li>
<li><a href="http://qiita.com/task_jp/items/098319a33bd946955c0a#%E3%82%AD%E3%83%A3%E3%83%A1%E3%83%AB%E3%82%B1%E3%83%BC%E3%82%B9%E5%AF%BE%E5%BF%9C%E3%81%AE%E8%A3%9C%E5%AE%8C%E3%82%92%E6%9C%80%E5%A4%A7%E9%99%90%E3%81%AB%E6%B4%BB%E7%94%A8%E3%81%97%E3%82%88%E3%81%86">Qt Creator を便利に使いこなそう - Qiita</a></li>
<li><a href="http://stackoverflow.com/questions/2749798/qlabel-set-color-of-text-and-background">qt - QLabel: set color of text and background - Stack Overflow</a></li>
<li><a href="http://doc.qt.io/qt-5/properties.html">The Property System | Qt Core 5.8</a></li>
<li><a href="http://stackoverflow.com/questions/19729288/auto-generate-setters-getters-with-qtcreator">c++ - Auto-generate setters/getters with QTCreator? - Stack Overflow</a></li>
</ul>
]]></content>
        </entry>
            <entry>
            <title type="html"><![CDATA[Qt Network Authorization を使った Twitter API の利用]]></title>
            <link href="http://www.sharkpp.net/blog/2017/03/25/twitter-api-using-qt-network-authorization.html"/>
            <updated>2017-03-25T22:59:00+00:00</updated>
            <id>http://www.sharkpp.net/blog/2017/03/25/twitter-api-using-qt-network-authorization.html</id>
            <content type="html"><![CDATA[<p>さて、先月に続いて今月も参加した <a href="https://qt-users.connpass.com/event/52009/">Qt 勉強会 @ Nagoya No6(17.03)</a> のまとめ。</p>

<p>今回はいつもに増して短め。</p>

<p><a href="https://github.com/sharkpp/Jugemutter">sharkpp/Jugemutter: 長文投稿専用クライアント「じゅげむったー」</a> で成果物を公開しています。</p>

<h2 id="%E3%81%AF%E3%81%98%E3%82%81%E3%81%AB">はじめに</h2>

<p>まずは、クラスの実装をしていきます。</p>

<p><a href="https://doc-snapshots.qt.io/qt5-5.8/examples-qtnetworkauth.html">Qt Network Authorization Examples | Qt Network Authorization 5.8</a> に Twitter認証のサンプルがあるので、それを参考にしつつ <a href="https://github.com/sharkpp/NetworkStorageAccessSample">NetworkStorageAccessSample</a> で実装した認証済みトークンの保存処理を実装していきました。</p>

<p>あ、<a href="http://www.sharkpp.net/blog/2017/01/28/first-impression-qt-network-authorization.html">はじめての Qt Network Authorization</a> も参考にしています。</p>

<p>そろそろ、だれか Qt Network Authorization を触った記事を書いてくれないだろうか？</p>

<h2 id="%E3%83%9D%E3%82%A4%E3%83%B3%E3%83%88">ポイント</h2>

<p>実装するクラスは <code>QOAuth1</code> クラスから派生します。</p>

<p>これは、認証した後のトークンの復帰処理で <code>setStatus(QAbstractOAuth::Status::Granted)</code> の実行が必要となります。
ただし、該当のメソッドが <code>protected</code> として実装されているので、 <code>QOAuth1</code> クラスから派生する必要があるのです。</p>

<p>APIの各エンドポイントを設定</p>

<p>まあ、この辺はサンプルと同じです。</p>

<pre><code class="cpp">setTemporaryCredentialsUrl(QUrl("https://api.twitter.com/oauth/request_token"));
setAuthorizationUrl(QUrl("https://api.twitter.com/oauth/authenticate"));
setTokenCredentialsUrl(QUrl("https://api.twitter.com/oauth/access_token"));
</code></pre>

<p>OAuth の認証を、ブラウザを利用するために、</p>

<pre><code class="cpp">setReplyHandler(new QOAuthHttpServerReplyHandler(this));
</code></pre>

<p>としますが、これを実行するとポートを開きに行くので、必要な時のみポートを開くか PIN 認証にする方が良いかもしれません。</p>

<p>この時、</p>

<pre><code class="cpp">connect(this, &amp;QAbstractOAuth::authorizeWithBrowser,
        this, &amp;Twitter::handleAuthorizeWithBrowser);
</code></pre>

<p>としてシグナルをスロットと関連づけて、</p>

<pre><code class="cpp">void Twitter::handleAuthorizeWithBrowser(QUrl url)
{
    QDesktopServices::openUrl(url);
}
</code></pre>

<p>のような感じで実装することで、ブラウザで認証することができます。</p>

<p><code>grant()</code> を呼び出すことで認証開始するので、適当なメソッドでラップします。</p>

<p>認証後は、</p>

<pre><code>connect(this, &amp;QOAuth1::granted, this, &amp;Twitter::authenticated);
</code></pre>

<p>とすることで、 <code>authenticated()</code> を認証時に呼ばされるシグナルとして登録できます。</p>

<p>つぶやくには</p>

<pre><code>    QUrl url("https://api.twitter.com/1.1/statuses/update.json");
    QUrlQuery query(url);
    query.addQueryItem("status", "hogehoge");
    url.setQuery(query);
    QNetworkReply *reply = post(url);
    connect(reply, &amp;QNetworkReply::finished, this, &amp;Twitter::tweetFinished);
</code></pre>

<p>みたいな感じです。</p>

<p>まあ、後から振り返ると割と簡単な部類になると思うけど、いろいろハマってしまいました。</p>

<h2 id="%E3%81%84%E3%82%8D%E3%81%84%E3%82%8D%E5%A4%B1%E6%95%97%E8%AB%87">いろいろ失敗談</h2>

<p>なぜか今回はハマることハマること。</p>

<p>ハマった所をメモとして残しておきます。</p>

<ul>
<li><code>setClientIdentifier()</code> / <code>setClientSharedSecret()</code> と <code>token()</code> / <code>tokenSecret()</code> をなぜかとり間違える
なぜ間違えたし。</li>
<li>設定したはずの、Consumer Key / Consumer Secret が設定されていなくて、<code>QOAuthOobReplyHandler::networkReplyFinished: Host requires authentication</code> とデバッグ主力に出る。
<code>setModifyParametersFunction</code> で今の Stage とライブラリのソースをにらめっこで原因を見つけた。</li>
<li>呟く内容が別の変数を参照していたために空っぽで <code>Missing required parameter: status.</code> と返答が返ってくる。
うん、たしかに設定されてなかったね。</li>
<li><del><code>connect()</code> でラムダ式を使うとなぜか <code>qobject_cast&lt;QNetworkReply*&gt;(sender())</code> が <code>nullptr</code>。</del>
<del>横着せずに 別メソッドを作って設定すると大丈夫だった。何で？</del>
後で試したら大丈夫だった。</li>
</ul>

<p>と、こんな感じ。</p>

<p>結局、時間内になんとかつぶやきを書き込むまでは行けたけど、先のハマりがなければ、もう少し行けたかもしれない。</p>

<h2 id="%E3%83%84%E3%82%A4%E3%83%83%E3%82%BF%E3%83%BC%E3%81%AE%E3%82%A2%E3%83%97%E3%83%AA%E3%82%B1%E3%83%BC%E3%82%B7%E3%83%A7%E3%83%B3%E7%99%BB%E9%8C%B2">ツイッターのアプリケーション登録</h2>

<p><a href="https://apps.twitter.com/app/new">Create an application | Twitter Application Management</a> でアプリケーションを登録できる。</p>

<p>ただし、電話番号を認証していないと <ruby><rb>You must add your mobile phone to your Twitter profile before creating an application.</rb><rp>(</rp><rt>アプリケーションを作成する前に携帯電話を Twitter プロファイルに追加する必要があります。</rt><rp>)</rp></ruby> って怒られる。</p>

<p>一度登録したら、電話番号の登録を解除しても、登録内容の変更とかは問題なくできる模様。</p>

<p>で、登録時、SMSで飛んでくるトークンを何回入力しても弾かれるので、途方にくれてたけど <a href="http://absg.hatenablog.com/entry/2015/01/26/163057">twitterの電話番号認証がうまくいかないとき - やったこと</a> を見たらリロードすれば大丈夫のようなので試して見たらできた。
何じゃそりゃ？</p>

<p>まあともかく、アプリケーションを登録したら、Consumer Key / Consumer Secret を確認しアプリケーションに設定。</p>

<p>これでOK。</p>

<h2 id="%E5%8F%82%E8%80%83">参考</h2>

<ul>
<li><a href="http://www.sharkpp.net/blog/2017/01/28/first-impression-qt-network-authorization.html">はじめての Qt Network Authorization — さめたすたすのお家</a></li>
<li><a href="https://doc-snapshots.qt.io/qt5-5.8/examples-qtnetworkauth.html">Qt Network Authorization Examples | Qt Network Authorization 5.8</a></li>
<li><a href="https://dev.twitter.com/docs">Twitter Developer Documentation — Twitter Developers</a></li>
<li><a href="https://github.com/sharkpp/NetworkStorageAccessSample">sharkpp/NetworkStorageAccessSample: Qt Network Authorization "Network storage access" sample</a></li>
<li><a href="https://syncer.jp/Web/API/Twitter/REST_API/POST/statuses/update/">POST statuses/update - ツイートを投稿する</a> ※情報が古いようだ</li>
<li><a href="http://westplain.sakuraweb.com/translate/twitter/Documentation/REST-APIs/Public-API/POST-statuses-update.cgi">POST statuses/update - Twitter 開発者ドキュメント 日本語訳</a></li>
<li><a href="https://dev.twitter.com/rest/tools/console">API Console — Twitter Developers</a></li>
<li><a href="http://absg.hatenablog.com/entry/2015/01/26/163057">twitterの電話番号認証がうまくいかないとき - やったこと</a></li>
</ul>
]]></content>
        </entry>
            <entry>
            <title type="html"><![CDATA[Qt Network Authorization を使った Dropbox API　の利用]]></title>
            <link href="http://www.sharkpp.net/blog/2017/02/28/dropbox-api-using-qt-network-authorization.html"/>
            <updated>2017-02-28T01:45:00+00:00</updated>
            <id>http://www.sharkpp.net/blog/2017/02/28/dropbox-api-using-qt-network-authorization.html</id>
            <content type="html"><![CDATA[<p>さて、今月も参加した <a href="https://qt-users.connpass.com/event/50191/">Qt 勉強会 @ Nagoya No5(17.02)</a> のまとめ。</p>

<p>※ <a href="https://togetter.com/li/1092293">Qt 勉強会 @ Nagoya No5(17.02) - Togetterまとめ</a> で当日のつぶやきがまとめられています。</p>

<p>今回も、前回に引き続き、<a href="https://doc.qt.io/qt-5/qtnetworkauth-index.html">Qt Network Authorization</a> を色々さわって見ることにしました。</p>

<p>そして、翌日へとオーバーランをしつつ <a href="https://github.com/sharkpp/NetworkStorageAccessSample">sharkpp/NetworkStorageAccessSample: Qt Network Authorization "Network storage access" sample</a> を作りました。</p>

<p>とりあえず、今時点では、Dropbox への認証と、ファイルのアップロードができます。</p>

<h2 id="dropbox-%E3%81%B8%E3%81%AE%E3%82%A2%E3%83%97%E3%83%AA%E3%82%B1%E3%83%BC%E3%82%B7%E3%83%A7%E3%83%B3%E3%81%AE%E7%99%BB%E9%8C%B2">Dropbox へのアプリケーションの登録</h2>

<p>何はともあれまずはここからです。</p>

<p><a href="https://www.dropbox.com/developers">Developers - Dropbox</a> から "Create your app" を、そして <ruby><rb>Choose the type of access you need</rb><rp>(</rp><rt>必要なアクセスの種類を選択する</rt><rp>)</rp></ruby> は、 "App folder" を選び、アプリケーションを登録します。</p>

<p><a href="http://qiita.com/kz_morita/items/3ae70b10351a48a806eb">スタンドアロンアプリでDropbox APIを使ってaccess_tokenを取得する - Qiita</a> が参考になります。</p>

<p>API の詳細は <a href="https://www.dropbox.com/developers/documentation/http/documentation">HTTP - Developers - Dropbox</a> を。</p>

<h2 id="%E8%BA%93%E3%81%84%E3%81%9F%E3%81%A8%E3%81%93%E3%82%8D">躓いたところ</h2>

<p>Qt Network Authorization で Dropbox API へとアクセスしようと頑張りましたが、 Qt Network Authorization がテクノロジープレビューなためなのか、 Dropbox API が特殊なのか、はたまた両方なのか、現状ハマりどころが多い気がします。</p>

<p>OAuth 1 での Tumblr API アクセスは簡単だったんだけどなぁ、と。</p>

<h3 id="%E8%AA%8D%E8%A8%BC%E5%BE%8C%E3%81%AE%E5%8B%95%E4%BD%9C%E3%82%92-oob-%E6%96%B9%E5%BC%8F%E3%81%AB%E3%81%97%E3%81%9F%E3%81%84%E3%81%8C...">認証後の動作を oob 方式にしたいが...</h3>

<p>色々試して、一応 oob 方式での認証ができた。</p>

<p>もう少し調べたら Qt Network Authorization の redditclient サンプルで、コールバックによる認証を扱っていたのでそれを参考にすればできそうな感じではある。
ただ、Dropbox では、コールバックアドレスを厳密に設定するように求めているようなので、あらかじめ <code>http://localhost:12345/</code> や <code>http://localhost:12346/</code> など何個かのローカルアドレスを設定しておき、その中から開けるポートを開いて認証する、ということをすれば多分動くのではないかと思う。</p>

<p>認証を oob (Out-of-band 要するに pin で認証) で行うためには redirect_uri に <code>oob</code> とか空文字を設定するのではなく、省略しないとダメだった。
API ドキュメントをよく読むと確かに書いてあったけど、見逃していたorz</p>

<p><code>QOAuthOobReplyHandler::callback()</code> メソッドで <code>redirect_uri</code> の値が指定できるが、省略はできないようなので、</p>

<pre><code class="cpp">    setModifyParametersFunction([&amp;](Stage stage, QVariantMap* data) {
        if (Stage::RequestingAuthorization == stage || // 認証要求開始
            Stage::RequestingAccessToken   == stage)   // アクセストークン要求開始
        {
            data-&gt;remove(Key::redirectUri);
        }
    });
</code></pre>

<p>と、このように <code>QAbstractOAuth::setModifyParametersFunction()</code> メソッドでパラメータを削除することで対応。</p>

<h2 id="pin-%E3%81%AE%E8%A8%AD%E5%AE%9A%E3%81%AF%E3%81%A9%E3%81%86%E3%81%99%E3%82%8C%E3%81%B0%EF%BC%9F">Pin の設定はどうすれば？</h2>

<p>ソースを読んでも、特に Pin を設定するメソッドとかなさそうだったので、自分でシグナルを発行してあげることにした。</p>

<pre><code class="cpp">    void setPinCode(const QString&amp; code)
    {
        QVariantMap data;
        data.insert(Key::error, "");
        data.insert(Key::code, code); // code = access token
        data.insert(Key::state, currentState);
        Q_EMIT callbackReceived(data);
    }
</code></pre>

<p>こんな感じで <code>callbackReceived</code> シグナルに適当なパラメータをセットするとうまくいった。</p>

<h2 id="%E3%81%AA%E3%81%9C-%22content-type%3A-text%2Fjavascript%22-%E3%81%AA%E3%81%AE%EF%BC%9F">なぜ "Content-Type: text/javascript" なの？</h2>

<p>アクセストークンを取得するためのエンドポイント <code>https://api.dropboxapi.com/oauth2/token</code> の結果がなんと <code>Content-Type: text/javascript</code> で返ってきていた。</p>

<p>そう、 <code>Content-Type: application/json</code> ではなく。</p>

<p>API ドキュメントを確認すると、他の API では、 <code>Content-Type: application/json</code> を返すのにもかかわらず、である。</p>

<p>まあ、ともかく Qt Network Authorization のソースを見ると、<code>Content-Type: text/javascript</code> との比較は埋め込みでどうにもならないので、</p>

<p><code>QNetworkReply</code> を派生して</p>

<pre><code>    void fixContentType()
    {
        setHeader(QNetworkRequest::ContentTypeHeader, "application/json");
    }
</code></pre>

<p>のようなメソッドを追加し、無理やりキャストして</p>

<pre><code>    void networkReplyFinished(QNetworkReply *reply)
    {
        DropboxOAuthOobReply *reply_ = (DropboxOAuthOobReply *)reply;
        reply_-&gt;fixContentType(); // fix content-type, "text/javascript" to "application/json"
        QOAuthOobReplyHandler::networkReplyFinished(reply);
    }
</code></pre>

<p>このように <code>networkReplyFinished()</code> のタイミングで実行することで対応した。</p>

<p>ただ、コンパイラの実装によってはNGかもしれないので、 Qt Network Authorization 側で対応しないとダメだなーと。</p>

<h2 id="%E3%81%AA%E3%81%9C%E3%80%81%E3%82%AF%E3%82%A8%E3%83%AA%E3%81%97%E3%81%8B%E8%A8%AD%E5%AE%9A%E3%81%A7%E3%81%8D%E3%81%AA%E3%81%84%E3%81%AE%E3%81%A7%E3%81%99%E3%81%8B%EF%BC%9F">なぜ、クエリしか設定できないのですか？</h2>

<p>認証ができて、さあ API を呼び出してみよう、と思ったところで、 Dropbox API は REST API を捨てたようで、全ての呼び出しが POST メソッド、必要なパラメータは <code>Dropbox-API-Arg</code> ヘッダ、と特殊なことをしていたために、<code>QAbstractOAuth::post()</code> では処理が足りなかった。</p>

<p>そういう訳なので、自分でヘッダとかポストデータとかを設定できるようなメソッドを実装した。</p>

<h2 id="%E3%83%88%E3%83%BC%E3%82%AF%E3%83%B3%E3%81%AE%E4%BF%9D%E5%AD%98%E3%81%A8%E5%BE%A9%E5%85%83">トークンの保存と復元</h2>

<p>これはハマりどころではないですが、前回できなかった認証後の状態の保存処理も実装しました。</p>

<p>保存時は、<code>QOAuth2AuthorizationCodeFlow::token()</code> の結果を返すだけです。</p>

<pre><code class="cpp">const QString Dropbox::serialize() const
{
    if (QAbstractOAuth::Status::Granted != status()) {
        return "";
    }
    return token();
}
</code></pre>

<p>読み込み時は、<code>setToken()</code> と <code>setStatus()</code> に <code>QAbstractOAuth::Status::Granted</code> を設定して、擬似的に認証済み、と状態を変更します。</p>

<pre><code class="cpp">void Dropbox::deserialize(const QString&amp; token)
{
    if (token.isEmpty()) {
        return;
    }

    setToken(token);
    setStatus(QAbstractOAuth::Status::Granted);
}
</code></pre>

<p>この時、忘れずに認証したよ、のシグナルを定義しているのであれば呼ぶ必要があります。</p>

<h3 id="%E3%81%9D%E3%81%AE%E4%BB%96">その他</h3>

<p>https なので通信内容を横から解析ができないので、結構面倒。
どうにか、中間者攻撃風に途中で通信を解析できる方法を作らないと結構デバッグが面倒。</p>

<h2 id="%E7%9B%AE%E6%A8%99">目標</h2>

<p>とりあえず、Dropbox の アップロードはできたので、ダウンロードや、削除。
<code>redirect_uri</code> を指定しての認証や、 Box などの別のオンラインストレージへのアクセスなどを追加していきたいな、と。</p>

<h2 id="%E5%8F%82%E8%80%83">参考</h2>

<ul>
<li><a href="http://www.slideshare.net/ginpei_jp/dropbox-api-39190004">Dropbox APIさわってみた</a> ※情報が古いっぽい</li>
<li><a href="https://gist.github.com/voluntas/fe9394ce56ef4a305aa14168c09a3991">Dropbox API v2 仕様まとめ · GitHub</a></li>
<li><a href="https://www.dropbox.com/developers/documentation/http/documentation">HTTP - Developers - Dropbox</a></li>
</ul>
]]></content>
        </entry>
            <entry>
            <title type="html"><![CDATA[はじめての Qt Network Authorization]]></title>
            <link href="http://www.sharkpp.net/blog/2017/01/28/first-impression-qt-network-authorization.html"/>
            <updated>2017-01-28T16:50:00+00:00</updated>
            <id>http://www.sharkpp.net/blog/2017/01/28/first-impression-qt-network-authorization.html</id>
            <content type="html"><![CDATA[<p>先日、ちょうど「<a href="https://mag.osdn.jp/17/01/25/161000">設定を統合した「Qt 5.8」が登場 | OSDN Magazine</a>」の記事が目に入り、ふんふんと読んでいたところで、Qt Lite も気になりましたが、それよりも OAuth 2 と OAuth 2 に対応した <a href="https://doc.qt.io/qt-5/qtnetworkauth-index.html">Qt Network Authorization</a> が技術プレビューで追加、と書かれていたので軽く試して見ました。</p>

<p>と言うことで、新しくなってから２回目の参加になる <a href="https://qt-users.connpass.com/event/48608/">Qt 勉強会 @ Nagoya No4(17.01)</a> は、Qt Network Authorization を触って見ることにしました。</p>

<p>※ <a href="https://togetter.com/li/1092291">Qt 勉強会 @ Nagoya No4(17.01) - Togetterまとめ</a> で当日のつぶやきがまとめられています。</p>

<p>結論を先に言うと、 <strong>Qt Network Authorization</strong> は簡単に OAuth 認証をアプリケーションへ組み込めるようです。</p>

<p>気になる点としては、</p>

<ul>
<li>ドキュメントが少ない</li>
<li>認証が通った後「Callback received. Feel free to close this page.」と書かれたページがブラウザで開いたままになる。

<ul>
<li>これは自動で閉じてほしい</li>
</ul></li>
<li>コールバックを受け取るためにポートを自動で開くのでファイヤーウォールなどでブロックしていると失敗する</li>
</ul>

<p>などですが、まあ現状は技術プレビューの段階なので正式版までになんとかなっていてほしいなと。</p>

<h2 id="%E3%81%BE%E3%81%9A%E5%A7%8B%E3%82%81%E3%81%AB">まず始めに</h2>

<p>まあ、大前提として、Qt Network Authorization を利用するには Qt 5.8 以降が必要となります。</p>

<p>次に <a href="http://doc.qt.io/qt-5/qtnetworkauth-index.html">Qt Network Authorization 5.8</a> を参考に、</p>

<p>.pro に</p>

<pre><code>QT += network networkauth
</code></pre>

<p>と追加しましょう。</p>

<p>あとは、 Twitter なり Tumblr なりなんなりへ、アプリケーションを登録して OAuth Consumer Key と Secret Key を取得しておきましょう。
この時、コールバックURLを書く必要がある場合は、適当なアドレスを書いておけば問題ありません。</p>

<h2 id="%E6%B5%81%E3%82%8C">流れ</h2>

<p>最低限のプログラムの流れです。</p>

<p>OAuth 1.x なら QOAuth1 クラスを基底クラスにして処理を実装していけば良いようです。</p>

<p>今回は、 Tumblr で試していたので OAuth 1.0a 対応の QOAuth1 を触りますが、 QOAuth2 でも多分大体同じだと思います。</p>

<p>ただ、 QOAuth1 のドキュメントがないので <a href="http://doc.qt.io/qt-5/qabstractoauth.html">QAbstractOAuth</a> クラスのドキュメントで我慢しましょう。</p>

<h3 id="url%E3%81%AE%E7%99%BB%E9%8C%B2">URLの登録</h3>

<p>とりあえず３種類のURLを登録する必要があります。</p>

<table>
<thead>
<tr>
  <th>メソッド</th>
  <th>URL例</th>
  <th>説明</th>
</tr>
</thead>
<tbody>
<tr>
  <td>setTemporaryCredentialsUrl</td>
  <td>https://api.twitter.com/oauth/request_token<br/>https://www.tumblr.com/oauth/request_token</td>
  <td>トークンの要求</td>
</tr>
<tr>
  <td>setAuthorizationUrl</td>
  <td>https://api.twitter.com/oauth/authenticate<br/>https://www.tumblr.com/oauth/authorize</td>
  <td>認証</td>
</tr>
<tr>
  <td>setTokenCredentialsUrl</td>
  <td>https://api.twitter.com/oauth/access_token<br/>https://www.tumblr.com/oauth/access_token</td>
  <td>アクセストークン取得</td>
</tr>
</tbody>
</table>

<p>いずれも <code>QAbstractOAuth</code> クラスの public メンバメソッドです。</p>

<p>ここに変なのを指定すると <code>QOAuthOobReplyHandler::networkReplyFinished: Protocol "" is unknown</code> と言われたりします。</p>

<h3 id="consumer-key-%E3%81%A8-secret-key-%E3%81%AE%E6%8C%87%E5%AE%9A">Consumer Key と Secret Key の指定</h3>

<p>OAuth Consumer Key と Secret Key を指定します。
これ自体の扱いはいろいろ厄介なのですが、とりあえずそれは置いておきます。</p>

<p><code>QOAuth1.setClientCredentials()</code> に <code>QPair&lt;QString, QString&gt;</code> で指定します。</p>

<p><code>QPair&lt;QString, QString&gt;().first</code> は Consumer Key で</p>

<p><code>QPair&lt;QString, QString&gt;().second</code> は Secret Key です。</p>

<h3 id="%E8%AA%8D%E8%A8%BC%E8%A6%81%E6%B1%82">認証要求</h3>

<p>ここまで設定できたら <code>grant()</code> を呼ぶことで、認証手続きが開始されます。</p>

<h3 id="%E3%83%96%E3%83%A9%E3%82%A6%E3%82%B6%E3%81%A7%E3%81%AE%E8%AA%8D%E8%A8%BC%E8%A6%81%E6%B1%82%E3%81%AE%E3%82%B7%E3%82%B0%E3%83%8A%E3%83%AB">ブラウザでの認証要求のシグナル</h3>

<p><code>grant()</code> を呼ぶと <code>QAbstractOAuth::authorizeWithBrowser</code> シグナルが飛んでくるので、あらかじめスロットで受け取れるようにしておきましょう。</p>

<p><a href="http://doc.qt.io/qt-5/qabstractoauth.html#authorizeWithBrowser">QAbstractOAuth::authorizeWithBrowser</a> の中で引数に指定されたURLをウェブブラウザで開くことでいつも利用しているブラウザを用いた認証ができるような仕組みになっています。</p>

<p>ただ、この処理を実現するために、アプリケーション自身でポートをリッスンし、そのアドレスをコールバックとして指定しているようで、ファイヤーウォールなどでブロックされる可能性があるので注意が必要です。</p>

<h3 id="%E8%AA%8D%E8%A8%BC%E5%AE%8C%E4%BA%86%E3%81%AE%E3%82%B7%E3%82%B0%E3%83%8A%E3%83%AB">認証完了のシグナル</h3>

<p>認証が完了すると <a href="http://doc.qt.io/qt-5/qabstractoauth.html#grant">QOAuth1::granted</a> シグナルが飛ぶので、必要に応じてメッセージを出すなり、UIを有効化させるなりで利用できると思います。</p>

<p>一応、認証後にはアクセストークンも取れるので、それを保存しておけば次回以降は認証が必要なくなると思いますが、すこし試したところうまくいきませんでした。</p>

<h3 id="api%E3%82%92%E5%91%BC%E3%81%B6">APIを呼ぶ</h3>

<p>ここまできたら、後は簡単で <code>QAbstractOAuth</code> に含まれるメンバメソッドの get() / head() / post() を呼ぶだけで、非同期でコンテンツが取得できます。</p>

<p>要求アドレスへ <code>api_key</code> などというパラメータをユーザーがつける必要はないので扱いやすいと思います。</p>

<h2 id="%E3%81%BE%E3%81%A8%E3%82%81">まとめ</h2>

<ul>
<li><strong>Qt Network Authorization</strong> は簡単に OAuth 認証をアプリケーションへ組み込めそう</li>
<li>サンプルがあるからまあなんとかなりそう</li>
<li>ツイッター連携とか実装するのが簡単になるね！</li>
</ul>

<h2 id="%E5%8F%82%E8%80%83">参考</h2>

<ul>
<li><a href="https://doc.qt.io/qt-5/qtnetworkauth-index.html">Qt Network Authorization 5.8</a></li>
<li><a href="https://doc-snapshots.qt.io/qt5-5.8/examples-qtnetworkauth.html">Qt Network Authorization Examples | Qt Network Authorization 5.8</a></li>
<li><a href="http://code.qt.io/cgit/qt/qtnetworkauth.git/">qt/qtnetworkauth.git - Qt Network Authenticators; QtOAuth in particular</a></li>
<li><a href="http://www.sharkpp.net/blog/2014/03/30/oauth-providers-list.html">oAuth 認証を提供しているサービスをまとめてみました — さめたすたすのお家</a></li>
</ul>
]]></content>
        </entry>
            <entry>
            <title type="html"><![CDATA[名古屋Qt勉強会#11 に参加しました]]></title>
            <link href="http://www.sharkpp.net/blog/2014/01/25/qt-nagoya-11.html"/>
            <updated>2014-01-25T17:47:00+00:00</updated>
            <id>http://www.sharkpp.net/blog/2014/01/25/qt-nagoya-11.html</id>
            <content type="html"><![CDATA[<p><a href="http://www.zusaar.com/event/2987003">名古屋Qt勉強会#11 1/25</a></p>

<h2 id="%E8%87%AA%E5%B7%B1%E7%B4%B9%E4%BB%8B">自己紹介</h2>

<p>みんなで自己紹介</p>

<h2 id="qt%E3%81%AAweb%E3%82%B5%E3%83%BC%E3%83%90%E3%83%BCsilk%E3%82%92%E4%BD%BF%E3%81%A3%E3%81%A6%E3%81%BF%E3%82%88%E3%81%86">QtなWebサーバーSilkを使ってみよう</h2>

<p>概要：@taskさんの開発しているQt製Webサーバーの紹介</p>

<p>発表者：<a href="https://twitter.com/IoriAYANE">@ioriayane</a></p>

<p>スライド：<a href="https://skydrive.live.com/view.aspx?resid=EB0105628CDDA274!1705&amp;cid=eb0105628cdda274&amp;app=PowerPoint&amp;wdo=2&amp;authkey=!APnQqbO3wjP_IGk">スライド</a></p>

<p><a href="http://silk.qtquick.me/">Silk</a>とはQtによるQtのためのWebサーバー by <a href="https://twitter.com/task_jp">@task_jp</a></p>

<p>Qtで簡単にHTMLが書ける</p>

<p>艦メモ関連で更新とかでWebサーバーも必要になるからWebサーバーもQtで書けばいいじゃん！ってそそのかされた模様</p>

<p>Silkを動かすには？</p>

<ul>
<li>VPSとか必要(バイナリを動かせる必要がある)</li>
<li>Ubuntuだと公式配布が動く</li>
<li>プラグインも追加できるので</li>
</ul>

<p>注意点</p>

<ul>
<li>キャッシュは設定でoffにしておかないと動的なコンテンツがうまく表示されない(デフォルトではon)</li>
<li>Ubuntu では ポート80 を開くには sudo が必要</li>
<li>実行権限を付けないとQMLがそのまま表示される！</li>
</ul>

<p>負荷的にはまだ気になるほどではない。 負荷ツールなどを使って試してみると良いかも？</p>

<h2 id="qt5%E3%81%A7%E3%82%B0%E3%83%A9%E3%83%95%E8%A1%A8%E7%A4%BA%E3%82%92%E3%81%99%E3%82%8B%E3%82%88%EF%BC%81">Qt5でグラフ表示をするよ！</h2>

<p>発表者：<a href="https://twitter.com/sazus">@sazus</a></p>

<p>スライド：<a href="http://www.slideshare.net/sazuzas/20140125-qt-nagoya11qtgraph">スライド</a></p>

<p>Qwtグラフについて</p>

<p><a href="http://qwt.sourceforge.net/">Qwt</a>は何が出来る？</p>

<ul>
<li>Qt用(QML用は無い)</li>
<li>散布図</li>
<li>棒グラフ</li>
<li>アナログクロック</li>
<li>コンパス</li>
<li>ダイヤル</li>
<li>温度計</li>
<li>ノブ</li>
<li>カウンター</li>
</ul>

<p>最近も更新が続いている</p>

<p>.pro の QwtExamples と QwtPlayground のコメントを外しておくとサンプルとかも一緒にビルドされて幸せになれるかも？</p>

<p>注意点</p>

<ul>
<li>QtCreatorのビルドしたQtのバージョンでプラグインをビルドしないとQtCreatorでウィジェットが認識できないのでバージョンダイアログで確認</li>
<li>Windows用はVCでビルドしないと行けない</li>
</ul>

<h2 id="%E3%82%82%E3%81%8F%E3%82%82%E3%81%8F">もくもく</h2>

<p>今回のもくもくは <a href="https://github.com/sharkpp/hspide">hspide</a> の続き</p>

<p>OpenHSP をビルドしようとしてみたけど、、、ソースを取るところで躓く</p>

<p>あきらめて、依存しているソースを探す処理を追加しようとがんばる。</p>

<p>しばらくさわっていなかったので色々時間がかかった。</p>

<h2 id="%E6%87%87%E8%A6%AA%E4%BC%9A">懇親会</h2>
]]></content>
        </entry>
            <entry>
            <title type="html"><![CDATA[名古屋Qt勉強会#10に参加しました]]></title>
            <link href="http://www.sharkpp.net/blog/2013/10/20/qt-nagoya-10.html"/>
            <updated>2013-10-20T17:12:00+00:00</updated>
            <id>http://www.sharkpp.net/blog/2013/10/20/qt-nagoya-10.html</id>
            <content type="html"><![CDATA[<p><a href="http://www.zusaar.com/event/1027053">名古屋Qt勉強会#10 10/19 on Zusaar</a></p>

<p>名古屋Qt勉強会 #10 に参加しました。</p>

<p>今日はもくもく回</p>

<p>OSC Tokyo とかとかと日程が被ってたので人数が少なかったです。</p>

<h2 id="%E8%87%AA%E5%B7%B1%E7%B4%B9%E4%BB%8B">自己紹介</h2>

<p>とりあえず、全員そろったところで自己紹介</p>

<p>ちょっと、大事なお知らせがあった。</p>

<blockquote class="twitter-tweet"><p>いおりさんに <a href="https://twitter.com/search?q=%23qtngy&src=hash">#qtngy</a> 雑用係を交代していただくことになりました。</p>&mdash; mizmit1222 (@mizmit1222) <a href="https://twitter.com/mizmit1222/statuses/391427552427782144">October 19, 2013</a></blockquote>

<script async src="//platform.twitter.com/widgets.js" charset="utf-8"></script>

<p>お疲れ様でした。</p>

<h2 id="%E3%82%82%E3%81%8F%E3%82%82%E3%81%8F">もくもく</h2>

<p>ひたすらもくもく</p>

<p>昔作った <a href="/blog/2008/07/21/timekeep.html">TimerKeeper</a> を再実装してみようとおもって、もくもくしてみた。</p>

<p>ウィジェットの配置からアクションやスロットまで、ほとんどをレイアウトエディタで作ってみた。</p>

<p>久しぶりにさわったから結構手間取ったけどそれなりに。</p>

<p>リスト部分は QListView でモデルベースが推奨されてるって話だったのでそのように実装してみた。 前に QStanderdItemModel をベースに作ったことはあったけど QAbstractItemModel から作ってみたけど、思ったほど大変じゃなかった、うまくできてるな〜、、、、。</p>

<p>で、リストにヘッダを付けようと思って四苦八苦、、、で、<a href="http://qt-project.org/doc/qt-5.0/qtwidgets/qlistview.html">ドキュメント</a>を見たら、、、<code>"This view does not display horizontal or vertical headers; to display a list of items with a horizontal header, use QTreeView instead."</code> (訳:"このビューは、水平または垂直のヘッダを表示しません、代わりにQTreeViewを使用し、水平方向のヘッダーとアイテムのリストを表示してください。") だと、、、!?</p>

<p>いや、、、そういえば前にも引っかかった気が、、、 WIN32API にどっぷりだと勘違いしちゃうのかな、、、？</p>

<p>たしかに、デザイナのプロパティにそれらしい項目ないなーと思ってはいたけど、、、</p>

<p>で、ウィジェットを QTreeView に変更したらそのまま表示できた、、、モデルベースはうまくできてる、便利！</p>

<p>なんかヘッダが「1、2、3」って表示されてるので<a href="http://qt-project.org/doc/qt-5.0/qtcore/qabstractitemmodel.html#setHeaderData">QAbstractItemModel::setHeaderData()</a>で値を指定してみたけどうまく行かなかった、、、ので、もしかして？っと思って試してたら、値を指定しても保存してくれていない様子、<a href="http://qt-project.org/doc/qt-5.0/qtcore/qabstractitemmodel.html#headerData">QAbstractItemModel::headerData()</a>で値を返したら表示されるようになった。</p>

<p>で、、、 hspide からファイルのドラッグ＆ドロップの処理をコピペ（おい）</p>

<p>アイコンもとりあえずなのを使って実装。</p>

<p>リストからの除外時に<a href="https://developer.apple.com/library/mac/documentation/Darwin/Reference/ManPages/man3/utime.3.html">ファイルのタイムスタンプを戻す処理</a>を実装、、、でとりあえず時間内に機能が動くようになった。</p>

<p>今回は、結構ギリギリな感じではあったけどQtのパワーを改めて感じたもくもくであった。</p>

<p>成果物つ <a href="https://github.com/sharkpp/TimestampFreezer">sharkpp/TimestampFreezer</a></p>

<p><img src="/images/2013_1019_tf_ss.png" alt="TimestampFreezer on Mac" /></p>

<p>バイナリはもう少し実装したらな感じかな、、、(汗)</p>

<h2 id="%E6%87%87%E8%A6%AA%E4%BC%9A">懇親会</h2>

<p>手羽先＆ピザ 美味しかったです。</p>
]]></content>
        </entry>
    </feed>