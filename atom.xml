<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
    <title><![CDATA[さめたすたすのお家]]></title>
    <link href="http://www.sharkpp.net/atom.xml" rel="self"/>
    <link href="http://www.sharkpp.net/"/>
    <updated>2021-09-07T13:09:29+00:00</updated>
    <id>http://www.sharkpp.net/</id>
            <author>
            <name><![CDATA[sharkpp]]></name>                    </author>
        <generator uri="http://sculpin.io/">Sculpin</generator>
            <entry>
            <title type="html"><![CDATA[Synology のパッケージのビルド方法について調べてみた]]></title>
            <link href="http://www.sharkpp.net/blog/2021/09/07/synology-package-building.html"/>
            <updated>2021-09-07T22:05:00+00:00</updated>
            <id>http://www.sharkpp.net/blog/2021/09/07/synology-package-building.html</id>
            <content type="html"><![CDATA[<p>Synology の NAS で利用可能なパッケージを作ってみようと思い、色々と調べてみました。
調べている最中に DSM 7.0 も正式リリースされたので、合わせてそのバージョンも調査の対象としました。</p>

<p>また、macOSでパッケージを作る場合の方法についても書きました。</p>

<p><a href="/images/20210907_dsm7_pkg_install_wizard_04.png"><img src="/thumbs/0f8b6887e5a96352c15cf2f29782e189-640x640.png" alt="パッケージインストールウィザード4"></a></p>

<h2 id="%E3%83%91%E3%83%83%E3%82%B1%E3%83%BC%E3%82%B8%E3%81%AE%E3%83%93%E3%83%AB%E3%83%89%E3%81%AB%E5%BF%85%E8%A6%81%E3%81%AA%E7%92%B0%E5%A2%83">パッケージのビルドに必要な環境</h2>

<p>ほぼ同じですが例としてあげられているUbuntuのLTSバージョンに変更がされているようです。</p>

<table>
<thead>
<tr>
  <th></th>
  <th>6.2</th>
  <th>7.0</th>
</tr>
</thead>
<tbody>
<tr>
  <td>OS</td>
  <td>64bitの一般的なLinux環境</br>(例として Ubuntu 16.04 LTS)</td>
  <td>64bitの一般的なLinux環境とルート権限</br>(例として Ubuntu 18.04 LTS)</td>
</tr>
<tr>
  <td>bash</td>
  <td>>= 4.1.5</td>
  <td>>= 4.1.5</td>
</tr>
<tr>
  <td>Python</td>
  <td>>= 2.7.3</td>
  <td>>= 2.7.3</td>
</tr>
</tbody>
</table>

<p>どちらも、NASに直接インストールすることはせず、必要であれば Docker パッケージをインストールしてツールキットを動かしてほしいと書かれています。</p>

<p>macOS は残念ながら一般的なLinux環境ではないので <a href="https://github.com/sharkpp/synology-toolkit-for-non-linux">synology-toolkit-for-non-linux</a> というソリューションを作って開発できるようにしてみました。</p>

<h2 id="dsm-6-%E3%81%A8-dsm-7-%E3%81%A8%E3%81%AE%E3%83%91%E3%83%83%E3%82%B1%E3%83%BC%E3%82%B8%E3%81%AE%E3%83%93%E3%83%AB%E3%83%89%E6%89%8B%E9%A0%86%E3%81%AE%E9%81%95%E3%81%84">DSM 6 と DSM 7 とのパッケージのビルド手順の違い</h2>

<p>どちらも <code>EnvDeploy</code> や <code>PkgCreate․py</code> への引数の与え方に違いはなさそうです。</p>

<p>ただ、処理の内容には多少の違いがあるようです。</p>

<h3 id="dsm-6.x">DSM 6.x</h3>

<p>利用可能なプラットフォーム：</p>

<blockquote>
  <p>6281 alpine alpine4k apollolake armada370 armada375 armada37xx armada38x armadaxp avoton braswell broadwell broadwellnk bromolow cedarview comcerto2k denverton dockerx64 evansport geminilake grantley hi3535 kvmx64 monaco purley qoriq rtd1296 v1000 x64</p>
</blockquote>

<ol>
<li><code>pkgscripts/EnvDeploy -v 6.2 -p x64</code></li>
<li><code>pkgscripts/PkgCreate.py -v 6.2 -p x64 -c ExamplePackage</code></li>
</ol>

<h3 id="dsm-7.x">DSM 7.x</h3>

<p>利用可能なプラットフォーム：</p>

<blockquote>
  <p>bromolow cedarview armadaxp armada370 armada375 evansport comcerto2k avoton alpine braswell apollolake grantley alpine4k monaco broadwell kvmx64 armada38x denverton rtd1296 broadwellnk purley armada37xx geminilake v1000</p>
</blockquote>

<ol>
<li><code>pkgscripts-ng/EnvDeploy -v 7.0 -p braswell</code></li>
<li><code>pkgscripts-ng/PkgCreate.py -v 7.0 -p braswell -c ExamplePackage</code></li>
</ol>

<p>破壊的変更により署名のフェーズがなくなっているようで指定可能な引数が少し変わっていました。</p>

<h2 id="%E3%83%91%E3%83%83%E3%82%B1%E3%83%BC%E3%82%B8%E6%89%8B%E5%8B%95%E3%81%AE%E3%82%A4%E3%83%B3%E3%82%B9%E3%83%88%E3%83%BC%E3%83%AB">パッケージ手動のインストール</h2>

<p>出来たパッケージを試すには、Synology NAS にログインし、パッケージセンターから「手動インストール」を行うことで可能です。</p>

<p><a href="/images/20210907_dsm7_pkg_install_wizard_01.png"><img src="/thumbs/58b7f462919d59664f552ef77692453e-640x640.png" alt="パッケージインストールウィザード1"></a> <a href="/images/20210907_dsm7_pkg_install_wizard_02.png"><img src="/thumbs/0f35caa7d01f65a9fa3ccb4a13634cd8-640x640.png" alt="パッケージインストールウィザード2"></a> <a href="/images/20210907_dsm7_pkg_install_wizard_03.png">&lt;img src="/thumbs/9065d65d3300b28ef4d44bbeff637082-640x640.png" alt="パッケージインストールウィザード3></a> <a href="/images/20210907_dsm7_pkg_install_wizard_04.png"><img src="/thumbs/0f8b6887e5a96352c15cf2f29782e189-640x640.png" alt="パッケージインストールウィザード4"></a></p>

<p>インストールすると、試した ExamplePackage では、こんな感じにアイコンなどが設置されました。</p>

<p><a href="/images/20210907_dsm7_pkg_installed_01.png"><img src="/thumbs/ad8bc929b38fad225bfc4ef559e72b96-640x640.png" alt="パッケージインストール後1"></a> <a href="/images/20210907_dsm7_pkg_installed_02.png"><img src="/thumbs/7153e28d5b00b6d1ff2caed92e4881af-640x640.png" alt="パッケージインストール後2"></a> <a href="/images/20210907_dsm7_pkg_installed_03.png"><img src="/thumbs/310c04c17c8ae499a3338d6345d4a71e-640x640.png" alt="パッケージインストール後3"></a></p>

<p>なお、後述のパッケージのお作法がちゃんとされていないと、インストール時に「ファイル形式が正しくありません、パッケージ管理者に連絡してください」("Invalid file format. Please contact the package developer.") と表示されるようです。</p>

<p><a href="/images/20210907_dsm7_pkg_invalid_file_type.png"><img src="/thumbs/bfeabb265236ddd91b028498dd139b03-640x640.png" alt="ファイル形式が正しくありません"></a></p>

<h2 id="dsm-6.x-%E3%81%8B%E3%82%89-7.0-%E3%81%B8%E5%AE%9F%E8%A3%85%E3%82%92%E5%A4%89%E6%9B%B4%E3%81%99%E3%82%8B%E5%A0%B4%E5%90%88%E3%81%AE%E4%B8%BB%E3%81%AA%E5%A4%89%E6%9B%B4%E7%82%B9">DSM 6.x から 7.0 へ実装を変更する場合の主な変更点</h2>

<p><a href="https://global.download.synology.com/download/Document/Software/DeveloperGuide/Firmware/DSM/7.0/enu/DSM_Developer_Guide_7_0_Beta.pdf">DSM Developer Guide 7.0 BETA</a> の <code>Breaking Changes in 7.0</code> (7.0 での破壊的変更) によると、DSM 6.x から DSM 7.x へは、パッケージフレームワークの次の点が変更されているようです。
下記の内容に従っていないと、パッケージのビルドが成功してもインストールすることができないなどが起こるようです。</p>

<table>
<thead>
<tr>
  <th>#</th>
  <th>項目</th>
  <th>DSM 6.x</th>
  <th>DSM 7.x</th>
</tr>
</thead>
<tbody>
<tr>
  <td>1</td>
  <td><a href="https://help.synology.com/developer-guide/privilege/privilege_config.html"><code>conf/privilege</code></a></td>
  <td>低い特権での実行をサポートしていないパッケージの場合は必須ではない</td>
  <td>必須</td>
</tr>
<tr>
  <td>2</td>
  <td><code>INFO.sh</code></td>
  <td>必須ではない</td>
  <td><code>package</code></br><code>version</code></br><code>os_min_ver="7.0-40000"</code> ※もしくはそれ以上</br><code>description</code></br><code>arch</code></br><code>maintainer</code></br>以上のフィールドが必要。</br>そうでないない場合は、ビルドは成功するがインストール時に「ファイル形式が正しくありません、パッケージ管理者に連絡してください」("Invalid file format. Please contact the package developer.") と表示される。</td>
</tr>
<tr>
  <td>3</td>
  <td>パッケージ署名</td>
  <td>必要</td>
  <td>不要(つまり、gnupg も不要)</td>
</tr>
<tr>
  <td>4</td>
  <td><code>conf/privilege</code> <code>defaults.run-as</code></td>
  <td><code>"package"</code></br><code>"system"</code></br><code>"root"</code></td>
  <td><code>"package"</code></br><code>"root"</code></br>特権操作はリソースワーカー経由での実行へ変更が必要</td>
</tr>
<tr>
  <td>5</td>
  <td>ホームパス</td>
  <td><code>/var/packages/[package_name]/target</code></td>
  <td><code>/var/packages/[package_name]/home</code></br>権限は <code>0700</code> <code>(rwx------)</code></td>
</tr>
<tr>
  <td>6</td>
  <td><code>PACKAGE_ICON.PNG</code></td>
  <td>72 x 72</td>
  <td>64 x 64</td>
</tr>
<tr>
  <td>7</td>
  <td>FHS ディレクトリの所有者</td>
  <td></td>
  <td><code>target</code> などの FHS ディレクトリは <code>conf/privilege</code> に従って新しい特権設定が行われます。</td>
</tr>
<tr>
  <td>8</td>
  <td>パッケージログの場所</td>
  <td><code>/var/log/synopkg.log</code></td>
  <td>パッケージ操作ログ：<code>/var/log/synopkg.log</code></br>コントロールスクリプトログ：<code>/var/log/packages/[package_name].log</code></td>
</tr>
<tr>
  <td>9</td>
  <td>システム起動時の開始確認</td>
  <td>されない</td>
  <td><code>INFO.sh</code>の<code>precheckstartstop="yes"</code>の場合にされる</td>
</tr>
</tbody>
</table>

<h2 id="pkgcreate%E2%80%A4py-%E3%81%AE%E4%BD%BF%E3%81%84%E6%96%B9">PkgCreate․py の使い方</h2>

<p>とりあえず <code>pkgscripts/PkgCreate.py -v {バージョン} -p {プラットフォーム} -c {パッケージ名}</code> でことは足りる。</p>

<pre><code class="console">usage: PkgCreate.py [-h] [-p PLATFORMS] [-e ENV_SECTION] [-v ENV_VERSION] [-x DEP_LEVEL] [-X PARALLEL_PROJ] [-b BRANCH] [-s SUFFIX] [-c] [--no-collecter] [-L] [-l] [-B] [-I] [-i]
                    [-P PARALLEL] [--build-opt BUILD_OPT] [--install-opt INSTALL_OPT] [--print-log] [--no-tee] [--min-sdk SDK_VER]
                    package

固定引数:
  package               対象のパッケージ

オプションの引数:
  -h, --help            このヘルプメッセージを表示して終了
  -p PLATFORMS          ターゲットプラットフォームを指定。 省略時では、build_env/ 以下の利用可能なプラットフォームを検出。
  -e ENV_SECTION, --env ENV_SECTION
                        環境セクションを SynoBuildConf/depends で指定。省略時は [default] 。
  -v ENV_VERSION, --version ENV_VERSION
                        ターゲットDSMバージョンを手動で指定。
  -x DEP_LEVEL          ビルド依存レベルを指定
  -X PARALLEL_PROJ      SynoBuild　並列ビルドプロジェクト。 0 は 2 つの並列ジョブでビルドすることを意味。
  -b BRANCH             パッケージのブランチを指定。
  -s SUFFIX             ビルド環境のフォルダのサフィックス (build_env/) を指定。
  -c                    パッケージを収集。
  --no-collecter        すべての収集動作をスキップ。
  -L                    プロジェクトをリンクしません。
  -l                    プロジェクトを更新してリンク。
  -B                    プロジェクトを構築しない。
  -I                    プロジェクトをインストールしない。
  -i                    プロジェクトのみをインストール。
  -P PARALLEL           並列プラットフォーム、省略時は 2
  --build-opt BUILD_OPT 
                        SynoBuild への引数パス
  --install-opt INSTALL_OPT
                        SynoInstall への引数パス
  --print-log           SynoBuild/SynoInstall のエラーログを印字。
  --no-tee              stdout/stderr　をログに記録しません。
  --min-sdk SDK_VER     最小 SDK バージョン、省略時=6.2
</code></pre>

<h2 id="envdeploy-%E3%82%84-pkgcreate%E2%80%A4py-%E3%81%AA%E3%81%A9%E3%81%A7%E5%88%A9%E7%94%A8%E5%8F%AF%E8%83%BD%E3%81%AA%E3%83%97%E3%83%A9%E3%83%83%E3%83%88%E3%83%95%E3%82%A9%E3%83%BC%E3%83%A0">EnvDeploy や PkgCreate․py などで利用可能なプラットフォーム</h2>

<p>型番からプラットフォームを調べる場合は <a href="https://kb.synology.com/en-global/DSM/tutorial/What_kind_of_CPU_does_my_NAS_have">What kind of CPU does my Synology NAS have?</a> を参照する。</p>

<table>
<thead>
<tr>
  <th>プラットフォーム</th>
  <th>6.2</th>
  <th>7.0</th>
</tr>
</thead>
<tbody>
<tr>
  <td>6281</td>
  <td>利用可能</td>
  <td>−</td>
</tr>
<tr>
  <td>dockerx64</td>
  <td>利用可能</td>
  <td>−</td>
</tr>
<tr>
  <td>hi3535</td>
  <td>利用可能</td>
  <td>−</td>
</tr>
<tr>
  <td>qoriq</td>
  <td>利用可能</td>
  <td>−</td>
</tr>
<tr>
  <td>x64</td>
  <td>利用可能</td>
  <td>−</td>
</tr>
<tr>
  <td>alpine</td>
  <td>利用可能</td>
  <td>利用可能</td>
</tr>
<tr>
  <td>alpine4k</td>
  <td>利用可能</td>
  <td>利用可能</td>
</tr>
<tr>
  <td>apollolake</td>
  <td>利用可能</td>
  <td>利用可能</td>
</tr>
<tr>
  <td>armada370</td>
  <td>利用可能</td>
  <td>利用可能</td>
</tr>
<tr>
  <td>armada375</td>
  <td>利用可能</td>
  <td>利用可能</td>
</tr>
<tr>
  <td>armada37xx</td>
  <td>利用可能</td>
  <td>利用可能</td>
</tr>
<tr>
  <td>armada38x</td>
  <td>利用可能</td>
  <td>利用可能</td>
</tr>
<tr>
  <td>armadaxp</td>
  <td>利用可能</td>
  <td>利用可能</td>
</tr>
<tr>
  <td>avoton</td>
  <td>利用可能</td>
  <td>利用可能</td>
</tr>
<tr>
  <td>braswell</td>
  <td>利用可能</td>
  <td>利用可能</td>
</tr>
<tr>
  <td>broadwell</td>
  <td>利用可能</td>
  <td>利用可能</td>
</tr>
<tr>
  <td>broadwellnk</td>
  <td>利用可能</td>
  <td>利用可能</td>
</tr>
<tr>
  <td>bromolow</td>
  <td>利用可能</td>
  <td>利用可能</td>
</tr>
<tr>
  <td>cedarview</td>
  <td>利用可能</td>
  <td>利用可能</td>
</tr>
<tr>
  <td>comcerto2k</td>
  <td>利用可能</td>
  <td>利用可能</td>
</tr>
<tr>
  <td>denverton</td>
  <td>利用可能</td>
  <td>利用可能</td>
</tr>
<tr>
  <td>evansport</td>
  <td>利用可能</td>
  <td>利用可能</td>
</tr>
<tr>
  <td>geminilake</td>
  <td>利用可能</td>
  <td>利用可能</td>
</tr>
<tr>
  <td>grantley</td>
  <td>利用可能</td>
  <td>利用可能</td>
</tr>
<tr>
  <td>kvmx64</td>
  <td>利用可能</td>
  <td>利用可能</td>
</tr>
<tr>
  <td>monaco</td>
  <td>利用可能</td>
  <td>利用可能</td>
</tr>
<tr>
  <td>purley</td>
  <td>利用可能</td>
  <td>利用可能</td>
</tr>
<tr>
  <td>rtd1296</td>
  <td>利用可能</td>
  <td>利用可能</td>
</tr>
<tr>
  <td>v1000</td>
  <td>利用可能</td>
  <td>利用可能</td>
</tr>
</tbody>
</table>

<h2 id="macos%E3%81%A7%E3%83%91%E3%83%83%E3%82%B1%E3%83%BC%E3%82%B8%E3%82%92%E3%83%93%E3%83%AB%E3%83%89%E3%81%99%E3%82%8B%E3%81%AB%E3%81%AF%EF%BC%9F">macOSでパッケージをビルドするには？</h2>

<p>macOS で簡単にパッケージがビルドできるように <a href="https://github.com/sharkpp/synology-toolkit-for-non-linux">synology-toolkit-for-non-linux</a> というソリューションを作りました。</p>

<p>使い方は、まずレポジトリを clone して、環境を構築。</p>

<pre><code class="console">$ git clone https://github.com/sharkpp/synology-toolkit-for-non-linux.git
$ cd synology-toolkit-for-non-linux
$ docker/build.sh
</code></pre>

<p>次に、 <code>EnvDeploy</code> でツールキットをダウンロード</p>

<pre><code class="console">$ pkgscripts/EnvDeploy -v 7.0 -p braswell
</code></pre>

<p>最後に <code>source</code> フォルダにパッケージのソースを入れ <code>PkgCreate․py</code> でビルド。
ここでは <a href="https://github.com/SynologyOpenSource/ExamplePackages/tree/main/ExamplePackage"><code>ExamplePackage</code></a> を利用。</p>

<pre><code class="console">$ git clone https://github.com/SynologyOpenSource/ExamplePackages.git source/ExamplePackages
$ mv source/ExamplePackages/ExamplePackage source
$ pkgscripts/PkgCreate.py -v 7.0 -p braswell -c ExamplePackage
</code></pre>

<p><code>result_spk</code> フォルダにビルドされたパッケージが置かれます。</p>

<h2 id="%E5%8F%82%E8%80%83%E3%81%AB%E3%81%AA%E3%82%8A%E3%81%9D%E3%81%86%E3%81%AA%E3%83%91%E3%83%83%E3%82%B1%E3%83%BC%E3%82%B8">参考になりそうなパッケージ</h2>

<p><a href="https://github.com/search?q=os_min_ver+filename%3AINFO&amp;type=Code&amp;ref=advsearch&amp;l=&amp;l=">Search · os_min_ver filename:INFO</a> で適当に検索してリストアップしてみました。</p>

<table>
<thead>
<tr>
  <th>パッケージ名</th>
  <th>DSM</th>
  <th>概要</th>
</tr>
</thead>
<tbody>
<tr>
  <td><a href="https://github.com/SynologyOpenSource/ExamplePackages/tree/main/ExamplePackage"><code>ExamplePackage</code></a></td>
  <td>7.0</td>
  <td>公式サンプルパッケージ</td>
</tr>
<tr>
  <td><a href="https://github.com/SynologyOpenSource/ExamplePackages/tree/main/nmap"><code>nmap</code></a></td>
  <td>7.0</td>
  <td>公式サンプル nmap パッケージ</td>
</tr>
<tr>
  <td><a href="https://github.com/prabirshrestha/synology-package-template"><code>synology-package-template</code></a></td>
  <td>7.0/6.x</td>
  <td>サンプルパッケージ</td>
</tr>
<tr>
  <td><a href="https://github.com/tailscale/tailscale-synology"><code>Tailscale package</code></a></td>
  <td>7.0/6.x</td>
  <td>Tailscale VPN パッケージ？</td>
</tr>
<tr>
  <td><a href="https://github.com/vladlenas/Synology-TorrServer"><code>TorrServer package</code></a></td>
  <td>7.0/6.x</td>
  <td>TorrServerパッケージ</td>
</tr>
<tr>
  <td><a href="https://github.com/runfalk/synology-wireguard"><code>WireGuard package</code></a></td>
  <td>7.0/6.x</td>
  <td>WireGuardパッケージ</td>
</tr>
<tr>
  <td><a href="https://github.com/reidemei/synology-autorun"><code>autorun</code></a></td>
  <td>7.0/6.x</td>
  <td>Synology NASで外付けドライブ（USB / eSATA）を接続するときにスクリプトを実行</td>
</tr>
</tbody>
</table>

<h2 id="%E5%8F%82%E8%80%83">参考</h2>

<ul>
<li><a href="https://github.com/SynologyOpenSource/pkgscripts-ng/tree/DSM6.0">GitHub - SynologyOpenSource/pkgscripts-ng at DSM6.0</a></li>
<li><a href="https://help.synology.com/developer-guide/getting_started/prepare_environment.html">Prepare Envrionment · GitBook</a></li>
<li><a href="https://github.com/SynologyOpenSource/minimalPkg/issues/5">Unable to Sign package with GPG key · Issue #5 · SynologyOpenSource/minimalPkg · GitHub</a></li>
<li><a href="https://qiita.com/yagince/items/deba267f789604643bab">Docker Ubuntu18.04でtzdataをinstallするときにtimezoneの選択をしないでinstallする - Qiita</a></li>
<li><a href="https://kb.synology.com/ja-jp/DSM/tutorial/What_kind_of_CPU_does_my_NAS_have">Synology NAS に搭載されている CPU の種類は？ - Synology ナレッジセンター</a></li>
<li><a href="https://global.download.synology.com/download/Document/Software/DeveloperGuide/Firmware/DSM/7.0/enu/DSM_Developer_Guide_7_0_Beta.pdf">DSM Developer Guide 7.0 BETA</a></li>
<li><a href="https://global.download.synology.com/download/Document/Software/DeveloperGuide/Firmware/DSM/6.0/enu/DSM_Developer_Guide_6_0.pdf">Synology DSM6.0 Developer Guide</a></li>
</ul>
]]></content>
        </entry>
            <entry>
            <title type="html"><![CDATA[Synology DS416play の OS を DSM 7.0 へアップグレードしてみた]]></title>
            <link href="http://www.sharkpp.net/blog/2021/08/07/synology-ds416play-upgrade-dsm7.html"/>
            <updated>2021-08-07T19:35:00+00:00</updated>
            <id>http://www.sharkpp.net/blog/2021/08/07/synology-ds416play-upgrade-dsm7.html</id>
            <content type="html"><![CDATA[<p><a href="http://web.archive.org/web/20170709043315if_/https://www.synology.com/ja-jp/products/DS216play">Synology DS416play</a> の OS を DSM 7.0 へアップグレードした時の記録。</p>

<p>7月中旬に DSM 7.0 の正式リリースがでるも、しばらくは様子見にしていたけど、致命的な不具合もなさそうだし <a href="https://www.synology.com/ja-jp/DSM70/SynologyPhotos">Synology Photos</a> を使ってみたくなったのでアップグレードしてみることとした。</p>

<h1 id="%E3%82%A2%E3%83%83%E3%83%97%E3%82%B0%E3%83%AC%E3%83%BC%E3%83%89">アップグレード</h1>

<p>DSM の更新のページで、DSM 7 のアップグレードボタンをクリック。</p>

<p><a href="/images/20210807_ds416play_01_dsm624_upgrade.png"><img src="/thumbs/188aec8942418697fa41872a185a0a40-640x640.png" alt="DSM 6.2"></a> <a href="/images/20210807_ds416play_02_dsm624_upgrade.png"><img src="/thumbs/17a18e29156680f0d987732fa442a9f2-640x640.png" alt="DSM 6.2"></a></p>

<p>インストール中も UI が途切れることなく進めた。
通信途切れるとページが真っ白とかになるけどそういうことはなかった。</p>

<ol>
<li>DSMの更新</li>
<li>再起動</li>
<li>システムデータベースのアップデート</li>
<li>パッケージの更新</li>
</ol>

<p>の順。</p>

<p><a href="/images/20210807_ds416play_03_dsm7_install.png"><img src="/thumbs/29df10ae6ad82b4b6814d7f42a3ccf72-640x640.png" alt="DSMの更新中"></a> <a href="/images/20210807_ds416play_04_dsm7_install.png"><img src="/thumbs/dddaa7e13f7061ae8577b50be95bcae1-640x640.png" alt="再起動中"></a> <a href="/images/20210807_ds416play_05_dsm7_install.png"><img src="/thumbs/b551480188c96166802ec0c35c4306fe-640x640.png" alt="システムデータベースのアップデート"></a> <a href="/images/20210807_ds416play_06_dsm7_install.png"><img src="/thumbs/e3fe86d4f3664cd59dd2a16eeee68f5b-640x640.png" alt="パッケージの更新中"></a></p>

<p>ログイン画面も変わってた。</p>

<p><a href="/images/20210807_ds416play_07_dsm7_login.png"><img src="/thumbs/da61554afd17274f152083ba81a85ef7-640x640.png" alt="ログイン画面"></a></p>

<p>ダッシュボードも少し変わってる。</p>

<p><a href="/images/20210807_ds416play_08_dsm7_dashboard.png"><img src="/thumbs/0083183d2ae9355e05a3a1f94fed1448-640x640.png" alt="ダッシュボード"></a></p>

<p>Python3 は OS 組み込みになったようなのでアンインストール</p>

<p><a href="/images/20210807_ds416play_09_dsm7_python3_uninstall.png"><img src="/thumbs/f3cfc56a747556aff9323c6ca8a010d5-640x640.png" alt="ダッシュボード"></a></p>

<p>Moments や Photo Station は <a href="https://www.synology.com/ja-jp/DSM70/SynologyPhotos">Synology Photos</a> に自動で更新された様子。</p>

<p><a href="/images/20210807_ds416play_10_dsm7_photos.png"><img src="/thumbs/07b82974089ba34c11617214a41eb829-640x640.png" alt="Synology Photos"></a> <a href="/images/20210807_ds416play_11_dsm7_photos.png"><img src="/thumbs/9b310ab8721da76a433f67fb7f07df66-640x640.png" alt="Synology Photos"></a></p>

<p>アップデート後の情報</p>

<p><a href="/images/20210807_ds416play_12_dsm7.png"><img src="/thumbs/c6f157c3dc867fed0c9c6241f94a0462-640x640.png" alt="DSM 7.0"></a></p>

<h1 id="%E7%8F%BE%E7%8A%B6%E6%B0%97%E3%81%8C%E3%81%A4%E3%81%84%E3%81%9F%E3%81%93%E3%81%A8">現状気がついたこと</h1>

<ul>
<li>Chromecast with Google TV 向けの Synology Photos アプリは現状なさそう。
Photo アプリは と接続できない様子なので表示するには <a href="https://kb.synology.com/en-my/DSM/help/SynologyPhotos/Android?version=7#b_28">Synology Knowledge Center</a> の To cast photos to TVs or external devices: を参考にキャストするしかなさそう</li>
</ul>
]]></content>
        </entry>
            <entry>
            <title type="html"><![CDATA[Ionic 5 でモバイル＆デスクトップアプリを試してみた]]></title>
            <link href="http://www.sharkpp.net/blog/2021/04/30/tryout-ionic-mobile-desktop.html"/>
            <updated>2021-04-30T21:35:00+00:00</updated>
            <id>http://www.sharkpp.net/blog/2021/04/30/tryout-ionic-mobile-desktop.html</id>
            <content type="html"><![CDATA[<p>モバイルでもウェブでもデスクトップでも動くサービスを作る方法を調べて、とりあえず React で実装できそうな <a href="https://ionicframework.com/">Ionic 5</a> を試してみることにしました。</p>

<h2 id="%E6%BA%96%E5%82%99">準備</h2>

<p>まず、 ionic のコンソールツールをインストールします。</p>

<pre><code class="console">$ npm install -g @ionic/cli
</code></pre>

<p>ios 向けを開発する場合はさらに</p>

<pre><code class="console">$ npm install -g ios-sim
$ brew install ios-deploy
</code></pre>

<h2 id="%E3%83%97%E3%83%AD%E3%82%B8%E3%82%A7%E3%82%AF%E3%83%88%E3%81%AE%E4%BD%9C%E6%88%90">プロジェクトの作成</h2>

<p>コンソールツールがインストールできたら、プロジェクトを作成します。</p>

<p>引数は次のような感じで指定します。</p>

<pre><code class="console">$ ionic start &lt;アプリ名&gt; &lt;テンプレート名&gt; --type=react --capacitor
$ cd &lt;アプリ名&gt;
</code></pre>

<p><strong>&lt;アプリ名></strong></p>

<p>myApp など、プロジェクトの名前を指定</p>

<p><strong>&lt;テンプレート名></strong></p>

<p><code>--type=react</code> で指定可能なテンプレート名の種類</p>

<table>
<thead>
<tr>
  <th>テンプレート名</th>
  <th>説明</th>
</tr>
</thead>
<tbody>
<tr>
  <td><code>blank</code></td>
  <td>空白のスタータープロジェクト</td>
</tr>
<tr>
  <td><code>list</code></td>
  <td>リスト付きの開始プロジェクト</td>
</tr>
<tr>
  <td><code>my-first-app</code></td>
  <td>ギャラリー付きのカメラを構築するサンプルアプリケーション</td>
</tr>
<tr>
  <td><code>sidemenu</code></td>
  <td>コンテンツ領域にナビゲーションを備えたサイドメニューを備えた開始プロジェクト</td>
</tr>
<tr>
  <td><code>tabs</code></td>
  <td>シンプルなタブ付きインターフェースを備えた開始プロジェクト</td>
</tr>
<tr>
  <td><code>conference</code></td>
  <td>Ionicが提供するすべてを披露するキッチンシンク(ライブラリが提供する機能を網羅するサンプル)アプリケーション</td>
</tr>
</tbody>
</table>

<p><strong>その他</strong></p>

<table>
<thead>
<tr>
  <th>パラメータ</th>
  <th>説明</th>
</tr>
</thead>
<tbody>
<tr>
  <td><code>--capacitor</code></td>
  <td>Capacitor(クロスプラットフォームなネイティブランタイム)を利用するため</td>
</tr>
</tbody>
</table>

<h2 id="capacitor-%E3%82%92%E5%88%A9%E7%94%A8%E3%81%99%E3%82%8B%E3%81%9F%E3%82%81%E3%81%AE%E8%BF%BD%E5%8A%A0%E8%A8%AD%E5%AE%9A">Capacitor を利用するための追加設定</h2>

<h3 id="capacitor-%E3%81%AE%E5%88%9D%E6%9C%9F%E5%8C%96">Capacitor の初期化</h3>

<pre><code class="console">$ npx cap init &lt;アプリ名&gt; &lt;アプリId&gt; --web-dir=build --npm-client=yarn
</code></pre>

<p><strong>&lt;アプリ名></strong></p>

<p>ionic start で指定した値と同じものを指定。</p>

<p><strong>&lt;アプリId></strong></p>

<p><code>com.example.app</code> みたいな値。</p>

<p><strong>その他</strong></p>

<table>
<thead>
<tr>
  <th>パラメータ</th>
  <th>説明</th>
</tr>
</thead>
<tbody>
<tr>
  <td><code>--web-dir=build</code></td>
  <td>プロジェクトで作成したウェブアセットのディレクトリ</td>
</tr>
<tr>
  <td><code>--npm-client=yarn</code></td>
  <td><code>npm</code> or <code>yarn</code> ※ npm 7 以降で互換性の問題が発生している模様なので Yarn を選択</td>
</tr>
</tbody>
</table>

<h3 id="native-%E3%83%97%E3%83%A9%E3%83%83%E3%83%88%E3%83%95%E3%82%A9%E3%83%BC%E3%83%A0%E3%81%AE%E8%BF%BD%E5%8A%A0">Native プラットフォームの追加</h3>

<pre><code class="console">$ ionic build
$ npx cap add &lt;プラットフォーム&gt;
</code></pre>

<p>プラットフォームの追加前に <code>ionic build</code> が必要。</p>

<p>実行しない場合、</p>

<pre><code class="console">$ npx cap add electron
[error] Capacitor could not find the web assets directory "~/test1/build".
    Please create it, and make sure it has an index.html file. You can change
    the path of this directory in capacitor.config.json.
    More info: https://capacitor.ionicframework.com/docs/basics/configuring-your-app
</code></pre>

<p>とメッセージが出ます。</p>

<p><strong>&lt;プラットフォーム></strong></p>

<p>指定可能な値</p>

<table>
<thead>
<tr>
  <th>プラットフォーム</th>
  <th>説明</th>
</tr>
</thead>
<tbody>
<tr>
  <td><code>android</code></td>
  <td>Android 向けの構成</td>
</tr>
<tr>
  <td><code>ios</code></td>
  <td>iOS 向けの構成</td>
</tr>
<tr>
  <td><code>electron</code></td>
  <td>(Electronで実装される)デスクトップ向けの構成</td>
</tr>
</tbody>
</table>

<h3 id="native-%E3%83%97%E3%83%A9%E3%83%83%E3%83%88%E3%83%95%E3%82%A9%E3%83%BC%E3%83%A0%E3%81%AE%E5%AE%9F%E8%A1%8C">Native プラットフォームの実行</h3>

<pre><code class="console">$ ionic build
$ npx cap copy
$ npx cap open &lt;プラットフォーム&gt;
</code></pre>

<p><strong>&lt;プラットフォーム></strong></p>

<p>npx cap add で指定可能な値と同じ</p>

<h3 id="%E3%83%AA%E3%83%AA%E3%83%BC%E3%82%B9%E3%83%93%E3%83%AB%E3%83%89">リリースビルド</h3>

<p><strong>electron</strong></p>

<p>事前に electron-packager をインストール</p>

<pre><code class="console">$ npm install -g electron-packager
</code></pre>

<p>パラメータを指定して実行</p>

<pre><code class="console">$ electron-packager ./electron &lt;アプリ名&gt; --platform=&lt;プラットフォーム&gt; --arch=&lt;アーキテクチャ&gt; [オプションフラグ...]
</code></pre>

<p><strong>&lt;アプリ名></strong></p>

<p>ionic start で指定した値と同じものを指定。</p>

<p><strong>&lt;プラットフォーム>と&lt;アーキテクチャ></strong></p>

<table>
<thead>
<tr>
  <th>プラットフォーム</th>
  <th>アーキテクチャ</th>
  <th>概要</th>
</tr>
</thead>
<tbody>
<tr>
  <td><code>darwin</code></td>
  <td><code>x64</code></td>
  <td>macOS</td>
</tr>
<tr>
  <td><code>win32</code></td>
  <td><code>x64</code></td>
  <td>Windows 64ビット向け</td>
</tr>
</tbody>
</table>

<p><strong>[オプションフラグ]</strong></p>

<table>
<thead>
<tr>
  <th>オプションフラグ</th>
  <th>概要</th>
</tr>
</thead>
<tbody>
<tr>
  <td><code>--arch=...</code></td>
  <td><code>all</code> 、または1つ以上：<code>ia32</code>、<code>x64</code>、<code>armv7l</code>、<code>arm64</code>、<code>mips64el</code>（複数の場合はカンマ区切り）。 デフォルトはホストのアーチです</td>
</tr>
<tr>
  <td><code>--icon=...</code></td>
  <td>アプリのアイコンとして使用するアイコンファイルへのローカルパス。注：形式はプラットフォームによって異なります。</td>
</tr>
<tr>
  <td><code>--overwrite</code></td>
  <td>プラットフォームの出力ディレクトリがすでに存在する場合は、スキップするのではなく置き換えます</td>
</tr>
<tr>
  <td><code>--platform=...</code></td>
  <td><code>all</code> 、または1つ以上：<code>darwin</code>、<code>linux</code>、<code>mas</code>、<code>win32</code>（複数の場合はカンマ区切り）。デフォルトはホストのプラットフォームです</td>
</tr>
</tbody>
</table>

<p>その他、かなり多いので <a href="https://github.com/electron/electron-packager/blob/master/usage.txt">usage.txt</a> を参考に。</p>

<h2 id="%E3%81%BE%E3%81%A8%E3%82%81">まとめ</h2>

<p>ざっと試したところ、テンプレートの保守がされてないのか、色々躓く所があった。</p>

<p>特に、 Electron サポートは散々で、<code>blank</code> や <code>my-first-app</code> や <code>tabs</code> ぐらいしかまともに試せない感じ。
<code>my-first-app</code> もだいたい動くけどカメラは動作していないと思う...</p>

<table>
<thead>
<tr>
  <th>プラットフォーム</th>
  <th>起動</th>
  <th>ビルド</th>
</tr>
</thead>
<tbody>
<tr>
  <td><code>ios</code></td>
  <td><code>npx cap open ios</code></td>
  <td>XCodeで作業 <a href="https://www.joshmorony.com/deploying-capacitor-applications-to-ios-development-distribution/">Deploying Capacitor Applications to iOS (Development &amp; Distribution)</a> を参考</td>
</tr>
<tr>
  <td><code>android</code></td>
  <td><code>npx cap open android</code></td>
  <td><a href="https://www.joshmorony.com/deploying-capacitor-applications-to-android-development-distribution/">Deploying Capacitor Applications to Android (Development &amp; Distribution)</a> を参考</td>
</tr>
<tr>
  <td><code>electron</code></td>
  <td><code>npx cap open electron</code></td>
  <td><code>electron-packager ./electron &lt;アプリ名&gt;</code></td>
</tr>
</tbody>
</table>

<h2 id="%E5%8F%82%E8%80%83">参考</h2>

<ul>
<li><a href="https://ionicframework.com/docs/intro/cli">Installing Ionic - Ionic Documentation</a></li>
<li><a href="https://capacitorjs.com/docs/getting-started/with-ionic">Using Capacitor with Ionic - Capacitor</a></li>
<li><a href="https://forum.ionicframework.com/t/tutorial-guide-to-build-for-ionic-react-electron-app/176872/4">Tutorial/guide to build for Ionic-React-Electron app - Capacitor - Ionic Forum</a></li>
<li><a href="https://devdactic.com/ionic-desktop-electron/">Building Ionic Desktop Apps with Capacitor and Electron | Devdactic - Ionic Tutorials</a></li>
<li><a href="https://forum.ionicframework.com/t/my-first-app-starter-npm-update-not-working/200076/3">My-first-app starter npm update not working - Ionic Framework - Ionic Forum</a></li>
<li><a href="https://stackoverflow.com/questions/59921618/ionic-react-error-argument-of-type-is-not-assignable-for-correct-code">reactjs - Ionic React, error "Argument of type is not assignable" for correct code - Stack Overflow</a></li>
<li><a href="https://github.com/electron/electron/issues/13740#issuecomment-439069134">serviceworker: Request scheme 'file' is unsupported · Issue #13740 · electron/electron · GitHub</a></li>
<li><a href="https://ionicframework.com/docs/developing/ios#ios-sim-ios-deploy">iOS Development - Ionic Documentation</a></li>
<li><a href="https://www.joshmorony.com/deploying-capacitor-applications-to-ios-development-distribution/">Deploying Capacitor Applications to iOS (Development &amp; Distribution) | joshmorony - Learn Ionic &amp; Build Mobile Apps with Web Tech</a></li>
<li><a href="https://www.joshmorony.com/deploying-capacitor-applications-to-android-development-distribution/">Deploying Capacitor Applications to Android (Development &amp; Distribution) | joshmorony - Learn Ionic &amp; Build Mobile Apps with Web Tech</a></li>
</ul>
]]></content>
        </entry>
            <entry>
            <title type="html"><![CDATA[Chromecast with Google TV の開封の儀と３ヶ月ぐらい使ってみた]]></title>
            <link href="http://www.sharkpp.net/blog/2021/02/28/unboxing-and-used-three-month-of-chromecast-with-google-tv.html"/>
            <updated>2021-02-28T22:45:00+00:00</updated>
            <id>http://www.sharkpp.net/blog/2021/02/28/unboxing-and-used-three-month-of-chromecast-with-google-tv.html</id>
            <content type="html"><![CDATA[<p>10月1日に発表され、これは欲しいって思いつつ日本発売の情報が流れずやきもきしていたところで、
やっと11月25日に発売された <a href="https://store.google.com/jp/product/chromecast_google_tv">Chromecast with Google TV</a> を
しばらく使ってみた感想などを毎度のごとくの開封の儀とともに記事にしました。</p>

<p>今度の Chromecast はスマホなしでいろいろできていいね！</p>

<h2 id="%E9%96%8B%E5%B0%81%E3%81%AE%E5%84%80">開封の儀</h2>

<p>箱はまあ、一般的(？)な化粧箱に入った感じですね。
周りを全部写真撮ったので六面体の展開図風にしてみました。</p>

<p><a href="/images/20201128_chromecast_box.jpg"><img src="/thumbs/6650ec61e09199521c279f1ecbc8994e-640x640.jpg" alt="Chromecast箱"></a></p>

<p>ぱかっとな。</p>

<p><a href="/images/20201128_chromecast_box_open.jpg"><img src="/thumbs/a8be2c001947c34f7907a49c5a16cf05-640x640.jpg" alt="Chromecast箱オープン"></a></p>

<p>付属品はこんな感じ。</p>

<p><a href="/images/20201128_chromecast_open_all.jpg"><img src="/thumbs/4c6fa44000361f934e27bc77ebaf7cde-640x640.jpg" alt="Chromecast箱の中身"></a></p>

<h2 id="%E3%82%BB%E3%83%83%E3%83%88%E3%82%A2%E3%83%83%E3%83%97">セットアップ</h2>

<p>テレビの裏のHDMIに接続。 
最終的には<a href="https://www.amazon.co.jp/dp/B071JTQW19/">HDMI切替器</a>を買って切り替えできるようにしています。</p>

<p><a href="/images/20201128_chromecast_connected.jpg"><img src="/thumbs/e5f4826f55917d2eb6c777c5b090ce11-640x640.jpg" alt="Chromecastテレビに接続"></a></p>

<p>Chromecasy 起動</p>

<p><a href="/images/20201128_chromecast_logo.jpg"><img src="/thumbs/8df9d169db2ecd8a6a5fbd6e9bb08f3a-640x640.jpg" alt="Chromecastロゴ"></a></p>

<p>リモコンをセットアップ</p>

<p><a href="/images/20201128_chromecast_remocon_setup.jpg"><img src="/thumbs/a7e34c5302e3833d8324551119147bdb-640x640.jpg" alt="Chromecastリモコンセットアップ"></a></p>

<p>QRコードでスマホアプリと連携することでセットアップが簡単にできました。</p>

<p>※スマホなしでもセットアップできたと思う...</p>

<p><a href="/images/20201128_chromecast_app_setup.jpg"><img src="/thumbs/86fe527fc915953a97173642f776f3ba-640x640.jpg" alt="Chromecastアプリセットアップ(テレビで)"></a>
<a href="/images/20201128_chromecast_app_setup_phone1.png"><img src="/thumbs/ead66e12ba066e67d6df27b39ba08696-640x640.png" alt="Chromecastアプリセットアップ(スマホで１)"></a>
<a href="/images/20201128_chromecast_app_setup_phone2.png"><img src="/thumbs/797aef6b50dfb96157ecd303160c795b-640x640.png" alt="Chromecastアプリセットアップ(スマホで２)"></a></p>

<p>ホーム画面を見ると Netflixなどなどある程度いろいろインストールされてますが Abema 以外の初期インストールされた動画配信サービスのアプリは一旦アンインストール。</p>

<p><a href="/images/20201128_chromecast_home_screen.jpg"><img src="/thumbs/bb6d95a290d1e9b6ed2d69aeb0c66ba4-640x640.jpg" alt="Chromecastホーム画面"></a></p>

<p>そして、GyaO! をインストール。
これも、QRコードで簡単に連携可能。</p>

<p><a href="/images/20201128_gyao_pairing.jpg"><img src="/thumbs/46dfc00402b5c9abc5ef1f641b832480-640x640.jpg" alt="Chromecast GyaO! ペアリング"></a></p>

<p>のちに、Abemaもアカウント登録＆QRコードで連携して、マイリストを同期しました。</p>

<h2 id="%EF%BC%93%E3%83%B6%E6%9C%88%E3%81%90%E3%82%89%E3%81%84%E4%BD%BF%E3%81%A3%E3%81%A6%E3%81%BF%E3%81%9F%E6%84%9F%E3%81%98">３ヶ月ぐらい使ってみた感じ</h2>

<p>３ヶ月みっちりというよりゆるーく使ってみた感じの感想。</p>

<p><strong>GyaO! アプリ</strong></p>

<ul>
<li>現時点ではホーム画面にお勧めなどが列挙されないのがイマイチ。</li>
<li>Android スマホ版やウェブ版だと配信されているバラエティー番組などが配信されていない

<ul>
<li>たとえば、「吉田類の酒場放浪記」や「秘密のケンミンSHOW極」など</li>
</ul></li>
<li>映画の音量調整がイマイチ。

<ul>
<li>効果音と声の音量がアンマッチで効果音に合わせると声が聞き取り辛く、声に合わせると効果音が大きすぎる感じ。</li>
</ul></li>
</ul>

<p><strong>Abema</strong></p>

<ul>
<li>マイビデオへの登録に操作が多いのでちょっとむず</li>
<li>スマホアプリからキャストで見るのが一番楽...</li>
<li>ホーム画面に番組が出るのはいいかも</li>
</ul>

<p><strong>TVer</strong></p>

<p>入れたけどそんなに使ってない...</p>

<p>アニメあんまりないので...</p>

<h2 id="%E3%81%BE%E3%81%A8%E3%82%81">まとめ</h2>

<p>現状は、ほぼアニメでたまに映画とかみてるけど、買ってよかったガジェットにランクインな感じ。</p>

<p>7000円ぐらいするけど、元は十分取れると思う。</p>
]]></content>
        </entry>
            <entry>
            <title type="html"><![CDATA[HAPPY NEW YEAR 2021]]></title>
            <link href="http://www.sharkpp.net/blog/2021/01/01/happy-new-year-2021.html"/>
            <updated>2021-01-01T22:30:00+00:00</updated>
            <id>http://www.sharkpp.net/blog/2021/01/01/happy-new-year-2021.html</id>
            <content type="html"><![CDATA[<p>明けましておめでとうございます。</p>

<p>今年もまだまだ新型コロナは収まりそうになさそうですが、それに負けることなく過ごせればと思います。</p>

<p>では、今年の目標をば。</p>

<h2 id="%E7%9B%AE%E6%A8%99">目標</h2>

<h3 id="%E3%83%9B%E3%83%BC%E3%83%A0%E3%83%9A%E3%83%BC%E3%82%B8%E3%81%AE%E6%9B%B4%E6%96%B0">ホームページの更新</h3>

<p>最低でも月一ぐらいでは更新したいと思います。
つまるところ、それには何かしらネタを仕込む必要があるかなと。</p>

<p>とりあえず、ReactJSを使ってウェブアプリをちょこちょこ作りつつ、Qtでも何か作ってみようかなと。</p>

<p>あとは、React native とかも気になっているところ。</p>

<h3 id="%E3%83%9B%E3%83%BC%E3%83%A0%E3%83%9A%E3%83%BC%E3%82%B8%E3%81%AE%E3%83%93%E3%83%AB%E3%83%89%E3%82%B7%E3%82%B9%E3%83%86%E3%83%A0%E3%81%AE%E6%94%B9%E5%96%84">ホームページのビルドシステムの改善</h3>

<p>現状、php 製の Sculpin でホームページをビルドしてます。
が、年末に記事を書いたらビルドが失敗して慌てて応急手当てをした感じで、さすがにこれはなんとかしないとって感じをひしひしと。
で、 Sculpin もそこそこ更新はされているのでいいかもだけど、せっかくなので GatsbyJS で構築してみようかと。
まあ、思い立ったのは去年のことだけど...</p>

<p>あと、CI も GitHub Action に変えて GitHub のみで完結できそうなので変更したいところ。</p>

<p>あとは、今更 http もないだろうから https にもしてみたいな。</p>

<h3 id="%E3%81%9D%E3%81%AE%E4%BB%96">その他</h3>

<p>その他には...</p>

<ul>
<li>ガジェットの記事</li>
<li>DIYの記事</li>
</ul>

<p>とかも随時していきたいところ。</p>

<p>ああ、あとは、お金貯めて Apple MacBook Air (13", M1, 2020) とか欲しいな... そろそろノートPC買い換えたい...</p>

<h2 id="%E3%81%82%E3%81%91%E3%81%8A%E3%82%81%E3%81%93%E3%81%A8%E3%82%88%E3%82%8D">あけおめことよろ</h2>

<p>ではでは、今年もまた一年、よろしくお願いいたします。</p>

<p><img src="/images/20210101_first_sunrise.jpg" alt="2021年の初日の出" /></p>
]]></content>
        </entry>
            <entry>
            <title type="html"><![CDATA[大晦日@2020]]></title>
            <link href="http://www.sharkpp.net/blog/2020/12/31/new-years-eve-2020.html"/>
            <updated>2020-12-31T21:49:00+00:00</updated>
            <id>http://www.sharkpp.net/blog/2020/12/31/new-years-eve-2020.html</id>
            <content type="html"><![CDATA[<h2 id="1-%E5%B9%B4%E3%82%92%E6%8C%AF%E3%82%8A%E8%BF%94%E3%82%8A">1 年を振り返り</h2>

<p>今年も残すところ大晦日の今日だけとなりました。
つまりは99.7%は終わった感じですね。</p>

<p>世間的なところではコロナ禍が猛威を振るい、今だに収まらないというのは去年の今頃は全く予想できなかったです。
それによって働き方も様変わりし、旅行やイベントも自粛ムードになるなど影響がいたるところに出ている感じですね。</p>

<p>個人的なところでは、お仕事は変わらずだけど、コロナ禍の影響を受けて在宅ワークがメインになったりしました。</p>

<blockquote>
  <p>自分自身のことについてはまあ諸々の理由があって勉強会もほとんど参加できなかったのが残念ですが、来年の後半ぐらいから多少マシになる... といいなと。</p>
</blockquote>

<p>これは、まだもう少しイベントがありそうだけどなんとかしたいですね。</p>

<p>そして、今年も恒例(？)の仮想除夜の鐘アプリ「<a href="https://sharkpp.github.io/joya_no_kane/">除夜の鐘</a>」のリンクを貼っておきます。</p>

<p>さて、前置きいつも通り書いたところで、今年の反省をば。</p>

<h2 id="%E7%B5%90%E6%9E%9C">結果</h2>

<p>まずは、今年の正月 <a href="/blog/2020/01/01/happy-new-year-2020.html">HAPPY NEW YEAR 2020</a> に掲げた目標です。</p>

<ul>
<li>定期的なホムペの更新</li>
<li>ホームページを GitHub Action ＆ GatsbyJS ベースに移行してモダーンな感じに</li>
<li>PWAとかQtとかもろもろ勉強... というか遊ぶ</li>
<li>Rust頑張ってみる... Rust難しい...</li>
<li><a href="https://github.com/sharkpp/FrameExtract">FrameExtract</a> を完成させる</li>
</ul>

<p>と、こんな感じ。</p>

<p>成果としては...</p>

<p>ちょこちょこやっているけど、如何せん時間があまり取れずなかなか進まない感じ。</p>

<p>8月から11月までブログに書けるような内容も何もできていないので、ぐぬぬ。</p>

<p>今年も<a href="https://togetter.com/li/1450054">よんた@keita44_f4 さんの日本酒の感想ツイートまとめ</a>を~~更新してました~~大晦日に慌てて更新しました(汗
お酒たくさん飲めて羨ましい...</p>

<h2 id="%E5%8F%8D%E7%9C%81">反省</h2>

<p>作りたいものはあるけど、なかなか時間がない、というか体力がない感じをなんとかしたい感じ。</p>

<p>と言うあたりで今年の反省会終了です。</p>

<p><img src="/images/20201231_herring_soba.jpg" alt="にしん蕎麦" /></p>

<p>それでは来年もよろしくお願いします。</p>
]]></content>
        </entry>
            <entry>
            <title type="html"><![CDATA[GoPro HERO 6 で撮影した結果 4GB で分割されてしまった映像を繋げ Full HD H264 へエンコードする方法]]></title>
            <link href="http://www.sharkpp.net/blog/2020/12/29/concat-gopro-4gb-files-and-encode.html"/>
            <updated>2020-12-29T17:12:00+00:00</updated>
            <id>http://www.sharkpp.net/blog/2020/12/29/concat-gopro-4gb-files-and-encode.html</id>
            <content type="html"><![CDATA[<p>さてさて、超お久しぶりにブログを書いている sharkpp です。</p>

<p>半年以上更新が止まってしまいましたが、ぼちぼちと再開をさせたいなと思ってる次第...</p>

<p>とりあえず、今回は GoPro HERO 6 で撮影した結果 4GB で分割されてしまった映像を繋げ Full HD H264 へエンコードする方法を忘れないように残しておきたいと思います。</p>

<h2 id="%E8%A6%81%E7%B4%84">要約</h2>

<p>分割された 4K 動画から、結合された Full HD 動画への変換（メタ情報を含む）は</p>

<ol>
<li><code>ls GX0[0-9]*.MP4 | while read L ; do echo file $L ; done &gt; list.txt</code></li>
<li><code>ffmpeg -y -f concat -i list.txt -bsf:v h264_mp4toannexb -vcodec libx264 -vf scale=1920:-1 -r 29.97 -map 0:v -map 0:a -map 0:d -copy_unknown GX0Y0000.MP4</code></li>
<li><code>exiftool -tagsfromfile $(cat list.txt | cut -d " " -f 2 | tail -n 1) "-gps*" -unsafe GX0Y0000.MP4</code></li>
</ol>

<p>このような感じでコマンドを打てば変換できそう。</p>

<h2 id="%E3%81%AF%E3%81%98%E3%82%81%E3%81%AB">はじめに</h2>

<p>久しぶりに GoPro HERO 6 を引っ張り出してきて、よーし張り切って 4K 60fps で撮影しちゃうぞ！みたいなことをしちゃったわけです。</p>

<p>で、結果として...</p>

<pre><code class="console">$ ls -lh
total 52606864
-rwxrwxrwx@ 1 user  staff   3.7G 12 13 12:17 GX012316.MP4
-rwxrwxrwx  1 user  staff   3.7G 12 13 12:24 GX022316.MP4
-rwxrwxrwx  1 user  staff   3.7G 12 13 12:31 GX032316.MP4
-rwxrwxrwx  1 user  staff   3.7G 12 13 12:38 GX042316.MP4
-rwxrwxrwx  1 user  staff   3.7G 12 13 12:45 GX052316.MP4
-rwxrwxrwx  1 user  staff   3.7G 12 13 12:52 GX062316.MP4
-rwxrwxrwx  1 user  staff   1.0G 12 13 12:54 GX072316.MP4
</code></pre>

<p>約 4GB に分割されたファイルができるわけです。</p>

<p>そして、手元には空き容量と性能が乏しいPCがあり、とてもそのまま再生できる感じではない、さてこれをどうやって素材として使おうか、と...</p>

<h2 id="%E7%9B%AE%E6%A8%99">目標</h2>

<p>目指すべき目標をまず設定します。</p>

<table>
<thead>
<tr>
  <th>項目</th>
  <th>元素材</th>
  <th>目標</th>
</tr>
</thead>
<tbody>
<tr>
  <td>ファイル</td>
  <td>最大約 4GB に分割された複数のファイル</td>
  <td>1 ファイル</td>
</tr>
<tr>
  <td>コンテナ</td>
  <td>MP4</td>
  <td>変更なし</td>
</tr>
<tr>
  <td>映像</td>
  <td>H265 3840 x 2160 59.94 fps</td>
  <td>H264 1920 x 1080 29.97 fps</td>
</tr>
<tr>
  <td>音声</td>
  <td>AAC (LC) 48000 Hz, stereo, 128 kb/s</td>
  <td>変更なし</td>
</tr>
</tbody>
</table>

<p>あとは、埋め込まれているメタ情報もなるべくそのままにしたい。</p>

<h2 id="%E3%82%84%E3%82%8A%E6%96%B9">やり方</h2>

<p>4 GB で分割されたファイルを単純に結合すると結合部分が無音になるという情報があったので色々試してみる。</p>

<p>とりあえず、空き容量も少ないので mp4box で２ファイルを結合してみる。</p>

<pre><code class="console">$ mp4box
-bash: mp4box: command not found
</code></pre>

<p>...の前に mp4box がないので Homebrew でインストール</p>

<pre><code class="console">$ brew install mp4box
</code></pre>

<p>で、改めて...</p>

<pre><code class="console">$ mp4box -add GX010000.MP4 -cat GX020000.MP4 -new GX0X0000.MP4
$ ffmpeg -y -i GX0X0000.MP4 -ab 192 GX0X0000.mp3
</code></pre>

<p>そして ffmpeg でも</p>

<pre><code class="console">$ echo file GX010000.MP4 &gt;list.txt
$ echo file GX020000.MP4 &gt;&gt;list.txt
$ ffmpeg -f concat -i list.txt -c copy GX0Y0000.MP4
$ ffmpeg -y -i GX0Y0000.MP4 -ab 192 GX0Y0000.mp3
</code></pre>

<p>それぞれ結合した映像の音声部分を mp3 形式で抜き出し Audacity で波形を確認結果...</p>

<p>mp4box を使わず ffmpeg 単体でもとくに音声の途切れもなさそう、ということがわかった。</p>

<p>なので、</p>

<pre><code class="console">$ ls GX0[0-9]*.MP4 | while read L ; do echo file $L ; done &gt; list.txt
$ ffmpeg -y -f concat -i list.txt -bsf:v h264_mp4toannexb -vcodec libx264 -vf scale=1920:-1 -r 29.97 \
         -map 0:v -map 0:a -map 0:d -copy_unknown GX0Y0000.MP4
</code></pre>

<p>||速度｜45分の動画のエンコード時間|
|60 fps|約 0.150 倍|約5時間|
|30 fps|約 0.165 倍|約4時間30分|</p>

<p>あと、どうしてもGPSの情報がコピーできなかったので exiftool でコピーする</p>

<pre><code class="console">$ exiftool -tagsfromfile $(cat list.txt | cut -d " " -f 2 | tail -n 1) "-gps*" -unsafe GX0Y0000.MP4
</code></pre>

<p>蛇足として <a href="https://code.g-nab.net/archives/73">GoPro HERO7 で撮影した動画からGPS情報をgpxファイルとして抜き出す方法 – Bang's Tmp returned</a> にて知りましたが、 <a href="https://github.com/juanmcasillas/gopro2gpx">GitHub - juanmcasillas/gopro2gpx: Parse the gpmd stream for GOPRO moov track (MP4) and extract the GPS info into a GPX (and kml) file.</a> なるツールで GoPro で撮影した動画からGPS情報を抜き出すことができるようですね。</p>

<h1 id="%E3%81%BE%E3%81%A8%E3%82%81">まとめ</h1>

<ol>
<li><code>ls GX0[0-9]*.MP4 | while read L ; do echo file $L ; done &gt; list.txt</code></li>
<li><code>ffmpeg -y -f concat -i list.txt -bsf:v h264_mp4toannexb -vcodec libx264 -vf scale=1920:-1 -r 29.97 -map 0:v -map 0:a -map 0:d -copy_unknown GX0Y0000.MP4</code></li>
<li><code>exiftool -tagsfromfile $(cat list.txt | cut -d " " -f 2 | tail -n 1) "-gps*" -unsafe GX0Y0000.MP4</code></li>
</ol>

<p>この手順で、 分割された 4K 動画から Full HD 動画へ含まれるメタ情報も含めいい感じにエンコードすることができました。</p>

<h2 id="%E5%8F%82%E8%80%83">参考</h2>

<ul>
<li><a href="https://exiftool.org/forum/index.php?topic=1424.msg15307#msg15307">Import and export of metadata</a></li>
<li><a href="https://superuser.com/questions/996223/using-ffmpeg-to-copy-metadata-from-one-file-to-another">Using ffmpeg to copy metadata from one file to another - Super User</a></li>
<li><a href="http://tech.ckme.co.jp/ffmpeg_frate.shtml">フレームレート及び画面サイズを指定する：tech.ckme.co.jp</a></li>
<li><a href="https://askubuntu.com/questions/707397/batch-convert-h-265-mkv-to-h-264-with-ffmpeg-to-make-files-compatible-for-re-enc">command line - Batch convert H.265 mkv to H.264 with ffmpeg to make files compatible for re-encoding - Ask Ubuntu</a></li>
<li><a href="https://qiita.com/riversun/items/d09d8e596a20ec1798f3">【ffmpeg】動画の解像度を指定してリサイズ、アスペクト比を維持したまま解像度を変更する、回転する - Qiita</a></li>
<li><a href="https://www.ffmpeg.org/ffmpeg-formats.html#Metadata-1">FFmpeg Formats Documentation</a></li>
<li><a href="https://qiita.com/tzhaya/items/6b423872d2ab9f31bf30">exiftoolを使って画像のIPTC情報をcsvでまとめて設定する - Qiita</a></li>
<li><a href="https://exiftool.org/faq.html">ExifTool FAQ</a></li>
</ul>
]]></content>
        </entry>
            <entry>
            <title type="html"><![CDATA[Hubot アダプタを TypeScript を使って作ってみた]]></title>
            <link href="http://www.sharkpp.net/blog/2020/07/29/hubot-adapter-with-typescript.html"/>
            <updated>2020-07-29T23:46:00+00:00</updated>
            <id>http://www.sharkpp.net/blog/2020/07/29/hubot-adapter-with-typescript.html</id>
            <content type="html"><![CDATA[<h2 id="typescrpt-%E3%81%A7%E5%AE%9F%E8%A3%85%E3%81%99%E3%82%8B-hubot-%E3%82%A2%E3%83%80%E3%83%97%E3%82%BF">TypeScrpt で実装する Hubot アダプタ</h2>

<p><a href="https://hubot.github.com/docs/adapters/development/">Development adapter | HUBOT</a> を参考に、起動時に bot へと生成したメッセージを受け渡すだけを行うアダプタを TypeScript で実装してみました。</p>

<p>この記事では次のような名称を利用しているので適時読み替えてください。</p>

<table>
<thead>
<tr>
  <th>項目</th>
  <th>名称</th>
</tr>
</thead>
<tbody>
<tr>
  <td>アダプタプロジェクト名</td>
  <td><code>hubot-sample-adapter</code></td>
</tr>
<tr>
  <td>テスト用のHubotプロジェクト名</td>
  <td><code>hubot-test</code></td>
</tr>
<tr>
  <td>アダプタプロジェクトの親フォルダ</td>
  <td><code>~/</code></td>
</tr>
</tbody>
</table>

<h3 id="typescript-%E3%81%AE%E3%82%A4%E3%83%B3%E3%82%B9%E3%83%88%E3%83%BC%E3%83%AB">TypeScript のインストール</h3>

<p>まず環境を整えていきます。</p>

<pre><code class="console">$ mkdir hubot-sample-adapter
$ cd hubot-sample-adapter
$ npm init -y
</code></pre>

<p>追加で、</p>

<pre><code class="console">$ npm install --save --dev typescript hubot @types/hubot
$ npx tsc --init
</code></pre>

<p>として TypeScript のツール用の設定をします。</p>

<h3 id="visual-studio-code-%E3%81%A7%E6%A7%8B%E6%96%87%E3%83%81%E3%82%A7%E3%83%83%E3%82%AF">Visual Studio Code で構文チェック</h3>

<p>Visual Studio Code で <a href="https://marketplace.visualstudio.com/items?itemName=dbaeumer.vscode-eslint">ESLint</a> を使って構文チェックをできるようにします。</p>

<pre><code class="console">$ npm install --save --dev eslint prettier eslint-config-airbnb-base eslint-config-prettier eslint-plugin-prettier eslint-plugin-import
$ npm install --save --dev @typescript-eslint/parser @typescript-eslint/eslint-plugin
</code></pre>

<p>インストールを行うと <code>The ESLint extension will use 'node_modules/eslint' for validation, which is installed locally in 'hubot-sample-adapter'. If you trust this version of ESLint, press 'Allow', otherwise press 'Do Not Allow'. Press 'Cancel' to disable ESLint for this session.</code> と確認されるので <code>Allow</code> を選択します。</p>

<p>とりあえず、</p>

<table>
<thead>
<tr>
  <th>項目</th>
  <th>説明など</th>
</tr>
</thead>
<tbody>
<tr>
  <td>Javascript style guide</td>
  <td>airbnb-base</td>
</tr>
<tr>
  <td>構文チェック</td>
  <td>基本全てエラー</td>
</tr>
<tr>
  <td>no-unused-vars</td>
  <td><code>_</code> から始まる変数以外の未使用をエラーとする。(TypeScriptの構文を優先)</td>
</tr>
</tbody>
</table>

<p>こんな感じで、設定ファイル <code>.eslintrc.js</code> は</p>

<pre><code class="javascript">module.exports = {
    "env": {
        "browser": false,
        "es2020": true
    },
    "extends": [
        "airbnb-base",
        "plugin:prettier/recommended",
        "prettier/@typescript-eslint"
    ],
    "parser": "@typescript-eslint/parser",
    "parserOptions": {
        "ecmaVersion": 11,
        "sourceType": "module"
    },
    "plugins": [
        "@typescript-eslint",
        "prettier"
    ],
    "rules": {
        "prettier/prettier": "error",
        "no-unused-vars": "off",
        "@typescript-eslint/no-unused-vars": ["error", { argsIgnorePattern: "^_" }]
    }
};
</code></pre>

<p>こんな感じ。</p>

<h2 id="visual-studio-code-%E3%81%A7%E3%83%87%E3%83%90%E3%83%83%E3%82%B0%E3%82%92%E8%A1%8C%E3%81%86%E3%81%9F%E3%82%81%E3%81%AE%E3%81%82%E3%82%8C%E3%81%93%E3%82%8C">Visual Studio Code でデバッグを行うためのあれこれ</h2>

<p>TypeScript のソース上でブレークポイントを設定したりデバッグ実行前にソースをコンパイルするなど、デバッグのための構成を行います。</p>

<ol>
<li>デバッグ用 hubot プロジェクトの作成</li>
<li>デバッグのための構成を追加</li>
</ol>

<h3 id="%E3%83%87%E3%83%90%E3%83%83%E3%82%B0%E7%94%A8-hubot-%E3%83%97%E3%83%AD%E3%82%B8%E3%82%A7%E3%82%AF%E3%83%88%E3%81%AE%E4%BD%9C%E6%88%90">デバッグ用 hubot プロジェクトの作成</h3>

<p><code>yo hubot</code> でテスト用の hubot を作成します。
この時 <code>--defaults</code> オプションをつけることでオーナーなどの指定をよしなにしてくれます。
ここではテスト用に作るため、アダプタプロジェクトの直下に作ります。</p>

<pre><code class="console">$ mkdir hubot-test
$ cd hubot-test
$ npx yo hubot --defaults
                     _____________________________  
                    /                             \ 
   //\              |      Extracting input for    |
  ////\    _____    |   self-replication process   |
 //////\  /_____\   \                             / 
 ======= |[^_/\_]|   /----------------------------  
  |   | _|___@@__|__                                
  +===+/  ///     \_\                               
   | |_\ /// HUBOT/\\                             
   |___/\//      /  \\                            
         \      /   +---+                            
          \____/    |   |                            
           | //|    +===+                            
            \//      |xx|                            

   create bin/hubot
   create bin/hubot.cmd
　　　　　　　　：
added 92 packages from 53 contributors and audited 92 packages in 13.227s
found 0 vulnerabilities

</code></pre>

<p><code>npm link path/to/hubot-adapter</code> とコマンドを実行し、アダプタへリンクを貼り テスト用の Hubot プロジェクトからアダプタが認識できるようにします。</p>

<pre><code class="console">$ pwd

$ npm link ../../hubot-sample-adapter
npm WARN hubot-sample-adapter@1.0.0 No repository field.

audited 373 packages in 3.58s

29 packages are looking for funding
  run `npm fund` for details

found 0 vulnerabilities

/usr/local/lib/node_modules/hubot-sample-adapter -&gt; ~/hubot-sample-adapter
~/hubot-sample-adapter/hubot-test/node_modules/hubot-sample-adapter -&gt; /usr/local/lib/node_modules/hubot-sample-adapter -&gt; ~/hubot-sample-adapter
</code></pre>

<p>注意点として、パスの指定は相対パスで問題ないですが、指定したパスの最後の部分を利用し node_modules にフォルダを作成しているようなので、フォルダ名を指定する必要があります。</p>

<pre><code>○ $ npm link ../../hubot-sample-adapter
× $ npm link ../
</code></pre>

<p>作成されたプロジェクトをデバッグ用にカスタマイズします。</p>

<p><code>hubot-test/external-scripts.json</code> にデフォルトで設定されている外部スクリプトはデバッグの邪魔になるので除外しておきます。</p>

<pre><code class="diff"> [
-  "hubot-diagnostics",
-  "hubot-help",
-  "hubot-heroku-keepalive",
-  "hubot-google-images",
-  "hubot-google-translate",
-  "hubot-pugme",
-  "hubot-maps",
-  "hubot-redis-brain",
-  "hubot-rules",
-  "hubot-shipit"
 ]
</code></pre>

<p>とりあえず、この記事で実装するアダプタは起動時にメッセージを bot へ送るので、どんな内容でも受け取ってり返答する bot を <code>hubot-test/scripts/echo.coffee</code> として追加します。</p>

<p>内容は適時使いやすいように書き換え可能ですが、先頭のコメント行を削除すると <code>using deprecated documentation syntax</code> と警告がログに出ます。</p>

<pre><code class="coffee"># Description:
#   echo bot
#
# Commands:
#   &lt;text&gt; - Reply back with &lt;text&gt;

module.exports = (robot) -&gt;

  robot.hear /(.*)/i, (res) -&gt;
    res.reply "echo \"#{res.match[1]}\""
</code></pre>

<h3 id="%E3%83%87%E3%83%90%E3%83%83%E3%82%B0%E3%81%AE%E3%81%9F%E3%82%81%E3%81%AE%E6%A7%8B%E6%88%90%E3%82%92%E8%BF%BD%E5%8A%A0">デバッグのための構成を追加</h3>

<p>Visual Studio Code で TypeScript で実装された Hubot アダプタをデバッグするため、３つのファイルでデバッグ構成を設定します。</p>

<p>まず、<code>.vscode/launch.json</code> にデバッグ実行のための構成を追加します。</p>

<ol>
<li>「アクティビティーバー」の「実行」を押下し、「launch.json ファイルを作成します」を選択します。</li>
<li>ドロップダウンで指定する環境は「Node.js」を選択します。</li>
<li>すると <code>.vscode/launch.json</code> にプログラムを実行するための構成ファイルが生成されます。</li>
</ol>

<p>作成後のファイルを開き（確認のためファイルはオープンされています）次のような感じに変更します。</p>

<p><code>"outputCapture": "std"</code> (もしくは、ユーザーの入力を受け取る必要があるなら <code>"console": "integratedTerminal"</code> )を設定しない場合、実行時のログを確認することができません。</p>

<pre><code class="diff"> {
   "version": "0.2.0",
   "configurations": [
     {
-      "name": "プログラムの起動",
+      "name": "Debug Adapter",
       "type": "node",
       "request": "launch",
+      "preLaunchTask": "tsc: ビルド - tsconfig.json",
       "skipFiles": [
         "&lt;node_internals&gt;/**"
       ],
-      "program": "${workspaceFolder}/index.js"
+      "program": "${workspaceRoot}/hubot-test/node_modules/.bin/coffee",
+      "cwd": "${workspaceRoot}/hubot-test",
+      "outputCapture": "std",
+      "args": [
+        "${workspaceRoot}/hubot-test/node_modules/.bin/hubot",
+        "-a", "sample-adapter",
+      ],
+      "env": {
+        "HUBOT_LOG_LEVEL": "DEBUG"
+      }
     }
   ]
 }
</code></pre>

<p>まず、<code>.vscode/tasks.json</code> にデバッグ実行前に TypeScript でコンパイルを行うための設定をします。
デバッグ実行との関連付けはすでに <code>"preLaunchTask": "tsc: ビルド - tsconfig.json",</code> にて指定済みです。</p>

<p>メニューから「ターミナル」→「タスクの構成...」を選択し、ドロップダウンの選択ないから「tsc: ビルド - tsconfig.json」を選択します。</p>

<p>すると次のような内容が <code>.vscode/tasks.json</code> に作成されます。</p>

<pre><code class="json">{
    "version": "2.0.0",
    "tasks": [
        {
            "type": "typescript",
            "tsconfig": "tsconfig.json",
            "problemMatcher": [
                "$tsc"
            ],
            "group": "build",
            "label": "tsc: ビルド - tsconfig.json"
        }
    ]
}
</code></pre>

<p>最後に、 <code>tsconfig.json</code> に設定することで、TypeScript のソースでブレイクポイントを設定できるようにします。</p>

<p>デフォルトでは、TypeScript のソースでブレークポイントを設定してもデバッグ実行時には、コンパイル後の JavaScript のソースが実行されるため指定したブレークポイントは無効にされてしまいます。</p>

<p>設定を追加することで TypeScript のソースのコンパイル時に同時にマップファイルが書き出されるようになり、結果としてブレイクポイントを設定できるようになります。</p>

<p><code>tsconfig.json</code> を次のように変更します。</p>

<pre><code class="diff">      // "declaration": true,                   /* Generates corresponding '.d.ts' file. */
      // "declarationMap": true,                /* Generates a sourcemap for each corresponding '.d.ts' file. */
-     // "sourceMap": true,                     /* Generates corresponding '.map' file. */
+     "sourceMap": true,                        /* Generates corresponding '.map' file. */
      // "outFile": "./",                       /* Concatenate and emit output to single file. */
      // "outDir": "./",                        /* Redirect output structure to the directory. */
</code></pre>

<h2 id="%E3%82%A2%E3%83%80%E3%83%97%E3%82%BF%E3%83%97%E3%81%AE%E5%AE%9F%E8%A3%85">アダプタプの実装</h2>

<p><a href="https://hubot.github.com/docs/adapters/development/">Development adapter | HUBOT</a> の <code>src/adapter.coffee</code> を参考に TypeScript で書き換え <code>src/adapter.ts</code> を作成します。</p>

<pre><code class="typescript">import { Robot, Adapter, User, TextMessage } from "hubot";

class Sample extends Adapter {
  robot!: Robot&lt;Adapter&gt;;

  constructor(robot: Robot&lt;Adapter&gt;) {
    super(robot);
    this.robot.logger.info("Constructor");
  }

  send(envelope: any, ...strings: any[]) {
    this.robot.logger.info("Send");
  }

  reply(envelope: any, ...strings: any[]) {
    this.robot.logger.info("Reply");
  }

  run() {
    this.robot.logger.info("Run");
    this.emit("connected");
    const user = new User("1001", { name: "Sample User", });
    const message = new TextMessage(user, "Some Sample Message", "MSG-001");
    this.robot.receive(message);
  }
}

module.exports.use = function createSampleAdapter(
  robot: Robot&lt;Adapter&gt;
) {
  return new Sample(robot);
};
</code></pre>

<p>TypeScript でコンパイルすると <code>src/adapter.js</code> が作成されるので、忘れずに <code>package.json</code> に書かれているエントリポイントは <code>src/adapter.coffee</code> ではなく <code>src/adapter.js</code> にしておきましょう。</p>

<h3 id="%E3%83%87%E3%83%90%E3%83%83%E3%82%B0%E5%AE%9F%E8%A1%8C%E6%99%82%E7%89%B9%E6%9C%89%E3%81%AE%E5%95%8F%E9%A1%8C%E3%81%B8%E3%81%AE%E5%AF%BE%E5%87%A6">デバッグ実行時特有の問題への対処</h3>

<p>ここまでで、ほぼデバッグ実行ができるようになりますが、実はこのままだと Node.js のライブラリの読み込みの仕様が原因で <code>robot.receive()</code> から呼ばれるはずの bot の処理が実行されない状態になっています。</p>

<p>原因としてはどうやら</p>

<ol>
<li><code>hubot</code> コマンドがアダプタを読み込む。</li>
<li>アダプタが <code>hubot</code> ライブラリの読み込みを行う。</li>
<li>パスの解決の結果、 <code>hubot-test/node_modules/hubot</code> が読み込まれることを意図しているところ、 アダプタのコンパイルに必要なため <code>node_modules/hubot</code> が存在していることから、そちらが読み込まれる。</li>
</ol>

<p>結果 <code>hubot</code> コマンド内で行われる <code>instanceof TextMessage</code> などの比較で不一致が発生し bot が処理されないようです。</p>

<p>現状、対処としては動的にデバッグ実行かそうでないかを判断しライブラリの読み込みパスを変更するようにすることで意図しない動きを回避しています。</p>

<pre><code class="diff">-import { Robot, Adapter, User, TextMessage } from "hubot";
+import * as Hubot from "hubot";
+import { Robot, Adapter } from "hubot";
+import * as path from "path";
+
+const isTestHubot =
+  path.join(__dirname, "..") ===
+  // @ts-ignore TS2532: Object is possibly 'undefined'.
+  path.join(require.main.filename.replace(/node_modules\/.*$/, ""), ".."); // (...)/hubot-line-local-tunnel/hubot-test/node_modules/hubot/bin/hubot
+// テスト環境での実行時はテスト用の環境に含まれる Hubot パッケージを読むように指示
+const { User, TextMessage } = !isTestHubot
+  ? Hubot
+  : require(require("path").join(__dirname, "../hubot-test/node_modules/hubot")); // eslint-disable-line import/no-dynamic-require

 class Sample extends Adapter {
   robot!: Robot&lt;Adapter&gt;;
</code></pre>

<h2 id="%E5%AE%9F%E8%A1%8C%E3%81%97%E3%81%A6%E3%81%BF%E3%82%8B">実行してみる</h2>

<p><code>hubot</code> プリフェックスを除いた名前で <code>--adapter</code> オプションを指定し実行します</p>

<pre><code class="console">$ npx hubot -a sample-adapter
[Wed Jul 29 2020 23:44:09 GMT+0900] INFO Constructor
[Wed Jul 29 2020 23:44:09 GMT+0900] INFO Run
[Wed Jul 29 2020 23:44:09 GMT+0900] WARNING Loading scripts from hubot-scripts.json is deprecated and will be removed in 3.0 (https://github.com/github/hubot-scripts/issues/1113) in favor of packages for each script.

Your hubot-scripts.json is empty, so you just need to remove it.
[Wed Jul 29 2020 23:44:09 GMT+0900] INFO Reply
</code></pre>

<p>ログを見ると、ちゃんと <code>Constructor</code> と <code>Run</code> と <code>Reply</code> が印字されています。</p>

<h2 id="%E3%83%A1%E3%83%A2">メモ</h2>

<h3 id="configuration-for-rule-%22import%2Fno-cycle%22-is-invalid">Configuration for rule "import/no-cycle" is invalid</h3>

<pre><code class="console">               :
Configuration for rule "import/no-cycle" is invalid
               :
</code></pre>

<p>と表示され eslint が正常に実行されない場合があった。</p>

<p><a href="https://github.com/airbnb/javascript/issues/2227">Invalid rule configurations compiled by "eslint --print-config" on eslint-config-airbnb-typescript · Issue #2227 · airbnb/javascript</a> によると、どうやら 7.3.0 から 7.2.0 へダウングレードすることで回避できる様子。</p>

<pre><code class="console">$ npm i eslint@7.2.0 --save-dev
</code></pre>

<h2 id="%E5%8F%82%E8%80%83">参考</h2>

<ul>
<li><a href="https://hubot.github.com/docs/adapters/development/">Development adapter | HUBOT</a></li>
<li><a href="https://github.com/airbnb/javascript/issues/2227">Invalid rule configurations compiled by "eslint --print-config" on eslint-config-airbnb-typescript · Issue #2227 · airbnb/javascript</a></li>
<li><a href="https://hiranoon.hatenablog.com/entry/2020/04/13/192746#%E3%81%AF%E3%81%98%E3%82%81%E3%81%AB">TypeScript の開発環境を作る。VSCode を基本に ESLint と Prettier も添えて。 - Multi Vitamin &amp; Mineral</a></li>
<li><a href="http://akiomik.hatenablog.jp/entry/2014/02/12/052703">hubot adapterの作り方 - おみブロZ</a></li>
<li><a href="https://qiita.com/bouzuya/items/11c0c6da2b3ad54b827f#hubot-echo">Hubot のインストール - Qiita</a></li>
<li><a href="https://komari.co.jp/blog/develop/frontend/355/#i-3">Visual Studio Code のデバッグコンソールにログが出力されない話 | 岡山のWEB制作はKOMARI</a></li>
<li><a href="https://qiita.com/n0bisuke/items/12ce4df55a405a62b599">Hubotでusing deprecated documentation syntax - Qiita</a></li>
<li><a href="https://qiita.com/mysticatea/items/f523dab04a25f617c87d">ESLint 最初の一歩 - Qiita</a></li>
<li><a href="https://shotat.hateblo.jp/entry/2016/10/26/000912">Eslintでunderscoreから始まる変数をチェックさせない設定にする - Memento memo.</a></li>
<li><a href="https://stackoverflow.com/questions/57802057/eslint-configuring-no-unused-vars-for-typescript">esLint-Typescriptの「no-unused-vars」の構成-スタックオーバーフロー</a></li>
</ul>
]]></content>
        </entry>
            <entry>
            <title type="html"><![CDATA[ローカルでの HTTPS テスト環境の構築]]></title>
            <link href="http://www.sharkpp.net/blog/2020/05/02/build-local-https-test-environment.html"/>
            <updated>2020-05-02T16:15:00+00:00</updated>
            <id>http://www.sharkpp.net/blog/2020/05/02/build-local-https-test-environment.html</id>
            <content type="html"><![CDATA[<p>ローカルでのウェブアプリの開発では、もはや https が必須ということで動作確認に難儀していましたが、
しばらく前にローカルで認証局を簡単に設置できる <a href="https://github.com/FiloSottile/mkcert">mkcert</a> なるツールがあると知ったので、使い方を調べてみました。</p>

<p>PC上での使い方は結構サクッと出てきたので、実際のユースケースも念頭に Android でもオレオレ証明書が正規の証明書として利用できるような設定方法も調べてみました。</p>

<p><a href="/images/20200501_local_https_secure3.png"><img src="/thumbs/a68a390814458bbfe228d6e6d2fd6032-480x480.png" alt="20200501_local_https_secure3"></a></p>

<h2 id="mkcert-%E3%81%AE-windows-%E3%81%B8%E3%81%AE%E3%82%A4%E3%83%B3%E3%82%B9%E3%83%88%E3%83%BC%E3%83%AB">mkcert の Windows へのインストール</h2>

<p>mkcert の <a href="https://github.com/FiloSottile/mkcert#windows">Windows</a> セクションを参考にしてください。</p>

<h2 id="mkcert-%E3%81%AE-macos-%E3%81%B8%E3%81%AE%E3%82%A4%E3%83%B3%E3%82%B9%E3%83%88%E3%83%BC%E3%83%AB">mkcert の macOS へのインストール</h2>

<p>homebrew を使ったインストールが簡単です。</p>

<p><code>brew install mkcert</code> とターミナルで入力し実行するだけ。</p>

<pre><code class="console">$ brew install mkcert
Updating Homebrew...
==&gt; Auto-updated Homebrew!
           :
==&gt; Downloading https://homebrew.bintray.com/bottles/mkcert-1.4.1.mojave.bottle.tar.gz
==&gt; Downloading from https://akamai.bintray.com/91/9100c7f044d91e6ca0c483ed572217de28daa34c04fa6e2a130116175ba162e9?__gda__=exp=1588341913~hmac=516f50b8cbb6930276b
######################################################################## 100.0%
==&gt; Pouring mkcert-1.4.1.mojave.bottle.tar.gz
🍺  /usr/local/Cellar/mkcert/1.4.1: 6 files, 5.3MB
</code></pre>

<p>Firefox で利用する場合は</p>

<pre><code class="console">$ brew install nss
</code></pre>

<p>も必要なようです。</p>

<p>システムへのローカルの認証局のインストールは <code>mkcert -install</code> を実行するようです。</p>

<pre><code class="console">$ mkcert -install
Created a new local CA at "/Users/▒▒▒▒/Library/Application Support/mkcert" 💥
Sudo password: ******
The local CA is now installed in the system trust store! ⚡️
The local CA is now installed in the Firefox trust store (requires browser restart)! 🦊
</code></pre>

<h2 id="%E8%A8%BC%E6%98%8E%E6%9B%B8%E3%81%AE%E4%BD%9C%E6%88%90">証明書の作成</h2>

<p>証明書の作成は <code>mkcert {hostname_or_ip} ...</code> のような感じで、コマンドの後に証明書に含めたいホスト名もしくはIPを指定します。</p>

<pre><code class="console">$ mkcert 0.0.0.0 localhost 127.0.0.1 ::1
Using the local CA at "/Users/▒▒▒▒/Library/Application Support/mkcert" ✨

Created a new certificate valid for the following names 📜
 - "0.0.0.0"
 - "localhost"
 - "127.0.0.1"
 - "::1"

The certificate is at "./0.0.0.0+3.pem" and the key at "./0.0.0.0+3-key.pem" ✅
</code></pre>

<p>実行時のカレントディレクトリに <code>*.pem</code> = 公開鍵、と <code>*-key.pem</code> = 秘密鍵、が作成されるので、https として動作させる場合の公開鍵と秘密鍵として指定します。</p>

<h2 id="macos-%E3%81%A7%E5%88%A9%E7%94%A8%E3%81%99%E3%82%8B%E5%A0%B4%E5%90%88%E3%81%AE%E8%A8%AD%E5%AE%9A">macOS で利用する場合の設定</h2>

<p>mkcert をインストールしたPCでは、すでに、システムにローカル認証局の証明書がインストールされているので特に何かする必要はないです。</p>

<p>もし、他のPCで利用する場合は、下記に記載の方法で証明書のエクスポートをし、それをシステムにインストールしてください。</p>

<h2 id="android-%E3%81%A7%E5%88%A9%E7%94%A8%E3%81%99%E3%82%8B%E5%A0%B4%E5%90%88%E3%81%AE%E8%A8%AD%E5%AE%9A">Android で利用する場合の設定</h2>

<h3 id="%E8%A8%BC%E6%98%8E%E8%A8%BC%E3%81%AE%E3%82%A8%E3%82%AF%E3%82%B9%E3%83%9D%E3%83%BC%E3%83%88">証明証のエクスポート</h3>

<p>macOS の場合</p>

<p><a href="/images/20200501_ser_export_from_macos_key_chain.png"><img src="/thumbs/c75ff4d1123943a143ac45139cb90bad-320x320.png" alt="20200501_ser_export_from_macos_key_chain"></a></p>

<ol>
<li>「キーチェーン」を開く</li>
<li>左部「ログイン」を選択し <code>mkcert ▒▒▒▒▒▒▒▒▒▒▒▒</code> を探す、</li>
<li>右クリックメニューから「"mkcert ▒▒▒▒▒▒▒▒▒▒▒▒"を書き出す」を選んでファイルに保存</li>
<li>最後に、保存したファイルをなんとかして Android にコピーします。</li>
</ol>

<h3 id="%E8%A8%BC%E6%98%8E%E6%9B%B8%E3%81%AE%E3%82%A4%E3%83%B3%E3%82%B9%E3%83%88%E3%83%BC%E3%83%AB">証明書のインストール</h3>

<ol>
<li>「設定」アプリを開く</li>
<li>「セキュリティ」→「詳細設定」→「暗号化と認証情報」「ストレージからのインストール」<br/>
<a href="/images/20200501_android_ser_install1.png"><img src="/thumbs/6bb42b1c732f71567a936064644ba6d5-320x320.png" alt="20200501_android_ser_install1"></a> &nbsp; 
<a href="/images/20200501_android_ser_install2.png"><img src="/thumbs/88f2d30588e12d32fbf226959ed16813-320x320.png" alt="20200501_android_ser_install2"></a> &nbsp; 
<a href="/images/20200501_android_ser_install3.png"><img src="/thumbs/8bd3d02757906957b760e847338cd7cd-320x320.png" alt="20200501_android_ser_install3"></a></li>
<li>エクスポートした証明書を選択 <br/>
<a href="/images/20200501_android_ser_install4.png"><img src="/thumbs/62c7cfc3933d430dcb897d6bba06275c-320x320.png" alt="20200501_android_ser_install4"></a></li>
<li>「証明書の名前を指定する」欄は、適用に、「認証情報の使用」欄は「VPNとアプリ」を選択 <br/>
<a href="/images/20200501_android_ser_install5.png"><img src="/thumbs/1a96248fbb5fda8bcaad9f0dcbb0542f-320x320.png" alt="20200501_android_ser_install5"></a></li>
<li>「信頼できる認証局」→「ユーザー」タブを選択し、インストールした証明書が含まれていたらOK <br/>
<a href="/images/20200501_android_ser_install6.png"><img src="/thumbs/051861e5fc41fdc0088dc679493cb00a-320x320.png" alt="20200501_android_ser_install6"></a> &nbsp; 
<a href="/images/20200501_android_ser_install7.png"><img src="/thumbs/278ed200c9067da074fd3fa8cf75359c-320x320.png" alt="20200501_android_ser_install7"></a></li>
</ol>

<h2 id="%E8%A8%BC%E6%98%8E%E6%9B%B8%E3%81%AE%E5%88%A9%E7%94%A8">証明書の利用</h2>

<p>適当なウェブサーバーを使って確認します。</p>

<p>Node.js がインストール済みの場合は <a href="https://www.npmjs.com/package/http-server">http-server - npm</a> が簡単そうなので、</p>

<pre><code class="console">$ npm install -g http-server
</code></pre>

<p>としてインストールして試してみます。</p>

<p>HTML は適当に</p>

<pre><code class="html">&lt;html&gt;
  &lt;head&gt;
  &lt;/head&gt;
  &lt;body&gt;
    Is this page visible on https?
  &lt;/body&gt;
&lt;/html&gt;
</code></pre>

<p>みたいな感じに作ります。</p>

<p>カレントディレクトリに、前述の <code>0.0.0.0+3.pem</code> と <code>0.0.0.0+3-key.pem</code> を保存し</p>

<pre><code class="console">$ http-server . -S -C 0.0.0.0+3.pem -K .0.0.0.0+3-key.pem
</code></pre>

<p>とするとローカル認証局の証明書がインストールされていれば、有効な証明書として利用されます。</p>

<p>Chrome for Android で確認するとこんな感じ</p>

<p><a href="/images/20200501_local_https_secure1.png"><img src="/thumbs/dfdd71113e5de0382c1bc5946b5221e4-320x320.png" alt="20200501_local_https_secure1"></a> <a href="/images/20200501_local_https_secure2.png"><img src="/thumbs/066f32b6a759ac9254140508896c90e4-320x320.png" alt="20200501_local_https_secure2"></a></p>

<p>Chrome for macOS で確認するとこんな感じ</p>

<p><a href="/images/20200501_local_https_secure4.png"><img src="/thumbs/c8695d9aee7619d0fe3d7e780ac6cce1-320x320.png" alt="20200501_local_https_secure4"></a></p>

<h2 id="%E5%8F%82%E8%80%83">参考</h2>

<ul>
<li><a href="https://qiita.com/walkers/items/b90a97a99bbb27f6550f">ローカル環境でSSLをオレオレ証明書で行っていて警告が出てる人に朗報 - Qiita</a></li>
<li><a href="https://www.media.hiroshima-u.ac.jp/services/hinet/android-ca2">AndroidのCA証明書のインストールについて — Information Media Center</a></li>
<li><a href="https://support.google.com/pixelphone/answer/2844832?hl=ja">証明書を追加、削除する - Pixel Phone ヘルプ</a></li>
</ul>
]]></content>
        </entry>
            <entry>
            <title type="html"><![CDATA[あれから16年経ったようです]]></title>
            <link href="http://www.sharkpp.net/blog/2020/02/29/happy-anniversary-16th.html"/>
            <updated>2020-02-29T23:30:00+00:00</updated>
            <id>http://www.sharkpp.net/blog/2020/02/29/happy-anniversary-16th.html</id>
            <content type="html"><![CDATA[<p>世間では新型コロナウイルスによって展示会やらイベントが次々に中止や延期に追い込まれています。
個人的な部分でもついにリモートワークが推奨になってきた感じで影響が出始めましたね。</p>

<p>さて、本日はいつの間にかホームページ開設が16年を過ぎ17年目になったことに気がついて、去年何かやっておけばよかったとすこし後悔していたところで今からでも遅くないというそらみみが聞こえてきたので、このページの過去をざっくりと振り返ってみたいと思います。</p>

<h2 id="%E3%83%9B%E3%83%BC%E3%83%A0%E3%83%9A%E3%83%BC%E3%82%B8%E9%96%8B%E8%A8%AD">ホームページ開設</h2>

<p>2004-02-24 ホームページを開設</p>

<p>たしか、契約しているプロバイダのおまけでついてくるジオシティーズのアカウントで公開していたと思う。</p>

<p>phpを動かすために、別のサービス(これもすでに閉鎖)も借りていた記憶もありますね。</p>

<p>ジオシティーズも去年完全閉鎖され時代の流れを感じますのぅ。
<a href="https://info-geocities.yahoo.co.jp/close/"><img src="/images/20200229_geocities_closed.png" alt="サービス終了のお知らせ - Yahoo!ジオシティーズ" /></a></p>

<h2 id="%E3%83%89%E3%83%A1%E3%82%A4%E3%83%B3%E5%8F%96%E5%BE%97">ドメイン取得</h2>

<p>2005-08-13 独自ドメインへ移転</p>

<p>数日前の 2005-08-05 に <code>sharkpp.net</code> を取得し、独自ドメインでの運営に変更。
この当時契約していたドメインレジストラも独自運営からGMOに買収されたりと、これまた結構変遷があります。</p>

<p><a href="http://web.archive.org/">Wayback Machine</a>に残っている最古は 2005-10-20 15:34:50 でこんなデザインでした。</p>

<p><a href="http://web.archive.org/web/20051020153450/http://www.sharkpp.net:80/"><img src="/images/20200229_webarc20051020153450.png" alt="2005-10-20 15:34:50 当時のページ" /></a></p>

<h2 id="%E6%A7%8B%E7%AF%89%E3%82%B7%E3%82%B9%E3%83%86%E3%83%A0%E3%82%92%E6%89%8B%E6%89%93%E3%81%A1%E3%81%8B%E3%82%89-frog-cms-%E3%81%AB%E5%A4%89%E6%9B%B4">構築システムを手打ちから Frog CMS に変更</h2>

<p>2008-08-XX 構築システムを手打ちから Frog CMS に変更</p>

<p>ホームページを手打ちから <a href="https://github.com/philippe/FrogCMS">Frog CMS</a> というCMSに変更。
この時同時に、デザインの変更や、掲示板の廃止などもしています。
Frog CMS も更新が続くと思ってたらしばらくしたら更新されなくなりましたなぁ...</p>

<p><a href="http://web.archive.org/web/20081007190559/http://www.sharkpp.net:80/"><img src="/images/20200229_webarc20081007190559.png" alt="2008-10-07 19:05:59 当時のページ" /></a></p>

<h2 id="%E6%A7%8B%E7%AF%89%E3%82%B7%E3%82%B9%E3%83%86%E3%83%A0%E3%82%92-frog-cms-%E3%81%8B%E3%82%89-sculpin-%2B-github-pages-%E3%81%AB%E5%A4%89%E6%9B%B4">構築システムを Frog CMS から Sculpin + GitHub pages に変更</h2>

<p>2015-05-31 構築システムを Frog CMS から Sculpin + GitHub pages に変更</p>

<p>レンタルサーバーの仕様変更で、しばらく Frog CMS がエラーを吐いていたことやもはや保守されてないものを使うのもってことで、重い腰を上げ <a href="https://sculpin.io/">Sculpin</a> という、php で動作する静的サイトジェネレータを利用し GitHub に push したら GitHub pages で運用しているサイトが更新される仕組みを構築しました。
その時の記録は「<a href="/blog/2015/06/28/site-reboot-by-sculpin.html">Sculpin でホムペを再構築したときのメモ</a>」として記事にしています。
この時同時に、デザインやホームページのタイトルの変更もしています。</p>

<h2 id="%E6%A7%8B%E7%AF%89%E3%82%B7%E3%82%B9%E3%83%86%E3%83%A0%E3%81%AE%E9%81%8B%E7%94%A8%E3%82%92-xrea-%E3%81%8B%E3%82%89-travis-ci-%E3%81%AB%E5%A4%89%E6%9B%B4">構築システムの運用を xrea から Travis CI に変更</h2>

<p>2016-06-12 構築システムの運用を xrea から Travis CI に変更</p>

<p>レンタルサーバーの XREA でサイトのビルドを行なっていたけど、だんだんとビルドに失敗したりすることが多くなってきたので Travis CI を使ってビルドするように変更。
今なら、GitHub Actions を使う感じかも。
今と違って、ヘッダ部分にカテゴリリンクがなかったりしてるけど、それはおいおいと細かく変更していった結果。</p>

<p><a href="http://web.archive.org/web/20150613052025/http://www.sharkpp.net:80/"><img src="/images/20200229_webarc20150613052025.png" alt="2015-06-13 05:20:25 当時のページ" /></a></p>

<h2 id="%E3%81%9D%E3%81%97%E3%81%A6%E7%8F%BE%E5%9C%A8">そして現在</h2>

<p>もろもろ細かなデザインが変わったりしているけど、根本のシステムは変わらず。</p>

<p><img src="/images/20200229_now.png" alt="現在のページ" /></p>

<h2 id="%E3%81%BE%E3%81%A8%E3%82%81">まとめ</h2>

<p>とりあえず、大きな変更をざっくりとまとめてみました。
16年も経つとオギャーといってた赤ちゃんが高校１年とか２年とかになっている感じなので、世間でも大きなところでは、携帯電話がガラゲー（フューチャーフォン）からスマホに変わったりしていますね。</p>

<p>光陰矢の如しとはよくいったもので、ここ数年は一年があっという間に過ぎていく感じで、なかなかに恐ろしいです。</p>

<p>まあ、そんな感じな雑な締めかたですが、16年経ち17年目を迎えた「さめたすたすのお部屋」をよろしくお願いします。</p>
]]></content>
        </entry>
    </feed>