<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
    <title><![CDATA[さめたすたすのお家]]></title>
    <link href="http://www.sharkpp.net/blog/categories/%E3%83%96%E3%83%AD%E3%82%B0.xml" rel="self"/>
    <link href="http://www.sharkpp.net/"/>
    <updated>2018-05-26T14:32:23+00:00</updated>
    <id>http://www.sharkpp.net/</id>
            <author>
            <name><![CDATA[sharkpp]]></name>                    </author>
        <generator uri="http://sculpin.io/">Sculpin</generator>
            <entry>
            <title type="html"><![CDATA[名古屋Qt勉強会#16 に参加しました]]></title>
            <link href="http://www.sharkpp.net/blog/2018/05/26/qt-nagoya-16.html"/>
            <updated>2018-05-26T23:26:00+00:00</updated>
            <id>http://www.sharkpp.net/blog/2018/05/26/qt-nagoya-16.html</id>
            <content type="html"><![CDATA[<p>5月26日(土) に開催された <a href="https://qt-users.connpass.com/event/88524/">Qt 勉強会 @ Nagoya #16 - connpass</a> に参加しました。</p>

<p>そのまとめ。</p>

<p><img src="/images/20180526_qauthwith2.png" alt="開発中" /></p>

<h2 id="%E4%BC%9A%E5%A0%B4%E5%88%B0%E7%9D%80%E3%81%BE%E3%81%A7">会場到着まで</h2>

<p>前回は、ちょっと迷ってしまったけど、さすがに２回目ともなれば迷うこともなく到着。
電車の時間を少しミスったために、今回もギリギリ（汗</p>

<h2 id="%E8%87%AA%E5%B7%B1%E7%B4%B9%E4%BB%8B">自己紹介</h2>

<p>みんなで自己紹介</p>

<p>今回は２名のご新規さんが参加されました。</p>

<p>東京組２名は少し遅れて到着（やはり迷った様子</p>

<h2 id="%E4%BB%8A%E5%9B%9E%E3%81%AE%E3%81%8A%E8%8F%93%E5%AD%90">今回のお菓子</h2>

<p>今回は、東京からの参加者の <a href="https://twitter.com/hermit4">@hermit4</a> さんが、美味しそうなお菓子を持ち込み。
クッキーなどと合わせてなかなかの量になりました。</p>

<h2 id="%E3%82%82%E3%81%8F%E3%82%82%E3%81%8F">もくもく</h2>

<p>前回の続きをもくもく。</p>

<p>本日は、Qt Quick をサンプルを見ながらUIの作り込み。</p>

<p><img src="/images/20180526_qauthwith1.png" alt="開発中" /></p>

<p>こんな感じに Swagger UI 風の UI を Qt Quick で作ることにした。</p>

<p><img src="/images/20180526_qauthwith2.png" alt="開発中" /></p>

<p>一部、どうしてもわからないことを <a href="https://twitter.com/IoriAYANE">@IoriAYANE</a> さんに聞きつつ、なんとかここまで出来た。</p>

<p>さてはて、中身の実装をどうしようかな？というところで時間切れ。</p>

<h2 id="%E6%87%87%E8%A6%AA%E4%BC%9A">懇親会</h2>

<p>今回は、前回行った串カツ屋さんは入れず。
少し歩いた先の串焼き屋さんで懇親会。</p>

<p><img src="/images/20180526_kushiyaki.jpg" alt="テング酒場で懇親会" /></p>

<h2 id="%E6%9C%80%E5%BE%8C%E3%81%AB">最後に</h2>

<p>久しぶりに集中して趣味プロしたけど、やはりいいものだ。
年々、趣味に割ける時間が減っているけど、なんとか継続して行きたい。</p>

<h2 id="%E5%8F%82%E8%80%83">参考</h2>

<ul>
<li><a href="http://doc.qt.io/qt-5/qtquickcontrols-index.html">Qt Quick Controls 5.11</a></li>
<li><a href="https://doc.qt.io/archives/qt-5.7/qtquickcontrols2-customize.html">Customizing Qt Quick Controls 2 | Qt Quick Controls 2 5.7</a></li>
<li><a href="http://blog.qt.io/jp/2011/03/10/qml-drawing-2/">Qt Quick 入門 第8回: QML の描画処理 - Qt Japanese Blog</a></li>
</ul>
]]></content>
        </entry>
            <entry>
            <title type="html"><![CDATA[技術書典4に行ってきた]]></title>
            <link href="http://www.sharkpp.net/blog/2018/05/18/techbookfest4.html"/>
            <updated>2018-05-18T01:10:00+00:00</updated>
            <id>http://www.sharkpp.net/blog/2018/05/18/techbookfest4.html</id>
            <content type="html"><![CDATA[<p>一昨年から始まった技術書オンリーな同人イベント、「<a href="https://techbookfest.org/event/tbf04">技術書典４</a>」が、4月22日に開催されました。
今回はイベントが始まって以来の快晴で運営さんも大慌てだった、とか言う話も。
まあ、ともかく今回も昨年に引き続き「技術書典」に引き続き行ってきました。
これは、そのレポート、もしくは戦果報告となります。
いやはや、かなり周回遅れながらなんとかアップしました。</p>

<p><img src="/images/20180422_tf4.jpg" alt="会場前にて" /></p>

<h2 id="%E5%A7%8B%E3%82%81%E3%81%AB">始めに</h2>

<p>まず、前回のレポートは「<a href="/blog/2017/10/23/techbookfest3.html">技術書典３にサークル手伝いとして参加してきた - さめたすたすのお家</a>
」です。</p>

<p>今回は、サークル数 246 、入場者数 6380 人だったようです。前回から二倍以上増えていて、もう人高密度が大変なことになっていました。</p>

<p><a href="https://docs.google.com/spreadsheets/d/1gNVy9ukLn3kYzOC0nyOpysD-Xl3fIzHl26WSSLHC-HY/edit?usp=sharing"><img src="/images/20180430_tf1_tf4_graph.png" alt="参加人数" /></a></p>

<h2 id="%E5%BD%93%E6%97%A5">当日</h2>

<p>09:45ぐらいに行ったところ、すでに結構な人数が集まってました。
まあ、集まってるとは言っても、その時点では一般参加者の列形成はされてなかったのでばらばらと散らばっている感じ。</p>

<blockquote class="twitter-tweet" data-lang="ja"><p lang="ja" dir="ltr">技術書典4 <a href="https://twitter.com/hashtag/%E6%8A%80%E8%A1%93%E6%9B%B8%E5%85%B8?src=hash&amp;ref_src=twsrc%5Etfw">#技術書典</a> 入場待機中<br>9:45ぐらいで一般参加者が集まってた <a href="https://t.co/eXsELI3LRW">pic.twitter.com/eXsELI3LRW</a></p>&mdash; 俺はさめたすたすでいく！！！ (@sharkpp) <a href="https://twitter.com/sharkpp/status/987863108789063680?ref_src=twsrc%5Etfw">2018年4月22日</a></blockquote>

<script async src="https://platform.twitter.com/widgets.js" charset="utf-8"></script>

<p>そして、10:00 すこし前に一般参加者の列形成を開始。
整理券を配ってましたがどうやら並んでないと入れない、との話が漏れ聞えて来ました。</p>

<blockquote class="twitter-tweet" data-lang="ja"><p lang="ja" dir="ltr"><a href="https://twitter.com/hashtag/%E6%8A%80%E8%A1%93%E6%9B%B8%E5%85%B8?src=hash&amp;ref_src=twsrc%5Etfw">#技術書典</a> <a href="https://twitter.com/hashtag/%E6%8A%80%E8%A1%93%E6%9B%B8%E5%85%B84?src=hash&amp;ref_src=twsrc%5Etfw">#技術書典4</a> サークル一覧のサークル配置図がお亡くなりに <a href="https://t.co/IJBzP4d5n7">pic.twitter.com/IJBzP4d5n7</a></p>&mdash; 俺はさめたすたすでいく！！！ (@sharkpp) <a href="https://twitter.com/sharkpp/status/987869942820163585?ref_src=twsrc%5Etfw">2018年4月22日</a></blockquote>

<script async src="https://platform.twitter.com/widgets.js" charset="utf-8"></script>

<p>サークル配置図を見ようとしたらお亡くなりになっていたり、トイレが近くて危なかったけど、何とかなった。
なんか、以前も同じようなことを...</p>

<p>スタッフさんが、毎度おなじみ手提げバッグを持って回っていて、今回は（前回も？）どうやら後払い公式アプリでも払えるようだったけど、時間かかりそうだったので現金払いにした。
まあ、毎度のことながら会場内でも購入できるんだけどね。</p>

<p>そして、11:00 会場内で拍手があり、ついに会場。</p>

<p>「この列の人、手をあげてください！」ってスタッフさんが来たので、前後を見てなんとなく手をあげたところ、どうやら第一陣の入場対象に含まれたらしく、最初に入場することができました。</p>

<p>とりあえず、最初に入場できたので、知り合いのところなどなど、早速お目当てのサークルさんを駆け巡ることに。</p>

<p>なんかブースの配置が一部ぐるっと回り込まないとダメな構造だったので、買い忘れで戻った時には人が多くて大変だった。</p>

<p>前回から実装された、後払い公式アプリで決済をしつつ、たまに現金払い。</p>

<p>後払いは簡単に決済できるから、面白いようにお金が飛んでく...</p>

<p>戦利品は後ほどで。</p>

<p>最後は前回と同じように、秋葉原のヤマト運輸営業所で荷物を発送しました。</p>

<p>さすがに今回は購入した量が多く、紙袋的なものだと破けそうだったので箱で送ることに。</p>

<p><img src="/images/20180422_tf4_packing.jpg" alt="梱包" /></p>

<p>無事発送もすんだので、今回の技術書典４を抜け、身軽になって観光しました。</p>

<h2 id="%E6%88%A6%E5%88%A9%E5%93%81">戦利品</h2>

<p>今回の戦利品</p>

<p><img src="/images/20180429_tf4_booty.jpg" alt="戦利品" /></p>

<table>
<thead>
<tr>
  <th>ブース</th>
  <th>サークル名/ペンネーム</th>
  <th>備考</th>
</tr>
</thead>
<tbody>
<tr>
  <td></td>
  <td>達人出版会</td>
  <td>「<a href="https://techbookfest.org/journal/3">技術季報 2018 SPRING</a>」※技術書典カタログ</td>
</tr>
<tr>
  <td><a href="https://techbookfest.org/event/tbf04/circle/17450001">い15</a></td>
  <td><a href="https://mzp.booth.pm/">SKK=さらに かしこく かわいい</a></td>
  <td>「工場実習日記」「日本語入力を作るのに必要だった本」</td>
</tr>
<tr>
  <td><a href="https://techbookfest.org/event/tbf04/circle/12820001">か22</a></td>
  <td>理ろぐ/<a href="https://twitter.com/IoriAYANE">理音伊織</a></td>
  <td>「インストーラーで配ろう！」</td>
</tr>
<tr>
  <td><a href="https://techbookfest.org/event/tbf04/circle/12820001">か22</a></td>
  <td><a href="https://qiita.com/MegaBlackLabel">底なし沼の魔女</a>/<a href="https://twitter.com/MegaBlackLabel">れいな</a></td>
  <td>「Libraries of React・Get ready for Next.jsのセット」</td>
</tr>
<tr>
  <td><a href="https://techbookfest.org/event/tbf04/circle/16430002">お09</a></td>
  <td>Secure旅団</td>
  <td>「俺らの愛したセキュリティ」「ニッチ・セキュリティ - 明星へ登る」</td>
</tr>
<tr>
  <td><a href="https://techbookfest.org/event/tbf04/circle/17570001">か24</a></td>
  <td><a href="http://www.chirashiura.com/">楽描帳</a>/<a href="https://twitter.com/tomato360">@tomato360</a></td>
  <td>「Hello Nuxt !!」「Hello!! Vue.js 最新プログレッシブフレームワーク入門」</td>
</tr>
<tr>
  <td><a href="https://techbookfest.org/event/tbf04/circle/19150009">か23</a></td>
  <td>(ねこの手@福岡](https://mya-ake.com/)/(mya-ake](https://twitter.com/mya_ake)</td>
  <td>「知らないと損するCSS」「現場で使えるVue.js tips集」</td>
</tr>
<tr>
  <td><a href="https://techbookfest.org/event/tbf04/circle/14560006">く36</a></td>
  <td><a href="http://blogs.yahoo.co.jp/rem1988stores">紙印</a>/おたべ</td>
  <td>「【フルセット】テスト設計入門 2018年度版」</td>
</tr>
<tr>
  <td><a href="https://techbookfest.org/event/tbf04/circle/19150006">く02</a></td>
  <td><a href="https://www.wakamesoba98.net/circle/">53鍵盤</a>/わかめそば</td>
  <td>「初めてのsystemd-nspawn」</td>
</tr>
<tr>
  <td><a href="https://techbookfest.org/event/tbf04/circle/16620002">け15</a></td>
  <td><a href="https://staff.aist.go.jp/tominaga-daisuke/sliderule/rectilinear/index.html">お台場計算尺</a>/とみながだいすけ</td>
  <td>「新世紀の計算尺入門」「作って使おう計算尺」</td>
</tr>
<tr>
  <td><a href="https://techbookfest.org/event/tbf04/circle/21060002">き17</a></td>
  <td>めがねをかけるんだ/<a href="https://twitter.com/keiji_ariyama">Keiji ARIYAMA</a></td>
  <td>「本当はおそろしい商業出版！？」「茶色いトイプードルは食べ物じゃないっ！」</td>
</tr>
<tr>
  <td><a href="https://techbookfest.org/event/tbf04/circle/14520005">き02</a></td>
  <td>越後屋/なかざん</td>
  <td>「Cheap Dive into React Native」</td>
</tr>
<tr>
  <td><a href="https://techbookfest.org/event/tbf04/circle/11830001">お08</a></td>
  <td><a href="https://twitter.com/cpaw_account">Cpaw</a></td>
  <td>「RustによるWebアプリケーション作成入門」</td>
</tr>
<tr>
  <td><a href="https://techbookfest.org/event/tbf04/circle/18420001">お02</a></td>
  <td><a href="http://yoshikawaweb.com/">吉川雅彦</a></td>
  <td>「z-indexを倒す」</td>
</tr>
<tr>
  <td><a href="https://techbookfest.org/event/tbf04/circle/16430001">い05</a></td>
  <td><a href="http://webdesign-manga.com/">マンガでわかるWebデザイン＋Git</a>/湊川あい</td>
  <td>「マンガでわかるDocker」「マンガでわかるScrapbox【無料頒布】」</td>
</tr>
<tr>
  <td><a href="https://techbookfest.org/event/tbf04/circle/14570001">け51</a></td>
  <td><a href="https://www.facebook.com/windholep/">windhole</a>/風穴 江</td>
  <td>「USB3.0 ホストドライバ自作入門」</td>
</tr>
<tr>
  <td><a href="https://techbookfest.org/event/tbf04/circle/21040009">あ01</a></td>
  <td>日経BP出版局</td>
  <td>「日経電子の本」※無料配布</td>
</tr>
</tbody>
</table>

<p>※敬称略、順不同</p>

<h2 id="%E3%81%BE%E3%81%A8%E3%82%81">まとめ</h2>

<ul>
<li>そろそろ会場に対して人が多いのではないかと...</li>
<li>並ぶ前にトイレを済まそう(二度目)</li>
<li>段々と購入数が多くなっていく...</li>
<li>公式後払いアプリ怖い（お金に羽が生えて飛んでいく的な意味で</li>
</ul>
]]></content>
        </entry>
            <entry>
            <title type="html"><![CDATA[名古屋Qt勉強会#15 に参加しました]]></title>
            <link href="http://www.sharkpp.net/blog/2018/04/21/qt-nagoya-15.html"/>
            <updated>2018-04-21T05:50:00+00:00</updated>
            <id>http://www.sharkpp.net/blog/2018/04/21/qt-nagoya-15.html</id>
            <content type="html"><![CDATA[<p>つい先日 4月14日(土) に開催された <a href="https://qt-users.connpass.com/event/84048/">Qt 勉強会 @ Nagoya #15 - connpass</a> に参加しました。</p>

<p>まとめは <a href="https://togetter.com/li/1218135">Qt 勉強会 @ Nagoya # 15 まとめ - Togetter</a> です。</p>

<p>ちょっと遅くなったけど、そのまとめ。</p>

<p><img src="/images/20180414_qauthwith.png" alt="開発中" /></p>

<h2 id="%E4%BC%9A%E5%A0%B4%E5%88%B0%E7%9D%80%E3%81%BE%E3%81%A7">会場到着まで</h2>

<p>会場近くには、あの食器で有名なノリタケの森がある。
それを横目に通り過ぎながら名古屋駅からテクテク歩くこと約20分。
最初、別の場所を会場と思ってたけど間違えてたようで <a href="https://twitter.com/kazuo_asa">@kazuo_asa</a> @主催者さんに助けてもらった。</p>

<h2 id="%E8%87%AA%E5%B7%B1%E7%B4%B9%E4%BB%8B">自己紹介</h2>

<p>みんなで自己紹介</p>

<p>ほぼ何回か参加していて見知っていた人だった。
まあ、久しぶりの参加の人もいたけど。</p>

<h2 id="%E4%BB%8A%E5%9B%9E%E3%81%AE%E3%81%8A%E8%8F%93%E5%AD%90">今回のお菓子</h2>

<p>今回は駄菓子を持って来たけど、横に長く座っていた関係もあったのか、まああまり減らなかった。</p>

<p><img src="/images/20180414_dagashi.jpg" alt="串カツ田中で懇親会" /></p>

<h2 id="%E3%82%82%E3%81%8F%E3%82%82%E3%81%8F">もくもく</h2>

<p>とりあえず、久しぶりに Qt を触る。</p>

<p><a href="https://github.com/sharkpp/qtauthwith">qtauthwith</a> を触ってみるも、ビルドエラーが出るのでひたすら修正。</p>

<p>最終的にビルドは通るようになったけど... UIがそういえば実装するの超面倒だったな、と思い出して QtQuick で実装できないか模索。</p>

<h2 id="%E3%81%A8%E3%81%A4%E3%81%9C%E3%82%93%E3%81%AE%E6%9A%97%E5%8F%B7%E9%80%9A%E8%B2%A8">とつぜんの暗号通貨</h2>

<p>勉強会のイベントページに、なんか企業アカウントっぽいのが登録されているなぁと思ってたけど、開始時間過ぎても来ていなかったので、なんだったんだろうな、とは思ってた。
が、しばらくしてから、２人組の人が来たが、その片方は外国の方だったので、ちとびっくり。</p>

<p>どうやら、外国の方の方は暗号通貨 Dash と言う日本ではマイナーな仮想通貨の伝道師的な人だったようで、公式の Wallet アプリが Qt で作られている関係で参加した様子。</p>

<h3 id="%E6%9A%97%E5%8F%B7%E9%80%9A%E8%B2%A8-dash">暗号通貨 Dash</h3>

<p><a href="https://www.dash.org/jp/">DASH公式サイト | DASH暗号通貨 — Dash</a></p>

<p>どうやら Core Wallet って管理アプリが Qt 4 で作られているらしい。</p>

<p>話してくれたのは、暗号通貨 Dash のコミュニティマネージャ兼伝道師兼いろいろ。</p>

<p>Dash は bitcoin のハードフォークで Core Wallet が Qt 製なのも bitcoin から受け継いだもの。</p>

<p>bitcoin はマイニングで得た報酬はマイニングした人にのみ分配されるが、Dash はマイニングで発掘された報酬を開発者に分ける仕組みがあるとのこと。</p>

<p>分配の割合は 45:45:10 で、マイナー：マスターノード（いっぱいコインを持ってる人？）：コミュニティに分配され、コミュニティに分配された報酬は、投票により開発者やマーケティングなどに使われるらしい。</p>

<p>この辺り、面白い戦略をとってると思う。</p>

<p><a href="https://github.com/dashpay/dash">dashpay/dash: Dash - Reinventing Cryptocurrency</a> が公式リポジトリっぽい。</p>

<h4 id="%E6%A8%99%E6%BA%96-wallet-%E3%81%AB%E3%81%A4%E3%81%84%E3%81%A6">標準 wallet について</h4>

<ul>
<li>Qt 4 で実装</li>
<li>改善する箇所が多い。例えば、

<ul>
<li>エクスポートはCSV形式なので、JSONなどへの対応する、など。</li>
<li>送信先の選択画面、フィルタとかもできないし、一人一人選択しないといけない。</li>
<li>Multisig 機能があるがそのUIがないのでコマンドラインを直接指定しないといけない。</li>
</ul></li>
<li>つまるところ、Qtの開発者がもっと増えて欲しい</li>
<li>先の10%をどういう風に使うかを、フォーラムで提案＆投票し決める仕組みがある。</li>
<li>改善の提案はPRでもフォーラムでもできるけど、大きな改善はフォーラムで提案すると予算が降りるかもしれない。</li>
</ul>

<h3 id="solarcoin">SolarCoin</h3>

<p>公式はたぶんこれ <a href="https://solarcoin.org/">SolarCoin | SolarCoin</a> 。</p>

<p>どうやらこっちにも携わっているみたい。</p>

<p>dash のどこかのバージョンのフォーク。</p>

<p>コアな開発者は３人ぐらいなので、こちらも増えて欲しい、とのこと。</p>

<h2 id="%E6%87%87%E8%A6%AA%E4%BC%9A">懇親会</h2>

<p>会場近くの串カツ屋さん。なんか両隣は結構有名なお店らしい。</p>

<p><img src="/images/20180414_kushikatsu.jpg" alt="串カツ田中で懇親会" /></p>

<h2 id="%E6%9C%80%E5%BE%8C%E3%81%AB">最後に</h2>

<p>久しぶりに参加したけど、久しぶりにQt触っていろいろと忘れていたこともあった。
けど、強制的に時間を確保しもくもくするのはやはり悪くない。
あと、Dash コインの話もいろいろ面白かった。</p>
]]></content>
        </entry>
            <entry>
            <title type="html"><![CDATA[Franz 用の Mastodon レシピを作りました！]]></title>
            <link href="http://www.sharkpp.net/blog/2018/03/27/franz-recipe-mastodon.html"/>
            <updated>2018-03-27T01:10:00+00:00</updated>
            <id>http://www.sharkpp.net/blog/2018/03/27/franz-recipe-mastodon.html</id>
            <content type="html"><![CDATA[<p>ネタがない... ことはないけど、これまた先日公開した <a href="https://github.com/sharkpp/franz-recipe-mastodon">Franz 5 recipe for Mastodon</a> の紹介です。</p>

<h2 id="%E3%81%9D%E3%82%82%E3%81%9D%E3%82%82-franz-%E3%81%A8%E3%81%AF%E3%81%AA%E3%82%93%E3%81%9E%E3%82%84%EF%BC%9F">そもそも Franz とはなんぞや？</h2>

<p>簡単にいうと Franz は、各種 SNS をタブでまとめて管理できるデスクトップアプリです。</p>

<p><a href="https://meetfranz.com/">Franz – a free messaging app for Slack, Facebook Messenger, WhatsApp, Telegram and more</a> からダウンロードできますが、利用するにはアカウント登録が必要です。</p>

<p>特徴として</p>

<ul>
<li>レシピ（＝拡張）を追加することで様々な SNS などの Webサービスに対応可能</li>
<li>レシピごとに複数のアカウントを割り当て可能（＝マルチアカウント対応）</li>
<li>クロスプラットフォームなデスクトップアプリ</li>
</ul>

<p>などがあります。</p>

<p>まあ、要するに Webで提供されているページをタブで表示している訳です。
そのため、LINE など Webページが存在しないサービスに対しては逆立ちしても利用できないのですが...</p>

<h2 id="%E5%BF%85%E8%A6%81%E3%81%AA%E3%82%82%E3%81%AE">必要なもの</h2>

<ul>
<li><a href="https://meetfranz.com/">Franz</a> 5 以降<br />古いバージョンはサポートしていません。</li>
<li><a href="https://joinmastodon.org/">Mastodon</a> アカウント<br />アカウントを持っていない場合は、自分で Mastodon インスタンスを立ち上げるか <a href="https://instances.social/list">Mastodon instances</a> から探して見てください</li>
</ul>

<h2 id="%E3%82%A4%E3%83%B3%E3%82%B9%E3%83%88%E3%83%BC%E3%83%AB%E6%96%B9%E6%B3%95">インストール方法</h2>

<h3 id="%E9%96%8B%E7%99%BA%E3%83%90%E3%83%BC%E3%82%B8%E3%83%A7%E3%83%B3">開発バージョン</h3>

<ol>
<li><code>franz-recipe-mastodon</code> をダウンロードします。</li>
<li>PC上の Franz Plugins フォルダを開きます<br />(メモ： <strong><code>dev</code> ディレクトリが存在しない場合は作成する必要があります</strong>)

<ul>
<li>Mac: <code>~/Library/Application Support/Franz/recipes/dev/</code></li>
<li>Windows: <code>%appdata%/Franz/recipes/dev/</code></li>
<li>Linux: <code>~/.config/Franz/recipes/dev</code></li>
</ul></li>
<li><code>franz-recipe-mastodon</code> フォルダを plugins ディレクトリにコピーします</li>
<li>Franz をリロードする</li>
</ol>

<p>詳しくは <a href="https://github.com/meetfranz/plugins/blob/master/docs/integration.md">Franz Recipe Documentation / Overview</a> を参照してください。</p>

<h3 id="%E5%AE%89%E5%AE%9A%E7%89%88">安定版</h3>

<p>準備中...</p>

<p>※ <a href="https://github.com/meetfranz/plugins/issues/137">[Deploy] Mastodon - Issue #137 - meetfranz/plugins</a> で公式リポジトリへの登録をリクエストをしているけど、どうなることやら</p>

<h2 id="%E5%88%A9%E7%94%A8%E6%96%B9%E6%B3%95">利用方法</h2>

<h3 id="%E6%96%B0%E3%81%97%E3%81%84%E3%82%B5%E3%83%BC%E3%83%93%E3%82%B9%E3%82%92%E8%BF%BD%E5%8A%A0%E3%81%99%E3%82%8B">新しいサービスを追加する</h3>

<p><img src="/images/20180327_add-service.png" alt="" /></p>

<p><em>開発バージョン</em></p>

<h3 id="%E8%A8%AD%E5%AE%9A">設定</h3>

<p><img src="/images/20180327_add-service-settings.png" alt="" /></p>

<table>
<thead>
<tr>
  <th>#</th>
  <th>フィールド</th>
  <th>説明</th>
</tr>
</thead>
<tbody>
<tr>
  <td>①</td>
  <td>サービス名</td>
  <td>自由に設定してください</td>
</tr>
<tr>
  <td>②</td>
  <td>Mastodon インスタンスのホスト名</td>
  <td>Mastodon を実行しているホストを入力してください。 httpsのみがサポートされています</td>
</tr>
</tbody>
</table>

<h3 id="%E3%82%B5%E3%82%A4%E3%83%B3%E3%82%A4%E3%83%B3">サインイン</h3>

<p><img src="/images/20180327_mstdn_jp-signin.png" alt="" /></p>

<p>登録されたアカウント情報を入力してください。</p>

<h3 id="%E9%80%9A%E7%9F%A5%E3%83%90%E3%83%83%E3%82%B8%E3%81%AB%E3%81%A4%E3%81%84%E3%81%A6">通知バッジについて</h3>

<p><img src="/images/20180327_notification-badge-example.png" alt="" /></p>

<p>利用するには <em>mastodon</em> 側でデスクトップ通知を有効にする必要があります。</p>

<p>バッジのクリア条件</p>

<table>
<thead>
<tr>
  <th>現在アクティブなサービス</th>
  <th>バッジのクリア</th>
</tr>
</thead>
<tbody>
<tr>
  <td>このサービス</td>
  <td>最後の通知から10秒後</td>
</tr>
<tr>
  <td>その他のサービス</td>
  <td>このサービスがアクティブになった時</td>
</tr>
</tbody>
</table>

<h2 id="%E3%81%8A%E3%81%BE%E3%81%91">おまけ</h2>

<p>Franz で Mastodon を管理したいなーと思って、github とかとか探して見たけど、どうやら最新版ではまともに動かないらしい、という所からじゃあ自分で作ってみようかと思って作って見ました。</p>

<p>まあ、表示するだけならなんとかなったんですが...</p>

<ul>
<li>ログイン画面へのリダイレクト（トップ画面はごちゃごちゃ表示されているので）</li>
<li>新着の通知（画面に通知が出ない）</li>
</ul>

<p>あたりの実装がすっごく大変でした。
この辺り、色々調べたことをまとめたいなとは思います。</p>
]]></content>
        </entry>
            <entry>
            <title type="html"><![CDATA[Qt 用の QDialog をベースとした吹き出し型のウィジェット]]></title>
            <link href="http://www.sharkpp.net/blog/2018/02/27/popover-widget-for-qt.html"/>
            <updated>2018-02-27T01:01:00+00:00</updated>
            <id>http://www.sharkpp.net/blog/2018/02/27/popover-widget-for-qt.html</id>
            <content type="html"><![CDATA[<p>とりあえず、ネタがないので先日に公開した <a href="https://github.com/sharkpp/qtpopover">Popover - QDialog base balloon shape widget</a> の紹介。</p>

<h2 id="%E4%BD%95%E3%81%8C%E3%81%A7%E3%81%8D%E3%82%8B%EF%BC%9F">何ができる？</h2>

<p><img src="/images/20180227_qtpopover.png" alt="スクリーンショット" /></p>

<p>こんな感じの切り欠き付きのポップアップが簡単に実装できます。</p>

<p><a href="https://developer.apple.com/documentation/appkit/nspopover">NSPopover</a> みたいなやつ。</p>

<h2 id="%E3%81%A9%E3%81%93%E3%81%A7%E5%88%A9%E7%94%A8%E3%81%A7%E3%81%8D%E3%82%8B%EF%BC%9F">どこで利用できる？</h2>

<p>現状は macOS しか動作の確認をしてないです。
もしかしたら Windows とか Linux でも動作するかも？</p>

<h2 id="%E3%81%A9%E3%81%86%E3%82%84%E3%81%A3%E3%81%A6%E4%BD%BF%E3%81%86%EF%BC%9F">どうやって使う？</h2>

<p>使い方は、</p>

<ul>
<li>ソースを組み込んで利用(a)</li>
<li>ライブラリとしてビルドして利用(b)</li>
</ul>

<p>の２種類です。</p>

<p>組み込みのサンプルは <a href="https://github.com/sharkpp/qtpopover/tree/master/examples">master/examples - qtpopover</a> あたりに。</p>

<h3 id="%E7%92%B0%E5%A2%83%E4%BE%8B">環境例</h3>

<table>
<thead>
<tr>
  <th>項目</th>
  <th>内容</th>
</tr>
</thead>
<tbody>
<tr>
  <td>アプリケーション名</td>
  <td>test</td>
</tr>
<tr>
  <td>ライブラリフォルダ</td>
  <td><code>libs</code></td>
</tr>
</tbody>
</table>

<h3 id="1%E3%82%BD%E3%83%BC%E3%82%B9%E3%82%92%E5%8F%96%E5%BE%97">1)ソースを取得</h3>

<pre><code class="console"># git submodule add git@github.com:sharkpp/qtpopover.git libs/qtpopover
# git submodule update
</code></pre>

<h3 id="2a%E3%82%BD%E3%83%BC%E3%82%B9%E3%82%92%E5%8F%96%E3%82%8A%E8%BE%BC%E3%82%80">2a)ソースを取り込む</h3>

<h4 id="2a.1%E3%83%97%E3%83%AD%E3%82%B8%E3%82%A7%E3%82%AF%E3%83%88%E3%83%95%E3%82%A1%E3%82%A4%E3%83%AB%60.pro%60%E3%82%92%E5%A4%89%E6%9B%B4">2a.1)プロジェクトファイル(<code>.pro</code>)を変更</h4>

<p>アプリケーションの <code>.pro</code> を変更する。
プロジェクトインクルードファイル（？）を追加します。</p>

<p>変更例</p>

<pre><code class="diff">+ # You can also select to disable deprecated APIs only up to a certain version of Qt.
+ #DEFINES += QT_DISABLE_DEPRECATED_BEFORE=0x060000    # disables all the APIs deprecated before Qt 6.0.0
+
+ include(./libs/qtpopover/sources/popover.pri)
+
+ SOURCES += \
+         main.cpp \
+         mainwindow.cpp \
</code></pre>

<h3 id="2b%E3%83%A9%E3%82%A4%E3%83%96%E3%83%A9%E3%83%AA%E3%82%92%E5%8F%96%E3%82%8A%E8%BE%BC%E3%82%80">2b)ライブラリを取り込む</h3>

<h4 id="2b.1%E3%83%A9%E3%82%A4%E3%83%96%E3%83%A9%E3%83%AA%E3%82%92%E3%83%93%E3%83%AB%E3%83%89">2b.1)ライブラリをビルド</h4>

<p><code>./libs/qtpopover/popover.pro</code> を <code>Qt Creator</code> で開きビルドする。</p>

<h4 id="2b.2%E3%83%97%E3%83%AD%E3%82%B8%E3%82%A7%E3%82%AF%E3%83%88%E3%83%95%E3%82%A1%E3%82%A4%E3%83%AB%60.pro%60%E3%82%92%E5%A4%89%E6%9B%B4">2b.2)プロジェクトファイル(<code>.pro</code>)を変更</h4>

<p>アプリケーションの <code>.pro</code> を変更する。</p>

<p><code>POPOVER_USE_STATIC_LIB=1</code> とプロジェクトインクルードファイル（？）を追加します。</p>

<p>変更例</p>

<pre><code class="diff">+ # You can also select to disable deprecated APIs only up to a certain version of Qt.
+ #DEFINES += QT_DISABLE_DEPRECATED_BEFORE=0x060000    # disables all the APIs deprecated before Qt 6.0.0
+
+ POPOVER_USE_STATIC_LIB=1
+ include(./libs/qtpopover/sources/popover.pri)
+
+ SOURCES += \
+         main.cpp \
+         mainwindow.cpp \
</code></pre>

<h3 id="3%60qdialog%60-%E3%83%99%E3%83%BC%E3%82%B9%E3%81%AE%E3%82%AF%E3%83%A9%E3%82%B9%E3%82%92%E4%BD%9C%E3%82%8B%E3%80%82">3)<code>QDialog</code> ベースのクラスを作る。</h3>

<h3 id="4%E3%82%BD%E3%83%BC%E3%82%B9%E3%81%AE%E5%A4%89%E6%9B%B4">4)ソースの変更</h3>

<p>変更例</p>

<pre><code class="cpp">  #include &lt;QApplication&gt;

  TaskTrayPopup::TaskTrayPopup(QWidget *parent)
-     : QDialog(parent)
+     : Popover(parent)
      , ui(new Ui::TaskTrayPopup)
  {
      ui-&gt;setupUi(this);
</code></pre>

<h3 id="5%E3%83%98%E3%83%83%E3%83%80%E3%81%AE%E5%A4%89%E6%9B%B4">5)ヘッダの変更</h3>

<p>変更例</p>

<pre><code class="cpp">  #ifndef TASKTRAYPOPUP_H
  #define TASKTRAYPOPUP_H

+ #include "popover.h"

  namespace Ui {
  class TaskTrayPopup;
  }

  class TaskTrayPopup
-         : public QDialog
+         : public Popover
  {
      Q_OBJECT

</code></pre>

<h2 id="%E3%81%AA%E3%81%9C%E4%BD%9C%E3%81%A3%E3%81%9F%EF%BC%9F">なぜ作った？</h2>

<p>いろんなところで利用できそうな Qt のクラス作ったけど、簡単に利用できる方法がないかなと、捏ねくり回して作って見ました。</p>

<p>どこかに、<code>npm i HOGE</code> とか <code>composer require HOGE</code> みたいに手軽に利用できる Qt の標準的なパッケージの仕組みはないものですかね。</p>
]]></content>
        </entry>
            <entry>
            <title type="html"><![CDATA[HAPPY NEW YEAR 2018]]></title>
            <link href="http://www.sharkpp.net/blog/2018/01/01/happy-new-year-2018.html"/>
            <updated>2018-01-01T17:35:00+00:00</updated>
            <id>http://www.sharkpp.net/blog/2018/01/01/happy-new-year-2018.html</id>
            <content type="html"><![CDATA[<p>明けましておめでとうございます。</p>

<p>ほむぺ開設 14 年目… だと思います、たぶん。
今年も一年よろしくお願いします。</p>

<p>では、今年の目標をば。</p>

<h2 id="%E7%9B%AE%E6%A8%99">目標</h2>

<ul>
<li><a href="https://github.com/sharkpp/Jugemutter">Jugemutter</a> の完成</li>
</ul>

<p>なんか公式が同じような機能を実装しているのでちょっとモチベが下がり気味だけど、とりあえずリリースしたいと思います。</p>

<h3 id="hsp%E9%96%A2%E9%80%A3">HSP関連</h3>

<ul>
<li>HSPコンテスト作品の製作！</li>
<li><a href="http://hsp-users.jp/">HSP関連サイト</a>の定期的な更新。</li>
<li>Advent Calendar の開催（三年目）</li>
<li>WINEの最新版でHSPが動くように！</li>
<li>macOSで利用できるドキュメントビューアの作成</li>
<li>HSP to rust トランスレータ</li>
</ul>

<h3 id="%E3%82%A2%E3%83%97%E3%83%AA%E9%96%A2%E9%80%A3">アプリ関連</h3>

<ul>
<li><a href="https://github.com/sharkpp/TimestampFreezer">TimestampFreezer</a> のバイナリ公開</li>
<li><a href="https://github.com/sharkpp/Jugemutter">Jugemutter</a> の完成</li>
<li>バイナリエディタを作りたい</li>
</ul>

<p>、、、できるかなぁ？</p>

<p>てなわけで、よろしくお願いいたします。</p>
]]></content>
        </entry>
            <entry>
            <title type="html"><![CDATA[大晦日@2017]]></title>
            <link href="http://www.sharkpp.net/blog/2017/12/31/new-years-eve-2017.html"/>
            <updated>2017-12-31T22:10:00+00:00</updated>
            <id>http://www.sharkpp.net/blog/2017/12/31/new-years-eve-2017.html</id>
            <content type="html"><![CDATA[<h2 id="1-%E5%B9%B4%E3%82%92%E6%8C%AF%E3%82%8A%E8%BF%94%E3%82%8A">1 年を振り返り</h2>

<p>皆々様、今年一年如何でしたでしょうか？</p>

<p>私は……　一年ほとんどが忙しかった気がします。</p>

<p>良かった人も悪かった人も「<a href="http://hsproom.me/program/view/?p=146">除夜の鐘</a>」を突いて見るのはどうでしょうか？</p>

<p>と言うことで、今年の反省をば。</p>

<h2 id="%E7%B5%90%E6%9E%9C">結果</h2>

<p>まずは、今年の正月 <a href="/blog/2017/01/01/happy-new-year-2017.html">HAPPY NEW YEAR 2017</a> に掲げた目標です。</p>

<ul>
<li><a href="http://hsp-users.jp/">HSP関連サイト</a>の定期的な更新。</li>
<li>HSPコンテスト作品の製作！</li>
<li>Advent Calendar の開催</li>
<li>macOSで利用できるドキュメントビューアの作成</li>
<li><a href="https://github.com/sharkpp/TimestampFreezer">TimestampFreezer</a> のバイナリ公開</li>
<li>バイナリエディタを作りたい</li>
<li>macOS用のGUI Diff が欲しい</li>
<li>素材関係をもう少し整理</li>
<li>音素材の公開</li>
</ul>

<p>と、こんな感じ。</p>

<p><a href="http://hsp-users.jp/">HSP関連サイト</a>の定期的な更新は、なかなか上手くいかなかったです。
サイトのツイッター <a href="https://twitter.com/hsp_users_jp">@hsp_users_jp</a> も更新がなかなかできなかったです。</p>

<p>HSPコンテストは……　見事に落としました。</p>

<p>他には、<a href="/blog/2017/">アーカイブ - 2017</a> にある諸々や、年初めに <a href="http://doc.qt.io/qt-5/qtnetworkauth-index.html">Qt Network Authorization</a> を知ってから <a href="https://github.com/sharkpp/Jugemutter">Jugemutter</a> を作り始めてみたり、<a href="/blog/2017/10/23/techbookfest3.html">技術書典３</a>で知り合いのお手伝いをしたり、「<a href="http://qiita.com/advent-calendar/2017/hsp">Hot Soup Processor Advent Calendar 2017</a>」を主催してみたりとかして遊んでいました。</p>

<p>あ、今年も<a href="https://togetter.com/li/1073136">よんた@keita44_f4 さんの日本酒の感想ツイートまとめ</a>を更新してました。お酒美味しそうですね！</p>

<h2 id="%E5%8F%8D%E7%9C%81">反省</h2>

<p>とりあえず、HSPコンテスト来年こそは……</p>

<p>あと、ほったらかしのソフトとか、Jugemutter なんとかしたいです。</p>

<p>と言うあたりで今年の反省会終了です。</p>

<p>来年もよろしくお願いします。</p>
]]></content>
        </entry>
            <entry>
            <title type="html"><![CDATA[Hot Soup Processor Advent Calendar 2017 まとめ]]></title>
            <link href="http://www.sharkpp.net/blog/2017/12/25/hsp-advent-calendar-2017-25th-day.html"/>
            <updated>2017-12-25T23:45:00+00:00</updated>
            <id>http://www.sharkpp.net/blog/2017/12/25/hsp-advent-calendar-2017-25th-day.html</id>
            <content type="html"><![CDATA[<p>こんにちは、こんばんは。</p>

<p><a href="http://qiita.com/advent-calendar/2017/hsp">Hot Soup Processor Advent Calendar 2017</a> の 最終日を担当する <a href="https://twitter.com/sharkpp">@sharkpp</a> です。</p>

<p>まず始めに、呼びかけに応え Hot Soup Processor Advent Calendar 2017 へご参加いただいた7名の皆様に深く感謝を。</p>

<p>昨年に引き続き HSP ユーザーのための HSP ユーザーによる Advent Calendar を開催して見ました。
それのまとめ的なものを最後に投稿してみようかと思います。</p>

<h2 id="%E6%8A%95%E7%A8%BF%E3%81%95%E3%82%8C%E3%81%9F%E8%A8%98%E4%BA%8B%E3%81%AE%E4%B8%80%E8%A6%A7">投稿された記事の一覧</h2>

<table>
<thead>
<tr>
  <th>日付</th>
  <th>執筆者</th>
  <th>記事</th>
</tr>
</thead>
<tbody>
<tr>
  <td>12/01</td>
  <td><a href="http://qiita.com/sharkpp">sharkpp</a></td>
  <td><a href="http://www.sharkpp.net/blog/2017/12/01/hsp-advent-calendar-2017-1st-day.html">Google Poly で公開されている素材を HSP 3 で利用してみよう</a></td>
</tr>
<tr>
  <td>12/02</td>
  <td><a href="http://qiita.com/y_tack">y_tack</a></td>
  <td><a href="https://qiita.com/y_tack/items/7eda1f2502de4611b4f7">（エターナル化してきた）OpenHSPの書写他</a></td>
</tr>
<tr>
  <td>12/03</td>
  <td><a href="http://qiita.com/mjhd-devlion">mjhd-devlion</a></td>
  <td><a href="https://qiita.com/mjhd-devlion/items/44d1a919b5485629e7e8">newlabの使い道を頑張って考えてみる</a></td>
</tr>
<tr>
  <td>12/04</td>
  <td><a href="http://qiita.com/hta393939">hta393939</a></td>
  <td><a href="https://qiita.com/hta393939/items/e6fb2399030287005b5f">HSP3.5 HGIMG4 で2Dビューポート表示</a></td>
</tr>
<tr>
  <td>12/05</td>
  <td><a href="http://qiita.com/exrd">exrd</a></td>
  <td><a href="http://fe0km.blog.fc2.com/blog-entry-125.html">Effekseerプラグインでhgimg4でも映えるエフェクトを！</a></td>
</tr>
<tr>
  <td>12/06</td>
  <td><a href="http://qiita.com/onionsoftware">onionsoftware</a></td>
  <td><a href="https://qiita.com/onionsoftware/items/d9c837725251ae89a376">シンプルな追いかけっこから始めるゲームメカニクス</a></td>
</tr>
<tr>
  <td>12/07</td>
  <td><a href="http://qiita.com/hta393939">hta393939</a></td>
  <td><a href="https://qiita.com/hta393939/items/7dc602552b71f784e61e">HSP3.5 HGIMG4 で高品質circle代用</a></td>
</tr>
<tr>
  <td>12/13</td>
  <td><a href="http://qiita.com/hatakoma">hatakoma</a></td>
  <td><a href="http://d.hatena.ne.jp/hatahata/20171213">あほべんとカレンダーで公開したミニゲームのソース公開しました。画像、音楽、効果音は再利用NGで。</a></td>
</tr>
<tr>
  <td>12/14</td>
  <td><a href="http://qiita.com/hta393939">hta393939</a></td>
  <td><a href="https://qiita.com/hta393939/items/b3eb2aeda07e5d5a9429">HSP3.5 HGIMG4 で複数カメラ視点描画</a></td>
</tr>
<tr>
  <td>12/15</td>
  <td><a href="http://qiita.com/hta393939">hta393939</a></td>
  <td><a href="https://qiita.com/hta393939/items/3e358e7e852b34b4552c">HSP3.5 HGIMG4 で物理サイコロもどき</a></td>
</tr>
<tr>
  <td>12/17</td>
  <td><a href="http://qiita.com/exrd">exrd</a></td>
  <td><a href="https://qiita.com/exrd/items/3fa31353df396ef53312">HSP3.5 で hgimg4 （再）入門</a></td>
</tr>
<tr>
  <td>12/19</td>
  <td><a href="http://qiita.com/hta393939">hta393939</a></td>
  <td><a href="https://qiita.com/hta393939/items/99e7dd7fa81714584d94">HSP3.5 HGIMG4 でイベント待ちを制御する</a></td>
</tr>
<tr>
  <td>12/20</td>
  <td><a href="http://qiita.com/hta393939">hta393939</a></td>
  <td><a href="https://qiita.com/hta393939/items/a8b2d88655f9c14b1001">HSP3.5 HGIMG4 で剛体をキネティック(強制指定)モードにする</a></td>
</tr>
<tr>
  <td>12/21</td>
  <td><a href="http://qiita.com/hta393939">hta393939</a></td>
  <td><a href="https://qiita.com/hta393939/items/aee255aa02a508e71552">HSP3.5 HGIMG4 でヘルプに書かれてないイベント動作紹介</a></td>
</tr>
<tr>
  <td>12/25</td>
  <td><a href="http://qiita.com/sharkpp">sharkpp</a></td>
  <td><a href="http://www.sharkpp.net/blog/2017/12/25/hsp-advent-calendar-2017-25th-day.html">Hot Soup Processor Advent Calendar 2017 まとめ</a></td>
</tr>
</tbody>
</table>

<h2 id="%E7%B5%90%E6%9E%9C">結果</h2>

<p><code>執筆率 = 15 / 25 = 60%</code></p>

<p>どのぐらいの日付が記事で埋まっているかの割合です。</p>

<p><code>参加率 = 7 / 15 = 46.7%</code></p>

<p>どんな人が書いたかグラフにすると</p>

<p><img src="/images/20171225_writer_graph.png" alt="書いた人" /></p>

<p>こんな感じ。</p>

<h2 id="%E6%8A%95%E7%A8%BF%E3%81%95%E3%82%8C%E3%81%9F%E8%A8%98%E4%BA%8B%E3%81%AE%E3%82%B8%E3%83%A3%E3%83%B3%E3%83%AB">投稿された記事のジャンル</h2>

<p><strong>独断と偏見で</strong>カテゴライズ</p>

<p><img src="/images/20171225_genre_graph.png" alt="ジャンル" /></p>

<p>今年は hgimg4 の記事がほとんどを占めていますね。</p>

<h2 id="%E6%B3%A8%E7%9B%AE%E8%A8%98%E4%BA%8B">注目記事</h2>

<p><strong>独断と偏見により</strong>、今回の Advent Calendar での注目記事を選びました。</p>

<p>あっ、紹介の順番がイコールで順位ということではありません。</p>

<ul>
<li>5日目の記事「<a href="http://fe0km.blog.fc2.com/blog-entry-125.html">Effekseerプラグインでhgimg4でも映えるエフェクトを！</a>」</li>
</ul>

<p><a href="https://effekseer.github.io/jp/">エフェクト制作ツール「Effekseer」</a> で作ったかっこいいエフェクトを hgimg4 で利用しようという内容の記事です。</p>

<p>最近、このツールを知って何かできないかなぁと思っていたところで、ババーン！と記事が出て来たので、思わず唸ってしまいました！</p>

<ul>
<li>6日目の記事「<a href="https://qiita.com/onionsoftware/items/d9c837725251ae89a376">シンプルな追いかけっこから始めるゲームメカニクス</a>」</li>
</ul>

<p>HSP作者のおにたまさんの記事です。</p>

<p>記事の内容はシンプルなルールのゲームの作り方を順序だてて解説しています。</p>

<p>今回は hgimg4 に関する記事が多く、これから HSP で 3D ゲームを作りたいという人にとって参考になることが多いのではないでしょうか？
また、それ以外の記事も、HSP の新たな面を見せてくれる良質な記事だと思います。</p>

<h2 id="%E6%9C%80%E5%BE%8C%E3%81%AB">最後に</h2>

<p>改めて、<a href="http://qiita.com/advent-calendar/2017/hsp">Hot Soup Processor Advent Calendar 2017</a> にご参加いただきました皆様、そして記事を呼んでくださいました読者の方々に感謝を。</p>

<p><strong>メリークリスマス！</strong></p>

<hr />

<p>この投稿は <strong><a href="http://qiita.com/advent-calendar/2017/hsp">Hot Soup Processor Advent Calendar 2017</a></strong> の <strong>25日目</strong>の記事です。</p>

<ul>
<li>21日目の記事: <a href="https://qiita.com/hta393939/items/aee255aa02a508e71552">HSP3.5 HGIMG4 でヘルプに書かれてないイベント動作紹介</a></li>
</ul>

<hr />
]]></content>
        </entry>
            <entry>
            <title type="html"><![CDATA[駆け足で Qt Network Authorization の使い方を紹介してみる]]></title>
            <link href="http://www.sharkpp.net/blog/2017/12/21/qt-advent-calendar-2017-21th-day.html"/>
            <updated>2017-12-21T23:45:00+00:00</updated>
            <id>http://www.sharkpp.net/blog/2017/12/21/qt-advent-calendar-2017-21th-day.html</id>
            <content type="html"><![CDATA[<p>こんにちは、こんばんは。</p>

<p><a href="http://qiita.com/advent-calendar/2017/qt">Qt Advent Calendar 2017</a> の 21日目を担当する <a href="https://twitter.com/sharkpp">@sharkpp</a> です。</p>

<p>昨日の <a href="https://qiita.com/Donokono/items/cb9167ee78eb758f8806">Qtでグラフを書いてみよう！</a> の自前のグラフ描画、すごかったですね。
自分も MFC で苦労して実装した覚えがあります。</p>

<p>さて、今回は Qt Network Authorization の使い方についてです。</p>

<h2 id="qt-network-authorization-%E3%81%AB%E3%81%A4%E3%81%84%E3%81%A6">Qt Network Authorization について</h2>

<p>Qt 5.8 から Technology Preview として追加された <a href="https://doc.qt.io/qt-5.10/qtnetworkauth-index.html">Qt Network Authorization</a> モジュールが、先日公開された Qt 5.10 でついに完全サポート(fully supported)されるようになりました。</p>

<p>モジュール自体は汎用的にできていて、Twitter や Facebook などの OAuth1/2 での認証に対応したサイトの利用も容易にできるようになっています。
ただ、現状は日本語の情報が少ないようなので、 Technology Preview で公開されて以降、この一年で調べたことなどをまとめていきたいと思います。</p>

<h2 id="%E7%92%B0%E5%A2%83">環境</h2>

<table>
<thead>
<tr>
  <th>バージョン</th>
  <th>注意点</th>
</tr>
</thead>
<tbody>
<tr>
  <td>Qt 5.8</td>
  <td>TP、一部サービスでソースコードの修正が必要な不具合あり</td>
</tr>
<tr>
  <td>Qt 5.9</td>
  <td>TP2、OAuthの計算がおかしい場合がある</td>
</tr>
<tr>
  <td>Qt 5.10</td>
  <td>基本はこれ！</td>
</tr>
</tbody>
</table>

<h2 id="%E3%81%93%E3%81%AE%E4%B8%80%E5%B9%B4%E3%81%AE%E5%A0%B1%E5%91%8A">この一年の報告</h2>

<h3 id="%E8%A8%98%E4%BA%8B">記事</h3>

<p>自分が書いた Qt Network Authorization に関する記事です。</p>

<p>意外と本数が少なかった。</p>

<ul>
<li><a href="/blog/2017/01/28/first-impression-qt-network-authorization.html">はじめての Qt Network Authorization</a></li>
<li><a href="/blog/2017/03/25/twitter-api-using-qt-network-authorization.html">Qt Network Authorization を使った Twitter API の利用</a></li>
<li><a href="/blog/2017/02/28/dropbox-api-using-qt-network-authorization.html">Qt Network Authorization を使った Dropbox API　の利用</a></li>
<li><a href="/blog/2017/10/21/jugemutter-development-diary-8th.html">じゅげむったーの開発日記 その８</a></li>
</ul>

<h3 id="%E4%B8%8D%E5%85%B7%E5%90%88">不具合</h3>

<p>自身が見つけた不具合です。</p>

<p>他にもいろいろ見つけたけど、どちらかと言うと要望に近かったので登録していないです、実は。</p>

<ul>
<li><a href="https://bugreports.qt.io/browse/QTBUG-59725">QTBUG-59725</a>
callback時に表示するHTMLでマルチバイト文字が欠ける</li>
<li><a href="https://bugreports.qt.io/browse/QTBUG-60400">QTBUG-60400</a>
Content-type を text/javascript で返すAPIでエラーになる</li>
</ul>

<h2 id="%E3%82%AF%E3%83%A9%E3%82%B9%E3%81%AE%E8%AA%AC%E6%98%8E">クラスの説明</h2>

<p>基本的には <a href="https://doc.qt.io/qt-5.10/qtnetworkauth-module.html">Qt Network Authorization C++ Classes</a> に書かれているクラスがすべて。</p>

<table>
<thead>
<tr>
  <th>クラス名</th>
  <th></th>
</tr>
</thead>
<tbody>
<tr>
  <td><a href="https://doc.qt.io/qt-5.10/qoauth1.html">QOAuth1</a></td>
  <td>OAuth 1 プロトコル実装</td>
</tr>
<tr>
  <td><a href="https://doc.qt.io/qt-5.10/qoauth1signature.html">QOAuth1Signature</a></td>
  <td>OAuth 1 シグネチャメソッド実装</td>
</tr>
<tr>
  <td><a href="https://doc.qt.io/qt-5.10/qoauth2authorizationcodeflow.html">QOAuth2AuthorizationCodeFlow</a></td>
  <td>承認コード付与フロー実装、QOAuth 2 用</td>
</tr>
</tbody>
</table>

<p>現状実装されているのは、 OAuth 1.x 用と OAuth 2.x 用のクラスで、Twitter や DropBox などなどサービスによってバージョンがバラバラなので APIの仕様書をよく確認する必要があります。</p>

<p>数年前に調べた結果は 「<a href="/blog/2014/03/30/oauth-providers-list.html">OAuth 認証を提供しているサービスをまとめてみました</a>」にまとめてありますので参考にしてください。</p>

<h2 id="%E5%AE%9F%E8%A3%85%E6%96%B9%E9%87%9D">実装方針</h2>

<p>いろんな実装方法があると思いますが、ここでは、クラスを new して利用する方向性、つまり…</p>

<pre><code class="cpp">    void MainWindow::onSendTweet() {
        TwitterAPI t = this-&gt;twitter;
        t-&gt;tweet("hoge");
    }
</code></pre>

<p>このような利用方法を想定として実装してみます。</p>

<h2 id="%E6%BA%96%E5%82%99">準備</h2>

<p>まずは何はともあれ、 API を利用するためのキーを取得しましょう。</p>

<p>アプリの登録方法は探せば見つかると思いますが、「<a href="/blog/2014/03/30/oauth-providers-list.html">OAuth 認証を提供しているサービスをまとめてみました</a>」で直接のリンクを張っておきましたので参考にしてみてください。</p>

<h3 id="%E7%A7%98%E3%81%99%E3%81%B9%E3%81%8D%E6%83%85%E5%A0%B1%E3%82%92%E3%81%A9%E3%81%AE%E3%82%88%E3%81%86%E3%81%AB%E6%B8%A1%E3%81%99%E3%81%8B%EF%BC%9F">秘すべき情報をどのように渡すか？</h3>

<p>この場合の、「秘すべき情報」とは、APIを利用するアプリ用の、"App key" と "App secret" と呼ばれる類のアプリ登録時にサービス側から発行してもらった情報です。</p>

<p>現状は、「プロジェクト」→「ビルド設定」→「ビルドステップ」→「追加の引数」に追加します。</p>

<p><img src="/images/20171221_qmake_args_for_oauth_apps.png" alt="OAuthのアプリケーションキーを設定するためのQMake設定" /></p>

<p>「追加の引数」に設定する内容は</p>

<pre><code>DEFINES+=TWITTER_APP_KEY="..." DEFINES+=TWITTER_APP_SECRET="..."
</code></pre>

<p>こんな感じ。</p>

<p>ソース側で利用するときは</p>

<pre><code class="cpp">                  :
#define STR__(x) #x
#define STR_(x) STR__(x)
                  :
    setClientIdentifier(STR_(TWITTER_APP_KEY));
    setClientSharedSecret(STR_(TWITTER_APP_SECRET));
                  :
</code></pre>

<p>このような形で利用しています。</p>

<p>この方法、 <code>.pro.user</code> に保存されるため QtCreator が更新された場合は設定が消えてしまうのが注意点です。</p>

<p>何か良い方法はないのでしょうか？</p>

<h2 id="%E5%AE%9F%E8%A3%85%E3%81%99%E3%82%8B%E5%89%8D%E3%81%AB">実装する前に</h2>

<p>ここからは、OAuth のバージョンによってそのクラスや利用方法が違うので順に記載していきます。</p>

<p>OAuth 1 は Twitter を利用している <a href="https://github.com/sharkpp/Jugemutter">sharkpp/Jugemutter: 長文投稿専用ツイッタークライアント「じゅげむったー」</a> を、
OAuth 2 は DropBox を利用している <a href="https://github.com/sharkpp/NetworkStorageAccessSample">sharkpp/NetworkStorageAccessSample: Qt Network Authorization "Network storage access" sample</a> を
下敷きに書き進めているので、参考にしてみてください。</p>

<h2 id="oauth-1">OAuth 1</h2>

<p>Twitter の例</p>

<p>大まかな初期化フローは</p>

<pre><code class="mermaid">graph TD;

A["初期化"] --&gt; |API エンドポイントの指定| B

B["setTemporaryCredentialsUrl() / setAuthorizationUrl() / setTokenCredentialsUrl()"] --&gt; |API キーの指定| C

C["setClientIdentifier() / setClientSharedSecret()"] --&gt; |"Auth Token 未初期化"| D0["grant()"]
C --&gt; |"Auth Token 初期化済"| F

D0 --&gt; D1("authorizeWithBrowser 受信")

F["内部状態を認証済みに変更"] --&gt; J

D1 --&gt;G
D1 --&gt;H("requestFailed 受信")

G("granted 受信") --&gt; I

I["ID情報など問い合わせ"] --&gt;  J["API利用可能"]
</code></pre>

<p>こんな感じ</p>

<p><code>QOAuth1</code> クラスから派生します。</p>

<pre><code class="cpp">#include &lt;QtCore&gt;
#include &lt;QtNetwork&gt;
#include &lt;QtNetworkAuth&gt;

class Twitter
    : public QOAuth1
{
    Q_OBJECT
public:
    :
    :
};
</code></pre>

<p>とりあえず、利用するシグナルは</p>

<table>
<thead>
<tr>
  <th>シグナル名＆プロトタイプ</th>
  <th>概要</th>
</tr>
</thead>
<tbody>
<tr>
  <td><code>void QAbstractOAuth::authorizeWithBrowser(const QUrl &amp;url)</code></td>
  <td>ブラウザでの認証要求</td>
</tr>
<tr>
  <td><code>void QAbstractOAuth::granted()</code></td>
  <td>認証フローが正常終了した。つまり、APIを利用できるような状態になった</td>
</tr>
<tr>
  <td><code>void QAbstractOAuth::requestFailed(const Error error)</code></td>
  <td>認証フローが失敗した</td>
</tr>
</tbody>
</table>

<p>これだけです。</p>

<h3 id="api-%E3%82%A8%E3%83%B3%E3%83%89%E3%83%9D%E3%82%A4%E3%83%B3%E3%83%88%E3%81%AE%E6%8C%87%E5%AE%9A">API エンドポイントの指定</h3>

<pre><code class="cpp">    setTemporaryCredentialsUrl(QUrl("https://api.twitter.com/oauth/request_token"));
    setAuthorizationUrl(QUrl("https://api.twitter.com/oauth/authenticate"));
    setTokenCredentialsUrl(QUrl("https://api.twitter.com/oauth/access_token"));
</code></pre>

<h3 id="api-%E3%82%AD%E3%83%BC%E3%81%AE%E6%8C%87%E5%AE%9A">API キーの指定</h3>

<p>これは、開発サイトなどでアプリを登録されたときに発行されるキーの組です。
値自体はさらに暗号化されているのが望ましいと思います。</p>

<pre><code class="cpp">    setClientIdentifier("..."); // TWITTER_APP_KEY
    setClientSharedSecret("..."); // TWITTER_APP_SECRET
</code></pre>

<h3 id="authorizewithbrowser-%E3%82%B7%E3%82%B0%E3%83%8A%E3%83%AB">authorizeWithBrowser シグナル</h3>

<pre><code class="cpp"> connect(this, &amp;QAbstractOAuth::authorizeWithBrowser, [=](QUrl url) {
        QUrlQuery query(url);
        query.addQueryItem("force_login", "true");
        url.setQuery(query);
        QDesktopServices::openUrl(url);
    });
</code></pre>

<p><code>QAbstractOAuth::authorizeWithBrowser</code> のシグナルを処理します。</p>

<p>これは、ブラウザで認証を行う前に引数を加えたりする(<code>query.addQueryItem("force_login", "true");</code> がこの例での引数を追加する)ためのシグナルです。</p>

<p>ここは別にラムダ式じゃなくても問題ないです。</p>

<p><code>QDesktopServices::openUrl(url);</code></p>

<p>この静的関数を呼び出すとブラウザが開き、各サービスの認証ページにアクセスが可能です。</p>

<h3 id="granted-%E3%82%B7%E3%82%B0%E3%83%8A%E3%83%AB">granted シグナル</h3>

<p>認証が正常に終了した場合ためのシグナルです。</p>

<pre><code class="cpp">  connect(this, &amp;QAbstractOAuth::granted, this, &amp;Twitter::authenticated);
</code></pre>

<p>場合によっては</p>

<pre><code class="cpp">  connect(this, &amp;QAbstractOAuth::granted, this, [=]() {
    // 認証要求成功
    Q_EMIT authenticated();
    // 続けてID情報などを取得する
    verifyCredentials();
  });
</code></pre>

<p>のように、ID情報やアイコン等の情報を予め取得するのも良いかもしれません。</p>

<h3 id="requestfailed-%E3%82%B7%E3%82%B0%E3%83%8A%E3%83%AB">requestFailed シグナル</h3>

<p>要求が失敗した場合ためのシグナルです。</p>

<p>granted シグナル の場合と同じく、何らかの形でクラス外へ通知しUI側でメッセージを表示させるなどの対応が必要になると思います。</p>

<pre><code class="cpp">  connect(this, &amp;QAbstractOAuth::requestFailed, this, &amp;Twitter::authenticateFailed);
</code></pre>

<h3 id="api-%E3%81%AE%E5%88%A9%E7%94%A8">API の利用</h3>

<p>予め GET や POST などのメソッドが用意されているためそれを利用します。</p>

<pre><code class="cpp">virtual QNetworkReply * deleteResource(const QUrl &amp;url, const QVariantMap &amp;parameters = QVariantMap()) override;
virtual QNetworkReply * get(const QUrl &amp;url, const QVariantMap &amp;parameters = QVariantMap()) override;
virtual QNetworkReply * head(const QUrl &amp;url, const QVariantMap &amp;parameters = QVariantMap()) override;
virtual QNetworkReply * post(const QUrl &amp;url, const QVariantMap &amp;parameters = QVariantMap()) override;
virtual QNetworkReply * put(const QUrl &amp;url, const QVariantMap &amp;parameters = QVariantMap()) override;
</code></pre>

<p>こんな感じですね</p>

<pre><code class="cpp">    QUrl url("https://api.twitter.com/1.1/account/verify_credentials.json");
    QUrlQuery query(url);

    QVariantMap data;
    query.addQueryItem("include_entities", "false");
    query.addQueryItem("skip_status",      "true");
    query.addQueryItem("include_email",    "false");

    url.setQuery(query);

    QNetworkReply *reply = get(url);
    connect(reply, &amp;QNetworkReply::finished, this, [=](){
        auto reply_ = qobject_cast&lt;QNetworkReply*&gt;(sender());

        // ここで結果を処理
    });
</code></pre>

<p><code>QNetworkReply</code> の結果を JSON として処理する方法などは割愛します。</p>

<h2 id="oauth-2">OAuth 2</h2>

<p>DropBox の例</p>

<p>大まかな初期化フローは</p>

<pre><code class="mermaid">graph TD;

A["初期化"] --&gt; |API エンドポイントの指定| B

B["setAuthorizationUrl() / setAccessTokenUrl()"] --&gt; |API キーの指定| C

C["setClientIdentifier() / setClientIdentifierSharedKey()"] --&gt; |"Auth Token 未初期化"| D0["grant()"]
C --&gt; |"Auth Token 初期化済"| F

F["内部状態を認証済みに変更"] --&gt; J

D0 --&gt; D1("authorizeWithBrowser 受付")

D1 --&gt;G
D1 --&gt;H("requestFailed 受付")

G("granted 受付") --&gt; I

I["ID情報など問い合わせ"] --&gt;  J["API利用可能"]
</code></pre>

<p>こんな感じ</p>

<p><code>QOAuth2AuthorizationCodeFlow</code> クラスから派生します。</p>

<pre><code class="cpp">#include &lt;QtCore&gt;
#include &lt;QtNetwork&gt;
#include &lt;QtNetworkAuth&gt;

class DropBox
    : public QOAuth2AuthorizationCodeFlow
{
    Q_OBJECT
public:
    :
    :
};
</code></pre>

<p>とりあえず、利用するシグナルは</p>

<table>
<thead>
<tr>
  <th>シグナル名＆プロトタイプ</th>
  <th>概要</th>
</tr>
</thead>
<tbody>
<tr>
  <td><code>void QAbstractOAuth::authorizeWithBrowser(const QUrl &amp;url)</code></td>
  <td>ブラウザでの認証要求</td>
</tr>
<tr>
  <td><code>void QOAuth2AuthorizationCodeFlow::statusChanged(QAbstractOAuth::Status status)</code></td>
  <td></td>
</tr>
</tbody>
</table>

<p>これだけです。</p>

<h3 id="api-%E3%82%A8%E3%83%B3%E3%83%89%E3%83%9D%E3%82%A4%E3%83%B3%E3%83%88%E3%81%AE%E6%8C%87%E5%AE%9A">API エンドポイントの指定</h3>

<p><code>OAuth1</code> クラスとはメソッドが違っているので注意です。</p>

<pre><code class="cpp">    setAuthorizationUrl(QUrl("https://www.dropbox.com/oauth2/authorize"));
    setAccessTokenUrl(QUrl("https://api.dropbox.com/oauth2/token"));
</code></pre>

<h3 id="api-%E3%82%AD%E3%83%BC%E3%81%AE%E6%8C%87%E5%AE%9A">API キーの指定</h3>

<p>これは、開発サイトなどでアプリを登録されたときに発行されるキーの組です。
値自体はさらに暗号化されているのが望ましいと思います。</p>

<p><code>OAuth1</code> クラスとはメソッドが違っているので注意です。</p>

<pre><code class="cpp">    setClientIdentifier("..."); // DROPBOX_APP_KEY
    setClientIdentifierSharedKey("..."); // DROPBOX_APP_SECRET
</code></pre>

<h3 id="%E8%A6%81%E6%B1%82%E5%89%8D%E3%81%AE%E3%83%91%E3%83%A9%E3%83%A1%E3%83%BC%E3%82%BF%E5%A4%89%E6%9B%B4">要求前のパラメータ変更</h3>

<p>認証処理中に受け渡されるデータを編集するための関数を登録します。</p>

<pre><code class="cpp">    setModifyParametersFunction([&amp;](Stage stage, QVariantMap* data) {
        if (Stage::RequestingAuthorization == stage ||
            Stage::RequestingAccessToken   == stage)
        {
            data-&gt;remove(Key::redirectUri);
        }
    });
</code></pre>

<p>DropBox では リダイレクト先のURLが存在していると意図しない動きをするため削除しています。</p>

<h3 id="authorizewithbrowser-%E3%82%B7%E3%82%B0%E3%83%8A%E3%83%AB">authorizeWithBrowser シグナル</h3>

<pre><code class="cpp"> connect(this, &amp;QAbstractOAuth::authorizeWithBrowser, [=](QUrl url) {
        QUrlQuery query(url);
        customReplyHandler-&gt;setState(query.queryItemValue(Key::state));
        QDesktopServices::openUrl(url);
    });
</code></pre>

<p><code>QAbstractOAuth::authorizeWithBrowser</code> のシグナルを処理します。</p>

<p>これは、ブラウザで認証を行う前に引数を加えたりするためのシグナルです。</p>

<p>ここは別にラムダ式じゃなくても問題ないです。</p>

<p><code>QDesktopServices::openUrl(url);</code></p>

<p>この静的関数を呼び出すとブラウザが開き、各サービスの認証ページにアクセスが可能です。</p>

<h3 id="statuschanged-%E3%82%B7%E3%82%B0%E3%83%8A%E3%83%AB">statusChanged シグナル</h3>

<p>認証ステータスが変化した時に呼ばれます。</p>

<pre><code class="cpp">    connect(this, &amp;QOAuth2AuthorizationCodeFlow::statusChanged, [=](QAbstractOAuth::Status status) {
        if (QAbstractOAuth::Status::Granted == status) {
            Q_EMIT authenticated();
        }
    });
</code></pre>

<p>ちょっとここは覚えてないですが、少なくとも当時は <code>QOAuth2AuthorizationCodeFlow::granted</code> シグナルではうまく処理できなかったみたいなので、認証ステータスの変化時にこのクラスを利用する側に対してシグナルを発報しています。</p>

<h3 id="api-%E3%81%AE%E5%88%A9%E7%94%A8">API の利用</h3>

<p>API の利用 は OAuth 1 の場合と同じなので割愛します。</p>

<h3 id="%E8%A3%9C%E8%B6%B3">補足</h3>

<p>例として出した DropBox は、出た当時の実装だと色々と不具合がでてこ汚い手を使って回避しないと実装できなかったため、ソース自体が参考にするにはふさわしくないかもしれません。</p>

<p>また、そのあたりソースは今回割愛しています。
興味がある方は <a href="https://github.com/sharkpp/NetworkStorageAccessSample">sharkpp/NetworkStorageAccessSample: Qt Network Authorization "Network storage access" sample</a> を参照しいてください。</p>

<h2 id="%E5%8F%82%E8%80%83">参考</h2>

<ul>
<li><a href="https://github.com/sharkpp/NetworkStorageAccessSample">sharkpp/NetworkStorageAccessSample: Qt Network Authorization "Network storage access" sample</a></li>
<li><a href="https://github.com/sharkpp/Jugemutter">sharkpp/Jugemutter: 長文投稿専用ツイッタークライアント「じゅげむったー」</a></li>
<li><a href="https://doc.qt.io/qt-5.10/qtnetworkauth-module.html">Qt Network Authorization C++ Classes | Qt Network Authorization 5.10</a></li>
</ul>

<h2 id="%E6%9C%80%E5%BE%8C%E3%81%AB">最後に</h2>

<p>今回は、新たに標準として加わった <a href="https://doc.qt.io/qt-5.10/qtnetworkauth-index.html">Qt Network Authorization</a> モジュール を駆け足で紹介しました。</p>

<p>お仕事でも趣味でも <code>Qt Network Authorization</code> モジュールを使ってみようかと思う方の参考になれば幸いです。</p>

<p>それでは、また。</p>

<p>明日は <a href="https://qiita.com/ynuma">ynuma</a> さんによる「<a href="https://qiita.com/ynuma/items/21e49d084f1f5c8d3e4d">QtRuby を使ってみました</a>」です。
お楽しみに。</p>

<hr />

<p>この投稿は <strong><a href="http://qiita.com/advent-calendar/2017/qt">Qt Advent Calendar 2017</a></strong> の <strong>21日目</strong>の記事です。</p>

<ul>
<li>20日目の記事: <a href="https://qiita.com/Donokono/items/cb9167ee78eb758f8806">Qtでグラフを書いてみよう！</a></li>
<li>22日目の記事: <a href="https://qiita.com/ynuma/items/21e49d084f1f5c8d3e4d">QtRuby を使ってみました</a></li>
</ul>

<hr />
]]></content>
        </entry>
            <entry>
            <title type="html"><![CDATA[Google Poly で公開されている素材を HSP 3 で利用してみよう]]></title>
            <link href="http://www.sharkpp.net/blog/2017/12/01/hsp-advent-calendar-2017-1st-day.html"/>
            <updated>2017-12-01T23:25:00+00:00</updated>
            <id>http://www.sharkpp.net/blog/2017/12/01/hsp-advent-calendar-2017-1st-day.html</id>
            <content type="html"><![CDATA[<p>こんにちは、こんばんは。</p>

<p><a href="http://qiita.com/advent-calendar/2017/hsp">Hot Soup Processor Advent Calendar 2017</a> の 初日を担当する <a href="https://twitter.com/sharkpp">@sharkpp</a> です。</p>

<p>この記事では、Google Poly で公開されている <a href="https://ja.wikipedia.org/wiki/Wavefront_.obj%E3%83%95%E3%82%A1%E3%82%A4%E3%83%AB">Wavefront .OBJ ファイル</a> を HSP の hgimg4 で利用してみる方法について書いてみました。</p>

<h2 id="%E3%81%AF%E3%81%98%E3%82%81%E3%81%AB">はじめに</h2>

<p><img src="/images/2017_1201_poly_ss.png" alt="Google Poly" /></p>

<p>皆さんは、ちょうどひと月前に公開された Google の <a href="https://poly.google.com/">Poly</a> というサイトをご存知でしょうか？</p>

<p>似てますが Google Play じゃないですよ？</p>

<p>このサイトは、Google が公開した VR/AR向け素材のライブラリサイトで、クレジット（著作権表示）を行えば改変なども可能な CC BY ライセンスで数多くの素材が公開されています。</p>

<p>今回はこのサイトに登録されている Tilt Brush 以外で作られた OBJ をダウンロードして hgimg4 で表示してみることにします。</p>

<p>あ、 HSP は 3.5 を利用しています。</p>

<h2 id="%E7%B4%A0%E6%9D%90%E3%81%AE%E7%94%A8%E6%84%8F">素材の用意</h2>

<p>とりあえず、適当に素材を選びます。</p>

<p>この時、Google の VR お絵かきソフトである <a href="https://www.tiltbrush.com/">Tilt Brush</a> で作られた素材は、形式が OBJ ではないことが理由なのか何なのかは分からないですがダウンロードができません。
なので <a href="https://vr.google.com/blocks/">Blocks</a> や、それ以外で作られた素材を探します。</p>

<p>ダウンロードを押下すると</p>

<blockquote>
  <p>このコンテンツは CC-BY ライセンスで公開されています。著作権に関する情報を表示する必要があります。</p>
</blockquote>

<p>などと、利用する場合の注意点が表示されるのでよく確認しておきましょう。</p>

<p>フィルタを利用すると探すのが容易になります。</p>

<p><img src="/images/2017_1201_poly_obj_download.png" alt="" /></p>

<p>素材によっては OBJ 形式以外にも</p>

<ul>
<li>三角 OBJ ファイル</li>
<li>FBX ファイル</li>
</ul>

<p>など、別の形式が選べる場合もあります。</p>

<p>FBX ファイルをダウンロードして利用する場合は、次の OBJ から FBX への変換処理は必要ないので読み飛ばしてください。</p>

<h2 id="%E9%81%B8%E3%82%93%E3%81%A0%E7%B4%A0%E6%9D%90">選んだ素材</h2>

<p><a href="https://poly.google.com/view/frPqTFGeRNM">東京タワー</a></p>

<p><img src="/images/2017_1201_model_frPqTFGeRNM.png" alt="東京タワー" /></p>

<blockquote>
  <p>&copy; <a href="https://poly.google.com/user/99VuVXH6oer">Kenta Imai (henteko)</a></p>
</blockquote>

<p><a href="https://poly.google.com/view/3gEvVZoTN7e">Lighthouse</a></p>

<p><img src="/images/2017_1201_model_3gEvVZoTN7e.png" alt="Lighthouse" /></p>

<blockquote>
  <p>&copy; <a href="https://poly.google.com/user/fa4m5c69h51">Robert Mirabelle</a></p>
</blockquote>

<p><a href="https://poly.google.com/view/2binsxeOBve">Rio de Janeiroy</a></p>

<p><img src="/images/2017_1201_model_2binsxeOBve.png" alt="Rio de Janeiroy" /></p>

<blockquote>
  <p>&copy; <a href="https://poly.google.com/user/13QtrlRKjO-">Alan Zimmermany</a></p>
</blockquote>

<p><a href="https://poly.google.com/view/cINomH54DAx">McGraw Athletic Centery</a></p>

<p><img src="/images/2017_1201_model_cINomH54DAx.png" alt="McGraw Athletic Centery" /></p>

<blockquote>
  <p>&copy; <a href="https://poly.google.com/user/eH7rRxk0HuE">Jordan Van Wyky</a></p>
</blockquote>

<p><a href="https://poly.google.com/view/3vKuzmkSpdr">new growthy</a></p>

<p><img src="/images/2017_1201_model_3vKuzmkSpdr.png" alt="new growthy" /></p>

<blockquote>
  <p>&copy; <a href="https://poly.google.com/user/eXRnbKFZIta">Tanner Whytey</a></p>
</blockquote>

<p><a href="https://poly.google.com/view/8Jp1S6F0uzi">Bonsaiy</a></p>

<p><img src="/images/2017_1201_model_8Jp1S6F0uzi.png" alt="Bonsaiy" /></p>

<p>&copy; <a href="https://poly.google.com/user/cMk8S7aDHny">brett hursty</a></p>

<h2 id="hgimg4-%E5%B0%82%E7%94%A8%E5%BD%A2%E5%BC%8F%E3%81%B8%E5%A4%89%E6%8F%9B">hgimg4 専用形式へ変換</h2>

<p>HSP付属の GPB Converter というツールは FBX からの変換のみに対応しているようなので OBJ から FBX 形式への変換処理をする必要があります。</p>

<p>昔は Autodesk FBX Converter がダウンロード出たようですが、今見に行くと Autodesk FBX Preview のダウンロードページへと飛ばされてしまいます。</p>

<p>なので、探し回ったところ、幸運なことに <a href="https://archive.org/">Internet Archive</a> で保存されていた昔のページ <a href="http://web.archive.org/web/20170926144107/http://usa.autodesk.com/adsk/servlet/pc/item?siteID=123112&amp;id=22694909">FBX® 2013.3 Converter</a> からダウンロードすることができました。</p>

<table>
<thead>
<tr>
  <th>ファイル名</th>
  <th>MD5</th>
</tr>
</thead>
<tbody>
<tr>
  <td><code>fbx20133_converter_win_x64.exe</code></td>
  <td><code>5435cf1371502e66b9048834b897011e</code></td>
</tr>
</tbody>
</table>

<p>FBX Converter を起動すると、左側に元ファイル(<code>Source files</code>)、右側に変換後のファイル(<code>Destination files</code>) の欄が表示されます。</p>

<p><img src="/images/2017_1201_FBX_Converter_2013.png" alt="FBX Converter 2013" /></p>

<p><code>Add...</code> ボタンか <code>.obj</code> ファイルをドロップすることでリストに登録できます。</p>

<p>右下の <code>Convert</code> で変換が出来ます。</p>

<p><code>.FBX</code> 形式に変換したら hgimg4 で利用するために <code>.gpb</code> 形式に変換します。</p>

<p>GPB Converter というのが標準ツールとしてありますのでそれを使いますが、HSPのインストールフォルダパスにスペースが含まれているとうまく動かないようです。</p>

<p>もし、うまくファイルが変換できない場合は、コマンロプロンプトで <code>gameplay-encoder</code> で呼び出してみましょう。</p>

<pre><code>&gt; gameplay-encoder "model.fbx" "model.gpb"
Encoding file: model.fbx
Loading FBX file.
Loading Scene.
Triangulate.
Load nodes.
Load materials
Loading animations.
Optimizing GamePlay Binary.
Saving binary file: model.gpb

&gt; gameplay-encoder -m "model.fbx" "model.material"
Encoding file: model.fbx
Loading FBX file.
Loading Scene.
Triangulate.
Load nodes.
Load materials
Loading animations.
Optimizing GamePlay Binary.
Saving binary file: model.gpb
</code></pre>

<h2 id="hgimg4-%E3%81%A7%E8%AA%AD%E3%81%BF%E8%BE%BC%E3%81%BF">hgimg4 で読み込み</h2>

<p>後は簡単です。</p>

<p>※ <code>sample/hgimg4/test8.hsp</code></p>

<pre><code>#include "hgimg4.as"

title "HGIMG4 Test"

    gpreset
    setcls CLSMODE_SOLID, $404040
    gpload id_model,"data/frPqTFGeRNM_9L5eUA1sj4m_obj/model"
    setpos GPOBJ_CAMERA, 0,0,5
    x=0.0:y=0.0:z=0.0

repeat
    stick key,15
    if key&amp;128 : end

    redraw 0
    addang id_model,0,0.02
    gpdraw
    color 255,255,255
    pos 8,8:mes "HGIMG4 sample"
    redraw 1
    await 1000/60
loop
</code></pre>

<p>と、このようにモデルデータを指定し読み込むことができます。</p>

<p><img src="/images/2017_1201_hgimg4_frPqTFGeRNM.png" alt="東京タワー" /></p>

<p><img src="/images/2017_1201_hgimg4_cINomH54DAx.png" alt="McGraw Athletic Centery" /></p>

<p><img src="/images/2017_1201_hgimg4_3gEvVZoTN7e.png" alt="Lighthouse" /></p>

<p>何点か読み込ませてみた感じ、</p>

<ul>
<li>巨大で読み込みに時間かかるモデルがある
<a href="https://poly.google.com/view/3vKuzmkSpdr">new growthy</a> とか <a href="https://poly.google.com/view/8Jp1S6F0uzi">Bonsaiy</a> これ</li>
<li>スケールに規格があるわけではないのでマチマチ</li>
<li>テクスチャが読み込めない</li>
<li>材質？が反映できていない？</li>
</ul>

<p>テクスチャは、パスとかファイル形式などが理由かもしれませんが未解決です。</p>

<h2 id="%E3%81%8A%E3%82%8F%E3%82%8A%E3%81%AB">おわりに</h2>

<p>パッとさわってみた限り、テクスチャの問題を除いても、そのままで HSP で利用できそうなのが少ない印象でした。
ここは、HSP専用のassetストアの解説が待たれるところです！</p>

<p>明日は <a href="https://twitter.com/y_tack">@y_tack</a> さんの「<a href="https://qiita.com/y_tack/items/7eda1f2502de4611b4f7">（エターナル化してきた）OpenHSPの書写他</a>」です。</p>

<p>楽しみですね。</p>

<h2 id="%E5%8F%82%E8%80%83">参考</h2>

<ul>
<li><a href="https://poly.google.com/">Poly</a></li>
<li><p><a href="https://poly.google.com/view/4NYtgQKdVMy">Parking Lot - Poly</a></p></li>
<li><p><a href="http://www.greentoken.de/onlineconv/">Online 3D Converter</a></p></li>
<li><a href="https://knowledge.autodesk.com/ja/search-result/caas/sfdcarticles/sfdcarticles/kA230000000u0m3.html">Autodesk FBX Converter について | 検索 | Autodesk Knowledge Network</a></li>
<li><a href="http://web.archive.org/web/20170926144107/http://usa.autodesk.com/adsk/servlet/pc/item?siteID=123112&amp;id=22694909">Autodesk - Autodesk FBX - FBX® 2013.3 Converter</a></li>
<li><a href="https://mathtrain.jp/rthetaphi">三次元極座標についての基本的な知識 | 高校数学の美しい物語</a></li>
<li><a href="http://lhsp.s206.xrea.com/command/mousew.html">mousew変数 （マウスホイールの回転量取得） - Let's HSP!</a></li>
<li><a href="https://www.peko-step.com/tool/tfrad.html">ラジアン(弧度法)と度(度数法)の相互変換ツールと変換計算式 - PEKO STEP</a></li>
</ul>

<hr />

<p>この投稿は <strong><a href="http://qiita.com/advent-calendar/2017/hsp">Hot Soup Processor Advent Calendar 2017</a></strong> の <strong>1日目</strong>の記事です。</p>

<ul>
<li>2日目の記事: <a href="https://qiita.com/y_tack/items/7eda1f2502de4611b4f7">（エターナル化してきた）OpenHSPの書写他</a></li>
</ul>

<hr />
]]></content>
        </entry>
    </feed>