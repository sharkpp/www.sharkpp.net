<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
    <title><![CDATA[さめたすたすのお家]]></title>
    <link href="http://www.sharkpp.net/blog/tags/QtQuick.xml" rel="self"/>
    <link href="http://www.sharkpp.net/"/>
    <updated>2019-04-27T08:59:02+00:00</updated>
    <id>http://www.sharkpp.net/</id>
            <author>
            <name><![CDATA[sharkpp]]></name>                    </author>
        <generator uri="http://sculpin.io/">Sculpin</generator>
            <entry>
            <title type="html"><![CDATA[名古屋Qt勉強会#27 に参加しました]]></title>
            <link href="http://www.sharkpp.net/blog/2019/04/27/qt-nagoya-27.html"/>
            <updated>2019-04-27T17:30:00+00:00</updated>
            <id>http://www.sharkpp.net/blog/2019/04/27/qt-nagoya-27.html</id>
            <content type="html"><![CDATA[<p>4月27日(土) に開催された <a href="https://qt-users.connpass.com/event/128431/">Qt 勉強会 @ Nagoya #27 - connpass</a> に久しぶりに参加しました。</p>

<p>そのまとめです。</p>

<p><img src="/images/20190427_frame_extract.png" alt="成果" /></p>

<h2 id="%E8%87%AA%E5%B7%B1%E7%B4%B9%E4%BB%8B">自己紹介</h2>

<p>毎回の通り、自己紹介と本日やることを宣言。</p>

<h2 id="%E8%87%AA%E5%88%86%E3%81%AE%E6%9C%AC%E6%97%A5%E3%81%AE%E3%82%84%E3%82%8B%E3%81%93%E3%81%A8">自分の本日のやること</h2>

<ul>
<li>動画からフレームを切り出し動画のメタ情報とフレーム位置に応じた時刻を設定するツールを実装</li>
</ul>

<p>機能</p>

<ul>
<li>動画から複数のフレームを選んで画像として抜き出すことができる</li>
<li>抜き出した画像には動画のメタ情報を設定できる</li>
<li>メタ情報としてフレームの位置に応じた時間情報を設定する</li>
</ul>

<p>課題</p>

<ul>
<li>フレームをプレビューする際の大量の画像をどうするか？</li>
<li>フレームの抜き出しや、メタ情報の取得、設定などをどう実現するか？</li>
<li>基本的には <code>ffmpeg</code> や <code>exiftool</code> などを使えばいいが、コマンドを叩く方向性で行くと別のプラットフォームで困るので最終的にはライブラリを使いたい</li>
</ul>

<h2 id="%E6%9C%AC%E6%97%A5%E3%81%AE%E7%9F%A5%E8%A6%8B">本日の知見</h2>

<h3 id="droparea%E3%81%AB%E3%81%A4%E3%81%84%E3%81%A6"><a href="https://doc.qt.io/qt-5/qml-qtquick-droparea.html">DropArea</a>について</h3>

<p><code>DropArea.keys</code> と <code>DragEvent.hasXXX</code> との関係</p>

<table>
<thead>
<tr>
  <th><code>DragEvent</code></th>
  <th><code>DropArea.keys</code></th>
</tr>
</thead>
<tbody>
<tr>
  <td><code>.hasColor == true</code></td>
  <td></td>
</tr>
<tr>
  <td><code>.hasHtml == true</code></td>
  <td><code>text/html</code> たぶん</td>
</tr>
<tr>
  <td><code>.hasText == true</code></td>
  <td><code>text/plain</code></td>
</tr>
<tr>
  <td><code>.hasUrls == true</code></td>
  <td><code>text/uri-list</code></td>
</tr>
</tbody>
</table>

<p><code>DropArea.keys</code> は <code>DragEvent.keys</code> の値をフィルタするもの。
ファイルの内容をもとにMIMEタイプが設定され（そもそもされない）、それをフィルタするわけではない。</p>

<h3 id="qt-creator-%E3%81%A7%E3%83%87%E3%83%90%E3%83%83%E3%82%B0%E5%AF%BE%E8%B1%A1%E3%81%AE%E3%82%A2%E3%83%97%E3%83%AA%E3%82%92%E4%B8%80%E3%81%A4%E3%81%AE%E3%81%BF%E8%B5%B7%E5%8B%95%E3%81%95%E3%81%9B%E3%82%8B%E6%96%B9%E6%B3%95">Qt Creator でデバッグ対象のアプリを一つのみ起動させる方法</h3>

<p>Qt Creatorの「設定」→「ビルドと実行」→「ビルド前にアプリケーションを停止する」で設定できる！</p>

<p><a href="/images/20190427_qtcreator_single_app_debug_config.png"><img src="/thumbs/34d43cc47a3729ad2c1d954456d24233-640x640.png" alt="ビルド前にアプリケーションを停止するの設定"></a></p>

<h3 id=".qml-%E3%81%A8-.ui.qml">.qml と .ui.qml</h3>

<p><code>.qml</code> はJavaScriptのコードを書いたりコンポーネントをレイアウトしたりなんでもできる。</p>

<p><code>.ui.qml</code> は <code>.qml</code> でできることの一部、コードを書いたり、が制限されているが、代わりにデザインツールを使い、GUIでレイアウトを変更できる。</p>

<p>デザインツールではJavaScriptでイベント処理をかけない代わりに、<a href="https://doc.qt.io/qt-5/qml-qtquick-state.html">状態遷移</a>ごとのレイアウトを設定できる。</p>

<p><a href="/images/20190427_qtcreator_design_states.png"><img src="/thumbs/902276ffa87b2353c16384c6a3baa2b4-640x640.png" alt="状態遷移"></a></p>

<h3 id="%E3%83%95%E3%82%A1%E3%82%A4%E3%83%AB%E6%9B%B8%E3%81%8D%E5%87%BA%E3%81%97%E3%81%AA%E3%81%97%E3%81%A7%E3%81%AE%E3%82%B5%E3%83%A0%E3%83%8D%E3%82%A4%E3%83%AB%E3%81%AE%E7%94%9F%E6%88%90">ファイル書き出しなしでのサムネイルの生成</h3>

<p>どうも ffmpeg で標準出力に画像を書き出せ、かつ QML でもオンメモリにダイレクトでファイルを書き出せるらしい？</p>

<h2 id="%E6%9C%AC%E6%97%A5%E3%81%AE%E9%80%B2%E6%8D%97">本日の進捗</h2>

<p>思うようにファイルのドロップがうまくいかずなかなか進まなかったが、結局のところわかれば簡単なことで、要するにドキュメントはちゃんと読もうねって話だった。</p>

<p>デザインツールで画面を作ってくと割とサクサク画面ができるのでもっと活用していきたい。</p>

<p>あと、 <code>.qml</code> と <code>.ui.qml</code> の使い分けとかもパターン化を自分の中で作っていければ、サクサク進められそうな感じがした。</p>

<p>あと、個人的には Visual Studio みたいにデバッグ対象のアプリケーションが１つのみ立ち上がってくれる設定を見つけたのが一番嬉しかったりする。</p>

<h2 id="%E5%8F%82%E8%80%83">参考</h2>

<ul>
<li>ファイルドロップ関連

<ul>
<li><a href="https://doc.qt.io/qt-5/qml-qtquick-droparea.html">DropArea QML Type</a></li>
<li><a href="https://doc.qt.io/qt-5/qml-qtquick-dragevent.html">DragEvent QML Type</a></li>
<li><a href="https://doc.qt.io/qt-5/qtquick-draganddrop-example.html">Qt Quick Examples - Drag and Drop</a></li>
</ul></li>
<li>その他

<ul>
<li><a href="https://doc.qt.io/qt-5/qml-qtquick-state.html">State QML Type</a></li>
</ul></li>
<li>設定関連

<ul>
<li><a href="https://forum.qt.io/post/309613">Running two applications in the same Qt Creator instance</a></li>
</ul></li>
<li>onメモリでの画像の作成など

<ul>
<li><a href="https://stackoverflow.com/questions/23667088/qtquick-dynamic-images-and-c">qml - QtQuick Dynamic Images and C++ - Stack Overflow</a></li>
<li><a href="https://doc.qt.io/qt-5/qquickimageprovider.html">QQuickImageProvider Class</a></li>
<li><a href="https://qiita.com/kokeiro001/items/0e321c30cccc45ae44a4#%E9%80%A3%E7%B6%9A%E3%81%97%E3%81%9F%E7%94%BB%E5%83%8F%E3%82%92%E3%83%91%E3%82%A4%E3%83%97%E3%81%A7%E5%8F%96%E3%82%8A%E5%87%BA%E3%81%99ver">ffmpegを用いて動画から画像を取り出す【C#】 - Qiita</a></li>
</ul></li>
</ul>
]]></content>
        </entry>
            <entry>
            <title type="html"><![CDATA[名古屋Qt勉強会#24 に参加しました]]></title>
            <link href="http://www.sharkpp.net/blog/2019/01/19/qt-nagoya-24.html"/>
            <updated>2019-01-19T17:30:00+00:00</updated>
            <id>http://www.sharkpp.net/blog/2019/01/19/qt-nagoya-24.html</id>
            <content type="html"><![CDATA[<p>1月19日(土) に開催された <a href="https://qt-users.connpass.com/event/113801/">Qt 勉強会 @ Nagoya #24 - connpass</a> に久しぶりに参加しました。</p>

<p>そのまとめです。</p>

<p><img src="/images/20190119_qauthwith1.png" alt="成果" /></p>

<h2 id="%E6%9C%AC%E6%97%A5%E3%81%AE%E7%9F%A5%E8%A6%8B">本日の知見</h2>

<h3 id="listview-%E3%81%AE%E8%83%8C%E6%99%AF%E3%81%AE%E3%83%9E%E3%82%A6%E3%82%B9%E3%82%A4%E3%83%99%E3%83%B3%E3%83%88%E3%82%92%E9%80%8F%E9%81%8E">ListView の背景のマウスイベントを透過</h3>

<p>ListView の背景のマウスイベントを透過する方法。
結構、実現するのに時間がかかったけど、結局はプロパティを一つ変えるだけだった。</p>

<p>まず Qt Quick の <a href="http://doc.qt.io/qt-5/qml-qtquick-listview.html">ListView</a> は次のような派生で実装されています。</p>

<pre><code>QtObject
  +- Item
       +- Flickable
            +- ListView
</code></pre>

<p>それでもって ListView の背景を透明にしても、その下にあるコンポーネントに対しては、マウスのホバー以外のクリックやホイール操作は渡されない。</p>

<p>結局のところ色々調べたところ、 <a href="http://doc.qt.io/qt-5/qml-qtquick-flickable.html">Flickable</a> がフリック操作を検知するためにマウスのイベントを処理している様子。</p>

<p>なので、答えは</p>

<pre><code>    ListView {
        interactive: false
    }
</code></pre>

<p>と、 <code>interactive</code> プロパティを <code>false</code> にすれば良いようです。</p>

<p>ちなみに、この設定を変更すると当然のことながらフリック動作が聞かなくなります。</p>

<h3 id="%E3%83%A9%E3%83%A0%E3%83%80%E5%BC%8F">ラムダ式</h3>

<p>スコープに注意！</p>

<p>コンストラクタでラムダ式を引数に渡してメソッドを呼び出したら（実際の実行は遅延される）スコープ抜けた途端に破棄されていた。</p>

<p>メンバ変数に代入して生存の時間を伸ばして解決。</p>

<h2 id="%E6%87%87%E8%A6%AA%E4%BC%9A">懇親会</h2>

<p>もぐもぐ</p>

<p><img src="/images/20190119_mogmog.jpg" alt="もぐもぐ" /></p>

<h2 id="%E5%8F%82%E8%80%83">参考</h2>

<ul>
<li><a href="http://doc.qt.io/qt-5/qml-qtquick-flickable.html#interactive-prop">Flickable QML Type | Qt Quick 5.12</a></li>
</ul>
]]></content>
        </entry>
            <entry>
            <title type="html"><![CDATA[名古屋Qt勉強会#19 に参加しました]]></title>
            <link href="http://www.sharkpp.net/blog/2018/08/26/qt-nagoya-19.html"/>
            <updated>2018-08-26T09:57:00+00:00</updated>
            <id>http://www.sharkpp.net/blog/2018/08/26/qt-nagoya-19.html</id>
            <content type="html"><![CDATA[<p>8月25日(土) に開催された <a href="https://qt-users.connpass.com/event/98190/">Qt 勉強会 @ Nagoya #19 - connpass</a> に参加しました。</p>

<p>そのまとめなどです。</p>

<p><img src="/images/20180825_qauthwith1.png" alt="成果" /></p>

<h2 id="%E5%8B%95%E7%9A%84%E3%81%AB%E8%BF%BD%E5%8A%A0%E3%81%97%E3%81%9F%E3%82%B3%E3%83%B3%E3%83%9D%E3%83%BC%E3%83%8D%E3%83%B3%E3%83%88%E3%81%ABc%2B%2B%E5%81%B4%E3%81%8B%E3%82%89%E5%80%A4%E3%82%92%E8%A8%AD%E5%AE%9A%E3%81%99%E3%82%8B">動的に追加したコンポーネントにC++側から値を設定する</h2>

<p>たぶんこのままではちゃんと動かないけど、雰囲気それらしいメモ。</p>

<pre><code class="javascript">// .qml
    Component {
        id: hogeHoge
        Label {
            property variant hoge: null
            anchors.right: parent.right
            anchors.left: parent.left
            text: ""
            Component.onCompleted: {
                hoge.bind(this);
            }
        }
    }
            :
    hogeHoge.createObject(container, {
        hoge: hoge
    })

</code></pre>

<pre><code class="cpp">// .h
class Hoge : public QObject {
                  :
    Q_INVOKABLE void bind(QObject* object);
                  :
}
</code></pre>

<pre><code class="cpp">// .cpp
               :
    QQmlApplicationEngine engine;
    Hoge hoge;
    engine.rootContext()-&gt;setContextProperty("hoge", &amp;hoge);
               :
void Hoge::bind(QObject* object)
{
    qDebug() &lt;&lt; object; // QQuickLabel_QML_99(0xffffffffff00)

    // read from
    qDebug()  &lt;&lt; "Property value:" &lt;&lt; object-&gt;property("text").toString();
//or qDebug() &lt;&lt; "Property value:" &lt;&lt; QQmlProperty::read(object, "text").toString();

    // write to
    object-&gt;setProperty("text", "aaaa");
//or QQmlProperty::write(object, "text", aaaa);
}
</code></pre>

<h2 id="%08qt-documentation-%E3%81%AB%E4%B8%80%E7%9E%AC%E8%A1%A8%E7%A4%BA%E3%81%95%E3%82%8C%E3%82%8B%E3%82%A2%E3%82%A4%E3%82%B3%E3%83%B3%E3%81%A8%E3%83%A1%E3%83%83%E3%82%BB%E3%83%BC%E3%82%B8">Qt Documentation に一瞬表示されるアイコンとメッセージ</h2>

<p>Qt の公式ドキュメントを表示すると上部に一瞬だけ表示されるやつ。</p>

<blockquote>
  <p>We bake cookies in your browser for a better experience.  Using this site means that you consent.
  訳：より良いエクスペリエンスのために、ブラウザでクッキーを焼きます。 このサイトを使用することはそれに同意することを意味します。</p>
</blockquote>

<p><img src="/images/20180825_qtdocwebsite.png" alt="クッキーマン？" /></p>

<p>のメッセージとともに <a href="https://www.qt.io/company/?hsLang=en">The Qt Company</a> へのリンクがあるみたい。</p>

<h2 id="%E9%80%B2%E6%8D%97">進捗</h2>

<p>今回は愚直に実装を進めた関係で新たな知見は少ない感じ。</p>

<ul>
<li>signal用のヘルプ表示関連の実装

<ul>
<li>表示用の専用QMLを実装</li>
<li>QMLの切り替え用のコードを実装</li>
<li>C++側にも実装を追加</li>
</ul></li>
<li>signal受信時にどのように通知するか？

<ul>
<li><del>パターン１：スクロール＆フラッシュ</del>

<ol>
<li><del>該当signalにスクロール</del></li>
<li><del>該当signalがフラッシング</del></li>
</ol></li>
<li>パターン２：通知＆クリックでスクロール <strong>採用！</strong>

<ol>
<li>ウインドウ内に通知</li>
<li>通知をクリックすると該当のsignalにスクロール</li>
</ol></li>
</ul></li>
</ul>

<p><img src="/images/20180825_qauthwith2.png" alt="成果" /></p>

<h2 id="%E6%87%87%E8%A6%AA%E4%BC%9A">懇親会</h2>

<p>タコさんウインナーとか、もぐもぐ♪</p>

<p><img src="/images/20180825_mogmog.jpg" alt="もぐもぐ" /></p>

<h2 id="%E5%8F%82%E8%80%83">参考</h2>

<ul>
<li><a href="http://doc.qt.io/qt-5/qtqml-cppintegration-interactqmlfromcpp.html">Interacting with QML Objects from C++ | Qt QML 5.11</a></li>
<li><a href="http://doc.qt.io/qt-5/qtqml-cppintegration-overview.html#choosing-the-correct-integration-method-between-c-and-qml">Overview - QML and C++ Integration | Qt QML 5.11</a></li>
<li><a href="https://gist.github.com/alex-spataru/cba4936a1d555372e898">Notification badge in QML</a></li>
<li><a href="https://doc.qt.io/QtApplicationManager/qml-qtapplicationmanager-notificationmanager.html">NotificationManager QML Type | Qt Application Manager 5.11</a></li>
<li><a href="http://doc.qt.io/qt-5/qml-qtqml-timer.html">Timer QML Type | Qt QML 5.11</a></li>
<li><a href="http://doc.qt.io/qt-5/qml-qtquick-listview.html">ListView QML Type | Qt Quick 5.11</a></li>
</ul>
]]></content>
        </entry>
            <entry>
            <title type="html"><![CDATA[Qt Quick メモ]]></title>
            <link href="http://www.sharkpp.net/blog/2018/08/22/qt-quick-memo.html"/>
            <updated>2018-08-22T00:40:00+00:00</updated>
            <id>http://www.sharkpp.net/blog/2018/08/22/qt-quick-memo.html</id>
            <content type="html"><![CDATA[<p><a href="https://github.com/sharkpp/qtauthwith">sharkpp/qtauthwith</a> を実装中に調べメモした、 Qt Quick 関連の事をとりあえず記事にしました。</p>

<h2 id="listview-%E3%82%BF%E3%82%A4%E3%83%97%E3%81%AE%E7%89%B9%E5%AE%9A%E9%A0%85%E7%9B%AE%E3%81%B8%E3%82%B9%E3%82%AF%E3%83%AD%E3%83%BC%E3%83%AB%E3%81%99%E3%82%8B">ListView タイプの特定項目へスクロールする</h2>

<pre><code class="javascript">    listView.currentIndex = index
</code></pre>

<p>のような感じでインデックスを代入すればスクロールする</p>

<h2 id="gridlayout-%E3%81%A8-grid">GridLayout と Grid</h2>

<p><code>GridLayout</code> は <code>Layout.row</code> と <code>Layout.column</code> が効く。</p>

<p><code>Grid</code> は <code>Layout.row</code> と <code>Layout.column</code> が効かない。</p>

<h2 id="%E3%83%A2%E3%83%87%E3%83%AB%E3%82%92%E3%83%86%E3%83%BC%E3%83%96%E3%83%AB%E4%B8%8A%E3%81%AB%E4%B8%A6%E3%81%B9%E3%82%8B">モデルをテーブル上に並べる</h2>

<pre><code class="javascript">[
    { foo: XXX1, bar: YYY1 },
    { foo: XXX2, bar: YYY2 }
]
</code></pre>

<p>を返すモデルが例。</p>

<pre><code class="javascript">import QtQuick.Layouts 1.11
         :
    GridLayout {
        id: grid
        anchors.fill: parent
        columns: 2
        rowSpacing: 5
        columnSpacing: 5
        anchors.margins: 5

        Repeater {
            model: hoge // [ { foo: XXX1, bar: YYY1 }, { foo: XXX2, bar: YYY2 } ]
            Label {
                Layout.row: index
                Layout.column: 0
                text: modelData.foo
            }
        }

        Repeater {
            model: hoge
            TextArea {
                Layout.row: index
                Layout.column: 1
                text: modelData.bar
            }
        }
    }
</code></pre>

<h2 id="qml%E3%81%A7%E5%AE%9A%E6%95%B0%E3%82%92%E5%88%A9%E7%94%A8%E3%81%99%E3%82%8B">QMLで定数を利用する</h2>

<p>定数が大量にある場合は</p>

<pre><code class="javascript">// hoge.js
var xxx = "aa";
var yyy = "bb";
</code></pre>

<p>と登録したソースを import して</p>

<pre><code class="javascript">// fuga.qml
import "hoge.js" as Hoge
          :
        Label {
            text: Hoge.xxx
        }
        Label {
            text: Hoge.yyy
        }
          :
</code></pre>

<p>のような感じで利用すると管理が楽そう。
他の QML で使い回すならなおさら。</p>

<h2 id="qml%E5%81%B4%E3%81%8B%E3%82%89%E5%91%BC%E3%81%B3%E5%87%BA%E3%81%99%E9%96%A2%E6%95%B0%E3%81%AE%E5%BC%95%E6%95%B0%E3%81%AB%E3%82%AA%E3%83%96%E3%82%B8%E3%82%A7%E3%82%AF%E3%83%88%E3%82%92%E6%B8%A1%E3%81%97%E3%81%9F%E5%A0%B4%E5%90%88%E3%81%AE%E5%8B%95%E3%81%8D">qml側から呼び出す関数の引数にオブジェクトを渡した場合の動き</h2>

<pre><code class="javascript">// xxx.qml
   var xxx = { aa: 10, bb: "bb" };
   hoge(xxx);
</code></pre>

<p>と QML 側で C++ で定義した関数を呼び出す場合は</p>

<pre><code class="cpp">#include &lt;QJSValue&gt;
            :
   Q_INVOKABLE void hoge(const QJSValue&amp; abc);
</code></pre>

<p>という関数定義にする必要がある。</p>

<h2 id="qml-%E3%81%A7%E7%A9%BA%E3%81%A3%E3%81%BD%E3%81%AE%E3%82%AA%E3%83%96%E3%82%B8%E3%82%A7%E3%82%AF%E3%83%88%E3%82%92%E5%AE%9A%E7%BE%A9%E3%81%99%E3%82%8B">qml で空っぽのオブジェクトを定義する</h2>

<pre><code class="javascript">Item {
    property var badSyntax:   {}   // ng, empty block statement
    property var emptyObject: ({}) // ok
}
</code></pre>

<p>その他の JavaScript 標準な型のプロパティを定義</p>

<pre><code class="javascript">Item {
    property var aNumber: 100
    property var aBool: false
    property var aString: "Hello world!"
    property var anotherString: String("#FF008800")
    property var aColor: Qt.rgba(0.2, 0.3, 0.4, 0.5)
    property var aRect: Qt.rect(10, 10, 10, 10)
    property var aPoint: Qt.point(10, 10)
    property var aSize: Qt.size(10, 10)
    property var aVector3d: Qt.vector3d(100, 100, 100)
    property var anArray: [1, 2, 3, "four", "five", (function() { return "six"; })]
    property var anObject: { "foo": 10, "bar": 20 }
    property var aFunction: (function() { return "one"; })
}
</code></pre>

<h2 id="%E5%8F%82%E8%80%83">参考</h2>

<ul>
<li><a href="https://stackoverflow.com/questions/32969414/populate-gridlayout-with-repeater">qt - Populate GridLayout with Repeater - Stack Overflow</a></li>
<li><a href="http://relog.xii.jp/mt5r/2011/10/qmlqt-9.html">QML(Qt)アプリ全体で使いたいグローバルな設定値の扱い方 - 理ろぐ</a></li>
<li><a href="http://doc.qt.io/qt-5/qml-var.html#property-value-initialization-semantics">var QML Basic Type | Qt QML 5.11</a></li>
</ul>
]]></content>
        </entry>
            <entry>
            <title type="html"><![CDATA[名古屋Qt勉強会#18 に参加しました]]></title>
            <link href="http://www.sharkpp.net/blog/2018/07/21/qt-nagoya-18.html"/>
            <updated>2018-07-21T17:35:00+00:00</updated>
            <id>http://www.sharkpp.net/blog/2018/07/21/qt-nagoya-18.html</id>
            <content type="html"><![CDATA[<p>7月21日(土) に開催された <a href="https://qt-users.connpass.com/event/94197/">Qt 勉強会 @ Nagoya #18 - connpass</a> に参加しました。</p>

<p>そのまとめなどです。</p>

<p><img src="/images/20180721_qauthwith1.png" alt="成果" /></p>

<h2 id="qt-quick-%E3%81%A7%E3%81%AE%E6%96%87%E5%AD%97%E5%88%97%E3%81%AE%E5%A4%9A%E8%A8%80%E8%AA%9E%E5%AF%BE%E5%BF%9C">Qt Quick での文字列の多言語対応</h2>

<p><code>qsTr()</code> で囲う。</p>

<h2 id="toolbutton">ToolButton</h2>

<p>ToolButton タイプで利用できる各種プロパティが QtQuick.Controls 1.x と QtQuick.Controls 2.x とで全然違うのでメモ</p>

<table>
<thead>
<tr>
  <th>version</th>
  <th>QtQuick.Controls 1.x</th>
  <th>QtQuick.Controls 2.x</th>
</tr>
</thead>
<tbody>
<tr>
  <td>派生</td>
  <td><a href="http://doc.qt.io/qt-5/qml-qtquick-controls-button.html">Button</a></td>
  <td><a href="http://doc.qt.io/qt-5/qml-qtquick-controls2-abstractbutton.html">AbstractButton</a></td>
</tr>
<tr>
  <td>アイコン</td>
  <td><code>iconName</code> プロパティ</td>
  <td><code>icon.name</code> プロパティ</td>
</tr>
<tr>
  <td>ツールチップ</td>
  <td><code>tooltip</code> プロパティ</td>
  <td><a href="https://doc.qt.io/Qt-5/qml-qtquick-controls2-tooltip.html#attached-tool-tips">ToolTip QML Type</a></td>
</tr>
<tr>
  <td>&nbsp;&nbsp;要素押下時に表示</td>
  <td>不明</td>
  <td><code>ToolTip.visible: down</code></td>
</tr>
<tr>
  <td>&nbsp;&nbsp;要素クリック時に表示</td>
  <td>不明</td>
  <td><code>ToolTip.visible: pressed</code></td>
</tr>
<tr>
  <td>&nbsp;&nbsp;要素ホバー時に表示</td>
  <td>不明</td>
  <td><code>ToolTip.visible: hovered</code></td>
</tr>
</tbody>
</table>

<h2 id="qml-%E3%81%A7%E5%8F%82%E7%85%A7%E3%81%AE%E3%81%BF%E5%8F%AF%E8%83%BD%E3%81%AA%E3%83%97%E3%83%AD%E3%83%91%E3%83%86%E3%82%A3%E3%82%92%E3%81%A7%E3%81%8D%E3%82%8B%E3%81%A0%E3%81%91%E7%B0%A1%E7%B4%A0%E3%81%AB%E5%AE%9A%E7%BE%A9">QML で参照のみ可能なプロパティをできるだけ簡素に定義</h2>

<pre><code class="cpp">  Q_PROPERTY(QString hoge MEMBER m_hoge CONSTANT)
</code></pre>

<p>new するときとか、C++側からのみアクセスできる setter で値は代入する。</p>

<h2 id="qml-%E3%81%A7%E5%AE%9F%E8%A1%8C%E5%8F%AF%E8%83%BD%E3%81%AA%E9%96%A2%E6%95%B0%E3%82%92%E5%AE%9A%E7%BE%A9">QML で実行可能な関数を定義</h2>

<pre><code class="cpp">  Q_INVOKABLE inline int hoge() {
      return 10;
  }
</code></pre>

<h2 id="%E3%83%88%E3%83%A9%E3%83%96%E3%83%AB%E3%82%B7%E3%83%A5%E3%83%BC%E3%83%86%E3%82%A3%E3%83%B3%E3%82%B0">トラブルシューティング</h2>

<h3 id="invalid-import-qualifier-id">Invalid import qualifier ID</h3>

<blockquote>
  <p>Invalid import qualifier ID
  (訳: インポート修飾識別子が無効)</p>
</blockquote>

<p>エリアスの頭は大文字でないとダメらしい。</p>

<pre><code class="diff">- import "xxx" as my
+ import "xxx" as My
</code></pre>

<h3 id="depends-on-non-notifyable-properties%3A-xxxxx%3Ayyyyy">depends on non-NOTIFYable properties: XXXXX:YYYYY</h3>

<blockquote>
  <p>depends on non-NOTIFYable properties: XXXXX:YYYYY
  (訳: 通知できないプロパティに依存)</p>
</blockquote>

<p>読み取り専用の場合は <code>CONSTANT</code> をつければ良い。</p>

<pre><code class="diff">           :
-     Q_PROPERTY(QString title MEMBER m_title)
+     Q_PROPERTY(QString title MEMBER m_title CONSTANT)
           :
</code></pre>

<h3 id="type-xxxx-unavailable">Type XXXX unavailable</h3>

<blockquote>
  <p>Type XXXX unavailable
  (訳: タイプ XXXX は利用できません)</p>
</blockquote>

<p>XXXX をちゃんと定義しているはずなのに出る場合は、 XXXX の中でエラーになってるかも？
その場合は、該当ファイルを対象としたエラーが出ている。</p>

<h3 id="qt-creator-%E4%B8%8A%E3%81%A7%E3%81%AE%E3%82%A8%E3%83%A9%E3%83%BC%E6%B3%A8%E9%87%88%E8%A1%A8%E7%A4%BA">Qt Creator 上でのエラー注釈表示</h3>

<p>QtQuick.Controls 2 を利用しているのに QtQuick.Controls 1 のエラーが表示される</p>

<p><img src="/images/20180721_qtcreator_annotation.png" alt="Qt Creator エラー注釈表示" /></p>

<p>どうやら Qt 5.11 を利用すれば大丈夫な様子。</p>

<h2 id="qt-quick-%E3%81%A8-c%2B%2B-%E3%81%A8%E3%81%AE%E3%82%84%E3%82%8A%E3%81%A8%E3%82%8A">Qt Quick と C++ とのやりとり</h2>

<h3 id="%E3%82%AB%E3%82%B9%E3%82%BF%E3%83%A0%E3%82%BF%E3%82%A4%E3%83%97%E3%81%AE%E7%99%BB%E9%8C%B2">カスタムタイプの登録</h3>

<p>※ <code>HogeType</code> クラスは <code>QObjct</code> から派生</p>

<pre><code>              :
    qmlRegisterType&lt;HogeType&gt;("net.example.foo", 1, 0, "HogeType");
    QQmlApplicationEngine engine;
              :
</code></pre>

<p>qml では次のように利用</p>

<pre><code>import net.example.foo 1.0
            :
ApplicationWindow {
            :
    HogeType {
        id: hoge
    }
            :
}
</code></pre>

<h3 id="%E3%82%B3%E3%83%B3%E3%83%86%E3%82%AD%E3%82%B9%E3%83%88%E3%81%AB%E7%99%BB%E9%8C%B2">コンテキストに登録</h3>

<p>※ <code>AppData</code> クラスは <code>QObjct</code> から派生</p>

<pre><code>            :
    AppData data;
    QQmlApplicationEngine engine;
    engine.rootContext()-&gt;setContextProperty("appData", &amp;data);
            :
</code></pre>

<p>qml では次のように利用</p>

<pre><code>            :
Window {
            :
    Text {
        text: appData.getTextFromCpp()
            :
    }
}
</code></pre>

<h2 id="%E6%87%87%E8%A6%AA%E4%BC%9A">懇親会</h2>

<p>もぐもぐ♪</p>

<p><img src="/images/20180721_mogmog.jpg" alt="もぐもぐ" /></p>

<h2 id="%E5%8F%82%E8%80%83">参考</h2>

<ul>
<li><a href="http://doc.qt.io/qt-5/qml-qtquick-controls-button.html">Button QML Type | Qt Quick Controls 5.11</a></li>
<li><a href="https://doc.qt.io/Qt-5/qml-qtquick-controls2-abstractbutton.html">AbstractButton QML Type | Qt Quick Controls 2 5.11</a></li>
<li><a href="http://forum.jollausers.com/sailfish-developers/import-js-file-invalid-import-qualifier-id/">[Solved] import js file - Invalid import qualifier ID - Sailfish Developers - Jolla &amp; Sailfish OS Forum</a></li>
<li><a href="http://doc.qt.io/qt-5/qtqml-cppintegration-topic.html">Integrating QML and C++ | Qt QML 5.11</a></li>
<li><a href="https://qiita.com/DAR/items/400a1725ddedcaa6ef0e">QMLとC++のバインディング - Qiita</a></li>
<li><a href="http://tips.hecomi.com/entry/20130503/1367594609">Qt Quick での C++ × QML バインディングについてまとめてみた - 凹みTips</a></li>
<li><a href="https://stackoverflow.com/questions/6728615/warning-about-non-notifyable-properties-in-qml">qt - Warning about non-NOTIFYable properties in QML - Stack Overflow</a></li>
</ul>
]]></content>
        </entry>
            <entry>
            <title type="html"><![CDATA[名古屋Qt勉強会#16 に参加しました]]></title>
            <link href="http://www.sharkpp.net/blog/2018/05/26/qt-nagoya-16.html"/>
            <updated>2018-05-26T23:26:00+00:00</updated>
            <id>http://www.sharkpp.net/blog/2018/05/26/qt-nagoya-16.html</id>
            <content type="html"><![CDATA[<p>5月26日(土) に開催された <a href="https://qt-users.connpass.com/event/88524/">Qt 勉強会 @ Nagoya #16 - connpass</a> に参加しました。</p>

<p>そのまとめ。</p>

<p><img src="/images/20180526_qauthwith2.png" alt="開発中" /></p>

<h2 id="%E4%BC%9A%E5%A0%B4%E5%88%B0%E7%9D%80%E3%81%BE%E3%81%A7">会場到着まで</h2>

<p>前回は、ちょっと迷ってしまったけど、さすがに２回目ともなれば迷うこともなく到着。
電車の時間を少しミスったために、今回もギリギリ（汗</p>

<h2 id="%E8%87%AA%E5%B7%B1%E7%B4%B9%E4%BB%8B">自己紹介</h2>

<p>みんなで自己紹介</p>

<p>今回は２名のご新規さんが参加されました。</p>

<p>東京組２名は少し遅れて到着（やはり迷った様子</p>

<h2 id="%E4%BB%8A%E5%9B%9E%E3%81%AE%E3%81%8A%E8%8F%93%E5%AD%90">今回のお菓子</h2>

<p>今回は、東京からの参加者の <a href="https://twitter.com/hermit4">@hermit4</a> さんが、美味しそうなお菓子を持ち込み。
クッキーなどと合わせてなかなかの量になりました。</p>

<h2 id="%E3%82%82%E3%81%8F%E3%82%82%E3%81%8F">もくもく</h2>

<p>前回の続きをもくもく。</p>

<p>本日は、Qt Quick をサンプルを見ながらUIの作り込み。</p>

<p><img src="/images/20180526_qauthwith1.png" alt="開発中" /></p>

<p>こんな感じに Swagger UI 風の UI を Qt Quick で作ることにした。</p>

<p><img src="/images/20180526_qauthwith2.png" alt="開発中" /></p>

<p>一部、どうしてもわからないことを <a href="https://twitter.com/IoriAYANE">@IoriAYANE</a> さんに聞きつつ、なんとかここまで出来た。</p>

<p>さてはて、中身の実装をどうしようかな？というところで時間切れ。</p>

<h2 id="%E6%87%87%E8%A6%AA%E4%BC%9A">懇親会</h2>

<p>今回は、前回行った串カツ屋さんは入れず。
少し歩いた先の串焼き屋さんで懇親会。</p>

<p><img src="/images/20180526_kushiyaki.jpg" alt="テング酒場で懇親会" /></p>

<h2 id="%E6%9C%80%E5%BE%8C%E3%81%AB">最後に</h2>

<p>久しぶりに集中して趣味プロしたけど、やはりいいものだ。
年々、趣味に割ける時間が減っているけど、なんとか継続して行きたい。</p>

<h2 id="%E5%8F%82%E8%80%83">参考</h2>

<ul>
<li><a href="http://doc.qt.io/qt-5/qtquickcontrols-index.html">Qt Quick Controls 5.11</a></li>
<li><a href="https://doc.qt.io/archives/qt-5.7/qtquickcontrols2-customize.html">Customizing Qt Quick Controls 2 | Qt Quick Controls 2 5.7</a></li>
<li><a href="http://blog.qt.io/jp/2011/03/10/qml-drawing-2/">Qt Quick 入門 第8回: QML の描画処理 - Qt Japanese Blog</a></li>
</ul>
]]></content>
        </entry>
            <entry>
            <title type="html"><![CDATA[続・QtQuick2でアプリ作ってみたよ]]></title>
            <link href="http://www.sharkpp.net/blog/2013/05/19/qtquick2-taskmemgraph.html"/>
            <updated>2013-05-19T18:48:00+00:00</updated>
            <id>http://www.sharkpp.net/blog/2013/05/19/qtquick2-taskmemgraph.html</id>
            <content type="html"><![CDATA[<p>勉強会の続きが結構かかってしまったけど何とかそれなりに形になりました。</p>

<p>もしくは、力尽きたともいうorz</p>

<p><img src="/images/2013_0519_qtquick2_mac.png" alt="QtQuick2 on Mac" /> <img src="/images/2013_0519_qtquick2_win.png" alt="QtQuick2 on Windows" /></p>

<p>とりあえず、完成までの流れおば</p>

<h2 id="qtquick2%E3%81%A7ui%E6%8F%8F%E7%94%BB%E3%82%92%E4%BD%9C%E6%88%90">QtQuick2でUI描画を作成</h2>

<p>勉強会ではここで力尽きました。</p>

<p>QtQuick2でCanvasエレメント上に円グラフを描き描きしてそれらしい形に。</p>

<p>後からTextエレメントでプロセス名の一覧とメモリの使用量を表示できるようにしました。</p>

<h3 id="%E5%8F%82%E8%80%83">参考</h3>

<ul>
<li><a href="http://qt-project.org/doc/qt-5.0/qtquick/qml-qtquick2-loader.html">QtQuick 5.0: Loader | Documentation | Qt Project</a></li>
<li><a href="http://qt-project.org/doc/qt-5.0/qtquick/qml-qtquick2-item.html">QtQuick 5.0: Item | Documentation | Qt Project</a></li>
<li><a href="http://relog.xii.jp/mt5r/2012/03/qmlqt-16.html">QML(Qt)のエレメントを動的に生成をする - 理ろぐ</a></li>
<li><a href="http://harmattan-dev.nokia.com/docs/platform-api-reference/xml/daily-docs/libqt4/qdeclarativemodels.html#qobjectlist-based-model">Qt 4.7: QML Data Models</a></li>
</ul>

<h2 id="qml%E3%81%A8c%2B%2B%E3%81%AE%E9%80%A3%E6%90%BA">QMLとC++の連携</h2>

<p>最初作ったプロジェクトではどうもC++の関数が呼べなかったらしく少し回り道を、、、してしまったがプロジェクトを作り直して準備完了。</p>

<p>単純なQStringとかを返すのではなくいろんな情報を持つオブジェクトを返したかったので少し変わった事をしています。</p>

<p><a href="https://github.com/sharkpp/TaskMemGraph/blob/master/processlist.h">TaskMemGraph/processlist.h at master - sharkpp/TaskMemGraph - GitHub</a> や <a href="https://github.com/sharkpp/TaskMemGraph/blob/master/processinfo.h">TaskMemGraph/processinfo.h at master - sharkpp/TaskMemGraph - GitHub</a> など で実装しているのですが、<code>ProcessInfo</code>クラスは<code>QObject</code>から派生していて、<code>Q_PROPERTY</code>でプロパティーを定義しています。</p>

<p>こうすると、QML側では、</p>

<pre><code>var v = item;
var yy = v.name;
</code></pre>

<p>みたいに呼び出せます。</p>

<p>で、<code>ProcessList</code>クラスも<code>QObject</code>から派生していて、<code>Q_INVOKABLE</code>で必要なメソッドを定義してあります。</p>

<p>戻り値を<code>QList&lt;QObject*&gt;</code>で定義するとQML側では、</p>

<pre><code>var v = hoge.data();
for(i in v) {
    var yy = v[i].name;
}
</code></pre>

<p>みたいに呼び出せます。</p>

<p>もちろん、</p>

<pre><code>qmlRegisterType&lt;ProcessInfo&gt;("ProcessLib",1,0,"ProcessInfo");
qmlRegisterType&lt;ProcessList&gt;("ProcessLib",1,0,"ProcessList");
</code></pre>

<p>のような感じで型の登録が必要になります。</p>

<p>ただ、なかなか思ったような処理のやり方がわからず探し回りました。</p>

<h3 id="%E5%8F%82%E8%80%83">参考</h3>

<ul>
<li><a href="http://utworks.net/?p=64">&#91;Qt&#93;&#91;QML&#93;QMLとC++コードの連携 - Utworks</a></li>
<li><a href="http://qt-project.org/doc/qt-4.8/qtbinding.html">Using QML Bindings in C++ Applications | Documentation | Qt Project</a></li>
<li><a href="http://d.hatena.ne.jp/hecomi/20130503/1367594609">QtQuick での C++ × QML バインディングについてまとめてみた - 凹みTips</a></li>
<li><a href="http://www.developer.nokia.com/Community/Wiki/Calling_Qt_class_methods_from_QML">Calling Qt class methods from QML - Nokia Developer Wiki</a></li>
<li><a href="http://stackoverflow.com/questions/14287252/accessing-c-qlists-from-qml">Accessing C++ QLists from QML - Stack Overflow</a></li>
</ul>

<h2 id="mac%E3%81%A7%E3%81%AE%E3%83%97%E3%83%AD%E3%82%BB%E3%82%B9%E6%93%8D%E4%BD%9C%E3%81%AE%E3%83%97%E3%83%AD%E3%82%B0%E3%83%A9%E3%83%9F%E3%83%B3%E3%82%B0">Macでのプロセス操作のプログラミング</h2>

<p>ここから、完全に未知の領域です。</p>

<p>Macのプログラム、なにそれ？おいしいの？状態でしたが、、、そもそも、何をキーワードにして検索をすればいいかとか どこを見ればいいかとかが分からず、今回一番苦労したところです。</p>

<p>結局は、<a href="https://developer.apple.com/">Apple Developer</a>が総本山だったってことが分かったのですが、それにしても 目的の処理をしようとする方法も分からず？？？な状態でしたが、まあ、何とかなるもんです。</p>

<h3 id="%E5%8F%82%E8%80%83">参考</h3>

<ul>
<li><a href="https://developer.apple.com/library/mac/documentation/Darwin/Reference/ManPages/man3/sysctl.3.html">sysctl(3) Mac OS X Developer Tools Manual Page</a></li>
<li><a href="https://blogs.oracle.com/dns/entry/understanding_the_authorization_framework_on">Using task&#95;for&#95;pid on Mac OS X (Doug's Note System)</a></li>
<li><a href="http://os-tres.net/blog/2010/02/17/mac-os-x-and-task-for-pid-mach-call/">Mac OS X and task&#95;for&#95;pid() mach call - Ivan's blog</a></li>
<li><a href="https://www.evernote.com/pub/view/wishi/crazylazy/b213a94c-0780-4271-8c77-7da7f92a62b3?locale=ja#st=p&amp;n=b213a94c-0780-4271-8c77-7da7f92a62b3">Evernote 共有ノートブック: IT sec research</a></li>
<li><a href="http://qt-project.org/doc/qt-5.0/qtdoc/qmake-platform-notes.html">QtDoc 5.0: qmake Platform Notes | Documentation | Qt Project</a></li>
<li><a href="http://d.hatena.ne.jp/ny23/20100818/p2">(Mac OS X / LINUX での) 外部コマンドの消費メモリのモニタリング - ny23の日記</a></li>
</ul>

<h2 id="windows%E3%81%A7%E3%81%AE%E3%83%97%E3%83%AD%E3%82%BB%E3%82%B9%E6%93%8D%E4%BD%9C%E3%81%AE%E3%83%97%E3%83%AD%E3%82%B0%E3%83%A9%E3%83%9F%E3%83%B3%E3%82%B0">Windowsでのプロセス操作のプログラミング</h2>

<p>こっち側はまあAPIとかは少し探しましたが、まあそれなりで、、、</p>

<p>MSDNで日本語の内容も読めるし圧倒的に日本語の資料が多いので簡単です。</p>

<p>こういうところはユーザー数の違いが顕著に出ますね。</p>

<h2 id="%E3%81%BE%E3%81%A8%E3%82%81">まとめ</h2>

<p>初めてQtQuick2をやってみて、、、まあそれなりに手が動いたのはJavaScriptベースだったからでしょうか？</p>

<p>まだ、ちょっと自分の作りたい方向性のものとちょっと違うので、このままどっぷりはまっていくかというとそうでもなさそうですが、 雰囲気は掴めたので何かの時には、またを出しそうな感じです。</p>

<p>そもそも、初っ端からC++との連携とかMacのプロセス操作とかハードルが高すぎましたねorz</p>

<p><a href="https://github.com/sharkpp/TaskMemGraph">sharkpp/TaskMemGraph - GitHub</a>でソースを公開していますがバイナリはなんかdllがたくさん必要なので公開していません。 主にサイズ的な制限で、、、Windows側は必要なDLLが総計40MBですってよorz</p>

<p>ちなみに、動かすのに管理者権限が必要になります。</p>

<p>Mac側は確実に、そして、Windows側はXPでしか試していないですが、恐らく管理者権限が必要だと思います。</p>

<p>Macで動かしたアプリのスクショです。</p>

<p><a href="/images/2013_0519_qtquick2_mac.jpg"><img src="/images/2013_0519_qtquick2_mac.png" alt="QtQuick2 on Mac" /></a></p>

<p>こっちはWindowsで動かしたアプリのスクショです。</p>

<p><a href="/images/2013_0519_qtquick2_win.jpg"><img src="/images/2013_0519_qtquick2_win.png" alt="QtQuick2 on Windows" /></a></p>

<p>自分で試してみたいという奇特な方は、<a href="https://github.com/sharkpp/TaskMemGraph">sharkpp/TaskMemGraph - GitHub</a>からソースを取得して遊んでみてください。</p>

<p>ではでは</p>
]]></content>
        </entry>
    </feed>