<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
    <title><![CDATA[さめたすたすのお家]]></title>
    <link href="http://www.sharkpp.net/blog/tags/nodejs.xml" rel="self"/>
    <link href="http://www.sharkpp.net/"/>
    <updated>2020-12-30T02:25:31+00:00</updated>
    <id>http://www.sharkpp.net/</id>
            <author>
            <name><![CDATA[sharkpp]]></name>                    </author>
        <generator uri="http://sculpin.io/">Sculpin</generator>
            <entry>
            <title type="html"><![CDATA[ローカルでの HTTPS テスト環境の構築]]></title>
            <link href="http://www.sharkpp.net/blog/2020/05/02/build-local-https-test-environment.html"/>
            <updated>2020-05-02T16:15:00+00:00</updated>
            <id>http://www.sharkpp.net/blog/2020/05/02/build-local-https-test-environment.html</id>
            <content type="html"><![CDATA[<p>ローカルでのウェブアプリの開発では、もはや https が必須ということで動作確認に難儀していましたが、
しばらく前にローカルで認証局を簡単に設置できる <a href="https://github.com/FiloSottile/mkcert">mkcert</a> なるツールがあると知ったので、使い方を調べてみました。</p>

<p>PC上での使い方は結構サクッと出てきたので、実際のユースケースも念頭に Android でもオレオレ証明書が正規の証明書として利用できるような設定方法も調べてみました。</p>

<p><a href="/images/20200501_local_https_secure3.png"><img src="/thumbs/a68a390814458bbfe228d6e6d2fd6032-480x480.png" alt="20200501_local_https_secure3"></a></p>

<h2 id="mkcert-%E3%81%AE-windows-%E3%81%B8%E3%81%AE%E3%82%A4%E3%83%B3%E3%82%B9%E3%83%88%E3%83%BC%E3%83%AB">mkcert の Windows へのインストール</h2>

<p>mkcert の <a href="https://github.com/FiloSottile/mkcert#windows">Windows</a> セクションを参考にしてください。</p>

<h2 id="mkcert-%E3%81%AE-macos-%E3%81%B8%E3%81%AE%E3%82%A4%E3%83%B3%E3%82%B9%E3%83%88%E3%83%BC%E3%83%AB">mkcert の macOS へのインストール</h2>

<p>homebrew を使ったインストールが簡単です。</p>

<p><code>brew install mkcert</code> とターミナルで入力し実行するだけ。</p>

<pre><code class="console">$ brew install mkcert
Updating Homebrew...
==&gt; Auto-updated Homebrew!
           :
==&gt; Downloading https://homebrew.bintray.com/bottles/mkcert-1.4.1.mojave.bottle.tar.gz
==&gt; Downloading from https://akamai.bintray.com/91/9100c7f044d91e6ca0c483ed572217de28daa34c04fa6e2a130116175ba162e9?__gda__=exp=1588341913~hmac=516f50b8cbb6930276b
######################################################################## 100.0%
==&gt; Pouring mkcert-1.4.1.mojave.bottle.tar.gz
🍺  /usr/local/Cellar/mkcert/1.4.1: 6 files, 5.3MB
</code></pre>

<p>Firefox で利用する場合は</p>

<pre><code class="console">$ brew install nss
</code></pre>

<p>も必要なようです。</p>

<p>システムへのローカルの認証局のインストールは <code>mkcert -install</code> を実行するようです。</p>

<pre><code class="console">$ mkcert -install
Created a new local CA at "/Users/▒▒▒▒/Library/Application Support/mkcert" 💥
Sudo password: ******
The local CA is now installed in the system trust store! ⚡️
The local CA is now installed in the Firefox trust store (requires browser restart)! 🦊
</code></pre>

<h2 id="%E8%A8%BC%E6%98%8E%E6%9B%B8%E3%81%AE%E4%BD%9C%E6%88%90">証明書の作成</h2>

<p>証明書の作成は <code>mkcert {hostname_or_ip} ...</code> のような感じで、コマンドの後に証明書に含めたいホスト名もしくはIPを指定します。</p>

<pre><code class="console">$ mkcert 0.0.0.0 localhost 127.0.0.1 ::1
Using the local CA at "/Users/▒▒▒▒/Library/Application Support/mkcert" ✨

Created a new certificate valid for the following names 📜
 - "0.0.0.0"
 - "localhost"
 - "127.0.0.1"
 - "::1"

The certificate is at "./0.0.0.0+3.pem" and the key at "./0.0.0.0+3-key.pem" ✅
</code></pre>

<p>実行時のカレントディレクトリに <code>*.pem</code> = 公開鍵、と <code>*-key.pem</code> = 秘密鍵、が作成されるので、https として動作させる場合の公開鍵と秘密鍵として指定します。</p>

<h2 id="macos-%E3%81%A7%E5%88%A9%E7%94%A8%E3%81%99%E3%82%8B%E5%A0%B4%E5%90%88%E3%81%AE%E8%A8%AD%E5%AE%9A">macOS で利用する場合の設定</h2>

<p>mkcert をインストールしたPCでは、すでに、システムにローカル認証局の証明書がインストールされているので特に何かする必要はないです。</p>

<p>もし、他のPCで利用する場合は、下記に記載の方法で証明書のエクスポートをし、それをシステムにインストールしてください。</p>

<h2 id="android-%E3%81%A7%E5%88%A9%E7%94%A8%E3%81%99%E3%82%8B%E5%A0%B4%E5%90%88%E3%81%AE%E8%A8%AD%E5%AE%9A">Android で利用する場合の設定</h2>

<h3 id="%E8%A8%BC%E6%98%8E%E8%A8%BC%E3%81%AE%E3%82%A8%E3%82%AF%E3%82%B9%E3%83%9D%E3%83%BC%E3%83%88">証明証のエクスポート</h3>

<p>macOS の場合</p>

<p><a href="/images/20200501_ser_export_from_macos_key_chain.png"><img src="/thumbs/c75ff4d1123943a143ac45139cb90bad-320x320.png" alt="20200501_ser_export_from_macos_key_chain"></a></p>

<ol>
<li>「キーチェーン」を開く</li>
<li>左部「ログイン」を選択し <code>mkcert ▒▒▒▒▒▒▒▒▒▒▒▒</code> を探す、</li>
<li>右クリックメニューから「"mkcert ▒▒▒▒▒▒▒▒▒▒▒▒"を書き出す」を選んでファイルに保存</li>
<li>最後に、保存したファイルをなんとかして Android にコピーします。</li>
</ol>

<h3 id="%E8%A8%BC%E6%98%8E%E6%9B%B8%E3%81%AE%E3%82%A4%E3%83%B3%E3%82%B9%E3%83%88%E3%83%BC%E3%83%AB">証明書のインストール</h3>

<ol>
<li>「設定」アプリを開く</li>
<li>「セキュリティ」→「詳細設定」→「暗号化と認証情報」「ストレージからのインストール」<br/>
<a href="/images/20200501_android_ser_install1.png"><img src="/thumbs/6bb42b1c732f71567a936064644ba6d5-320x320.png" alt="20200501_android_ser_install1"></a> &nbsp; 
<a href="/images/20200501_android_ser_install2.png"><img src="/thumbs/88f2d30588e12d32fbf226959ed16813-320x320.png" alt="20200501_android_ser_install2"></a> &nbsp; 
<a href="/images/20200501_android_ser_install3.png"><img src="/thumbs/8bd3d02757906957b760e847338cd7cd-320x320.png" alt="20200501_android_ser_install3"></a></li>
<li>エクスポートした証明書を選択 <br/>
<a href="/images/20200501_android_ser_install4.png"><img src="/thumbs/62c7cfc3933d430dcb897d6bba06275c-320x320.png" alt="20200501_android_ser_install4"></a></li>
<li>「証明書の名前を指定する」欄は、適用に、「認証情報の使用」欄は「VPNとアプリ」を選択 <br/>
<a href="/images/20200501_android_ser_install5.png"><img src="/thumbs/1a96248fbb5fda8bcaad9f0dcbb0542f-320x320.png" alt="20200501_android_ser_install5"></a></li>
<li>「信頼できる認証局」→「ユーザー」タブを選択し、インストールした証明書が含まれていたらOK <br/>
<a href="/images/20200501_android_ser_install6.png"><img src="/thumbs/051861e5fc41fdc0088dc679493cb00a-320x320.png" alt="20200501_android_ser_install6"></a> &nbsp; 
<a href="/images/20200501_android_ser_install7.png"><img src="/thumbs/278ed200c9067da074fd3fa8cf75359c-320x320.png" alt="20200501_android_ser_install7"></a></li>
</ol>

<h2 id="%E8%A8%BC%E6%98%8E%E6%9B%B8%E3%81%AE%E5%88%A9%E7%94%A8">証明書の利用</h2>

<p>適当なウェブサーバーを使って確認します。</p>

<p>Node.js がインストール済みの場合は <a href="https://www.npmjs.com/package/http-server">http-server - npm</a> が簡単そうなので、</p>

<pre><code class="console">$ npm install -g http-server
</code></pre>

<p>としてインストールして試してみます。</p>

<p>HTML は適当に</p>

<pre><code class="html">&lt;html&gt;
  &lt;head&gt;
  &lt;/head&gt;
  &lt;body&gt;
    Is this page visible on https?
  &lt;/body&gt;
&lt;/html&gt;
</code></pre>

<p>みたいな感じに作ります。</p>

<p>カレントディレクトリに、前述の <code>0.0.0.0+3.pem</code> と <code>0.0.0.0+3-key.pem</code> を保存し</p>

<pre><code class="console">$ http-server . -S -C 0.0.0.0+3.pem -K .0.0.0.0+3-key.pem
</code></pre>

<p>とするとローカル認証局の証明書がインストールされていれば、有効な証明書として利用されます。</p>

<p>Chrome for Android で確認するとこんな感じ</p>

<p><a href="/images/20200501_local_https_secure1.png"><img src="/thumbs/dfdd71113e5de0382c1bc5946b5221e4-320x320.png" alt="20200501_local_https_secure1"></a> <a href="/images/20200501_local_https_secure2.png"><img src="/thumbs/066f32b6a759ac9254140508896c90e4-320x320.png" alt="20200501_local_https_secure2"></a></p>

<p>Chrome for macOS で確認するとこんな感じ</p>

<p><a href="/images/20200501_local_https_secure4.png"><img src="/thumbs/c8695d9aee7619d0fe3d7e780ac6cce1-320x320.png" alt="20200501_local_https_secure4"></a></p>

<h2 id="%E5%8F%82%E8%80%83">参考</h2>

<ul>
<li><a href="https://qiita.com/walkers/items/b90a97a99bbb27f6550f">ローカル環境でSSLをオレオレ証明書で行っていて警告が出てる人に朗報 - Qiita</a></li>
<li><a href="https://www.media.hiroshima-u.ac.jp/services/hinet/android-ca2">AndroidのCA証明書のインストールについて — Information Media Center</a></li>
<li><a href="https://support.google.com/pixelphone/answer/2844832?hl=ja">証明書を追加、削除する - Pixel Phone ヘルプ</a></li>
</ul>
]]></content>
        </entry>
    </feed>