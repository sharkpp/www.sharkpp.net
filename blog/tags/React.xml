<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
    <title><![CDATA[さめたすたすのお家]]></title>
    <link href="https://www.sharkpp.net/blog/tags/React.xml" rel="self"/>
    <link href="https://www.sharkpp.net/"/>
    <updated>2023-12-31T10:05:57+00:00</updated>
    <id>https://www.sharkpp.net/</id>
            <author>
            <name><![CDATA[sharkpp]]></name>                    </author>
        <generator uri="http://sculpin.io/">Sculpin</generator>
            <entry>
            <title type="html"><![CDATA[Ionic 5 でモバイル＆デスクトップアプリを試してみた]]></title>
            <link href="https://www.sharkpp.net/blog/2021/04/30/tryout-ionic-mobile-desktop.html"/>
            <updated>2021-04-30T21:35:00+00:00</updated>
            <id>https://www.sharkpp.net/blog/2021/04/30/tryout-ionic-mobile-desktop.html</id>
            <content type="html"><![CDATA[<p>モバイルでもウェブでもデスクトップでも動くサービスを作る方法を調べて、とりあえず React で実装できそうな <a href="https://ionicframework.com/">Ionic 5</a> を試してみることにしました。</p>

<h2 id="%E6%BA%96%E5%82%99">準備</h2>

<p>まず、 ionic のコンソールツールをインストールします。</p>

<pre><code class="console">$ npm install -g @ionic/cli
</code></pre>

<p>ios 向けを開発する場合はさらに</p>

<pre><code class="console">$ npm install -g ios-sim
$ brew install ios-deploy
</code></pre>

<h2 id="%E3%83%97%E3%83%AD%E3%82%B8%E3%82%A7%E3%82%AF%E3%83%88%E3%81%AE%E4%BD%9C%E6%88%90">プロジェクトの作成</h2>

<p>コンソールツールがインストールできたら、プロジェクトを作成します。</p>

<p>引数は次のような感じで指定します。</p>

<pre><code class="console">$ ionic start &lt;アプリ名&gt; &lt;テンプレート名&gt; --type=react --capacitor
$ cd &lt;アプリ名&gt;
</code></pre>

<p><strong>&lt;アプリ名></strong></p>

<p>myApp など、プロジェクトの名前を指定</p>

<p><strong>&lt;テンプレート名></strong></p>

<p><code>--type=react</code> で指定可能なテンプレート名の種類</p>

<table>
<thead>
<tr>
  <th>テンプレート名</th>
  <th>説明</th>
</tr>
</thead>
<tbody>
<tr>
  <td><code>blank</code></td>
  <td>空白のスタータープロジェクト</td>
</tr>
<tr>
  <td><code>list</code></td>
  <td>リスト付きの開始プロジェクト</td>
</tr>
<tr>
  <td><code>my-first-app</code></td>
  <td>ギャラリー付きのカメラを構築するサンプルアプリケーション</td>
</tr>
<tr>
  <td><code>sidemenu</code></td>
  <td>コンテンツ領域にナビゲーションを備えたサイドメニューを備えた開始プロジェクト</td>
</tr>
<tr>
  <td><code>tabs</code></td>
  <td>シンプルなタブ付きインターフェースを備えた開始プロジェクト</td>
</tr>
<tr>
  <td><code>conference</code></td>
  <td>Ionicが提供するすべてを披露するキッチンシンク(ライブラリが提供する機能を網羅するサンプル)アプリケーション</td>
</tr>
</tbody>
</table>

<p><strong>その他</strong></p>

<table>
<thead>
<tr>
  <th>パラメータ</th>
  <th>説明</th>
</tr>
</thead>
<tbody>
<tr>
  <td><code>--capacitor</code></td>
  <td>Capacitor(クロスプラットフォームなネイティブランタイム)を利用するため</td>
</tr>
</tbody>
</table>

<h2 id="capacitor-%E3%82%92%E5%88%A9%E7%94%A8%E3%81%99%E3%82%8B%E3%81%9F%E3%82%81%E3%81%AE%E8%BF%BD%E5%8A%A0%E8%A8%AD%E5%AE%9A">Capacitor を利用するための追加設定</h2>

<h3 id="capacitor-%E3%81%AE%E5%88%9D%E6%9C%9F%E5%8C%96">Capacitor の初期化</h3>

<pre><code class="console">$ npx cap init &lt;アプリ名&gt; &lt;アプリId&gt; --web-dir=build --npm-client=yarn
</code></pre>

<p><strong>&lt;アプリ名></strong></p>

<p>ionic start で指定した値と同じものを指定。</p>

<p><strong>&lt;アプリId></strong></p>

<p><code>com.example.app</code> みたいな値。</p>

<p><strong>その他</strong></p>

<table>
<thead>
<tr>
  <th>パラメータ</th>
  <th>説明</th>
</tr>
</thead>
<tbody>
<tr>
  <td><code>--web-dir=build</code></td>
  <td>プロジェクトで作成したウェブアセットのディレクトリ</td>
</tr>
<tr>
  <td><code>--npm-client=yarn</code></td>
  <td><code>npm</code> or <code>yarn</code> ※ npm 7 以降で互換性の問題が発生している模様なので Yarn を選択</td>
</tr>
</tbody>
</table>

<h3 id="native-%E3%83%97%E3%83%A9%E3%83%83%E3%83%88%E3%83%95%E3%82%A9%E3%83%BC%E3%83%A0%E3%81%AE%E8%BF%BD%E5%8A%A0">Native プラットフォームの追加</h3>

<pre><code class="console">$ ionic build
$ npx cap add &lt;プラットフォーム&gt;
</code></pre>

<p>プラットフォームの追加前に <code>ionic build</code> が必要。</p>

<p>実行しない場合、</p>

<pre><code class="console">$ npx cap add electron
[error] Capacitor could not find the web assets directory "~/test1/build".
    Please create it, and make sure it has an index.html file. You can change
    the path of this directory in capacitor.config.json.
    More info: https://capacitor.ionicframework.com/docs/basics/configuring-your-app
</code></pre>

<p>とメッセージが出ます。</p>

<p><strong>&lt;プラットフォーム></strong></p>

<p>指定可能な値</p>

<table>
<thead>
<tr>
  <th>プラットフォーム</th>
  <th>説明</th>
</tr>
</thead>
<tbody>
<tr>
  <td><code>android</code></td>
  <td>Android 向けの構成</td>
</tr>
<tr>
  <td><code>ios</code></td>
  <td>iOS 向けの構成</td>
</tr>
<tr>
  <td><code>electron</code></td>
  <td>(Electronで実装される)デスクトップ向けの構成</td>
</tr>
</tbody>
</table>

<h3 id="native-%E3%83%97%E3%83%A9%E3%83%83%E3%83%88%E3%83%95%E3%82%A9%E3%83%BC%E3%83%A0%E3%81%AE%E5%AE%9F%E8%A1%8C">Native プラットフォームの実行</h3>

<pre><code class="console">$ ionic build
$ npx cap copy
$ npx cap open &lt;プラットフォーム&gt;
</code></pre>

<p><strong>&lt;プラットフォーム></strong></p>

<p>npx cap add で指定可能な値と同じ</p>

<h3 id="%E3%83%AA%E3%83%AA%E3%83%BC%E3%82%B9%E3%83%93%E3%83%AB%E3%83%89">リリースビルド</h3>

<p><strong>electron</strong></p>

<p>事前に electron-packager をインストール</p>

<pre><code class="console">$ npm install -g electron-packager
</code></pre>

<p>パラメータを指定して実行</p>

<pre><code class="console">$ electron-packager ./electron &lt;アプリ名&gt; --platform=&lt;プラットフォーム&gt; --arch=&lt;アーキテクチャ&gt; [オプションフラグ...]
</code></pre>

<p><strong>&lt;アプリ名></strong></p>

<p>ionic start で指定した値と同じものを指定。</p>

<p><strong>&lt;プラットフォーム>と&lt;アーキテクチャ></strong></p>

<table>
<thead>
<tr>
  <th>プラットフォーム</th>
  <th>アーキテクチャ</th>
  <th>概要</th>
</tr>
</thead>
<tbody>
<tr>
  <td><code>darwin</code></td>
  <td><code>x64</code></td>
  <td>macOS</td>
</tr>
<tr>
  <td><code>win32</code></td>
  <td><code>x64</code></td>
  <td>Windows 64ビット向け</td>
</tr>
</tbody>
</table>

<p><strong>[オプションフラグ]</strong></p>

<table>
<thead>
<tr>
  <th>オプションフラグ</th>
  <th>概要</th>
</tr>
</thead>
<tbody>
<tr>
  <td><code>--arch=...</code></td>
  <td><code>all</code> 、または1つ以上：<code>ia32</code>、<code>x64</code>、<code>armv7l</code>、<code>arm64</code>、<code>mips64el</code>（複数の場合はカンマ区切り）。 デフォルトはホストのアーチです</td>
</tr>
<tr>
  <td><code>--icon=...</code></td>
  <td>アプリのアイコンとして使用するアイコンファイルへのローカルパス。注：形式はプラットフォームによって異なります。</td>
</tr>
<tr>
  <td><code>--overwrite</code></td>
  <td>プラットフォームの出力ディレクトリがすでに存在する場合は、スキップするのではなく置き換えます</td>
</tr>
<tr>
  <td><code>--platform=...</code></td>
  <td><code>all</code> 、または1つ以上：<code>darwin</code>、<code>linux</code>、<code>mas</code>、<code>win32</code>（複数の場合はカンマ区切り）。デフォルトはホストのプラットフォームです</td>
</tr>
</tbody>
</table>

<p>その他、かなり多いので <a href="https://github.com/electron/electron-packager/blob/master/usage.txt">usage.txt</a> を参考に。</p>

<h2 id="%E3%81%BE%E3%81%A8%E3%82%81">まとめ</h2>

<p>ざっと試したところ、テンプレートの保守がされてないのか、色々躓く所があった。</p>

<p>特に、 Electron サポートは散々で、<code>blank</code> や <code>my-first-app</code> や <code>tabs</code> ぐらいしかまともに試せない感じ。
<code>my-first-app</code> もだいたい動くけどカメラは動作していないと思う...</p>

<table>
<thead>
<tr>
  <th>プラットフォーム</th>
  <th>起動</th>
  <th>ビルド</th>
</tr>
</thead>
<tbody>
<tr>
  <td><code>ios</code></td>
  <td><code>npx cap open ios</code></td>
  <td>XCodeで作業 <a href="https://www.joshmorony.com/deploying-capacitor-applications-to-ios-development-distribution/">Deploying Capacitor Applications to iOS (Development &amp; Distribution)</a> を参考</td>
</tr>
<tr>
  <td><code>android</code></td>
  <td><code>npx cap open android</code></td>
  <td><a href="https://www.joshmorony.com/deploying-capacitor-applications-to-android-development-distribution/">Deploying Capacitor Applications to Android (Development &amp; Distribution)</a> を参考</td>
</tr>
<tr>
  <td><code>electron</code></td>
  <td><code>npx cap open electron</code></td>
  <td><code>electron-packager ./electron &lt;アプリ名&gt;</code></td>
</tr>
</tbody>
</table>

<h2 id="%E5%8F%82%E8%80%83">参考</h2>

<ul>
<li><a href="https://ionicframework.com/docs/intro/cli">Installing Ionic - Ionic Documentation</a></li>
<li><a href="https://capacitorjs.com/docs/getting-started/with-ionic">Using Capacitor with Ionic - Capacitor</a></li>
<li><a href="https://forum.ionicframework.com/t/tutorial-guide-to-build-for-ionic-react-electron-app/176872/4">Tutorial/guide to build for Ionic-React-Electron app - Capacitor - Ionic Forum</a></li>
<li><a href="https://devdactic.com/ionic-desktop-electron/">Building Ionic Desktop Apps with Capacitor and Electron | Devdactic - Ionic Tutorials</a></li>
<li><a href="https://forum.ionicframework.com/t/my-first-app-starter-npm-update-not-working/200076/3">My-first-app starter npm update not working - Ionic Framework - Ionic Forum</a></li>
<li><a href="https://stackoverflow.com/questions/59921618/ionic-react-error-argument-of-type-is-not-assignable-for-correct-code">reactjs - Ionic React, error "Argument of type is not assignable" for correct code - Stack Overflow</a></li>
<li><a href="https://github.com/electron/electron/issues/13740#issuecomment-439069134">serviceworker: Request scheme 'file' is unsupported · Issue #13740 · electron/electron · GitHub</a></li>
<li><a href="https://ionicframework.com/docs/developing/ios#ios-sim-ios-deploy">iOS Development - Ionic Documentation</a></li>
<li><a href="https://www.joshmorony.com/deploying-capacitor-applications-to-ios-development-distribution/">Deploying Capacitor Applications to iOS (Development &amp; Distribution) | joshmorony - Learn Ionic &amp; Build Mobile Apps with Web Tech</a></li>
<li><a href="https://www.joshmorony.com/deploying-capacitor-applications-to-android-development-distribution/">Deploying Capacitor Applications to Android (Development &amp; Distribution) | joshmorony - Learn Ionic &amp; Build Mobile Apps with Web Tech</a></li>
</ul>
]]></content>
        </entry>
            <entry>
            <title type="html"><![CDATA[Reactでウェブアプリを作ってみた]]></title>
            <link href="https://www.sharkpp.net/blog/2019/10/14/webapp-made-by-reactjs.html"/>
            <updated>2019-10-14T18:05:00+00:00</updated>
            <id>https://www.sharkpp.net/blog/2019/10/14/webapp-made-by-reactjs.html</id>
            <content type="html"><![CDATA[<p>React を利用してオフラインでも簡単な画像編集をできる１画面ウェブアプリを作ってみました。</p>

<p>作ったものは<a href="https://sharkpp.github.io/delayedmotion/">揺れる<ruby>※<rp>(</rp><rt>ちょめ</rt><rp>)</rp>※<rp>(</rp><rt>ちょめ</rt><rp>)</rp></ruby>画像ジェネレータ</a>です。
ネーミングはまあ微妙かな…(汗</p>

<p>それを作るなかで調べたことなどをまとめました。</p>

<p><img src="/images/20191014_delayedmotion_lightmode.png" alt="Light mode" /></p>

<h2 id="%E5%9F%BA%E6%9C%AC%E3%81%AE%E5%9F%BA">基本の基</h2>

<p>まずは、今回利用したツールについて。</p>

<p>利用したのは <a href="https://github.com/facebook/create-react-app">create-react-app</a> です。</p>

<blockquote>
  <p>Set up a modern web app by running one command.</p>
</blockquote>

<p>とあるようにコマンド一発で</p>

<ul>
<li><a href="https://ja.reactjs.org/">React</a> を利用するのに最適な環境を構築</li>
<li>PWA に簡単に対応できる <a href="https://developer.mozilla.org/ja/docs/Web/API/Service_Worker_API">Service Worker</a> などの実装</li>
<li>開発用サーバー＆ビルド環境</li>
<li>ユニットテスト</li>
</ul>

<p>がそろったプロジェクトが設定要らずで作成できます。</p>

<h2 id="ui-%E5%91%A8%E3%82%8A">UI 周り</h2>

<p>UI は <a href="https://react-bootstrap.github.io/">React Bootstrap</a> と…</p>

<p><img src="/thumbs/df8a1082f8a8dec3ddd6cee787881add-640x640.png" alt="React Bootstrap"></p>

<p>ダークモードに対応するためにカスタマイズされたテーマの <a href="https://github.com/ForEvolve/bootstrap-dark">bootstrap-dark</a> を…</p>

<p><img src="/thumbs/a4e325e2ce0633081cfb3bbbe526faa8-640x640.png" alt="bootstrap-dark"></p>

<p>利用しました。
ダークモードについてはこの後に記載があります。</p>

<p>アイコンは、React から利用できる Font Awesome である <a href="https://fontawesome.com/how-to-use/on-the-web/using-with/react">react-fontawesome</a> を利用しています。</p>

<p>あとは、</p>

<ul>
<li><a href="https://github.com/react-dropzone/react-dropzone">react-dropzone</a></li>
<li><a href="https://github.com/mu29/react-stepper">react-stepper(react-stepper-horizontal)</a></li>
<li><a href="https://github.com/DominicTobias/react-image-crop">react-image-crop</a></li>
</ul>

<p>などを、このアプリに固有の UI を実装するため利用しています。</p>

<h2 id="%E3%82%A2%E3%83%97%E3%83%AA%E5%9B%BA%E6%9C%89%E5%87%A6%E7%90%86">アプリ固有処理</h2>

<p>今回のアプリは、</p>

<ol>
<li>画像をアップロード</li>
<li>画像を加工</li>
<li>出来上がった画像をダウンロード</li>
</ol>

<p>という感じに順次進んでいく操作が主となります。</p>

<p>それらの処理の実装についてさらっと記載しておきます。</p>

<h3 id="%E7%94%BB%E5%83%8F%E3%82%92%E3%82%A2%E3%83%83%E3%83%97%E3%83%AD%E3%83%BC%E3%83%89">画像をアップロード</h3>

<p><img src="/images/20191014_delayedmotion_lightmode.png" alt="Light mode" /></p>

<p>ここでは、単なる画像のアップロードと URL を利用したとえば Public Domain な画像などを利用した加工をできるようにしてあります。</p>

<p>このうち画像のアップロード（といいつつサーバーにはアップロードしない）は、 react-dropzone を使ってサクッと実装してあります。</p>

<p>また、URL を指定しての画像編集は、 CORS などによりブロックされるので <a href="https://github.com/Rob--W/cors-anywhere">cors-anywhere</a> というプロキシを Heroku にデプロイし利用しています。</p>

<h3 id="%E7%94%BB%E5%83%8F%E3%82%92%E5%8A%A0%E5%B7%A5">画像を加工</h3>

<p><img src="/images/20191014_delayedmotion_select_phase.png" alt="Select Page" /></p>

<p>画像の加工は <a href="https://github.com/DominicTobias/react-image-crop">react-image-crop</a> を選択の UI に利用し、HTML5 Canvas をマスクや画像の加工に利用しています。</p>

<h3 id="%E5%87%BA%E6%9D%A5%E4%B8%8A%E3%81%8C%E3%81%A3%E3%81%9F%E7%94%BB%E5%83%8F%E3%82%92%E3%83%80%E3%82%A6%E3%83%B3%E3%83%AD%E3%83%BC%E3%83%89">出来上がった画像をダウンロード</h3>

<p><img src="/images/20191014_delayedmotion_download_phase.png" alt="Download page" /></p>

<p>出来上がった画像のダウンロードには <a href="https://github.com/kennethjiang/js-file-download">js-file-download</a> を利用しています。</p>

<h2 id="pwa-%E5%AF%BE%E5%BF%9C">PWA 対応</h2>

<p>react-create-app では、標準で Service Worker の実装が含まれていますが、プロジェクトの作成直後は無効にされています。</p>

<p><code>src/index.js</code> の中身を</p>

<pre><code class="diff"><br />- serviceWorker.unregister();
+ serviceWorker.register();

</code></pre>

<p>と変更すると、Service Worker でリソースのキャッシュが有効にされ、オフラインでも利用できるようになります。</p>

<p>ただ、ローカルでは実行されなかったり http では動作しなかったりと色々制限はあります。
もっとも、オフラインの場合に特別な処理を行うような機能はないので追加で独自に実装しています。</p>

<h3 id="%E3%82%AA%E3%83%95%E3%83%A9%E3%82%A4%E3%83%B3%E3%83%A2%E3%83%BC%E3%83%89%E3%81%AE%E6%A4%9C%E5%87%BA">オフラインモードの検出</h3>

<p>オフラインモードの検出は</p>

<pre><code class="javascript">    window.addEventListener('online',  () =&gt; console.log('change network: online mode'));
    window.addEventListener('offline', () =&gt; console.log('change network: offline mode'));
</code></pre>

<p>のような感じでできます。</p>

<p>また、今のモードの取得は</p>

<pre><code class="javascript">&gt; console.log(navigator.onLine);
true
</code></pre>

<p>のような感じで取得できます。</p>

<p>まあ、それ以外にはどうしようもないのですが…</p>

<h2 id="lighthouse-%E3%81%AB%E3%82%88%E3%82%8B%E3%82%B9%E3%82%B3%E3%82%A2%E3%81%AE%E6%94%B9%E5%96%84">Lighthouse によるスコアの改善</h2>

<p><a href="https://chrome.google.com/webstore/detail/lighthouse/blipmdconlkpinefehnmjammfjpmpbjk?hl=ja">Lighthouse</a> によるスコアの改善などもしています。</p>

<p>大体は指摘に沿って直していけばいいのですが、不具合らしきものを見つけました。</p>

<h3 id="roles-are-not-contained-by-their-required-parent-element">[role]s are not contained by their required parent element</h3>

<p>具体的には React Bootstrap の <a href="https://react-bootstrap.github.io/components/cards/#navigation">Card Navigation</a> で <code>[role]s are not contained by their required parent element</code> (訳:[role]は必須の親要素に含まれていません) と指摘がされます。
どうやら <code>role</code> 属性が Card Navigation に対して設定できない(設定しても React で生成された要素に付加されていない)状態になるようです。</p>

<p><a href="https://react-bootstrap.netlify.com/components/navs/#nav-link-props">ドキュメント</a>によれば…</p>

<blockquote>
  <p>ARIA role for the Nav, in the context of a TabContainer, the default will be set to "tablist", but can be overridden by the Nav when set explicitly.
  When the role is "tablist", NavLink focus is managed according to the ARIA authoring practices for tabs:<br />
  訳: TabContainer のコンテキストでの Nav の ARIA ロールは、デフォルトが "tablist" に設定されますが、明示的に設定すると Nav によってオーバーライドできます。<br />
  ロールが「タブリスト」の場合、NavLinkフォーカスはタブの ARIA オーサリングプラクティスに従って管理されます。</p>
</blockquote>

<p><code>role="tablist"</code> がデフォルトで設定されるようですがどうやらそれすらも無視されているようです。</p>

<p>しばらく悩み、最終的に Nav の親に属性を着ける事でとりあえずの対応としています。</p>

<p>対応方法はこんな感じ。</p>

<pre><code class="javascript">  &lt;Card&gt;
-   &lt;Card.Header&gt;
+   &lt;Card.Header role="tablist"&gt;
      &lt;Nav variant="tabs" defaultActiveKey="#first"&gt;
        &lt;Nav.Item&gt;
</code></pre>

<h2 id="%E3%83%80%E3%83%BC%E3%82%AF%E3%83%A2%E3%83%BC%E3%83%89%E5%AF%BE%E5%BF%9C">ダークモード対応</h2>

<p>macOS や Windows 10 や Android 10 にはダークモードなる通常とは色調が反転した色合いのテーマに変更する機能があります。</p>

<table>
<thead>
<tr>
  <th>ライトモード</th>
  <th>ダークモード</th>
</tr>
</thead>
<tbody>
<tr>
  <td><img src="/images/20191014_delayedmotion_lightmode.png" alt="Light mode" /></td>
  <td><img src="/images/20191014_delayedmotion_darkmode.png" alt="Dark mode" /></td>
</tr>
</tbody>
</table>

<p><code>ダークモード 対応</code> などと検索すると、画面上で切り替えスイッチを実装し、その設定を保存してテーマを切り替えるサンプルやライブラリが色々見つかりました。
とりあえず今回は CSS のメディア特性 <a href="https://developer.mozilla.org/ja/docs/Web/CSS/@media/prefers-color-scheme">prefers-color-scheme</a> を利用し、システムの設定に沿って切り替わるようにしました。</p>

<p>現在の実装に落ち着くまで色々調べてみたのですが…</p>

<ul>
<li>CSS 全部に prefix をつけて JavaScript で切り替えるのは面倒(たぶん CSS をビルドすればできると思うけど…)</li>
<li><code>import('darkmode.css')</code> で読み込んで JavaScript で制御しようにもアンロードの方法が見つからない</li>
<li>CSS の <code>@media (prefers-color-scheme: dark) { ... }</code> のブロック内で <code>@import</code> してもビルド対象に含まれない(外側だと埋め込まれるがそれでは意味がない…)</li>
</ul>

<p>と、いろいろ課題があり、最終的には… <code>dark-theme.css</code> という名前の CSS を用意し、<code>@media (prefers-color-scheme: dark) { ... }</code> のブロック内に <a href="https://github.com/ForEvolve/bootstrap-dark">bootstrap-dark</a> を直接埋め込む、という対応をしています。</p>

<p>それもこれも react-create-app で webpack のビルド設定が隠匿されているのでカスタマイズできないことが１番の要因だと思っています。</p>

<p>また、 react-dropzone や react-stepper-horizontal はダークモードに対応していないので追加でいい感じのスタイルを用意し、同じく <code>@media (prefers-color-scheme: dark)</code> のブロック内に追加しました。</p>

<p>react-dropzone 用</p>

<pre><code class="css">@media (prefers-color-scheme: dark) {
  .dropzone {
    background-color: #444444;
  }
}
</code></pre>

<p>react-stepper-horizontal 用</p>

<pre><code class="css">@media (prefers-color-scheme: dark) {
  .stepper &gt; div &gt; div &gt; div &gt; a {
    color: #EEEEEE !important;
  }
  .stepper &gt; div &gt; div &gt; div &gt; div &gt; a,
  .stepper &gt; div &gt; div &gt; div &gt; div &gt; span {
    color: #333333 !important;
  } 
}
</code></pre>

<h2 id="%E5%8F%82%E8%80%83">参考</h2>

<ul>
<li>React

<ul>
<li><a href="https://ja.reactjs.org/docs/create-a-new-react-app.html">新しい React アプリを作る – React</a></li>
<li><a href="https://create-react-app.dev/docs/code-splitting">Code Splitting · Create React App</a></li>
<li><a href="https://qiita.com/uhyo/items/246fb1f30acfeb7699da#usecallback">🎉React 16.8: 正式版となったReact Hooksを今さら総ざらいする - Qiita</a></li>
</ul></li>
<li>アクセシビリティ

<ul>
<li><a href="http://blog.e-riverstyle.com/2012/12/roleariawaiariahtml5-advent-ca.html">role属性とaria-*属性（WAI-ARIA）について【HTML5 Advent Calendar 2012 Day 9】 - E-riverstyle Vanguard</a></li>
<li><a href="https://www.osaka-kyoiku.ac.jp/~joho/html5_ref/role_attr.php?menutype=2dtaldl01l02l03A0">HTML5 &amp; CSS3 リファレンス - role属性　（要素の役割（WAI-ARIA））</a></li>
<li><a href="https://developer.mozilla.org/en-US/docs/Web/Accessibility/ARIA/Roles/Tab_Role">ARIA: tab role - Accessibility | MDN</a></li>
<li><a href="http://blog.e-riverstyle.com/2011/01/waiariahtml5.html">WAI-ARIAを意識したタブパネルのマークアップを考えてみる【アクセシビリティ】【HTML5】 - E-riverstyle Vanguard</a></li>
<li><a href="https://www.dkrk-blog.net/a11y/tab">タブ切り替えを実装する時の注意点 | dkrkのブログ</a></li>
<li><a href="https://yourmystar-engineer.hatenablog.jp/entry/2018/12/21/162529">Google Lighthouseについて調べてみた vol.2 #lighthouse - ユアマイスター株式会社エンジニアブログ</a></li>
<li><a href="https://chaika.hatenablog.com/entry/2018/12/06/110000">HTML 本当は怖い target="_blank" 。rel="noopener" ってなに？ - かもメモ</a></li>
</ul></li>
<li>PWA

<ul>
<li><a href="https://qiita.com/pepo/items/9b25068a3123b99bcf18">create-react-appで作った雛形のコードがService Workerで何をしているのか - Qiita</a></li>
<li><a href="https://developers.google.com/web/tools/chrome-devtools/progressive-web-apps?hl=ja">Progressive Web App のデバッグ  |  Tools for Web Developers</a></li>
<li><a href="https://medium.com/better-programming/build-a-realtime-pwa-with-react-99e7b0fd3270">Build a Realtime PWA with React - Better Programming - Medium</a></li>
<li><a href="https://qiita.com/wktq/items/f9aa3496b57700db71eb">React+PWAを最速で試してみた - Qiita</a></li>
<li><a href="https://medium.com/@tylerargo/how-to-add-an-offline-notification-to-your-pwa-c11ee640822b">How to add an “Offline” notification to your PWA - Tyler Argo - Medium</a></li>
<li><a href="https://medium.com/@addyosmani/progressive-web-apps-with-react-js-part-3-offline-support-and-network-resilience-c84db889162c">Progressive Web Apps with React.js: Part 3 — Offline support and network resilience</a></li>
<li><a href="https://dragon-taro.com/college/post-767/">reactでオフラインでも実行可能なpwaの電卓を作ってみた │ どらごんテック</a></li>
<li><a href="https://developer.mozilla.org/ja/docs/Web/API/NavigatorOnLine/onLine">window.navigator.onLine - Web API | MDN</a></li>
</ul></li>
<li>ダークモード

<ul>
<li><a href="https://blanche-toile.com/web/dark-mode-css">CSS3のメディアクエリを利用してwebサイトをダークモードに対応させる | Free Style</a></li>
<li><a href="https://www.webcreatorbox.com/tech/dark-mode">Webサイトをダークモードに対応させよう | Webクリエイターボックス</a></li>
<li><a href="https://techacademy.jp/magazine/13018">外部ファイルを読み込む！CSSで@importを使う方法 | TechAcademyマガジン</a></li>
<li><a href="https://postd.cc/modular-css-with-react/">Reactを使ったモジュラーCSS : CSS-in-JSとCSS Module | POSTD</a></li>
</ul></li>
<li>その他

<ul>
<li><a href="https://qiita.com/wadahiro/items/eb50ac6bbe2e18cf8813">JavaScriptでファイルダウンロード処理を実現する - Qiita</a></li>
<li><a href="https://shinglyu.com/web/2019/02/09/js_download_as_file.html">Download JavaScript Data as Files on the Client Side | Shing's Blog</a></li>
<li><a href="https://developer.twitter.com/en/docs/tweets/optimize-with-cards/overview/summary">Summary card — Twitter Developers</a></li>
<li><a href="https://www.tam-tam.co.jp/tipsnote/javascript/post13538.html">File APIとCanvasでローカルの画像をアップロード→加工→ダウンロードする ｜ Tips Note by TAM</a></li>
</ul></li>
</ul>
]]></content>
        </entry>
    </feed>