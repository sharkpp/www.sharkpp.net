<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
    <title><![CDATA[さめたすたすのお家]]></title>
    <link href="http://www.sharkpp.net/blog/tags/Qt.xml" rel="self"/>
    <link href="http://www.sharkpp.net/"/>
    <updated>2017-07-11T14:47:43+00:00</updated>
    <id>http://www.sharkpp.net/</id>
            <author>
            <name><![CDATA[sharkpp]]></name>                    </author>
        <generator uri="http://sculpin.io/">Sculpin</generator>
            <entry>
            <title type="html"><![CDATA[じゅげむったーの開発日記 その３]]></title>
            <link href="http://www.sharkpp.net/blog/2017/06/17/jugemutter-development-diary-3rd.html"/>
            <updated>2017-06-17T22:57:00+00:00</updated>
            <id>http://www.sharkpp.net/blog/2017/06/17/jugemutter-development-diary-3rd.html</id>
            <content type="html"><![CDATA[<p>さて、先月に引き続いて今月も参加した <a href="https://qt-users.connpass.com/event/58337/">Qt 勉強会 @ Nagoya No9(17.06) - connpass</a> のまとめ。</p>

<p>つぶやきは <a href="https://togetter.com/li/1127556">Qt勉強会 Tokyo #48 + @Nagoya #9 つぶやきまとめ</a> でまとめられています。</p>

<p>今回も長文投稿専用Twitterクライアントの開発の続きをしました。
そろそろ終わらせたいです...</p>

<p>レポジトリは ... <a href="https://github.com/sharkpp/Jugemutter">sharkpp/Jugemutter: 長文投稿専用クライアント「じゅげむったー」</a> です。</p>

<p><img src="/images/2017_0617_jugemutter1.png" alt="画面" /></p>

<h2 id="%E9%80%B2%E6%8D%97">進捗</h2>

<p>とりあえず、作ってた設定画面ができて、設定した内容も保存できたぞ！</p>

<p><img src="/images/2017_0617_jugemutter1.png" alt="設定画面" /></p>

<p>投稿画面の本文前後のテキストも表示できるようになったし、</p>

<p><img src="/images/2017_0617_jugemutter2.png" alt="投稿画面" /></p>

<p>インストーラ作るの？って聞かれた。
たしかに、配布どうするか、って問題はある。</p>

<p><a href="https://booth.pm/ja/items/122098">インストーラを作ろう！</a> を持ってたはずなので、それを参考にやってみようかとは思ってる。</p>

<h2 id="%E3%81%9D%E3%81%AE%E4%BB%96%E3%83%A1%E3%83%A2">その他メモ</h2>

<h3 id="%E3%83%87%E3%83%BC%E3%82%BF%E3%83%90%E3%82%A4%E3%83%B3%E3%83%87%E3%82%A3%E3%83%B3%E3%82%B0%E3%81%AB%E3%81%A4%E3%81%84%E3%81%A6">データバインディングについて</h3>

<p>データバインディングは QML の方が Widget より素直？直感的？で実装が楽、らしい。</p>

<p>QML は、かなり昔( <a href="https://github.com/sharkpp/TaskMemGraph">sharkpp/TaskMemGraph: sample of QtQuick2 application</a> )に触ってそれっきりなので、また色々覚えないとダメかもしれないけど、 Android とか iOS のアプリ作るなら Widget よりも最近は QML っぽいので、またやってみようと思う。</p>

<p>そういえば、 <a href="https://github.com/sharkpp/TaskMemGraph">TaskMemGraph</a> っていまビルド通るのだろうか？</p>

<h3 id="%E3%83%87%E3%82%A3%E3%83%AC%E3%82%AF%E3%83%88%E3%83%AA%E6%A7%8B%E6%88%90">ディレクトリ構成</h3>

<p>ファイル数増えて困る、って問題。</p>

<p>何かキッチリ答えがあるわけでもないけど、</p>

<ul>
<li>機能ごと</li>
<li>モジュールごと</li>
</ul>

<p>みたいな感じで良いのでは、とアドバイス。</p>

<h3 id="qt-%E6%9C%AC%E4%BD%93%E3%81%AB%E3%81%A4%E3%81%84%E3%81%A6">Qt 本体について</h3>

<p>Qt 5.9 は、ある人曰く、アップデートしても大丈夫なバージョンな気がする、とのこと。</p>

<p>LTS(=Long Term Support)版だけあって、最初から安定しているのかも。</p>

<h3 id="qtcretor-%E3%81%AB%E3%81%A4%E3%81%84%E3%81%A6">QtCretor について</h3>

<p>QtCretor 4.3.0 はどうも動作が怪しい部分があるらしい（自分はまだ 4.2.1 なので、あくまでらしい）。</p>

<p>前のバージョン、 4.2.1 では大丈夫だけど、ある機能のメニューをクリックしても反応しなかったり、クラスを追加しても、プロジェクトビューに追加されなかったり（再起動すると追加されている）、など。</p>

<p>Qt 5.9 に付属の QtCretor 4.3.1 は大丈夫かも？と言う話。
なお QtCretor 4.3.1 はこの記事を書いている時点では、単体でのダウンロードはできないようです。</p>

<h2 id="%E5%8F%82%E8%80%83">参考</h2>

<ul>
<li><a href="https://www.qt.io/download-open-source/#section-9">Qt - Download Open Source Step 3</a></li>
</ul>
]]></content>
        </entry>
            <entry>
            <title type="html"><![CDATA[じゅげむったーの開発日記 その２]]></title>
            <link href="http://www.sharkpp.net/blog/2017/05/20/jugemutter-development-diary-2nd.html"/>
            <updated>2017-05-20T17:04:00+00:00</updated>
            <id>http://www.sharkpp.net/blog/2017/05/20/jugemutter-development-diary-2nd.html</id>
            <content type="html"><![CDATA[<p>さて、先月に引き続いて今月も参加した <a href="https://qt-users.connpass.com/event/57080/">Qt 勉強会 @ Nagoya No8(17.05) - connpass</a> のまとめ。</p>

<p>今月も、長文投稿専用Twitterクライアントの開発の続きをしました。</p>

<p>レポジトリは ... <a href="https://github.com/sharkpp/Jugemutter">sharkpp/Jugemutter: 長文投稿専用クライアント「じゅげむったー」</a> です。</p>

<p><img src="/images/2017_0520_jugemutter.png" alt="画面" /></p>

<h2 id="%E3%81%AF%E3%81%98%E3%82%81%E3%81%AB">はじめに</h2>

<p>今日は、会場にほぼ時間ぴったりで到着(どうやら参加者中、最後だった模様)。</p>

<p>反時計回りで、本日のやることを宣言。</p>

<p>自分は、「じゅげむったー」の続き。</p>

<h2 id="%E3%82%84%E3%81%A3%E3%81%9F%E3%81%93%E3%81%A8">やったこと</h2>

<p>アカウント周りの管理処理の実装を組んだ。</p>

<p>とりあえず、アカウントの管理がUIが主だったのを別のクラスで管理するようにして、それの変更でUIが変わるように変更をした。</p>

<p>いつのまにか、投稿ができなくなってたので、ソースを追ったら、今表示しているビューに対してドキュメントが設定されてなかった様子。</p>

<p>なので、ビューにドキュメントを設定する処理を実装するが、完了にはもう少し時間が足らなかった。</p>

<p>暗号化処理、Qt標準でないのでどうしたものか？
<a href="https://github.com/roop/qblowfish">roop/qblowfish</a> とか <a href="https://github.com/xcoder123/QBlowfish">xcoder123/QBlowfish</a> とか使おうかな？
でも、<a href="https://ja.wikipedia.org/wiki/Twofish">Twofish</a> よりも設計年代が古いので Twofish のラッパーを作ったほうがいいのかも？</p>

<h2 id="%E5%8F%82%E8%80%83">参考</h2>

<ul>
<li><a href="https://github.com/roop/qblowfish">roop/qblowfish: An implementation of the Blowfish encryption algorithm in Qt.</a></li>
<li><a href="https://github.com/xcoder123/QBlowfish">xcoder123/QBlowfish: Simple blowfish encryption implementation in Qt with QByteArray support</a></li>
<li><a href="https://ja.wikipedia.org/wiki/Twofish">Twofish - Wikipedia</a></li>
</ul>
]]></content>
        </entry>
            <entry>
            <title type="html"><![CDATA[じゅげむったー(仮)の開発日記 その１]]></title>
            <link href="http://www.sharkpp.net/blog/2017/04/16/jugemutter-development-diary-1st.html"/>
            <updated>2017-04-16T23:07:00+00:00</updated>
            <id>http://www.sharkpp.net/blog/2017/04/16/jugemutter-development-diary-1st.html</id>
            <content type="html"><![CDATA[<p>さて、先月に続いて今月も参加した <a href="https://qt-users.connpass.com/event/53963/">Qt 勉強会 @ Nagoya No7(17.04) - connpass</a> のまとめ。</p>

<p>つぶやきは <a href="https://togetter.com/li/1101299">Qt勉強会 Tokyo #46 + Nagoya # 7 つぶやきまとめ - Togetterまとめ</a> でまとめられています。</p>

<p>今月は先月から作り始めた、長文投稿専用Twitterクライアントの開発をしました。</p>

<p>レポジトリは ... <a href="https://github.com/sharkpp/Jugemutter">sharkpp/Jugemutter: 長文投稿専用クライアント「じゅげむったー」</a> です。</p>

<h2 id="%E3%81%AF%E3%81%98%E3%82%81%E3%81%AB">はじめに</h2>

<p>会場に到着する前のこと。</p>

<p>マクドナルドで昼食を食べ、いざ会場へ行かん、としたところで、外を見ると土砂降り，とまでは行かないけれど雨がザーザー<ruby><rb>OMG</rb><rp>(</rp><rt>おーまいがー</rt><rp>)</rp></ruby>。</p>

<p>慌ててコンビニで傘を買って行きましたとさ。
いや、まさか雨が降るとは思わず、折り畳み傘をカバンに入れてなかったのです。</p>

<p>会場に着くと、主催の <a href="https://twitter.com/nekomatu">@nekomatu</a> さん以外おらず。
もともと <a href="https://twitter.com/IoriAYANE">@IoriAYANE</a> さんも調子を崩して参加できず、だったので特に人数が少なかった。</p>

<p>しばらくして、最後の一人も到着で、もくもく開始。</p>

<blockquote class="twitter-tweet" data-lang="ja"><p lang="ja" dir="ltr">本日のおやつ <a href="https://twitter.com/hashtag/qtjp?src=hash">#qtjp</a> <a href="https://t.co/HhGVbaUAWk">pic.twitter.com/HhGVbaUAWk</a></p>&mdash; 夜は短し歩けよさめたすたす (@sharkpp) <a href="https://twitter.com/sharkpp/status/853103000910413824">2017年4月15日</a></blockquote>

<h2 id="%E3%82%84%E3%81%A3%E3%81%9F%E3%81%93%E3%81%A8">やったこと</h2>

<p>ドキュメントを見つつ、画面周りを作成。</p>

<p>QtCreator みたいに左側にツールバーを設置してみようと思うが、どうやらデザイナ上ではウィジェットとしてツールバーは設置できないようだ。
「<a href="http://stackoverflow.com/questions/26691010/how-to-change-toolbar-layout-in-qt-creator">How to change toolbar layout in Qt Creator? - Stack Overflow</a>」 を見ると、 <code>.ui</code> を直接触れって書いてあって、確かにできるんだけど... いいのかな？</p>

<p><code>QPlainTextEdit</code> の画面内の余白、
<img src="images/2017_0415_qplaintextedit_margin.png" />
を計算するうまい方法はないものかと、探すも見つからず。
<a href="http://doc.qt.io/qt-5/qwidget.html#contentsMargins">QWidget::contentsMargins()</a>はどうも違うらしい。</p>

<p><code>QLabel</code> の文字色は ... そうだ、そうだ。
<code>foregroundRole()</code> を使うんだ、とか。</p>

<p>調べながら、コードを書いているとなかなか進まないなぁ。</p>

<h2 id="%E6%88%90%E6%9E%9C">成果</h2>

<p>とりあえず、なんとなくの画面はできてきた感じ。</p>

<p><img src="/images/2017_0415_jugemutter.png" /></p>

<p>もうちょっとで文章を分割してつぶやけるところまて行ったけど、残念ながら時間切れ。</p>

<ul>
<li>分割して投稿</li>
<li>文章をWYSIWYGで編集＆プレビューしたい</li>
<li>投稿のレジューム機能</li>
<li>マルチアカウント管理</li>
</ul>

<p>とか、まだまだ先は長そうだ。</p>

<script async src="//platform.twitter.com/widgets.js" charset="utf-8"></script>

<h2 id="%E7%9F%A5%E3%81%A3%E3%81%9F%E3%81%93%E3%81%A8">知ったこと</h2>

<ul>
<li>Qt

<ul>
<li><a href="http://doc.qt.io/qt-5/properties.html"><code>Q_PROPERTY</code></a> は   <code>setProperty()</code> / <code>property()</code> でアクセスできるようにするマクロ。
何回か、同じ勘違いをやっているけど、 setter/getter を自動で作る機能ではない。</li>
<li>パスに日本語が含まれていると qmake が失敗するらしい、このご時世に。</li>
</ul></li>
<li>QtCreator

<ul>
<li>のソースエディタで、変数の後に <code>.</code> を入力すると <code>-&gt;</code> に変換される。便利！</li>
<li>デザイナ上でツールバーを削除してしまった場合は、オブジェクトインスペクタ？上の <code>QMainWIndow</code> を右クリックして「ツールバーを追加」で追加できる。</li>
<li><code>QDesignerCustomWidgetCollectionInterface</code> とか長ったらしい名前は <code>QDCW</code> と入力すれば補完される！
参考：<a href="http://qiita.com/task_jp/items/098319a33bd946955c0a#%E3%82%AD%E3%83%A3%E3%83%A1%E3%83%AB%E3%82%B1%E3%83%BC%E3%82%B9%E5%AF%BE%E5%BF%9C%E3%81%AE%E8%A3%9C%E5%AE%8C%E3%82%92%E6%9C%80%E5%A4%A7%E9%99%90%E3%81%AB%E6%B4%BB%E7%94%A8%E3%81%97%E3%82%88%E3%81%86">Qt Creator を便利に使いこなそう - Qiita # キャメルケース対応の補完を最大限に活用しよう</a></li>
<li><code>QString m_xxx;</code> などとメンバ変数を定義して、「リファクタリング」を実行すれば  <code>setXxx()</code> と <code>xxx()</code> つまり setter/getter の宣言と実装の枠組みが自動で追加される。
参考：* <a href="http://stackoverflow.com/questions/19729288/auto-generate-setters-getters-with-qtcreator">c++ - Auto-generate setters/getters with QTCreator? - Stack Overflow</a></li>
</ul></li>
</ul>

<h2 id="%E5%8F%82%E8%80%83">参考</h2>

<ul>
<li><a href="http://stackoverflow.com/questions/26691010/how-to-change-toolbar-layout-in-qt-creator">How to change toolbar layout in Qt Creator? - Stack Overflow</a></li>
<li><a href="http://stackoverflow.com/questions/18909507/qtextedit-sets-fix-line-height-paragraph-spacing">qt - QTextEdit sets fix line Height, paragraph spacing - Stack Overflow</a></li>
<li><a href="http://stackoverflow.com/questions/10317845/qplaintextedit-line-spacing">c++ - qplaintextedit line spacing - Stack Overflow</a></li>
<li><a href="http://qiita.com/task_jp/items/098319a33bd946955c0a#%E3%82%AD%E3%83%A3%E3%83%A1%E3%83%AB%E3%82%B1%E3%83%BC%E3%82%B9%E5%AF%BE%E5%BF%9C%E3%81%AE%E8%A3%9C%E5%AE%8C%E3%82%92%E6%9C%80%E5%A4%A7%E9%99%90%E3%81%AB%E6%B4%BB%E7%94%A8%E3%81%97%E3%82%88%E3%81%86">Qt Creator を便利に使いこなそう - Qiita</a></li>
<li><a href="http://stackoverflow.com/questions/2749798/qlabel-set-color-of-text-and-background">qt - QLabel: set color of text and background - Stack Overflow</a></li>
<li><a href="http://doc.qt.io/qt-5/properties.html">The Property System | Qt Core 5.8</a></li>
<li><a href="http://stackoverflow.com/questions/19729288/auto-generate-setters-getters-with-qtcreator">c++ - Auto-generate setters/getters with QTCreator? - Stack Overflow</a></li>
</ul>
]]></content>
        </entry>
            <entry>
            <title type="html"><![CDATA[技術書典2に行ってきた]]></title>
            <link href="http://www.sharkpp.net/blog/2017/04/10/techbookfest2.html"/>
            <updated>2017-04-10T23:50:00+00:00</updated>
            <id>http://www.sharkpp.net/blog/2017/04/10/techbookfest2.html</id>
            <content type="html"><![CDATA[<p>去年から始まった技術書オンリーな同人イベント、「<a href="https://techbookfest.org/event/tbf02">技術書典２</a>」が、昨日の 4月9日に開催されました。
今年も小雨が降る天気の中、去年の「技術書典」に引き続き行ってきました。
これは、そのレポート、もしくは戦果報告となります。</p>

<p><img src="/images/2017_0409_tf2.jpg" alt="会場前にて" /></p>

<h2 id="%E5%A7%8B%E3%82%81%E3%81%AB">始めに</h2>

<p>まず、去年のレポートは「<a href="/blog/2016/06/27/techbookfest.html">技術書典に行ってきた — さめたすたすのお家</a>
」です。</p>

<p>去年は、参加サークル数が 57 で、入場者数は、1400 名でした。
今年は、場所を通運会館から秋葉原UDXホールへ移し、サークル数200？、入場者数が3100名 (<a href="https://twitter.com/TechBooster/status/850983169037697024">※</a>)と、大幅に増えています。</p>

<h2 id="%E5%BD%93%E6%97%A5">当日</h2>

<p>時間ピッタリで行ったら、すでに長蛇の列ができていたという去年の反省を踏まえ、かつ、公式より</p>

<blockquote class="twitter-tweet" data-lang="ja"><p lang="ja" dir="ltr"><a href="https://twitter.com/hashtag/%E6%8A%80%E8%A1%93%E6%9B%B8%E5%85%B8?src=hash">#技術書典</a> 当日の一般入場についてお伝えします！ 11時より一般入場開始ですが、前回の反省を踏まえ秋葉原UDXでは10時より列形成開始の予定です。しかしながら、朝が一番人員繰りが厳しい時間帯なのでお手柔らかにお願いします。10時から列整理に割いている人員はわずかです…！</p>&mdash; TechBooster@超技術書典 (@TechBooster) <a href="https://twitter.com/TechBooster/status/849875400465371136">2017年4月6日</a></blockquote>

<p>というアナウンスがあったので、10時に会場へ到着するよう行動しました。
まあ、現実は非情ですでにそこそこ並んでいたわけですが。</p>

<blockquote class="twitter-tweet" data-lang="ja"><p lang="ja" dir="ltr"><a href="https://twitter.com/hashtag/%E6%8A%80%E8%A1%93%E6%9B%B8%E5%85%B82?src=hash">#技術書典2</a> 来たけど10時の時点でエラいことに。列に並んでいると、Androidがとか、gitが、slackが、ハッカソンが、ハンダが、抵抗がとか、技術系の会話がなされてるのは興味深い <a href="https://t.co/Fd3fe2ePzx">pic.twitter.com/Fd3fe2ePzx</a></p>&mdash; ともかく、さめたすたすには気をつけて。 (@sharkpp) <a href="https://twitter.com/sharkpp/status/850878524860669957">2017年4月9日</a></blockquote>

<p>で、列の待機中は、</p>

<p><a href="/images/2017_0409_tf2_map.png"><img src="/thumbs/76f83f6553b2ac95822f722833c9c297-256x256.png" alt="探索マップ"></a></p>

<p>こんなマップを作っていたり、つぶやいたりして時間を潰していました。
途中、少し肌寒くトイレが近くて危なかったけど、何とかなった。</p>

<p>スタッフさんの「8ビットに並んで」とか、並んでいる人の、git がーとか、Rails がーとか、言う話を BGM で聞きつつ、あぁ、技術系のイベントなんだなぁと、しみじみ。</p>

<p>途中、スタッフさんが、赤い手提げバッグを持って回っているなぁと思ったら、どうやら「技術季報？？？」ってタイトルの要するにはパンフレットを配ってたので、もちろん購入。</p>

<blockquote class="twitter-tweet" data-lang="ja"><p lang="ja" dir="ltr"><a href="https://twitter.com/hashtag/%E6%8A%80%E8%A1%93%E6%9B%B8%E5%85%B82?src=hash">#技術書典2</a> まだ開場前だけどスタッフさんが購入しませんかってまわってきたのでもちろん挙手。技術季報（￥1000）の創刊号をゲットした！超会議の情報も載っているようだ <a href="https://t.co/HjPSDf6GAN">pic.twitter.com/HjPSDf6GAN</a></p>&mdash; ともかく、さめたすたすには気をつけて。 (@sharkpp) <a href="https://twitter.com/sharkpp/status/850885307771650048">2017年4月9日</a></blockquote>

<script async src="//platform.twitter.com/widgets.js" charset="utf-8"></script>

<p>まあ、これは後からでも会場内で買えるのは分かっていたけど、なんとなく先に購入。
手提げバッグだけの場合は、無料で貰えたようです。</p>

<p>そうこうするうちに、半歩前へ詰め、列が更に4列加わり、あ、これはエラいことになるなと。
どうやら最終的にビルを回り込んで反対側まで列が伸びていた様子。</p>

<p>そして、開場時間を超え最終確認に数分を掛けて、ついに開場。
８人✕２“行”ずつの入場で、自分は５番目ぐらいの“行”だったから、前に多分 70 人前後はいた計算。</p>

<p>会場内に入り、早速お目当てのサークルさんを駆け巡る。</p>

<p>戦利品は後ほどで。</p>

<p>知り合いのサークルさんに挨拶しつつ、新刊を買いつつ、本を、時には本以外を購入していると、お金に羽が生えたように財布から飛んで行きました。</p>

<p>ともかく、一時間ぐらい会場内にいたけど、入場制限をしていたため、多少は窮屈だったけどそこまでギュウギュウということはなかったので良かったかなぁ。
まあ、企業ブース前はもう少し広く取ってほしかったけど。
あとは、新刊落としました、とか、未だに来て射ないサークルがあったり、とか、まあそんな感じ。</p>

<p>グルッと一周りして、購入忘れがないことを確認。
知り合いのサークルさんに再度挨拶をして会場を出ました。</p>

<p>最後は、去年と同じように、秋葉原のヤマト運輸営業所で荷物を発送、身軽になって帰りましたとさ。</p>

<h2 id="%E6%88%A6%E5%88%A9%E5%93%81">戦利品</h2>

<p>今回の戦利品</p>

<p><img src="/images/2017_0409_tf2_booty.jpg" alt="戦利品" /></p>

<table>
<thead>
<tr>
  <th>ブース</th>
  <th>サークル名</th>
  <th>備考</th>
</tr>
</thead>
<tbody>
<tr>
  <td></td>
  <td>達人出版会</td>
  <td>「技術季報 2017 SPRING」※技術書典カタログ</td>
</tr>
<tr>
  <td>あ-10</td>
  <td>docker-machine（ドッカーマシーン）</td>
  <td>「技術者のためのやさしい数学」</td>
</tr>
<tr>
  <td>い-05</td>
  <td>空と月</td>
  <td>「兎と亀」</td>
</tr>
<tr>
  <td>い-10</td>
  <td>TOKYO FLIP-FLOP（トーキョーフリップフロップ）</td>
  <td>「フロッピーせんべい」「アクリル製フロッピー」２種</td>
</tr>
<tr>
  <td>う-11</td>
  <td>ひみつラボ</td>
  <td>「RustでGBAのプログラムを作ろう！」</td>
</tr>
<tr>
  <td>え-05</td>
  <td>NP-complete（エヌピーコンプリート）</td>
  <td>「WEBASSEMBLY USUI BOOK</td>
</tr>
<tr>
  <td>え-28</td>
  <td>理ろぐ</td>
  <td>「Qt Quickを使いこなすクロスプラットフォームUIプログラミング2」</td>
</tr>
<tr>
  <td>お-05</td>
  <td>イプシロン</td>
  <td>「立体写真のつくりかた解説」</td>
</tr>
<tr>
  <td>お-12</td>
  <td>めがねをかけるんだ（メガネヲカケルンダ）</td>
  <td>「TensorFlowはじめました」</td>
</tr>
<tr>
  <td>き-10</td>
  <td>ラムダノート株式会社</td>
  <td>「Ruby でつくる Ruby」</td>
</tr>
<tr>
  <td>き-15</td>
  <td>株式会社ブックウォーカー</td>
  <td>「かんたん電子書籍」※無料配布</td>
</tr>
</tbody>
</table>

<p>※敬称略</p>

<h2 id="%E3%81%BE%E3%81%A8%E3%82%81">まとめ</h2>

<p>今回の教訓やメモなど</p>

<ul>
<li>公式のアナウンスをよく見ておこう。</li>
<li>トイレは事前に済ませること。</li>
<li>チラシがぐちゃぐちゃになるから A4 クリアファイルを持って行こう</li>
<li>来年もあれば行こう（超会議はパスしました）</li>
</ul>
]]></content>
        </entry>
            <entry>
            <title type="html"><![CDATA[Qt Network Authorization を使った Twitter API の利用]]></title>
            <link href="http://www.sharkpp.net/blog/2017/03/25/twitter-api-using-qt-network-authorization.html"/>
            <updated>2017-03-25T22:59:00+00:00</updated>
            <id>http://www.sharkpp.net/blog/2017/03/25/twitter-api-using-qt-network-authorization.html</id>
            <content type="html"><![CDATA[<p>さて、先月に続いて今月も参加した <a href="https://qt-users.connpass.com/event/52009/">Qt 勉強会 @ Nagoya No6(17.03)</a> のまとめ。</p>

<p>今回はいつもに増して短め。</p>

<p><a href="https://github.com/sharkpp/Jugemutter">sharkpp/Jugemutter: 長文投稿専用クライアント「じゅげむったー」</a> で成果物を公開しています。</p>

<h2 id="%E3%81%AF%E3%81%98%E3%82%81%E3%81%AB">はじめに</h2>

<p>まずは、クラスの実装をしていきます。</p>

<p><a href="https://doc-snapshots.qt.io/qt5-5.8/examples-qtnetworkauth.html">Qt Network Authorization Examples | Qt Network Authorization 5.8</a> に Twitter認証のサンプルがあるので、それを参考にしつつ <a href="https://github.com/sharkpp/NetworkStorageAccessSample">NetworkStorageAccessSample</a> で実装した認証済みトークンの保存処理を実装していきました。</p>

<p>あ、<a href="http://www.sharkpp.net/blog/2017/01/28/first-impression-qt-network-authorization.html">はじめての Qt Network Authorization</a> も参考にしています。</p>

<p>そろそろ、だれか Qt Network Authorization を触った記事を書いてくれないだろうか？</p>

<h2 id="%E3%83%9D%E3%82%A4%E3%83%B3%E3%83%88">ポイント</h2>

<p>実装するクラスは <code>QOAuth1</code> クラスから派生します。</p>

<p>これは、認証した後のトークンの復帰処理で <code>setStatus(QAbstractOAuth::Status::Granted)</code> の実行が必要となります。
ただし、該当のメソッドが <code>protected</code> として実装されているので、 <code>QOAuth1</code> クラスから派生する必要があるのです。</p>

<p>APIの各エンドポイントを設定</p>

<p>まあ、この辺はサンプルと同じです。</p>

<pre><code class="cpp">setTemporaryCredentialsUrl(QUrl("https://api.twitter.com/oauth/request_token"));
setAuthorizationUrl(QUrl("https://api.twitter.com/oauth/authenticate"));
setTokenCredentialsUrl(QUrl("https://api.twitter.com/oauth/access_token"));
</code></pre>

<p>OAuth の認証を、ブラウザを利用するために、</p>

<pre><code class="cpp">setReplyHandler(new QOAuthHttpServerReplyHandler(this));
</code></pre>

<p>としますが、これを実行するとポートを開きに行くので、必要な時のみポートを開くか PIN 認証にする方が良いかもしれません。</p>

<p>この時、</p>

<pre><code class="cpp">connect(this, &amp;QAbstractOAuth::authorizeWithBrowser,
        this, &amp;Twitter::handleAuthorizeWithBrowser);
</code></pre>

<p>としてシグナルをスロットと関連づけて、</p>

<pre><code class="cpp">void Twitter::handleAuthorizeWithBrowser(QUrl url)
{
    QDesktopServices::openUrl(url);
}
</code></pre>

<p>のような感じで実装することで、ブラウザで認証することができます。</p>

<p><code>grant()</code> を呼び出すことで認証開始するので、適当なメソッドでラップします。</p>

<p>認証後は、</p>

<pre><code>connect(this, &amp;QOAuth1::granted, this, &amp;Twitter::authenticated);
</code></pre>

<p>とすることで、 <code>authenticated()</code> を認証時に呼ばされるシグナルとして登録できます。</p>

<p>つぶやくには</p>

<pre><code>    QUrl url("https://api.twitter.com/1.1/statuses/update.json");
    QUrlQuery query(url);
    query.addQueryItem("status", "hogehoge");
    url.setQuery(query);
    QNetworkReply *reply = post(url);
    connect(reply, &amp;QNetworkReply::finished, this, &amp;Twitter::tweetFinished);
</code></pre>

<p>みたいな感じです。</p>

<p>まあ、後から振り返ると割と簡単な部類になると思うけど、いろいろハマってしまいました。</p>

<h2 id="%E3%81%84%E3%82%8D%E3%81%84%E3%82%8D%E5%A4%B1%E6%95%97%E8%AB%87">いろいろ失敗談</h2>

<p>なぜか今回はハマることハマること。</p>

<p>ハマった所をメモとして残しておきます。</p>

<ul>
<li><code>setClientIdentifier()</code> / <code>setClientSharedSecret()</code> と <code>token()</code> / <code>tokenSecret()</code> をなぜかとり間違える
なぜ間違えたし。</li>
<li>設定したはずの、Consumer Key / Consumer Secret が設定されていなくて、<code>QOAuthOobReplyHandler::networkReplyFinished: Host requires authentication</code> とデバッグ主力に出る。
<code>setModifyParametersFunction</code> で今の Stage とライブラリのソースをにらめっこで原因を見つけた。</li>
<li>呟く内容が別の変数を参照していたために空っぽで <code>Missing required parameter: status.</code> と返答が返ってくる。
うん、たしかに設定されてなかったね。</li>
<li><del><code>connect()</code> でラムダ式を使うとなぜか <code>qobject_cast&lt;QNetworkReply*&gt;(sender())</code> が <code>nullptr</code>。</del>
<del>横着せずに 別メソッドを作って設定すると大丈夫だった。何で？</del>
後で試したら大丈夫だった。</li>
</ul>

<p>と、こんな感じ。</p>

<p>結局、時間内になんとかつぶやきを書き込むまでは行けたけど、先のハマりがなければ、もう少し行けたかもしれない。</p>

<h2 id="%E3%83%84%E3%82%A4%E3%83%83%E3%82%BF%E3%83%BC%E3%81%AE%E3%82%A2%E3%83%97%E3%83%AA%E3%82%B1%E3%83%BC%E3%82%B7%E3%83%A7%E3%83%B3%E7%99%BB%E9%8C%B2">ツイッターのアプリケーション登録</h2>

<p><a href="https://apps.twitter.com/app/new">Create an application | Twitter Application Management</a> でアプリケーションを登録できる。</p>

<p>ただし、電話番号を認証していないと <ruby><rb>You must add your mobile phone to your Twitter profile before creating an application.</rb><rp>(</rp><rt>アプリケーションを作成する前に携帯電話を Twitter プロファイルに追加する必要があります。</rt><rp>)</rp></ruby> って怒られる。</p>

<p>一度登録したら、電話番号の登録を解除しても、登録内容の変更とかは問題なくできる模様。</p>

<p>で、登録時、SMSで飛んでくるトークンを何回入力しても弾かれるので、途方にくれてたけど <a href="http://absg.hatenablog.com/entry/2015/01/26/163057">twitterの電話番号認証がうまくいかないとき - やったこと</a> を見たらリロードすれば大丈夫のようなので試して見たらできた。
何じゃそりゃ？</p>

<p>まあともかく、アプリケーションを登録したら、Consumer Key / Consumer Secret を確認しアプリケーションに設定。</p>

<p>これでOK。</p>

<h2 id="%E5%8F%82%E8%80%83">参考</h2>

<ul>
<li><a href="http://www.sharkpp.net/blog/2017/01/28/first-impression-qt-network-authorization.html">はじめての Qt Network Authorization — さめたすたすのお家</a></li>
<li><a href="https://doc-snapshots.qt.io/qt5-5.8/examples-qtnetworkauth.html">Qt Network Authorization Examples | Qt Network Authorization 5.8</a></li>
<li><a href="https://dev.twitter.com/docs">Twitter Developer Documentation — Twitter Developers</a></li>
<li><a href="https://github.com/sharkpp/NetworkStorageAccessSample">sharkpp/NetworkStorageAccessSample: Qt Network Authorization "Network storage access" sample</a></li>
<li><a href="https://syncer.jp/Web/API/Twitter/REST_API/POST/statuses/update/">POST statuses/update - ツイートを投稿する</a> ※情報が古いようだ</li>
<li><a href="http://westplain.sakuraweb.com/translate/twitter/Documentation/REST-APIs/Public-API/POST-statuses-update.cgi">POST statuses/update - Twitter 開発者ドキュメント 日本語訳</a></li>
<li><a href="https://dev.twitter.com/rest/tools/console">API Console — Twitter Developers</a></li>
<li><a href="http://absg.hatenablog.com/entry/2015/01/26/163057">twitterの電話番号認証がうまくいかないとき - やったこと</a></li>
</ul>
]]></content>
        </entry>
            <entry>
            <title type="html"><![CDATA[Qt Network Authorization を使った Dropbox API　の利用]]></title>
            <link href="http://www.sharkpp.net/blog/2017/02/28/dropbox-api-using-qt-network-authorization.html"/>
            <updated>2017-02-28T01:45:00+00:00</updated>
            <id>http://www.sharkpp.net/blog/2017/02/28/dropbox-api-using-qt-network-authorization.html</id>
            <content type="html"><![CDATA[<p>さて、今月も参加した <a href="https://qt-users.connpass.com/event/50191/">Qt 勉強会 @ Nagoya No5(17.02)</a> のまとめ。</p>

<p>※ <a href="https://togetter.com/li/1092293">Qt 勉強会 @ Nagoya No5(17.02) - Togetterまとめ</a> で当日のつぶやきがまとめられています。</p>

<p>今回も、前回に引き続き、<a href="https://doc.qt.io/qt-5/qtnetworkauth-index.html">Qt Network Authorization</a> を色々さわって見ることにしました。</p>

<p>そして、翌日へとオーバーランをしつつ <a href="https://github.com/sharkpp/NetworkStorageAccessSample">sharkpp/NetworkStorageAccessSample: Qt Network Authorization "Network storage access" sample</a> を作りました。</p>

<p>とりあえず、今時点では、Dropbox への認証と、ファイルのアップロードができます。</p>

<h2 id="dropbox-%E3%81%B8%E3%81%AE%E3%82%A2%E3%83%97%E3%83%AA%E3%82%B1%E3%83%BC%E3%82%B7%E3%83%A7%E3%83%B3%E3%81%AE%E7%99%BB%E9%8C%B2">Dropbox へのアプリケーションの登録</h2>

<p>何はともあれまずはここからです。</p>

<p><a href="https://www.dropbox.com/developers">Developers - Dropbox</a> から "Create your app" を、そして <ruby><rb>Choose the type of access you need</rb><rp>(</rp><rt>必要なアクセスの種類を選択する</rt><rp>)</rp></ruby> は、 "App folder" を選び、アプリケーションを登録します。</p>

<p><a href="http://qiita.com/kz_morita/items/3ae70b10351a48a806eb">スタンドアロンアプリでDropbox APIを使ってaccess_tokenを取得する - Qiita</a> が参考になります。</p>

<p>API の詳細は <a href="https://www.dropbox.com/developers/documentation/http/documentation">HTTP - Developers - Dropbox</a> を。</p>

<h2 id="%E8%BA%93%E3%81%84%E3%81%9F%E3%81%A8%E3%81%93%E3%82%8D">躓いたところ</h2>

<p>Qt Network Authorization で Dropbox API へとアクセスしようと頑張りましたが、 Qt Network Authorization がテクノロジープレビューなためなのか、 Dropbox API が特殊なのか、はたまた両方なのか、現状ハマりどころが多い気がします。</p>

<p>OAuth 1 での Tumblr API アクセスは簡単だったんだけどなぁ、と。</p>

<h3 id="%E8%AA%8D%E8%A8%BC%E5%BE%8C%E3%81%AE%E5%8B%95%E4%BD%9C%E3%82%92-oob-%E6%96%B9%E5%BC%8F%E3%81%AB%E3%81%97%E3%81%9F%E3%81%84%E3%81%8C...">認証後の動作を oob 方式にしたいが...</h3>

<p>色々試して、一応 oob 方式での認証ができた。</p>

<p>もう少し調べたら Qt Network Authorization の redditclient サンプルで、コールバックによる認証を扱っていたのでそれを参考にすればできそうな感じではある。
ただ、Dropbox では、コールバックアドレスを厳密に設定するように求めているようなので、あらかじめ <code>http://localhost:12345/</code> や <code>http://localhost:12346/</code> など何個かのローカルアドレスを設定しておき、その中から開けるポートを開いて認証する、ということをすれば多分動くのではないかと思う。</p>

<p>認証を oob (Out-of-band 要するに pin で認証) で行うためには redirect_uri に <code>oob</code> とか空文字を設定するのではなく、省略しないとダメだった。
API ドキュメントをよく読むと確かに書いてあったけど、見逃していたorz</p>

<p><code>QOAuthOobReplyHandler::callback()</code> メソッドで <code>redirect_uri</code> の値が指定できるが、省略はできないようなので、</p>

<pre><code class="cpp">    setModifyParametersFunction([&amp;](Stage stage, QVariantMap* data) {
        if (Stage::RequestingAuthorization == stage || // 認証要求開始
            Stage::RequestingAccessToken   == stage)   // アクセストークン要求開始
        {
            data-&gt;remove(Key::redirectUri);
        }
    });
</code></pre>

<p>と、このように <code>QAbstractOAuth::setModifyParametersFunction()</code> メソッドでパラメータを削除することで対応。</p>

<h2 id="pin-%E3%81%AE%E8%A8%AD%E5%AE%9A%E3%81%AF%E3%81%A9%E3%81%86%E3%81%99%E3%82%8C%E3%81%B0%EF%BC%9F">Pin の設定はどうすれば？</h2>

<p>ソースを読んでも、特に Pin を設定するメソッドとかなさそうだったので、自分でシグナルを発行してあげることにした。</p>

<pre><code class="cpp">    void setPinCode(const QString&amp; code)
    {
        QVariantMap data;
        data.insert(Key::error, "");
        data.insert(Key::code, code); // code = access token
        data.insert(Key::state, currentState);
        Q_EMIT callbackReceived(data);
    }
</code></pre>

<p>こんな感じで <code>callbackReceived</code> シグナルに適当なパラメータをセットするとうまくいった。</p>

<h2 id="%E3%81%AA%E3%81%9C-%22content-type%3A-text%2Fjavascript%22-%E3%81%AA%E3%81%AE%EF%BC%9F">なぜ "Content-Type: text/javascript" なの？</h2>

<p>アクセストークンを取得するためのエンドポイント <code>https://api.dropboxapi.com/oauth2/token</code> の結果がなんと <code>Content-Type: text/javascript</code> で返ってきていた。</p>

<p>そう、 <code>Content-Type: application/json</code> ではなく。</p>

<p>API ドキュメントを確認すると、他の API では、 <code>Content-Type: application/json</code> を返すのにもかかわらず、である。</p>

<p>まあ、ともかく Qt Network Authorization のソースを見ると、<code>Content-Type: text/javascript</code> との比較は埋め込みでどうにもならないので、</p>

<p><code>QNetworkReply</code> を派生して</p>

<pre><code>    void fixContentType()
    {
        setHeader(QNetworkRequest::ContentTypeHeader, "application/json");
    }
</code></pre>

<p>のようなメソッドを追加し、無理やりキャストして</p>

<pre><code>    void networkReplyFinished(QNetworkReply *reply)
    {
        DropboxOAuthOobReply *reply_ = (DropboxOAuthOobReply *)reply;
        reply_-&gt;fixContentType(); // fix content-type, "text/javascript" to "application/json"
        QOAuthOobReplyHandler::networkReplyFinished(reply);
    }
</code></pre>

<p>このように <code>networkReplyFinished()</code> のタイミングで実行することで対応した。</p>

<p>ただ、コンパイラの実装によってはNGかもしれないので、 Qt Network Authorization 側で対応しないとダメだなーと。</p>

<h2 id="%E3%81%AA%E3%81%9C%E3%80%81%E3%82%AF%E3%82%A8%E3%83%AA%E3%81%97%E3%81%8B%E8%A8%AD%E5%AE%9A%E3%81%A7%E3%81%8D%E3%81%AA%E3%81%84%E3%81%AE%E3%81%A7%E3%81%99%E3%81%8B%EF%BC%9F">なぜ、クエリしか設定できないのですか？</h2>

<p>認証ができて、さあ API を呼び出してみよう、と思ったところで、 Dropbox API は REST API を捨てたようで、全ての呼び出しが POST メソッド、必要なパラメータは <code>Dropbox-API-Arg</code> ヘッダ、と特殊なことをしていたために、<code>QAbstractOAuth::post()</code> では処理が足りなかった。</p>

<p>そういう訳なので、自分でヘッダとかポストデータとかを設定できるようなメソッドを実装した。</p>

<h2 id="%E3%83%88%E3%83%BC%E3%82%AF%E3%83%B3%E3%81%AE%E4%BF%9D%E5%AD%98%E3%81%A8%E5%BE%A9%E5%85%83">トークンの保存と復元</h2>

<p>これはハマりどころではないですが、前回できなかった認証後の状態の保存処理も実装しました。</p>

<p>保存時は、<code>QOAuth2AuthorizationCodeFlow::token()</code> の結果を返すだけです。</p>

<pre><code class="cpp">const QString Dropbox::serialize() const
{
    if (QAbstractOAuth::Status::Granted != status()) {
        return "";
    }
    return token();
}
</code></pre>

<p>読み込み時は、<code>setToken()</code> と <code>setStatus()</code> に <code>QAbstractOAuth::Status::Granted</code> を設定して、擬似的に認証済み、と状態を変更します。</p>

<pre><code class="cpp">void Dropbox::deserialize(const QString&amp; token)
{
    if (token.isEmpty()) {
        return;
    }

    setToken(token);
    setStatus(QAbstractOAuth::Status::Granted);
}
</code></pre>

<p>この時、忘れずに認証したよ、のシグナルを定義しているのであれば呼ぶ必要があります。</p>

<h3 id="%E3%81%9D%E3%81%AE%E4%BB%96">その他</h3>

<p>https なので通信内容を横から解析ができないので、結構面倒。
どうにか、中間者攻撃風に途中で通信を解析できる方法を作らないと結構デバッグが面倒。</p>

<h2 id="%E7%9B%AE%E6%A8%99">目標</h2>

<p>とりあえず、Dropbox の アップロードはできたので、ダウンロードや、削除。
<code>redirect_uri</code> を指定しての認証や、 Box などの別のオンラインストレージへのアクセスなどを追加していきたいな、と。</p>

<h2 id="%E5%8F%82%E8%80%83">参考</h2>

<ul>
<li><a href="http://www.slideshare.net/ginpei_jp/dropbox-api-39190004">Dropbox APIさわってみた</a> ※情報が古いっぽい</li>
<li><a href="https://gist.github.com/voluntas/fe9394ce56ef4a305aa14168c09a3991">Dropbox API v2 仕様まとめ · GitHub</a></li>
<li><a href="https://www.dropbox.com/developers/documentation/http/documentation">HTTP - Developers - Dropbox</a></li>
</ul>
]]></content>
        </entry>
            <entry>
            <title type="html"><![CDATA[はじめての Qt Network Authorization]]></title>
            <link href="http://www.sharkpp.net/blog/2017/01/28/first-impression-qt-network-authorization.html"/>
            <updated>2017-01-28T16:50:00+00:00</updated>
            <id>http://www.sharkpp.net/blog/2017/01/28/first-impression-qt-network-authorization.html</id>
            <content type="html"><![CDATA[<p>先日、ちょうど「<a href="https://mag.osdn.jp/17/01/25/161000">設定を統合した「Qt 5.8」が登場 | OSDN Magazine</a>」の記事が目に入り、ふんふんと読んでいたところで、Qt Lite も気になりましたが、それよりも OAuth 2 と OAuth 2 に対応した <a href="https://doc.qt.io/qt-5/qtnetworkauth-index.html">Qt Network Authorization</a> が技術プレビューで追加、と書かれていたので軽く試して見ました。</p>

<p>と言うことで、新しくなってから２回目の参加になる <a href="https://qt-users.connpass.com/event/48608/">Qt 勉強会 @ Nagoya No4(17.01)</a> は、Qt Network Authorization を触って見ることにしました。</p>

<p>※ <a href="https://togetter.com/li/1092291">Qt 勉強会 @ Nagoya No4(17.01) - Togetterまとめ</a> で当日のつぶやきがまとめられています。</p>

<p>結論を先に言うと、 <strong>Qt Network Authorization</strong> は簡単に OAuth 認証をアプリケーションへ組み込めるようです。</p>

<p>気になる点としては、</p>

<ul>
<li>ドキュメントが少ない</li>
<li>認証が通った後「Callback received. Feel free to close this page.」と書かれたページがブラウザで開いたままになる。

<ul>
<li>これは自動で閉じてほしい</li>
</ul></li>
<li>コールバックを受け取るためにポートを自動で開くのでファイヤーウォールなどでブロックしていると失敗する</li>
</ul>

<p>などですが、まあ現状は技術プレビューの段階なので正式版までになんとかなっていてほしいなと。</p>

<h2 id="%E3%81%BE%E3%81%9A%E5%A7%8B%E3%82%81%E3%81%AB">まず始めに</h2>

<p>まあ、大前提として、Qt Network Authorization を利用するには Qt 5.8 以降が必要となります。</p>

<p>次に <a href="http://doc.qt.io/qt-5/qtnetworkauth-index.html">Qt Network Authorization 5.8</a> を参考に、</p>

<p>.pro に</p>

<pre><code>QT += network networkauth
</code></pre>

<p>と追加しましょう。</p>

<p>あとは、 Twitter なり Tumblr なりなんなりへ、アプリケーションを登録して OAuth Consumer Key と Secret Key を取得しておきましょう。
この時、コールバックURLを書く必要がある場合は、適当なアドレスを書いておけば問題ありません。</p>

<h2 id="%E6%B5%81%E3%82%8C">流れ</h2>

<p>最低限のプログラムの流れです。</p>

<p>OAuth 1.x なら QOAuth1 クラスを基底クラスにして処理を実装していけば良いようです。</p>

<p>今回は、 Tumblr で試していたので OAuth 1.0a 対応の QOAuth1 を触りますが、 QOAuth2 でも多分大体同じだと思います。</p>

<p>ただ、 QOAuth1 のドキュメントがないので <a href="http://doc.qt.io/qt-5/qabstractoauth.html">QAbstractOAuth</a> クラスのドキュメントで我慢しましょう。</p>

<h3 id="url%E3%81%AE%E7%99%BB%E9%8C%B2">URLの登録</h3>

<p>とりあえず３種類のURLを登録する必要があります。</p>

<table>
<thead>
<tr>
  <th>メソッド</th>
  <th>URL例</th>
  <th>説明</th>
</tr>
</thead>
<tbody>
<tr>
  <td>setTemporaryCredentialsUrl</td>
  <td>https://api.twitter.com/oauth/request_token<br/>https://www.tumblr.com/oauth/request_token</td>
  <td>トークンの要求</td>
</tr>
<tr>
  <td>setAuthorizationUrl</td>
  <td>https://api.twitter.com/oauth/authenticate<br/>https://www.tumblr.com/oauth/authorize</td>
  <td>認証</td>
</tr>
<tr>
  <td>setTokenCredentialsUrl</td>
  <td>https://api.twitter.com/oauth/access_token<br/>https://www.tumblr.com/oauth/access_token</td>
  <td>アクセストークン取得</td>
</tr>
</tbody>
</table>

<p>いずれも <code>QAbstractOAuth</code> クラスの public メンバメソッドです。</p>

<p>ここに変なのを指定すると <code>QOAuthOobReplyHandler::networkReplyFinished: Protocol "" is unknown</code> と言われたりします。</p>

<h3 id="consumer-key-%E3%81%A8-secret-key-%E3%81%AE%E6%8C%87%E5%AE%9A">Consumer Key と Secret Key の指定</h3>

<p>OAuth Consumer Key と Secret Key を指定します。
これ自体の扱いはいろいろ厄介なのですが、とりあえずそれは置いておきます。</p>

<p><code>QOAuth1.setClientCredentials()</code> に <code>QPair&lt;QString, QString&gt;</code> で指定します。</p>

<p><code>QPair&lt;QString, QString&gt;().first</code> は Consumer Key で</p>

<p><code>QPair&lt;QString, QString&gt;().second</code> は Secret Key です。</p>

<h3 id="%E8%AA%8D%E8%A8%BC%E8%A6%81%E6%B1%82">認証要求</h3>

<p>ここまで設定できたら <code>grant()</code> を呼ぶことで、認証手続きが開始されます。</p>

<h3 id="%E3%83%96%E3%83%A9%E3%82%A6%E3%82%B6%E3%81%A7%E3%81%AE%E8%AA%8D%E8%A8%BC%E8%A6%81%E6%B1%82%E3%81%AE%E3%82%B7%E3%82%B0%E3%83%8A%E3%83%AB">ブラウザでの認証要求のシグナル</h3>

<p><code>grant()</code> を呼ぶと <code>QAbstractOAuth::authorizeWithBrowser</code> シグナルが飛んでくるので、あらかじめスロットで受け取れるようにしておきましょう。</p>

<p><a href="http://doc.qt.io/qt-5/qabstractoauth.html#authorizeWithBrowser">QAbstractOAuth::authorizeWithBrowser</a> の中で引数に指定されたURLをウェブブラウザで開くことでいつも利用しているブラウザを用いた認証ができるような仕組みになっています。</p>

<p>ただ、この処理を実現するために、アプリケーション自身でポートをリッスンし、そのアドレスをコールバックとして指定しているようで、ファイヤーウォールなどでブロックされる可能性があるので注意が必要です。</p>

<h3 id="%E8%AA%8D%E8%A8%BC%E5%AE%8C%E4%BA%86%E3%81%AE%E3%82%B7%E3%82%B0%E3%83%8A%E3%83%AB">認証完了のシグナル</h3>

<p>認証が完了すると <a href="http://doc.qt.io/qt-5/qabstractoauth.html#grant">QOAuth1::granted</a> シグナルが飛ぶので、必要に応じてメッセージを出すなり、UIを有効化させるなりで利用できると思います。</p>

<p>一応、認証後にはアクセストークンも取れるので、それを保存しておけば次回以降は認証が必要なくなると思いますが、すこし試したところうまくいきませんでした。</p>

<h3 id="api%E3%82%92%E5%91%BC%E3%81%B6">APIを呼ぶ</h3>

<p>ここまできたら、後は簡単で <code>QAbstractOAuth</code> に含まれるメンバメソッドの get() / head() / post() を呼ぶだけで、非同期でコンテンツが取得できます。</p>

<p>要求アドレスへ <code>api_key</code> などというパラメータをユーザーがつける必要はないので扱いやすいと思います。</p>

<h2 id="%E3%81%BE%E3%81%A8%E3%82%81">まとめ</h2>

<ul>
<li><strong>Qt Network Authorization</strong> は簡単に OAuth 認証をアプリケーションへ組み込めそう</li>
<li>サンプルがあるからまあなんとかなりそう</li>
<li>ツイッター連携とか実装するのが簡単になるね！</li>
</ul>

<h2 id="%E5%8F%82%E8%80%83">参考</h2>

<ul>
<li><a href="https://doc.qt.io/qt-5/qtnetworkauth-index.html">Qt Network Authorization 5.8</a></li>
<li><a href="https://doc-snapshots.qt.io/qt5-5.8/examples-qtnetworkauth.html">Qt Network Authorization Examples | Qt Network Authorization 5.8</a></li>
<li><a href="http://code.qt.io/cgit/qt/qtnetworkauth.git/">qt/qtnetworkauth.git - Qt Network Authenticators; QtOAuth in particular</a></li>
<li><a href="http://www.sharkpp.net/blog/2014/03/30/oauth-providers-list.html">oAuth 認証を提供しているサービスをまとめてみました — さめたすたすのお家</a></li>
</ul>
]]></content>
        </entry>
            <entry>
            <title type="html"><![CDATA[QMacCocoaViewContainer を使ってみる]]></title>
            <link href="http://www.sharkpp.net/blog/2016/12/10/qt-advent-calendar-2016-10th-day.html"/>
            <updated>2016-12-10T17:25:00+00:00</updated>
            <id>http://www.sharkpp.net/blog/2016/12/10/qt-advent-calendar-2016-10th-day.html</id>
            <content type="html"><![CDATA[<p>こんにちは、こんばんは。</p>

<p><a href="http://qiita.com/advent-calendar/2016/qt">Qt Advent Calendar 2016</a> の 10日目を担当する <a href="https://twitter.com/sharkpp">@sharkpp</a> です。</p>

<p>今回は <a href="http://doc.qt.io/qt-5/qmaccocoaviewcontainer.html">QMacCocoaViewContainer</a> Class を触ってみようかと思います。</p>

<p>題して「QMacCocoaViewContainer を使ってみる」です。</p>

<h2 id="%E3%81%AF%E3%81%98%E3%82%81%E3%81%AB">はじめに</h2>

<p>これは、 Qt で macOS Sierra の <a href="https://developer.apple.com/reference/appkit/nstouchbar">Touch Bar</a> を使ってみようとして挫折したあれこれのから生まれた記事であります。</p>

<p>公式の方では <a href="https://bugreports.qt.io/browse/QTBUG-56908">[QTBUG-56908] Support NSTouchBar on latest MacBook Pro - Qt Bug Tracker</a> で 5.9 を目標に実装が提案？されているようです。</p>

<p>まあ、とりあえず Touch Bar の事は忘れましょう。</p>

<h2 id="%E7%92%B0%E5%A2%83">環境</h2>

<table>
<thead>
<tr>
  <th>項目</th>
  <th>値</th>
</tr>
</thead>
<tbody>
<tr>
  <td>OS</td>
  <td>macOS Sierra 10.12.1 (16B2659)</td>
</tr>
<tr>
  <td>Qt</td>
  <td>5.7.0</td>
</tr>
<tr>
  <td>Qt Creator</td>
  <td>4.1.0</td>
</tr>
</tbody>
</table>

<p>この記事では Qt Creator でコードを書いていきます。</p>

<h2 id="%E7%9B%AE%E6%A8%99%E3%81%AA%E3%81%A9">目標など</h2>

<p>今回は <a href="https://developer.apple.com/reference/appkit/nsbutton">NSButton</a> を Qt のウインドウ上に表示してクリックをハンドリングするまでがこの記事の内容になります。</p>

<p>とりあえず作るクラスの階層です。</p>

<pre><code>CocoaButton -- QPushButton を派生
  +-- CocoaButtonWrapper -- NSButton の参照を所有
        +-- CocoaButtonProxy -- NSButton のクリックを CocoaButtonWrapper に送る
</code></pre>

<p><code>CocoaButton</code> が Qt のウィジェットとして利用できるようにするクラスで、そのほかに <code>CocoaButtonWrapper</code> や <code>CocoaButtonProxy</code> があります。</p>

<h2 id="%E3%83%97%E3%83%AD%E3%82%B8%E3%82%A7%E3%82%AF%E3%83%88%E3%82%92%E4%BD%9C%E3%82%8B">プロジェクトを作る</h2>

<p>まず適当なプロジェクトを作り、<code>NSButton</code> ボタン用のクラスを追加します。</p>

<p><a href="http://doc.qt.io/qt-5/ios-support.html#using-objective-c-code-in-qt-applications">Using Objective-C Code in Qt Applications</a> に書かれているように <code>OBJECTIVE_SOURCES</code> に <code>.mm</code> ファイルを追加しますが、「クラスの定義」でソースファイル名の拡張子を <code>.mm</code> に変更した場合は自動で設定してくれるようです。</p>

<p><a href="/images/2016_1210_qtcreator_newclass.png"><img src="/thumbs/9821c8921f122c38b6db04654a1b4bba-384x384.png" alt="Qt Creator"></a></p>

<p>また、 <code>NSButton</code> などを利用するので .pro に AppKit をリンクするように <code>LIBS</code> に追加します。</p>

<pre><code class="diff"><br />  FORMS    += mainwindow.ui
+ 
+ OBJECTIVE_SOURCES += \
+     cocoabutton.mm
+ 
+ macx: LIBS += -framework AppKit
</code></pre>

<p>こんな感じです。</p>

<p>完全な内容は <a href="https://github.com/sharkpp/MacCocoaWithQtSample/blob/master/MacCocoaWithQtSample.pro">MacCocoaWithQtSample.pro</a> を見てみてください。</p>

<h2 id="cocoabutton-%E3%81%AE%E5%AE%9F%E8%A3%85">CocoaButton の実装</h2>

<p>追加したファイルにクラスの実装をしていきます。</p>

<p><a href="https://github.com/sharkpp/MacCocoaWithQtSample/blob/master/cocoabutton.mm">cocoabutton.mm</a> に <code>CocoaButton</code> を実装してきます。</p>

<p>Qt Cretor のデザイナでボタンを設置したいがために <code>moveEvent</code> や <code>resizeEvent</code> を実装します。</p>

<pre><code class="cpp">void CocoaButton::moveEvent(QMoveEvent *event)
{
    NSRect frame;
    frame = [m_wrpper-&gt;m_refButton frame];
    frame.origin.x = event-&gt;pos().x();
    frame.origin.y = event-&gt;pos().y();
    [m_wrpper-&gt;m_refButton setFrame:frame];
}

void CocoaButton::resizeEvent(QResizeEvent *event)
{
    NSRect frame;
    frame = [m_wrpper-&gt;m_refButton frame];
    frame.size.width = event-&gt;size().width();
    frame.size.height = event-&gt;size().height();
    [m_wrpper-&gt;m_refButton setFrame:frame];
}
</code></pre>

<p><code>setText</code> でボタンのキャプションを変えれるようにしておきます。</p>

<pre><code class="cpp">void CocoaButton::setText(const QString &amp;text)
{
    [m_wrpper-&gt;m_refButton setTitle: text.toNSString()];
}
</code></pre>

<p>あとは、</p>

<pre><code class="cpp">    CocoaButtonProxy *proxy = [[CocoaButtonProxy alloc] init:this];
    [m_refButton setTarget:proxy];
    [m_refButton setAction:@selector(clicked:)];
</code></pre>

<p>みたいな形で Objective-C で実装された target と action を登録して</p>

<pre><code class="objectivec">- (IBAction)clicked:(id)sender
{
    proxyDest-&gt;handleClicked();
}
</code></pre>

<p>とすれば、クリックで C++ で実装されたメソッドが呼び出せます。</p>

<p>最後に <code>CocoaButtonProxy</code> から <code>CocoaButton</code> そしてその上位へとシグナルを飛ばすようにすれば、</p>

<pre><code class="cpp">connect(ui-&gt;buttonCocoa, SIGNAL(clicked()), this, SLOT(onCocoaButtonClick()));
</code></pre>

<p>このような形でシグナルを受け取ることができます。</p>

<p><a href="/images/2016_1210_sample_ss.png"><img src="/thumbs/199fc30fdfe0a59ceab9e8c4e83bc0e6-384x384.png" alt="Qt Creator"></a></p>

<p>実際に動かすとこんな感じです。</p>

<h2 id="%E6%88%90%E6%9E%9C%E7%89%A9">成果物</h2>

<p><a href="https://github.com/sharkpp/MacCocoaWithQtSample">sharkpp/MacCocoaWithQtSample</a> に今回の記事の完全なソースを置いておきます。</p>

<h2 id="%E5%8F%82%E8%80%83">参考</h2>

<ul>
<li><a href="http://doc.qt.io/qt-5/qmaccocoaviewcontainer.html">QMacCocoaViewContainer Class | Qt Widgets 5.7</a></li>
<li><a href="https://bugreports.qt.io/browse/QTBUG-40583">[QTBUG-40583] Unable to use QMacCocoaViewContainer - Qt Bug Tracker</a></li>
<li><a href="https://github.com/vasi/vdfuse/blob/master/include/VBox/VBoxCocoa.h">vdfuse/VBoxCocoa.h at master - vasi/vdfuse</a></li>
</ul>

<h2 id="%E6%9C%80%E5%BE%8C%E3%81%AB">最後に</h2>

<p>今回は、<a href="https://developer.apple.com/reference/appkit/nstouchbar">Touch Bar</a> を Qt から使ってみたい、から始まり結果、かなりスケールダウンした記事となりましたが、それもこれも、初めてさわる Objective-C が原因でしたが、今回いろいろ調べてなんとなくわかってきたので Touch Bar の方も何かしらためせるといいなと思っています。</p>

<p>それでは、また。</p>

<p>明日は <a href="https://twitter.com/nekomatu">@nekomatu</a> さんによる「<a href="http://nekomatu.blogspot.jp/2016/12/develop-qtapp-with-qtcreator-on-buildroot.html">BuildrootとQtCreatorを使ってQtアプリを開発する方法</a>」です。
お楽しみに。</p>

<hr />

<p>この投稿は <strong><a href="http://qiita.com/advent-calendar/2016/qt">Qt Advent Calendar 2016</a></strong> の <strong>10日目</strong>の記事です。</p>

<ul>
<li>９日目の記事: <a href="http://qiita.com/hermit4/items/6282640a7fe4dbcdec43">スレッドの同期について学ぼう(その１）</a></li>
<li>11日目の記事: <a href="http://nekomatu.blogspot.jp/2016/12/develop-qtapp-with-qtcreator-on-buildroot.html">BuildrootとQtCreatorを使ってQtアプリを開発する方法</a></li>
</ul>

<hr />
]]></content>
        </entry>
            <entry>
            <title type="html"><![CDATA[File Drop Buffer をリリースしました]]></title>
            <link href="http://www.sharkpp.net/blog/2016/07/31/file-drop-buffer-release.html"/>
            <updated>2016-07-31T23:00:00+00:00</updated>
            <id>http://www.sharkpp.net/blog/2016/07/31/file-drop-buffer-release.html</id>
            <content type="html"><![CDATA[<p>Qt を利用し、<a href="https://github.com/sharkpp/FileDropBuffer">FileDropBuffer</a> というソフトを作ってみました。</p>

<p>ダウンロードは <a href="https://github.com/sharkpp/FileDropBuffer/releases">GitHub リリースページ</a> からどうぞ。</p>

<p>基本機能自体は Qt に実装済みのものを利用したので、プロトタイプはできるのが早かったですが、アイコンつけたり背景を設定したりに時間がかかりました。</p>

<h2 id="%E3%81%93%E3%82%8C%E3%81%AF%E3%81%AA%E3%81%AB%EF%BC%9F">これはなに？</h2>

<p>通常は、ファイルのドラッグ ＆ ドロップは、一度しかできないですが、このソフトに溜め込むことで、複数の操作が一度にできるようになります。</p>

<p>例えば、</p>

<ul>
<li>ファイルをドロップして形式を変換するコンバータがあるとして、別々のフォルダにあるファイルを一度に変換できる。</li>
<li>複数のフォルダのファイルを一度に別のフォルダにコピーや移動できる。</li>
</ul>

<p>など、です。</p>

<h2 id="%E3%83%80%E3%82%A6%E3%83%B3%E3%83%AD%E3%83%BC%E3%83%89">ダウンロード</h2>

<table>
<thead>
<tr>
  <th>OS</th>
  <th>リンク</th>
</tr>
</thead>
<tbody>
<tr>
  <td>Windows</td>
  <td><a href="https://github.com/sharkpp/FileDropBuffer/releases/download/v0.1.0/FileDropBuffer-win-0.1.0.zip">FileDropBuffer-win-0.1.0.zip</a> ※ GitHub</td>
</tr>
<tr>
  <td>OS X (macOS)</td>
  <td><a href="https://github.com/sharkpp/FileDropBuffer/releases/download/v0.1.0/FileDropBuffer-mac-0.1.0.dmg">FileDropBuffer-mac-0.1.0.dmg</a> ※ GitHub</td>
</tr>
</tbody>
</table>

<h2 id="%E3%82%A4%E3%83%B3%E3%82%B9%E3%83%88%E3%83%BC%E3%83%AB">インストール</h2>

<p>ファイルを解凍するだけで実行できます。</p>

<p>解凍した中にできている <code>File Drop Buffer</code> というアプリケーションを実行してください。</p>

<h2 id="%E3%82%A2%E3%83%B3%E3%82%A4%E3%83%B3%E3%82%B9%E3%83%88%E3%83%BC%E3%83%AB">アンインストール</h2>

<p>レジストリや設定ファイルなどは利用していないので、フォルダごと削除するだけです。</p>

<h2 id="%E4%BD%BF%E3%81%84%E6%96%B9">使い方</h2>

<p>まず、ファイルをこのソフトの <code>Drop file here</code> と書かれている部分にドロップします。</p>

<p><img src="/images/2016_0731_FileDropBuffer_droping.png" alt="ファイルのドロップ" /></p>

<p>何回かファイルをドロップし終えたら、アプリケーションの中央に表示されているファイルアイコンをドラッグし、目標とするアプリケーションへドロップします。</p>

<p><img src="/images/2016_0731_FileDropBuffer_draging.png" alt="ファイルのドラッグ" /></p>

<p>その他の機能は</p>

<ul>
<li>右下のゴミ箱ボタンは、保持しているファイルの一覧をクリア</li>
<li>その隣のボタンは、アプリケーションの最前面解除＆設定</li>
</ul>
]]></content>
        </entry>
            <entry>
            <title type="html"><![CDATA[技術書典に行ってきた]]></title>
            <link href="http://www.sharkpp.net/blog/2016/06/27/techbookfest.html"/>
            <updated>2016-06-27T00:50:00+00:00</updated>
            <id>http://www.sharkpp.net/blog/2016/06/27/techbookfest.html</id>
            <content type="html"><![CDATA[<p>一昨日、6月25日に技術系の同人誌や書籍に絞った、俗に○○オンリーって言われる系統の、今回は技術書オンリーなイベント「<a href="https://techbookfest.org/">技術書典</a>」へ行ってきたので、戦利品のまとめを兼ねてレポします。</p>

<p>自身の属しているカテゴリとしては、同人誌の即売会はかなり久しぶりに行った感じの人なので、ちょっと他の○○オンリーイベントと会場の状態や入場整理などの比較がしづらいですが、そんな人から見たら、こうだった、という感じのレポートとなります。</p>

<p><img src="/images/2016_0625_techbookfest.jpg" alt="会場前にて" /></p>

<h2 id="%E4%BA%8B%E5%89%8D%E6%BA%96%E5%82%99">事前準備</h2>

<p>とりあえず、ゲットしたい物や回りたいところを決めました。</p>

<p>とりあえず「技術書典」の<a href="https://techbookfest.org/#circle">サークルの紹介</a>を辿って目星をつけてみましたが、面白そうなところばっかりで絞るのが大変でした。</p>

<p><a href="https://twitter.com/IoriAYANE/status/746328930076889088">Qt本の既刊が少ないとの情報</a>を作者の<a href="https://twitter.com/IoriAYANE">理音伊織</a>さんが Twitter で、当日の配布物のお品書きとともに流していたので、無理を承知でお願いしたら、取り置きしておきますと嬉しい返事を貰えたので、これはすごく感謝です。
まあ、過去に勉強会などで顔を合わせてお話したことがあるので無理を聞いて貰えたんだと思います。</p>

<p>最終的には</p>

<table>
<thead>
<tr>
  <th>ブース</th>
  <th>サークル名</th>
  <th>ペンネーム</th>
  <th>備考</th>
</tr>
</thead>
<tbody>
<tr>
  <td>A-27</td>
  <td>理ろぐ</td>
  <td>理音伊織</td>
  <td>第一目標！</td>
</tr>
<tr>
  <td>A-05</td>
  <td>とのさまラボ×ロボットパートナー</td>
  <td>西田寛輔</td>
  <td>「ロボットのほん」</td>
</tr>
<tr>
  <td>A-04</td>
  <td>だめだめだん</td>
  <td>はどら</td>
  <td>ニキシー管時計の展示</td>
</tr>
<tr>
  <td>A-06</td>
  <td>こそこそ団</td>
  <td>のむむ</td>
  <td>「ROSではじめるホビーロボット」</td>
</tr>
<tr>
  <td>A-08</td>
  <td>日本Androidの会 金沢支部・VR部</td>
  <td>kinneko</td>
  <td>「バッキーボール組み立てキット」</td>
</tr>
<tr>
  <td>A-09</td>
  <td>日常ガジェット研究所</td>
  <td>delmont</td>
  <td>「蛍光表示管を使った時計の頒布(予定)」</td>
</tr>
<tr>
  <td>A-16</td>
  <td>にじけん</td>
  <td>出水洸太郎「ゲームの修羅場」</td>
  <td></td>
</tr>
<tr>
  <td>A-26</td>
  <td>G Storm</td>
  <td>kyo</td>
  <td>「OpenvSwitchの同人誌の改訂版」</td>
</tr>
<tr>
  <td>A-28</td>
  <td>めがねをかけるんだ</td>
  <td>Keiji ARIYAMA</td>
  <td>「TensorFlowはじめました CIFAR-10奮闘記」</td>
</tr>
<tr>
  <td>A-13</td>
  <td>O'Creilly</td>
  <td>@3846masa</td>
  <td>「お蔵入り」</td>
</tr>
</tbody>
</table>

<p>※敬称略</p>

<p>辺りに目星を付けました。</p>

<h2 id="%E5%85%A5%E5%A0%B4%E3%81%BE%E3%81%A7">入場まで</h2>

<p>ここで、ちょっと失敗しました。</p>

<p>そこそこ余裕を持って出て、ウロウロとした後に会場に着くと………　そこには長蛇の列と、無情な入場制限が待っていましたとさ。</p>

<p>とほほ。</p>

<p>一応は15分ほど前に着いたんですが、その時点で、すでに100名以上集まっていたようで、最後尾のカードを持ったスタッフさんが「11時に入場できるのはここまでです。この後は11時30分以降の入場となります」みたいなことを話してました。</p>

<p>一応スタッフさんは列に並ばないように言っていたので、11時入場にあぶれた人たちと同じように、並ばずに列の周辺をウロウロしていました。</p>

<p>しばらくしたら、流れで11時入場の最後尾の更に後ろに、11時30分入場予定の列が出来始めたので、まあ、慌てて並びましたとも。</p>

<p>結局のところ、運営側も、はじめてのイベントだったのでどのぐらいの人が集まるか予想が出来なかったので、ふんわりとした対応になったのかな、と。
まあそれでも入場整理券のロール（写真撮り忘れた）を用意していたようなので、むしろ最初からそれ使えばよかったのでは？　と思ったり思わなかったり、まあ、今更ですね。</p>

<p>とりあえず、一人目から100人目までは、11時の入場開始とともに順次、会場内というかビルに吸い込まれていきました。</p>

<p>次の101人目からは、しばらくは列にそのまま並んでいたけど、流石に列の長さが長いと思ったのか、入場整理券のロールをどこからか取り出して配り始めました。
まあ、「整理券を貰ったら解散してください」って言われて、整理券を渡されたは良いけど、どう扱うかのアナウンスがしばらくなかったので、なかなか列が解散しなかったです。</p>

<p>結局、101人目からは公式のツイッターアカウント <a href="https://twitter.com/TechBooster">@TechBooster</a> でのアナウンスで整理券番号の○○番までは○○に入場できます、みたいな感じ無事？に順番にビルの中へ吸い込まれるようになりましたとさ。</p>

<p>それでも、最初は該当範囲に整理券の番号が含まれている人が入場時間に近くになると集まってきて入口付近が団子になっていました。</p>

<p>帰り際には別の所に列ができていたので、もしかしたら団子にならないように列を作るようになっていたのかもしれませんが、確認していないのでわからないです。</p>

<h2 id="%E5%85%A5%E5%A0%B4%E5%BE%8C">入場後</h2>

<p>とりあえず、入場すると「技術書典」のログが印字された緑のエコバック、これは先着500人限定 <del>200人限定</del> (※万年筆が200人限定だったようです) の特典を貰いました。</p>

<p>そして、いの一番に、取り置きして貰ってるサークルの場所へ行って本を確保しました。
自分、確保してもらっているので大丈夫って他のサークル見るより、確保してもらっているなんて申し訳ない、と思う人なので。</p>

<p>まあ、それはともかく、会場へ入って抱いた印象は、ちょっと通り道が狭い、ということですね。
会場自体が狭いのはどうしようもないですが、通路が二人が通れるぐらいしかなかたので、サークルブース前で見本誌を手にとって立ち止まってしまうともう、通りにくいのなんの、まあ自分も立ち止まった人なので人のことは言えないですけど。</p>

<p>そんなこんなで、２階のブースを回ったり地下のブースを回ったり、で目標としていたものをゲットしたり、内容を見て諦めたりと、充実したイベントでした、ホクホク。</p>

<h2 id="%E4%BC%9A%E5%A0%B4%E3%82%92%E5%87%BA%E3%81%9F%E3%81%82%E3%81%A8%E3%81%A7">会場を出たあとで</h2>

<p>先着特典の万年筆をもらい忘れたのは痛恨でしたが、それに気がつくのはしばらく後だったので、ここでは関係ないことです。</p>

<p>戦利品を手で持ち帰るか発送するか、自分はヤマトで発送しました。</p>

<p>コンビニで発送すればいいじゃない、という話があって、イベント前にいろいろ調べたところ、そうだ営業所があるはずなのでそこから送れば良い！
と、調べたら土日休みが多いようで…　結局秋葉原駅側にちょうど<a href="http://www.e-map.ne.jp/p/yamato01/dtl/038842/?&amp;cond1=1&amp;cond21=1&amp;&amp;his=aw,nm">秋葉原駅前センター</a>があったのでそこで発送しました。</p>

<p>営業所だと箱とか袋とか、まあ当然の事ながら代金はかかりますが用意があるので今回のような不織布バックでも送ることができるので便利です。</p>

<p><img src="/images/2016_0625_yamato_package.jpg" alt="ヤマトの荷物" /></p>

<p>ともかく、こんな感じで発送しました（別のものも一緒に入れて発送したので多少はかさが増えています）。
この袋は20円ほどでした。</p>

<h2 id="%E7%B5%90%E6%9E%9C">結果</h2>

<p><img src="/images/2016_0625_trophybooty.jpg" alt="戦利品" /></p>

<p>戦利品のリスト</p>

<p><strong>※PDF</strong> = PDFダウンロード特典あり</p>

<table>
<thead>
<tr>
  <th>ブース</th>
  <th>サークル名</th>
  <th>備考</th>
</tr>
</thead>
<tbody>
<tr>
  <td>A-27</td>
  <td>理ろぐ</td>
  <td>・インストーラを作ろう！ <strong>※PDF</strong><br>・インストーラを作ろう！！<br>・Qt Quickを使いこなすクロスプラットフォームUIプログラミング  <strong>※PDF</strong><br>・qmake入門 <strong>※PDF</strong></td>
</tr>
<tr>
  <td>A-28</td>
  <td>めがねをかけるんだ</td>
  <td>・TensorFlowはじめました CIFAR-10奮闘記</td>
</tr>
<tr>
  <td>A-13</td>
  <td>O'Creilly</td>
  <td>・実践 お蔵入り <strong>※PDF</strong><br>・詳説 お蔵入り <strong>※PDF</strong></td>
</tr>
<tr>
  <td>B-10</td>
  <td>トゲトゲ団</td>
  <td>・ちょっとだけVulkan（電子書籍のみ） <strong>※PDF</strong></li></td>
</tr>
<tr>
  <td>キ-02</td>
  <td>シス管系女子</td>
  <td>・シス管系女子コピー本</td>
</tr>
</tbody>
</table>

<p>※敬称略</p>

<p>ホクホク</p>

<h2 id="%E3%81%8A%E3%81%BE%E3%81%91%E3%81%AE%E3%81%8A%E3%81%BE%E3%81%91">おまけのおまけ</h2>

<p>プロ生ちゃん（暮井慧）とコラボでコースターがもらえるという話だったので貰ってきました。</p>

<p><img src="/images/2016_0626_pronamachan_collaboration.jpg" alt="コラボコースター" /></p>

<p>こちらは、秋葉原にあるタコスの店「BLAISE」で貰いました。</p>

<p><img src="/images/2016_0625_pronamachan_brise_collaboration.jpg" alt="プロ生ちゃん（暮井慧）コースター１" /></p>

<p>こちらは、6月14日から在庫が無くなるまで配布<a href="https://twitter.com/BLAISE01600438/status/742548837869359114">※</a> のようです。</p>

<table>
<thead>
<tr>
  <th>項目</th>
  <th></th>
</tr>
</thead>
<tbody>
<tr>
  <td>住所</td>
  <td><a href="https://goo.gl/maps/EjYn9djxEt72">東京都千代田区外神田3-7-9</a></td>
</tr>
<tr>
  <td>営業</td>
  <td>11:00 ～ 20:30 不定休</td>
</tr>
<tr>
  <td>ウエブページ</td>
  <td><a href="http://tacos-akiba.com/">BLAISE　～ブレイズ～</a></td>
</tr>
<tr>
  <td>ツイッターアカウント</td>
  <td><a href="https://twitter.com/BLAISE01600438">@BLAISE01600438</a> ※@BLAISE は別の人へリンクするので注意！</td>
</tr>
</tbody>
</table>

<p>こちらは、西荻窪にあるパイナップルラーメンの店「パパパパパイン」で貰いました。</p>

<p><img src="/images/2016_0626_pronamachan_papapapapine_collaboration.jpg" alt="プロ生ちゃん（暮井慧）コースター２" /></p>

<p>こちらは6月26日から配布で、こちらも在庫限り<a href="https://twitter.com/paishio/status/746136049852678144">※</a> のようです。</p>

<table>
<thead>
<tr>
  <th>項目</th>
  <th></th>
</tr>
</thead>
<tbody>
<tr>
  <td>住所</td>
  <td><a href="https://goo.gl/maps/RgvYVqem2NS2">東京都杉並区西荻南３−１２−１ 日伸西荻プラザ 1F</a></td>
</tr>
<tr>
  <td>営業</td>
  <td>11:00 ～ 20:00 水曜定休</td>
</tr>
<tr>
  <td>ウエブページ</td>
  <td><a href="http://www.papapapapine.com/">パイナップルラーメン屋さん　パパパパパイン　ホームページ、通販（西荻窪）</a></td>
</tr>
<tr>
  <td>ツイッターアカウント</td>
  <td><a href="https://twitter.com/paishio">@paishio</a></td>
</tr>
</tbody>
</table>
]]></content>
        </entry>
    </feed>