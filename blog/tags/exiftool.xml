<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
    <title><![CDATA[さめたすたすのお家]]></title>
    <link href="https://www.sharkpp.net/blog/tags/exiftool.xml" rel="self"/>
    <link href="https://www.sharkpp.net/"/>
    <updated>2023-12-09T13:59:59+00:00</updated>
    <id>https://www.sharkpp.net/</id>
            <author>
            <name><![CDATA[sharkpp]]></name>                    </author>
        <generator uri="http://sculpin.io/">Sculpin</generator>
            <entry>
            <title type="html"><![CDATA[GoPro HERO 6 で撮影した結果 4GB で分割されてしまった映像を繋げ Full HD H264 へエンコードする方法]]></title>
            <link href="https://www.sharkpp.net/blog/2020/12/29/concat-gopro-4gb-files-and-encode.html"/>
            <updated>2020-12-29T17:12:00+00:00</updated>
            <id>https://www.sharkpp.net/blog/2020/12/29/concat-gopro-4gb-files-and-encode.html</id>
            <content type="html"><![CDATA[<p>さてさて、超お久しぶりにブログを書いている sharkpp です。</p>

<p>半年以上更新が止まってしまいましたが、ぼちぼちと再開をさせたいなと思ってる次第...</p>

<p>とりあえず、今回は GoPro HERO 6 で撮影した結果 4GB で分割されてしまった映像を繋げ Full HD H264 へエンコードする方法を忘れないように残しておきたいと思います。</p>

<h2 id="%E8%A6%81%E7%B4%84">要約</h2>

<p>分割された 4K 動画から、結合された Full HD 動画への変換（メタ情報を含む）は</p>

<ol>
<li><code>ls GX0[0-9]*.MP4 | while read L ; do echo file $L ; done &gt; list.txt</code></li>
<li><code>ffmpeg -y -f concat -i list.txt -bsf:v h264_mp4toannexb -vcodec libx264 -vf scale=1920:-1 -r 29.97 -map 0:v -map 0:a -map 0:d -copy_unknown GX0Y0000.MP4</code></li>
<li><code>exiftool -tagsfromfile $(cat list.txt | cut -d " " -f 2 | tail -n 1) "-gps*" -unsafe GX0Y0000.MP4</code></li>
</ol>

<p>このような感じでコマンドを打てば変換できそう。</p>

<h2 id="%E3%81%AF%E3%81%98%E3%82%81%E3%81%AB">はじめに</h2>

<p>久しぶりに GoPro HERO 6 を引っ張り出してきて、よーし張り切って 4K 60fps で撮影しちゃうぞ！みたいなことをしちゃったわけです。</p>

<p>で、結果として...</p>

<pre><code class="console">$ ls -lh
total 52606864
-rwxrwxrwx@ 1 user  staff   3.7G 12 13 12:17 GX012316.MP4
-rwxrwxrwx  1 user  staff   3.7G 12 13 12:24 GX022316.MP4
-rwxrwxrwx  1 user  staff   3.7G 12 13 12:31 GX032316.MP4
-rwxrwxrwx  1 user  staff   3.7G 12 13 12:38 GX042316.MP4
-rwxrwxrwx  1 user  staff   3.7G 12 13 12:45 GX052316.MP4
-rwxrwxrwx  1 user  staff   3.7G 12 13 12:52 GX062316.MP4
-rwxrwxrwx  1 user  staff   1.0G 12 13 12:54 GX072316.MP4
</code></pre>

<p>約 4GB に分割されたファイルができるわけです。</p>

<p>そして、手元には空き容量と性能が乏しいPCがあり、とてもそのまま再生できる感じではない、さてこれをどうやって素材として使おうか、と...</p>

<h2 id="%E7%9B%AE%E6%A8%99">目標</h2>

<p>目指すべき目標をまず設定します。</p>

<table>
<thead>
<tr>
  <th>項目</th>
  <th>元素材</th>
  <th>目標</th>
</tr>
</thead>
<tbody>
<tr>
  <td>ファイル</td>
  <td>最大約 4GB に分割された複数のファイル</td>
  <td>1 ファイル</td>
</tr>
<tr>
  <td>コンテナ</td>
  <td>MP4</td>
  <td>変更なし</td>
</tr>
<tr>
  <td>映像</td>
  <td>H265 3840 x 2160 59.94 fps</td>
  <td>H264 1920 x 1080 29.97 fps</td>
</tr>
<tr>
  <td>音声</td>
  <td>AAC (LC) 48000 Hz, stereo, 128 kb/s</td>
  <td>変更なし</td>
</tr>
</tbody>
</table>

<p>あとは、埋め込まれているメタ情報もなるべくそのままにしたい。</p>

<h2 id="%E3%82%84%E3%82%8A%E6%96%B9">やり方</h2>

<p>4 GB で分割されたファイルを単純に結合すると結合部分が無音になるという情報があったので色々試してみる。</p>

<p>とりあえず、空き容量も少ないので mp4box で２ファイルを結合してみる。</p>

<pre><code class="console">$ mp4box
-bash: mp4box: command not found
</code></pre>

<p>...の前に mp4box がないので Homebrew でインストール</p>

<pre><code class="console">$ brew install mp4box
</code></pre>

<p>で、改めて...</p>

<pre><code class="console">$ mp4box -add GX010000.MP4 -cat GX020000.MP4 -new GX0X0000.MP4
$ ffmpeg -y -i GX0X0000.MP4 -ab 192 GX0X0000.mp3
</code></pre>

<p>そして ffmpeg でも</p>

<pre><code class="console">$ echo file GX010000.MP4 &gt;list.txt
$ echo file GX020000.MP4 &gt;&gt;list.txt
$ ffmpeg -f concat -i list.txt -c copy GX0Y0000.MP4
$ ffmpeg -y -i GX0Y0000.MP4 -ab 192 GX0Y0000.mp3
</code></pre>

<p>それぞれ結合した映像の音声部分を mp3 形式で抜き出し Audacity で波形を確認結果...</p>

<p>mp4box を使わず ffmpeg 単体でもとくに音声の途切れもなさそう、ということがわかった。</p>

<p>なので、</p>

<pre><code class="console">$ ls GX0[0-9]*.MP4 | while read L ; do echo file $L ; done &gt; list.txt
$ ffmpeg -y -f concat -i list.txt -bsf:v h264_mp4toannexb -vcodec libx264 -vf scale=1920:-1 -r 29.97 \
         -map 0:v -map 0:a -map 0:d -copy_unknown GX0Y0000.MP4
</code></pre>

<p>||速度｜45分の動画のエンコード時間|
|60 fps|約 0.150 倍|約5時間|
|30 fps|約 0.165 倍|約4時間30分|</p>

<p>あと、どうしてもGPSの情報がコピーできなかったので exiftool でコピーする</p>

<pre><code class="console">$ exiftool -tagsfromfile $(cat list.txt | cut -d " " -f 2 | tail -n 1) "-gps*" -unsafe GX0Y0000.MP4
</code></pre>

<p>蛇足として <a href="https://code.g-nab.net/archives/73">GoPro HERO7 で撮影した動画からGPS情報をgpxファイルとして抜き出す方法 – Bang's Tmp returned</a> にて知りましたが、 <a href="https://github.com/juanmcasillas/gopro2gpx">GitHub - juanmcasillas/gopro2gpx: Parse the gpmd stream for GOPRO moov track (MP4) and extract the GPS info into a GPX (and kml) file.</a> なるツールで GoPro で撮影した動画からGPS情報を抜き出すことができるようですね。</p>

<h1 id="%E3%81%BE%E3%81%A8%E3%82%81">まとめ</h1>

<ol>
<li><code>ls GX0[0-9]*.MP4 | while read L ; do echo file $L ; done &gt; list.txt</code></li>
<li><code>ffmpeg -y -f concat -i list.txt -bsf:v h264_mp4toannexb -vcodec libx264 -vf scale=1920:-1 -r 29.97 -map 0:v -map 0:a -map 0:d -copy_unknown GX0Y0000.MP4</code></li>
<li><code>exiftool -tagsfromfile $(cat list.txt | cut -d " " -f 2 | tail -n 1) "-gps*" -unsafe GX0Y0000.MP4</code></li>
</ol>

<p>この手順で、 分割された 4K 動画から Full HD 動画へ含まれるメタ情報も含めいい感じにエンコードすることができました。</p>

<h2 id="%E5%8F%82%E8%80%83">参考</h2>

<ul>
<li><a href="https://exiftool.org/forum/index.php?topic=1424.msg15307#msg15307">Import and export of metadata</a></li>
<li><a href="https://superuser.com/questions/996223/using-ffmpeg-to-copy-metadata-from-one-file-to-another">Using ffmpeg to copy metadata from one file to another - Super User</a></li>
<li><a href="http://tech.ckme.co.jp/ffmpeg_frate.shtml">フレームレート及び画面サイズを指定する：tech.ckme.co.jp</a></li>
<li><a href="https://askubuntu.com/questions/707397/batch-convert-h-265-mkv-to-h-264-with-ffmpeg-to-make-files-compatible-for-re-enc">command line - Batch convert H.265 mkv to H.264 with ffmpeg to make files compatible for re-encoding - Ask Ubuntu</a></li>
<li><a href="https://qiita.com/riversun/items/d09d8e596a20ec1798f3">【ffmpeg】動画の解像度を指定してリサイズ、アスペクト比を維持したまま解像度を変更する、回転する - Qiita</a></li>
<li><a href="https://www.ffmpeg.org/ffmpeg-formats.html#Metadata-1">FFmpeg Formats Documentation</a></li>
<li><a href="https://qiita.com/tzhaya/items/6b423872d2ab9f31bf30">exiftoolを使って画像のIPTC情報をcsvでまとめて設定する - Qiita</a></li>
<li><a href="https://exiftool.org/faq.html">ExifTool FAQ</a></li>
</ul>
]]></content>
        </entry>
    </feed>