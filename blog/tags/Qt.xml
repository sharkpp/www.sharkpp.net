<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
    <title><![CDATA[さめたすたすのお家]]></title>
    <link href="http://www.sharkpp.net/blog/tags/Qt.xml" rel="self"/>
    <link href="http://www.sharkpp.net/"/>
    <updated>2019-01-19T08:48:11+00:00</updated>
    <id>http://www.sharkpp.net/</id>
            <author>
            <name><![CDATA[sharkpp]]></name>                    </author>
        <generator uri="http://sculpin.io/">Sculpin</generator>
            <entry>
            <title type="html"><![CDATA[名古屋Qt勉強会#24 に参加しました]]></title>
            <link href="http://www.sharkpp.net/blog/2019/01/20/qt-nagoya-24.html"/>
            <updated>2019-01-20T17:30:00+00:00</updated>
            <id>http://www.sharkpp.net/blog/2019/01/20/qt-nagoya-24.html</id>
            <content type="html"><![CDATA[<p>1月20日(土) に開催された <a href="https://qt-users.connpass.com/event/113801/">Qt 勉強会 @ Nagoya #24 - connpass</a> に久しぶりに参加しました。</p>

<p>そのまとめです。</p>

<p><img src="/images/20180825_qauthwith1.png" alt="成果" /></p>

<h2 id="%E6%9C%AC%E6%97%A5%E3%81%AE%E7%9F%A5%E8%A6%8B">本日の知見</h2>

<h3 id="listview-%E3%81%AE%E8%83%8C%E6%99%AF%E3%81%AE%E3%83%9E%E3%82%A6%E3%82%B9%E3%82%A4%E3%83%99%E3%83%B3%E3%83%88%E3%82%92%E9%80%8F%E9%81%8E">ListView の背景のマウスイベントを透過</h3>

<p>ListView の背景のマウスイベントを透過する方法。
結構、実現するのに時間がかかったけど、結局はプロパティを一つ変えるだけだった。</p>

<p>まず Qt Quick の <a href="http://doc.qt.io/qt-5/qml-qtquick-listview.html">ListView</a> は次のような派生で実装されています。</p>

<pre><code>QtObject
  +- Item
       +- Flickable
            +- ListView
</code></pre>

<p>それでもって ListView の背景を透明にしても、その下にあるコンポーネントに対しては、マウスのホバー以外のクリックやホイール操作は渡されない。</p>

<p>結局のところ色々調べたところ、 <a href="http://doc.qt.io/qt-5/qml-qtquick-flickable.html">Flickable</a> がフリック操作を検知するためにマウスのイベントを処理している様子。</p>

<p>なので、答えは</p>

<pre><code>    ListView {
        interactive: false
    }
</code></pre>

<p>と、 <code>interactive</code> プロパティを <code>false</code> にすれば良いようです。</p>

<p>ちなみに、この設定を変更すると当然のことながらフリック動作が聞かなくなります。</p>

<h2 id="%E3%83%A9%E3%83%A0%E3%83%80%E5%BC%8F">ラムダ式</h2>

<p>スコープに注意！</p>

<p>コンストラクタでラムダ式を引数に渡してメソッドを呼び出したら（実際の実行は遅延される）スコープ抜けた途端に破棄されていた。</p>

<p>メンバ変数に代入して生存の時間を伸ばして解決。</p>

<h2 id="%E6%87%87%E8%A6%AA%E4%BC%9A">懇親会</h2>

<h2 id="%E5%8F%82%E8%80%83">参考</h2>

<ul>
<li><a href="http://doc.qt.io/qt-5/qml-qtquick-flickable.html#interactive-prop">Flickable QML Type | Qt Quick 5.12</a></li>
</ul>
]]></content>
        </entry>
            <entry>
            <title type="html"><![CDATA[技術書典5に行ってきた]]></title>
            <link href="http://www.sharkpp.net/blog/2018/10/14/techbookfest5.html"/>
            <updated>2018-10-14T12:50:00+00:00</updated>
            <id>http://www.sharkpp.net/blog/2018/10/14/techbookfest5.html</id>
            <content type="html"><![CDATA[<p>2016年から始まった技術書オンリーな同人イベント「<a href="https://techbookfest.org/">技術書典</a>」も数えて５回目のになります。
その「<a href="https://techbookfest.org/event/tbf05">技術書典５</a>」が、10月08日の体育の日に開催されたので参加して来ました。
今回は、場所を秋葉原のUDXから池袋のサンシャインシティへと移し、床面積は約３倍以上<sup><a href="#note1">*1</a></sup>、サークル数も２倍近くに規模が大きくなりつつの開催でした。
また、NHKも取材に来ていたようで<a href="https://twitter.com/nhk_news/status/1050252562748899328">ニュース</a>になっていました。</p>

<p><small id="note1">*1 
<a href="http://udx-akibasquare.jp/index.php?pg=facilities">秋葉原UDX AKIBA_SQUARE</a> は 1,010m<sup>2</sup>、<a href="http://co.sunshinecity.co.jp/exhibition/hall_spec.html#04">サンシャインシティ 展示ホールD</a> は 3,341m<sup>2</sup>
</small></p>

<p><a href="/images/20181008_tf5.jpg"><img src="/thumbs/f5a6f1de07bdb58eb4f438b24ac46887-640x640.jpg" alt="技術書典5"></a></p>

<h2 id="%E5%A7%8B%E3%82%81%E3%81%AB">始めに</h2>

<p>前回のレポートは「<a href="/blog/2018/05/18/techbookfest4.html">技術書典4に行ってきた</a>」となります。</p>

<p>今回は、サークル数 約470 、入場者数 10341 人だったようです。サークル関係者なども含んでいるようですが、ついに１万人の大台に乗ってしまったようですね。
会場が広がったにもかかわらず、人口密度が”今回も”大変なことになっていました。
帰りがてら12:30頃に確認したところ、端から端まで脇目も振らず移動するのにも１０分ぐらい掛かりました。</p>

<p><a href="https://docs.google.com/spreadsheets/d/1gNVy9ukLn3kYzOC0nyOpysD-Xl3fIzHl26WSSLHC-HY/edit?usp=sharing"><img src="/images/20181008_tf1_tf5_graph.png" alt="参加人数" /></a></p>

<h2 id="%E5%BD%93%E6%97%A5">当日</h2>

<p><a href="/images/20181008_tf5_circle_enter.jpg"><img src="/thumbs/bfa0d63b9c83f33914e16f985548b80f-640x640.jpg" alt="サークル入場の様子"></a></p>

<p>当日は、前回よりも少しだけ早く09:35頃に会場に到着、がすでに目測で150人程度は並んでいました。
どうやら、最初の人は 09:15頃から並んでいた様子。
前回と違い、早い段階から列の形成が始まっていました。</p>

<p><a href="/images/20181008_tf5_wait_list_moving.jpg"><img src="/thumbs/ec2aa6d8db10d67e51340f242c653224-640x640.jpg" alt="待機列屋内移動時"></a></p>

<p>今回は整理券配布はなく、代わりに再入場券として配っていました。
前回と同じような形＆番号も刻印されていたので急遽方針が変わったのかもしれません。
また、待機中の公式カタログ販売もありませんでした。</p>

<p>10:00頃、待機列が動き、先頭が入り口付近まで移動。後ろも順に移動。</p>

<p><a href="/images/20181008_tf5_opening.jpg"><img src="/thumbs/bb86b090f7401fb487a1a7c939dcdb49-640x640.jpg" alt="開場"></a></p>

<p>11:00を過ぎたところで会場内から拍手があり、遅れて待機列からも拍手が上がり、開場しました。
今回も待たされる事なく第一陣として入場できました。</p>

<p>ここで、お目当の所をささっと回ってから順に回ればよかったのに順に回ってしまったので何点か購入できなかったものがありました。残念。</p>

<p><a href="/images/20181008_tf5_crowd.jpg"><img src="/thumbs/8951105e1bba65c5b1b7ca79b6d03f9c-640x640.jpg" alt="ひとひとひと"></a></p>

<p>ちょっと最初に手間取ったこともあり、かんたん後払い決済と現金とは、今回半々ぐらいの割合で利用しました。</p>

<p>戦利品はまた後ほどです。</p>

<p><a href="/images/20181008_tf5_pe_of_tf_illust.jpg"><img src="/thumbs/59bbceb59d9838534234a4b07ea37999-640x640.jpg" alt="技術書典イラスト個展"></a></p>

<p>会場出口直前には前回なかった見本誌の立ち見スペースがありましたが、それはもう人が多くてのぞいてくのを諦めました。
あとは、企画展示の「技術書典イラスト個展」なるものが開かれていて、油絵のキャンパスに印刷？されたデジタル油絵の展示（サークル数が前回の数だったのでイラスト自体は前回作られたものだと思います）やそれらのストカードの販売をしてました。</p>

<p>結局、ぐるっと回って、最後に前回までの公式絵などのイラストが書かれたポストカードを何枚か購入し、会場を脱出しました。</p>

<h2 id="%E6%88%A6%E5%88%A9%E5%93%81">戦利品</h2>

<p>今回の戦利品</p>

<p><a href="/images/20181009_tf5_booty.jpg"><img src="/thumbs/4bfbe88365f9b8a0800a39385e30b5e3-640x640.jpg" alt="戦利品"></a></p>

<table>
<thead>
<tr>
  <th>配置</th>
  <th>サークル名/ペンネーム</th>
  <th>頒布物</th>
</tr>
</thead>
<tbody>
<tr>
  <td><a href="https://techbookfest.org/event/tbf05/circle/69020002">運01</a></td>
  <td><a href="https://techbookfest.org/">技術書典運営事務局</a>/<a href="https://twitter.com/techbookfest">技術書典運営事務局</a></td>
  <td>「技術季報 vol.4」</td>
</tr>
<tr>
  <td><a href="https://techbookfest.org/event/tbf05/circle/69020002">運01</a></td>
  <td><a href="https://techbookfest.org/">技術書典運営事務局</a>/<a href="https://twitter.com/techbookfest">技術書典運営事務局</a></td>
  <td>「ポストカード×6」</td>
</tr>
<tr>
  <td><a href="https://techbookfest.org/event/tbf05/circle/33160002">ス05</a></td>
  <td>リクルートライフスタイル/リクルートライフスタイル</td>
  <td>「ＨＯＴ ＥＮＧＩＮＥＥＲ」</td>
</tr>
<tr>
  <td><a href="https://techbookfest.org/event/tbf05/circle/30200001">あ13</a></td>
  <td><a href="http://mochikoastech.hatenablog.com/">mochikoAsTech</a>/<a href="https://twitter.com/mochikoAsTech">mochikoAsTech</a></td>
  <td>「【技術書典限定】DNS&amp;AWS 2冊セット」</td>
</tr>
<tr>
  <td><a href="https://techbookfest.org/event/tbf05/circle/47000003">あ20</a></td>
  <td><a href="http://webdesign-manga.com/">湊川あいの、わかば家。</a>/<a href="https://twitter.com/webdesignManga">湊川あい</a></td>
  <td>「マンガでわかるDocker② 〜開発環境を作ろう編〜」</td>
</tr>
<tr>
  <td><a href="https://techbookfest.org/event/tbf05/circle/29530001">い17</a></td>
  <td><a href="http://udk.blog91.fc2.com/">コンテンツマーケティング協会</a>/<a href="https://twitter.com/udk91">雨月</a></td>
  <td>「VR／ARは美少女AIとともに。」</td>
</tr>
<tr>
  <td><a href="https://techbookfest.org/event/tbf05/circle/28720006">い25</a></td>
  <td><a href="http://sanya.sweetduet.info/monatxscript/">superflip</a>/<a href="https://twitter.com/sprflp">kusano_k</a></td>
  <td>「ZIP、完全に理解した」</td>
</tr>
<tr>
  <td><a href="https://techbookfest.org/event/tbf05/circle/26850009">い30</a></td>
  <td><a href="http://d.hatena.ne.jp/izmktr/">GarbageCollection</a>/<a href="https://twitter.com/izmktr">出水洸太郎</a></td>
  <td>「仮面ライダービルドの数式が分かる本」</td>
</tr>
<tr>
  <td><a href="https://techbookfest.org/event/tbf05/circle/27470004">う21</a></td>
  <td><a href="https://twitter.com/daphnia_class/status/914009676500447232">みじんこ組</a>/<a href="https://twitter.com/daphnia_class">みじんこ組</a></td>
  <td>「試験に出ないSE用語 (第3版)」</td>
</tr>
<tr>
  <td><a href="https://techbookfest.org/event/tbf05/circle/43160001">う24</a></td>
  <td><a href="https://blog.mtb-production.info/">mtbプロジェクト</a>/<a href="https://twitter.com/mtb_beta">mtb_beta</a></td>
  <td>「IT実務のアンチパターン プロジェクト計画編」</td>
</tr>
<tr>
  <td><a href="https://techbookfest.org/event/tbf05/circle/41000002">う28</a></td>
  <td>ひろ亭/<a href="https://twitter.com/hirosys_">長村ひろ</a></td>
  <td>「むつきくんと学ぶ AWS CLI」</td>
</tr>
<tr>
  <td><a href="https://techbookfest.org/event/tbf05/circle/39040001">う74</a></td>
  <td><a href="https://www.konosumi.net/">このすみ堂</a>/<a href="https://twitter.com/konosumi">このすみ</a></td>
  <td>「エンジニアアンチパターン 〜失敗に学ぶエンジニアリング〜」</td>
</tr>
<tr>
  <td><a href="https://techbookfest.org/event/tbf05/circle/49040001">お08</a></td>
  <td><a href="https://www.facebook.com/windholep/">windhole</a>/<a href="https://twitter.com/windhole">風穴 江</a></td>
  <td>「Ryzen SEGV Battle」</td>
</tr>
<tr>
  <td><a href="https://techbookfest.org/event/tbf05/circle/28500001">お24</a></td>
  <td><a href="https://devrel.tokyo">DevRel Meetup</a>/<a href="https://twitter.com/goofmint">goofmint</a></td>
  <td>「開発者コミュニティの光と闇のセット」</td>
</tr>
<tr>
  <td><a href="https://techbookfest.org/event/tbf05/circle/53000003">か16</a></td>
  <td>調布技研/<a href="https://twitter.com/nasa9084">nasa9084</a></td>
  <td>「Kubernetesを色んなところで動かす本」</td>
</tr>
<tr>
  <td><a href="https://techbookfest.org/event/tbf05/circle/24990003">か22</a></td>
  <td><a href="http://nikuyoshi.hatenablog.com/">にくよし文庫</a>/<a href="https://twitter.com/nikuyoshi">nikuyoshi</a></td>
  <td>「Ansible Roleをつくってみよう」</td>
</tr>
<tr>
  <td><a href="https://techbookfest.org/event/tbf05/circle/35050001">か23</a></td>
  <td><a href="https://note.mu/niwaken">技術コミュニケーション研究所</a>/<a href="https://twitter.com/niwaken">にわけん</a></td>
  <td>「SESサバイバルガイド」</td>
</tr>
<tr>
  <td><a href="https://techbookfest.org/event/tbf05/circle/31390001">か26</a></td>
  <td><a href="https://nanaumi.info/">SIGNIA</a>/<a href="https://twitter.com/nana_u_mi">ななうみ</a></td>
  <td>「機能するUIを作れるようになる本-基本のキ編-」</td>
</tr>
<tr>
  <td><a href="https://techbookfest.org/event/tbf05/circle/41000007">き05</a></td>
  <td><a href="http://relog.xii.jp/">理ろぐ</a>/<a href="https://twitter.com/IoriAYANE">理音伊織</a></td>
  <td>「Qt Quickアプリの設計事情」</td>
</tr>
<tr>
  <td><a href="https://techbookfest.org/event/tbf05/circle/41170003">き06</a></td>
  <td><a href="https://qiita.com/argama147">エゥーゴ</a>/<a href="https://twitter.com/argama147">argama147</a></td>
  <td>「Qt5/C++入門 マルチプラットフォーム開発を始めよう」</td>
</tr>
<tr>
  <td><a href="https://techbookfest.org/event/tbf05/circle/28640001">き07</a></td>
  <td><a href="http://emblog.hatenablog.jp/">eMbLog</a>/<a href="https://twitter.com/sazus">sazus</a></td>
  <td>「PythonでGUIをつくろう〜はじめてのQt for Python〜」</td>
</tr>
<tr>
  <td><a href="https://techbookfest.org/event/tbf05/circle/29300002">き08</a></td>
  <td><a href="http://blog.michinari-nukazawa.com/">daisy bell</a>/<a href="https://twitter.com/MNukazawa">MNukazawa</a></td>
  <td>「GTK Qt Electron」</td>
</tr>
<tr>
  <td><a href="https://techbookfest.org/event/tbf05/circle/28510001">き21</a></td>
  <td><a href="https://j74th.com/">74th</a>/<a href="https://twitter.com/74th">74th</a></td>
  <td>「Fabric &amp; Invoke Quick Guide」</td>
</tr>
<tr>
  <td><a href="https://techbookfest.org/event/tbf05/circle/29520011">く14</a></td>
  <td><a href="https://twilog.org/gunjigakusyusha">軍事学習社＆帝国音楽堂</a>/<a href="https://twitter.com/gunjigakusyusha">バーバラ・アスカ</a></td>
  <td>「土佐正道『缶ピアノの作りかた』」</td>
</tr>
<tr>
  <td><a href="https://techbookfest.org/event/tbf05/circle/29520011">く14</a></td>
  <td><a href="https://twilog.org/gunjigakusyusha">軍事学習社＆帝国音楽堂</a>/<a href="https://twitter.com/gunjigakusyusha">バーバラ・アスカ</a></td>
  <td>「土佐正道『おカリーなの作りかた』」</td>
</tr>
<tr>
  <td><a href="https://techbookfest.org/event/tbf05/circle/35170002">け48</a></td>
  <td>四六時ハック/<a href="https://twitter.com/mqtsuo02">まつおちゃん</a></td>
  <td>「もってけ！PWA」</td>
</tr>
<tr>
  <td><a href="https://techbookfest.org/event/tbf05/circle/29530004">け63</a></td>
  <td><a href="http://romly.com">romly.com</a>/<a href="https://twitter.com/Romly">Romly</a></td>
  <td>「軸の本 Mechanical Switch Data Book EARLY ACCESS」</td>
</tr>
<tr>
  <td><a href="https://techbookfest.org/event/tbf05/circle/43110001">こ32</a></td>
  <td><a href="https://github.com/nakajmg/">Pony Head</a>/<a href="https://twitter.com/nakajmg">nakajmg</a></td>
  <td>「後悔しないためのVueコンポーネント設計」</td>
</tr>
<tr>
  <td><a href="https://techbookfest.org/event/tbf05/circle/24720002">こ36</a></td>
  <td><a href="http://mymarkdown.firebaseapp.com/">ザ・シメサバズ</a>/<a href="https://twitter.com/nabettu">渡邊達明</a></td>
  <td>「ゼロから始めるNetlify」</td>
</tr>
</tbody>
</table>

<p>※敬称略、配置順</p>

<h2 id="%E3%81%BE%E3%81%A8%E3%82%81">まとめ</h2>

<p>反省点</p>

<ul>
<li>そろそろ規制が入りそうだけど、もう少しだけ早く来て列に並べばよかったかも</li>
<li>お目当のサークルを先に回るべきだった</li>
</ul>

<p>会場が大きく、しかし入場者も多かった今回、色々と反省点はありましたが、いろんな本に出会えて楽しいイベントでした。</p>

<h2 id="%E5%8F%82%E8%80%83">参考</h2>

<ul>
<li><a href="https://twitter.com/techbookfest/status/1049208448372465664">技術書典公式アカウントさんのツイート: "これにて #技術書典 閉会します。ご来場、誠にありがとうございました。総来場者数は のべ10341人、うちサークル・スタッフ等関係者は889人でした。"</a></li>
<li><a href="https://haskell.jp/blog/posts/2018/tech-book-fest-5.html">技術書典 5 での Haskell 関連サークルのまとめ - Haskell-jp</a></li>
</ul>
]]></content>
        </entry>
            <entry>
            <title type="html"><![CDATA[名古屋Qt勉強会#19 に参加しました]]></title>
            <link href="http://www.sharkpp.net/blog/2018/08/26/qt-nagoya-19.html"/>
            <updated>2018-08-26T09:57:00+00:00</updated>
            <id>http://www.sharkpp.net/blog/2018/08/26/qt-nagoya-19.html</id>
            <content type="html"><![CDATA[<p>8月25日(土) に開催された <a href="https://qt-users.connpass.com/event/98190/">Qt 勉強会 @ Nagoya #19 - connpass</a> に参加しました。</p>

<p>そのまとめなどです。</p>

<p><img src="/images/20180825_qauthwith1.png" alt="成果" /></p>

<h2 id="%E5%8B%95%E7%9A%84%E3%81%AB%E8%BF%BD%E5%8A%A0%E3%81%97%E3%81%9F%E3%82%B3%E3%83%B3%E3%83%9D%E3%83%BC%E3%83%8D%E3%83%B3%E3%83%88%E3%81%ABc%2B%2B%E5%81%B4%E3%81%8B%E3%82%89%E5%80%A4%E3%82%92%E8%A8%AD%E5%AE%9A%E3%81%99%E3%82%8B">動的に追加したコンポーネントにC++側から値を設定する</h2>

<p>たぶんこのままではちゃんと動かないけど、雰囲気それらしいメモ。</p>

<pre><code class="javascript">// .qml
    Component {
        id: hogeHoge
        Label {
            property variant hoge: null
            anchors.right: parent.right
            anchors.left: parent.left
            text: ""
            Component.onCompleted: {
                hoge.bind(this);
            }
        }
    }
            :
    hogeHoge.createObject(container, {
        hoge: hoge
    })

</code></pre>

<pre><code class="cpp">// .h
class Hoge : public QObject {
                  :
    Q_INVOKABLE void bind(QObject* object);
                  :
}
</code></pre>

<pre><code class="cpp">// .cpp
               :
    QQmlApplicationEngine engine;
    Hoge hoge;
    engine.rootContext()-&gt;setContextProperty("hoge", &amp;hoge);
               :
void Hoge::bind(QObject* object)
{
    qDebug() &lt;&lt; object; // QQuickLabel_QML_99(0xffffffffff00)

    // read from
    qDebug()  &lt;&lt; "Property value:" &lt;&lt; object-&gt;property("text").toString();
//or qDebug() &lt;&lt; "Property value:" &lt;&lt; QQmlProperty::read(object, "text").toString();

    // write to
    object-&gt;setProperty("text", "aaaa");
//or QQmlProperty::write(object, "text", aaaa);
}
</code></pre>

<h2 id="%08qt-documentation-%E3%81%AB%E4%B8%80%E7%9E%AC%E8%A1%A8%E7%A4%BA%E3%81%95%E3%82%8C%E3%82%8B%E3%82%A2%E3%82%A4%E3%82%B3%E3%83%B3%E3%81%A8%E3%83%A1%E3%83%83%E3%82%BB%E3%83%BC%E3%82%B8">Qt Documentation に一瞬表示されるアイコンとメッセージ</h2>

<p>Qt の公式ドキュメントを表示すると上部に一瞬だけ表示されるやつ。</p>

<blockquote>
  <p>We bake cookies in your browser for a better experience.  Using this site means that you consent.
  訳：より良いエクスペリエンスのために、ブラウザでクッキーを焼きます。 このサイトを使用することはそれに同意することを意味します。</p>
</blockquote>

<p><img src="/images/20180825_qtdocwebsite.png" alt="クッキーマン？" /></p>

<p>のメッセージとともに <a href="https://www.qt.io/company/?hsLang=en">The Qt Company</a> へのリンクがあるみたい。</p>

<h2 id="%E9%80%B2%E6%8D%97">進捗</h2>

<p>今回は愚直に実装を進めた関係で新たな知見は少ない感じ。</p>

<ul>
<li>signal用のヘルプ表示関連の実装

<ul>
<li>表示用の専用QMLを実装</li>
<li>QMLの切り替え用のコードを実装</li>
<li>C++側にも実装を追加</li>
</ul></li>
<li>signal受信時にどのように通知するか？

<ul>
<li><del>パターン１：スクロール＆フラッシュ</del>

<ol>
<li><del>該当signalにスクロール</del></li>
<li><del>該当signalがフラッシング</del></li>
</ol></li>
<li>パターン２：通知＆クリックでスクロール <strong>採用！</strong>

<ol>
<li>ウインドウ内に通知</li>
<li>通知をクリックすると該当のsignalにスクロール</li>
</ol></li>
</ul></li>
</ul>

<p><img src="/images/20180825_qauthwith2.png" alt="成果" /></p>

<h2 id="%E6%87%87%E8%A6%AA%E4%BC%9A">懇親会</h2>

<p>タコさんウインナーとか、もぐもぐ♪</p>

<p><img src="/images/20180825_mogmog.jpg" alt="もぐもぐ" /></p>

<h2 id="%E5%8F%82%E8%80%83">参考</h2>

<ul>
<li><a href="http://doc.qt.io/qt-5/qtqml-cppintegration-interactqmlfromcpp.html">Interacting with QML Objects from C++ | Qt QML 5.11</a></li>
<li><a href="http://doc.qt.io/qt-5/qtqml-cppintegration-overview.html#choosing-the-correct-integration-method-between-c-and-qml">Overview - QML and C++ Integration | Qt QML 5.11</a></li>
<li><a href="https://gist.github.com/alex-spataru/cba4936a1d555372e898">Notification badge in QML</a></li>
<li><a href="https://doc.qt.io/QtApplicationManager/qml-qtapplicationmanager-notificationmanager.html">NotificationManager QML Type | Qt Application Manager 5.11</a></li>
<li><a href="http://doc.qt.io/qt-5/qml-qtqml-timer.html">Timer QML Type | Qt QML 5.11</a></li>
<li><a href="http://doc.qt.io/qt-5/qml-qtquick-listview.html">ListView QML Type | Qt Quick 5.11</a></li>
</ul>
]]></content>
        </entry>
            <entry>
            <title type="html"><![CDATA[Qt Quick メモ]]></title>
            <link href="http://www.sharkpp.net/blog/2018/08/22/qt-quick-memo.html"/>
            <updated>2018-08-22T00:40:00+00:00</updated>
            <id>http://www.sharkpp.net/blog/2018/08/22/qt-quick-memo.html</id>
            <content type="html"><![CDATA[<p><a href="https://github.com/sharkpp/qtauthwith">sharkpp/qtauthwith</a> を実装中に調べメモした、 Qt Quick 関連の事をとりあえず記事にしました。</p>

<h2 id="listview-%E3%82%BF%E3%82%A4%E3%83%97%E3%81%AE%E7%89%B9%E5%AE%9A%E9%A0%85%E7%9B%AE%E3%81%B8%E3%82%B9%E3%82%AF%E3%83%AD%E3%83%BC%E3%83%AB%E3%81%99%E3%82%8B">ListView タイプの特定項目へスクロールする</h2>

<pre><code class="javascript">    listView.currentIndex = index
</code></pre>

<p>のような感じでインデックスを代入すればスクロールする</p>

<h2 id="gridlayout-%E3%81%A8-grid">GridLayout と Grid</h2>

<p><code>GridLayout</code> は <code>Layout.row</code> と <code>Layout.column</code> が効く。</p>

<p><code>Grid</code> は <code>Layout.row</code> と <code>Layout.column</code> が効かない。</p>

<h2 id="%E3%83%A2%E3%83%87%E3%83%AB%E3%82%92%E3%83%86%E3%83%BC%E3%83%96%E3%83%AB%E4%B8%8A%E3%81%AB%E4%B8%A6%E3%81%B9%E3%82%8B">モデルをテーブル上に並べる</h2>

<pre><code class="javascript">[
    { foo: XXX1, bar: YYY1 },
    { foo: XXX2, bar: YYY2 }
]
</code></pre>

<p>を返すモデルが例。</p>

<pre><code class="javascript">import QtQuick.Layouts 1.11
         :
    GridLayout {
        id: grid
        anchors.fill: parent
        columns: 2
        rowSpacing: 5
        columnSpacing: 5
        anchors.margins: 5

        Repeater {
            model: hoge // [ { foo: XXX1, bar: YYY1 }, { foo: XXX2, bar: YYY2 } ]
            Label {
                Layout.row: index
                Layout.column: 0
                text: modelData.foo
            }
        }

        Repeater {
            model: hoge
            TextArea {
                Layout.row: index
                Layout.column: 1
                text: modelData.bar
            }
        }
    }
</code></pre>

<h2 id="qml%E3%81%A7%E5%AE%9A%E6%95%B0%E3%82%92%E5%88%A9%E7%94%A8%E3%81%99%E3%82%8B">QMLで定数を利用する</h2>

<p>定数が大量にある場合は</p>

<pre><code class="javascript">// hoge.js
var xxx = "aa";
var yyy = "bb";
</code></pre>

<p>と登録したソースを import して</p>

<pre><code class="javascript">// fuga.qml
import "hoge.js" as Hoge
          :
        Label {
            text: Hoge.xxx
        }
        Label {
            text: Hoge.yyy
        }
          :
</code></pre>

<p>のような感じで利用すると管理が楽そう。
他の QML で使い回すならなおさら。</p>

<h2 id="qml%E5%81%B4%E3%81%8B%E3%82%89%E5%91%BC%E3%81%B3%E5%87%BA%E3%81%99%E9%96%A2%E6%95%B0%E3%81%AE%E5%BC%95%E6%95%B0%E3%81%AB%E3%82%AA%E3%83%96%E3%82%B8%E3%82%A7%E3%82%AF%E3%83%88%E3%82%92%E6%B8%A1%E3%81%97%E3%81%9F%E5%A0%B4%E5%90%88%E3%81%AE%E5%8B%95%E3%81%8D">qml側から呼び出す関数の引数にオブジェクトを渡した場合の動き</h2>

<pre><code class="javascript">// xxx.qml
   var xxx = { aa: 10, bb: "bb" };
   hoge(xxx);
</code></pre>

<p>と QML 側で C++ で定義した関数を呼び出す場合は</p>

<pre><code class="cpp">#include &lt;QJSValue&gt;
            :
   Q_INVOKABLE void hoge(const QJSValue&amp; abc);
</code></pre>

<p>という関数定義にする必要がある。</p>

<h2 id="qml-%E3%81%A7%E7%A9%BA%E3%81%A3%E3%81%BD%E3%81%AE%E3%82%AA%E3%83%96%E3%82%B8%E3%82%A7%E3%82%AF%E3%83%88%E3%82%92%E5%AE%9A%E7%BE%A9%E3%81%99%E3%82%8B">qml で空っぽのオブジェクトを定義する</h2>

<pre><code class="javascript">Item {
    property var badSyntax:   {}   // ng, empty block statement
    property var emptyObject: ({}) // ok
}
</code></pre>

<p>その他の JavaScript 標準な型のプロパティを定義</p>

<pre><code class="javascript">Item {
    property var aNumber: 100
    property var aBool: false
    property var aString: "Hello world!"
    property var anotherString: String("#FF008800")
    property var aColor: Qt.rgba(0.2, 0.3, 0.4, 0.5)
    property var aRect: Qt.rect(10, 10, 10, 10)
    property var aPoint: Qt.point(10, 10)
    property var aSize: Qt.size(10, 10)
    property var aVector3d: Qt.vector3d(100, 100, 100)
    property var anArray: [1, 2, 3, "four", "five", (function() { return "six"; })]
    property var anObject: { "foo": 10, "bar": 20 }
    property var aFunction: (function() { return "one"; })
}
</code></pre>

<h2 id="%E5%8F%82%E8%80%83">参考</h2>

<ul>
<li><a href="https://stackoverflow.com/questions/32969414/populate-gridlayout-with-repeater">qt - Populate GridLayout with Repeater - Stack Overflow</a></li>
<li><a href="http://relog.xii.jp/mt5r/2011/10/qmlqt-9.html">QML(Qt)アプリ全体で使いたいグローバルな設定値の扱い方 - 理ろぐ</a></li>
<li><a href="http://doc.qt.io/qt-5/qml-var.html#property-value-initialization-semantics">var QML Basic Type | Qt QML 5.11</a></li>
</ul>
]]></content>
        </entry>
            <entry>
            <title type="html"><![CDATA[名古屋Qt勉強会#18 に参加しました]]></title>
            <link href="http://www.sharkpp.net/blog/2018/07/21/qt-nagoya-18.html"/>
            <updated>2018-07-21T17:35:00+00:00</updated>
            <id>http://www.sharkpp.net/blog/2018/07/21/qt-nagoya-18.html</id>
            <content type="html"><![CDATA[<p>7月21日(土) に開催された <a href="https://qt-users.connpass.com/event/94197/">Qt 勉強会 @ Nagoya #18 - connpass</a> に参加しました。</p>

<p>そのまとめなどです。</p>

<p><img src="/images/20180721_qauthwith1.png" alt="成果" /></p>

<h2 id="qt-quick-%E3%81%A7%E3%81%AE%E6%96%87%E5%AD%97%E5%88%97%E3%81%AE%E5%A4%9A%E8%A8%80%E8%AA%9E%E5%AF%BE%E5%BF%9C">Qt Quick での文字列の多言語対応</h2>

<p><code>qsTr()</code> で囲う。</p>

<h2 id="toolbutton">ToolButton</h2>

<p>ToolButton タイプで利用できる各種プロパティが QtQuick.Controls 1.x と QtQuick.Controls 2.x とで全然違うのでメモ</p>

<table>
<thead>
<tr>
  <th>version</th>
  <th>QtQuick.Controls 1.x</th>
  <th>QtQuick.Controls 2.x</th>
</tr>
</thead>
<tbody>
<tr>
  <td>派生</td>
  <td><a href="http://doc.qt.io/qt-5/qml-qtquick-controls-button.html">Button</a></td>
  <td><a href="http://doc.qt.io/qt-5/qml-qtquick-controls2-abstractbutton.html">AbstractButton</a></td>
</tr>
<tr>
  <td>アイコン</td>
  <td><code>iconName</code> プロパティ</td>
  <td><code>icon.name</code> プロパティ</td>
</tr>
<tr>
  <td>ツールチップ</td>
  <td><code>tooltip</code> プロパティ</td>
  <td><a href="https://doc.qt.io/Qt-5/qml-qtquick-controls2-tooltip.html#attached-tool-tips">ToolTip QML Type</a></td>
</tr>
<tr>
  <td>&nbsp;&nbsp;要素押下時に表示</td>
  <td>不明</td>
  <td><code>ToolTip.visible: down</code></td>
</tr>
<tr>
  <td>&nbsp;&nbsp;要素クリック時に表示</td>
  <td>不明</td>
  <td><code>ToolTip.visible: pressed</code></td>
</tr>
<tr>
  <td>&nbsp;&nbsp;要素ホバー時に表示</td>
  <td>不明</td>
  <td><code>ToolTip.visible: hovered</code></td>
</tr>
</tbody>
</table>

<h2 id="qml-%E3%81%A7%E5%8F%82%E7%85%A7%E3%81%AE%E3%81%BF%E5%8F%AF%E8%83%BD%E3%81%AA%E3%83%97%E3%83%AD%E3%83%91%E3%83%86%E3%82%A3%E3%82%92%E3%81%A7%E3%81%8D%E3%82%8B%E3%81%A0%E3%81%91%E7%B0%A1%E7%B4%A0%E3%81%AB%E5%AE%9A%E7%BE%A9">QML で参照のみ可能なプロパティをできるだけ簡素に定義</h2>

<pre><code class="cpp">  Q_PROPERTY(QString hoge MEMBER m_hoge CONSTANT)
</code></pre>

<p>new するときとか、C++側からのみアクセスできる setter で値は代入する。</p>

<h2 id="qml-%E3%81%A7%E5%AE%9F%E8%A1%8C%E5%8F%AF%E8%83%BD%E3%81%AA%E9%96%A2%E6%95%B0%E3%82%92%E5%AE%9A%E7%BE%A9">QML で実行可能な関数を定義</h2>

<pre><code class="cpp">  Q_INVOKABLE inline int hoge() {
      return 10;
  }
</code></pre>

<h2 id="%E3%83%88%E3%83%A9%E3%83%96%E3%83%AB%E3%82%B7%E3%83%A5%E3%83%BC%E3%83%86%E3%82%A3%E3%83%B3%E3%82%B0">トラブルシューティング</h2>

<h3 id="invalid-import-qualifier-id">Invalid import qualifier ID</h3>

<blockquote>
  <p>Invalid import qualifier ID
  (訳: インポート修飾識別子が無効)</p>
</blockquote>

<p>エリアスの頭は大文字でないとダメらしい。</p>

<pre><code class="diff">- import "xxx" as my
+ import "xxx" as My
</code></pre>

<h3 id="depends-on-non-notifyable-properties%3A-xxxxx%3Ayyyyy">depends on non-NOTIFYable properties: XXXXX:YYYYY</h3>

<blockquote>
  <p>depends on non-NOTIFYable properties: XXXXX:YYYYY
  (訳: 通知できないプロパティに依存)</p>
</blockquote>

<p>読み取り専用の場合は <code>CONSTANT</code> をつければ良い。</p>

<pre><code class="diff">           :
-     Q_PROPERTY(QString title MEMBER m_title)
+     Q_PROPERTY(QString title MEMBER m_title CONSTANT)
           :
</code></pre>

<h3 id="type-xxxx-unavailable">Type XXXX unavailable</h3>

<blockquote>
  <p>Type XXXX unavailable
  (訳: タイプ XXXX は利用できません)</p>
</blockquote>

<p>XXXX をちゃんと定義しているはずなのに出る場合は、 XXXX の中でエラーになってるかも？
その場合は、該当ファイルを対象としたエラーが出ている。</p>

<h3 id="qt-creator-%E4%B8%8A%E3%81%A7%E3%81%AE%E3%82%A8%E3%83%A9%E3%83%BC%E6%B3%A8%E9%87%88%E8%A1%A8%E7%A4%BA">Qt Creator 上でのエラー注釈表示</h3>

<p>QtQuick.Controls 2 を利用しているのに QtQuick.Controls 1 のエラーが表示される</p>

<p><img src="/images/20180721_qtcreator_annotation.png" alt="Qt Creator エラー注釈表示" /></p>

<p>どうやら Qt 5.11 を利用すれば大丈夫な様子。</p>

<h2 id="qt-quick-%E3%81%A8-c%2B%2B-%E3%81%A8%E3%81%AE%E3%82%84%E3%82%8A%E3%81%A8%E3%82%8A">Qt Quick と C++ とのやりとり</h2>

<h3 id="%E3%82%AB%E3%82%B9%E3%82%BF%E3%83%A0%E3%82%BF%E3%82%A4%E3%83%97%E3%81%AE%E7%99%BB%E9%8C%B2">カスタムタイプの登録</h3>

<p>※ <code>HogeType</code> クラスは <code>QObjct</code> から派生</p>

<pre><code>              :
    qmlRegisterType&lt;HogeType&gt;("net.example.foo", 1, 0, "HogeType");
    QQmlApplicationEngine engine;
              :
</code></pre>

<p>qml では次のように利用</p>

<pre><code>import net.example.foo 1.0
            :
ApplicationWindow {
            :
    HogeType {
        id: hoge
    }
            :
}
</code></pre>

<h3 id="%E3%82%B3%E3%83%B3%E3%83%86%E3%82%AD%E3%82%B9%E3%83%88%E3%81%AB%E7%99%BB%E9%8C%B2">コンテキストに登録</h3>

<p>※ <code>AppData</code> クラスは <code>QObjct</code> から派生</p>

<pre><code>            :
    AppData data;
    QQmlApplicationEngine engine;
    engine.rootContext()-&gt;setContextProperty("appData", &amp;data);
            :
</code></pre>

<p>qml では次のように利用</p>

<pre><code>            :
Window {
            :
    Text {
        text: appData.getTextFromCpp()
            :
    }
}
</code></pre>

<h2 id="%E6%87%87%E8%A6%AA%E4%BC%9A">懇親会</h2>

<p>もぐもぐ♪</p>

<p><img src="/images/20180721_mogmog.jpg" alt="もぐもぐ" /></p>

<h2 id="%E5%8F%82%E8%80%83">参考</h2>

<ul>
<li><a href="http://doc.qt.io/qt-5/qml-qtquick-controls-button.html">Button QML Type | Qt Quick Controls 5.11</a></li>
<li><a href="https://doc.qt.io/Qt-5/qml-qtquick-controls2-abstractbutton.html">AbstractButton QML Type | Qt Quick Controls 2 5.11</a></li>
<li><a href="http://forum.jollausers.com/sailfish-developers/import-js-file-invalid-import-qualifier-id/">[Solved] import js file - Invalid import qualifier ID - Sailfish Developers - Jolla &amp; Sailfish OS Forum</a></li>
<li><a href="http://doc.qt.io/qt-5/qtqml-cppintegration-topic.html">Integrating QML and C++ | Qt QML 5.11</a></li>
<li><a href="https://qiita.com/DAR/items/400a1725ddedcaa6ef0e">QMLとC++のバインディング - Qiita</a></li>
<li><a href="http://tips.hecomi.com/entry/20130503/1367594609">Qt Quick での C++ × QML バインディングについてまとめてみた - 凹みTips</a></li>
<li><a href="https://stackoverflow.com/questions/6728615/warning-about-non-notifyable-properties-in-qml">qt - Warning about non-NOTIFYable properties in QML - Stack Overflow</a></li>
</ul>
]]></content>
        </entry>
            <entry>
            <title type="html"><![CDATA[名古屋Qt勉強会#16 に参加しました]]></title>
            <link href="http://www.sharkpp.net/blog/2018/05/26/qt-nagoya-16.html"/>
            <updated>2018-05-26T23:26:00+00:00</updated>
            <id>http://www.sharkpp.net/blog/2018/05/26/qt-nagoya-16.html</id>
            <content type="html"><![CDATA[<p>5月26日(土) に開催された <a href="https://qt-users.connpass.com/event/88524/">Qt 勉強会 @ Nagoya #16 - connpass</a> に参加しました。</p>

<p>そのまとめ。</p>

<p><img src="/images/20180526_qauthwith2.png" alt="開発中" /></p>

<h2 id="%E4%BC%9A%E5%A0%B4%E5%88%B0%E7%9D%80%E3%81%BE%E3%81%A7">会場到着まで</h2>

<p>前回は、ちょっと迷ってしまったけど、さすがに２回目ともなれば迷うこともなく到着。
電車の時間を少しミスったために、今回もギリギリ（汗</p>

<h2 id="%E8%87%AA%E5%B7%B1%E7%B4%B9%E4%BB%8B">自己紹介</h2>

<p>みんなで自己紹介</p>

<p>今回は２名のご新規さんが参加されました。</p>

<p>東京組２名は少し遅れて到着（やはり迷った様子</p>

<h2 id="%E4%BB%8A%E5%9B%9E%E3%81%AE%E3%81%8A%E8%8F%93%E5%AD%90">今回のお菓子</h2>

<p>今回は、東京からの参加者の <a href="https://twitter.com/hermit4">@hermit4</a> さんが、美味しそうなお菓子を持ち込み。
クッキーなどと合わせてなかなかの量になりました。</p>

<h2 id="%E3%82%82%E3%81%8F%E3%82%82%E3%81%8F">もくもく</h2>

<p>前回の続きをもくもく。</p>

<p>本日は、Qt Quick をサンプルを見ながらUIの作り込み。</p>

<p><img src="/images/20180526_qauthwith1.png" alt="開発中" /></p>

<p>こんな感じに Swagger UI 風の UI を Qt Quick で作ることにした。</p>

<p><img src="/images/20180526_qauthwith2.png" alt="開発中" /></p>

<p>一部、どうしてもわからないことを <a href="https://twitter.com/IoriAYANE">@IoriAYANE</a> さんに聞きつつ、なんとかここまで出来た。</p>

<p>さてはて、中身の実装をどうしようかな？というところで時間切れ。</p>

<h2 id="%E6%87%87%E8%A6%AA%E4%BC%9A">懇親会</h2>

<p>今回は、前回行った串カツ屋さんは入れず。
少し歩いた先の串焼き屋さんで懇親会。</p>

<p><img src="/images/20180526_kushiyaki.jpg" alt="テング酒場で懇親会" /></p>

<h2 id="%E6%9C%80%E5%BE%8C%E3%81%AB">最後に</h2>

<p>久しぶりに集中して趣味プロしたけど、やはりいいものだ。
年々、趣味に割ける時間が減っているけど、なんとか継続して行きたい。</p>

<h2 id="%E5%8F%82%E8%80%83">参考</h2>

<ul>
<li><a href="http://doc.qt.io/qt-5/qtquickcontrols-index.html">Qt Quick Controls 5.11</a></li>
<li><a href="https://doc.qt.io/archives/qt-5.7/qtquickcontrols2-customize.html">Customizing Qt Quick Controls 2 | Qt Quick Controls 2 5.7</a></li>
<li><a href="http://blog.qt.io/jp/2011/03/10/qml-drawing-2/">Qt Quick 入門 第8回: QML の描画処理 - Qt Japanese Blog</a></li>
</ul>
]]></content>
        </entry>
            <entry>
            <title type="html"><![CDATA[技術書典4に行ってきた]]></title>
            <link href="http://www.sharkpp.net/blog/2018/05/18/techbookfest4.html"/>
            <updated>2018-05-18T01:10:00+00:00</updated>
            <id>http://www.sharkpp.net/blog/2018/05/18/techbookfest4.html</id>
            <content type="html"><![CDATA[<p>一昨年から始まった技術書オンリーな同人イベント、「<a href="https://techbookfest.org/event/tbf04">技術書典４</a>」が、4月22日に開催されました。
今回はイベントが始まって以来の快晴で運営さんも大慌てだった、とか言う話も。
まあ、ともかく今回も昨年に引き続き「技術書典」に引き続き行ってきました。
これは、そのレポート、もしくは戦果報告となります。
いやはや、かなり周回遅れながらなんとかアップしました。</p>

<p><img src="/images/20180422_tf4.jpg" alt="会場前にて" /></p>

<h2 id="%E5%A7%8B%E3%82%81%E3%81%AB">始めに</h2>

<p>まず、前回のレポートは「<a href="/blog/2017/10/23/techbookfest3.html">技術書典３にサークル手伝いとして参加してきた - さめたすたすのお家</a>
」です。</p>

<p>今回は、サークル数 246 、入場者数 6380 人だったようです。前回から二倍以上増えていて、もう人口密度が大変なことになっていました。</p>

<p><a href="https://docs.google.com/spreadsheets/d/1gNVy9ukLn3kYzOC0nyOpysD-Xl3fIzHl26WSSLHC-HY/edit?usp=sharing"><img src="/images/20180430_tf1_tf4_graph.png" alt="参加人数" /></a></p>

<h2 id="%E5%BD%93%E6%97%A5">当日</h2>

<p>09:45ぐらいに行ったところ、すでに結構な人数が集まってました。
まあ、集まってるとは言っても、その時点では一般参加者の列形成はされてなかったのでばらばらと散らばっている感じ。</p>

<blockquote class="twitter-tweet" data-lang="ja"><p lang="ja" dir="ltr">技術書典4 <a href="https://twitter.com/hashtag/%E6%8A%80%E8%A1%93%E6%9B%B8%E5%85%B8?src=hash&amp;ref_src=twsrc%5Etfw">#技術書典</a> 入場待機中<br>9:45ぐらいで一般参加者が集まってた <a href="https://t.co/eXsELI3LRW">pic.twitter.com/eXsELI3LRW</a></p>&mdash; 俺はさめたすたすでいく！！！ (@sharkpp) <a href="https://twitter.com/sharkpp/status/987863108789063680?ref_src=twsrc%5Etfw">2018年4月22日</a></blockquote>

<script async src="https://platform.twitter.com/widgets.js" charset="utf-8"></script>

<p>そして、10:00 すこし前に一般参加者の列形成を開始。
整理券を配ってましたがどうやら並んでないと入れない、との話が漏れ聞えて来ました。</p>

<blockquote class="twitter-tweet" data-lang="ja"><p lang="ja" dir="ltr"><a href="https://twitter.com/hashtag/%E6%8A%80%E8%A1%93%E6%9B%B8%E5%85%B8?src=hash&amp;ref_src=twsrc%5Etfw">#技術書典</a> <a href="https://twitter.com/hashtag/%E6%8A%80%E8%A1%93%E6%9B%B8%E5%85%B84?src=hash&amp;ref_src=twsrc%5Etfw">#技術書典4</a> サークル一覧のサークル配置図がお亡くなりに <a href="https://t.co/IJBzP4d5n7">pic.twitter.com/IJBzP4d5n7</a></p>&mdash; 俺はさめたすたすでいく！！！ (@sharkpp) <a href="https://twitter.com/sharkpp/status/987869942820163585?ref_src=twsrc%5Etfw">2018年4月22日</a></blockquote>

<script async src="https://platform.twitter.com/widgets.js" charset="utf-8"></script>

<p>サークル配置図を見ようとしたらお亡くなりになっていたり、トイレが近くて危なかったけど、何とかなった。
なんか、以前も同じようなことを...</p>

<p>スタッフさんが、毎度おなじみ手提げバッグを持って回っていて、今回は（前回も？）どうやら後払い公式アプリでも払えるようだったけど、時間かかりそうだったので現金払いにした。
まあ、毎度のことながら会場内でも購入できるんだけどね。</p>

<p>そして、11:00 会場内で拍手があり、ついに会場。</p>

<p>「この列の人、手をあげてください！」ってスタッフさんが来たので、前後を見てなんとなく手をあげたところ、どうやら第一陣の入場対象に含まれたらしく、最初に入場することができました。</p>

<p>とりあえず、最初に入場できたので、知り合いのところなどなど、早速お目当てのサークルさんを駆け巡ることに。</p>

<p>なんかブースの配置が一部ぐるっと回り込まないとダメな構造だったので、買い忘れで戻った時には人が多くて大変だった。</p>

<p>前回から実装された、後払い公式アプリで決済をしつつ、たまに現金払い。</p>

<p>後払いは簡単に決済できるから、面白いようにお金が飛んでく...</p>

<p>戦利品は後ほどで。</p>

<p>最後は前回と同じように、秋葉原のヤマト運輸営業所で荷物を発送しました。</p>

<p>さすがに今回は購入した量が多く、紙袋的なものだと破けそうだったので箱で送ることに。</p>

<p><img src="/images/20180422_tf4_packing.jpg" alt="梱包" /></p>

<p>無事発送もすんだので、今回の技術書典４を抜け、身軽になって観光しました。</p>

<h2 id="%E6%88%A6%E5%88%A9%E5%93%81">戦利品</h2>

<p>今回の戦利品</p>

<p><img src="/images/20180429_tf4_booty.jpg" alt="戦利品" /></p>

<table>
<thead>
<tr>
  <th>ブース</th>
  <th>サークル名/ペンネーム</th>
  <th>備考</th>
</tr>
</thead>
<tbody>
<tr>
  <td></td>
  <td>達人出版会</td>
  <td>「<a href="https://techbookfest.org/journal/3">技術季報 2018 SPRING</a>」※技術書典カタログ</td>
</tr>
<tr>
  <td><a href="https://techbookfest.org/event/tbf04/circle/17450001">い15</a></td>
  <td><a href="https://mzp.booth.pm/">SKK=さらに かしこく かわいい</a></td>
  <td>「工場実習日記」「日本語入力を作るのに必要だった本」</td>
</tr>
<tr>
  <td><a href="https://techbookfest.org/event/tbf04/circle/12820001">か22</a></td>
  <td>理ろぐ/<a href="https://twitter.com/IoriAYANE">理音伊織</a></td>
  <td>「インストーラーで配ろう！」</td>
</tr>
<tr>
  <td><a href="https://techbookfest.org/event/tbf04/circle/12820001">か22</a></td>
  <td><a href="https://qiita.com/MegaBlackLabel">底なし沼の魔女</a>/<a href="https://twitter.com/MegaBlackLabel">れいな</a></td>
  <td>「Libraries of React・Get ready for Next.jsのセット」</td>
</tr>
<tr>
  <td><a href="https://techbookfest.org/event/tbf04/circle/16430002">お09</a></td>
  <td>Secure旅団</td>
  <td>「俺らの愛したセキュリティ」「ニッチ・セキュリティ - 明星へ登る」</td>
</tr>
<tr>
  <td><a href="https://techbookfest.org/event/tbf04/circle/17570001">か24</a></td>
  <td><a href="http://www.chirashiura.com/">楽描帳</a>/<a href="https://twitter.com/tomato360">@tomato360</a></td>
  <td>「Hello Nuxt !!」「Hello!! Vue.js 最新プログレッシブフレームワーク入門」</td>
</tr>
<tr>
  <td><a href="https://techbookfest.org/event/tbf04/circle/19150009">か23</a></td>
  <td><a href="https://mya-ake.com/">ねこの手@福岡</a>/<a href="https://twitter.com/mya_ake">mya-ake</a></td>
  <td>「知らないと損するCSS」「現場で使えるVue.js tips集」</td>
</tr>
<tr>
  <td><a href="https://techbookfest.org/event/tbf04/circle/14560006">く36</a></td>
  <td><a href="http://blogs.yahoo.co.jp/rem1988stores">紙印</a>/おたべ</td>
  <td>「【フルセット】テスト設計入門 2018年度版」</td>
</tr>
<tr>
  <td><a href="https://techbookfest.org/event/tbf04/circle/19150006">く02</a></td>
  <td><a href="https://www.wakamesoba98.net/circle/">53鍵盤</a>/わかめそば</td>
  <td>「初めてのsystemd-nspawn」</td>
</tr>
<tr>
  <td><a href="https://techbookfest.org/event/tbf04/circle/16620002">け15</a></td>
  <td><a href="https://staff.aist.go.jp/tominaga-daisuke/sliderule/rectilinear/index.html">お台場計算尺</a>/とみながだいすけ</td>
  <td>「新世紀の計算尺入門」「作って使おう計算尺」</td>
</tr>
<tr>
  <td><a href="https://techbookfest.org/event/tbf04/circle/21060002">き17</a></td>
  <td>めがねをかけるんだ/<a href="https://twitter.com/keiji_ariyama">Keiji ARIYAMA</a></td>
  <td>「本当はおそろしい商業出版！？」「茶色いトイプードルは食べ物じゃないっ！」</td>
</tr>
<tr>
  <td><a href="https://techbookfest.org/event/tbf04/circle/14520005">き02</a></td>
  <td>越後屋/なかざん</td>
  <td>「Cheap Dive into React Native」</td>
</tr>
<tr>
  <td><a href="https://techbookfest.org/event/tbf04/circle/11830001">お08</a></td>
  <td><a href="https://twitter.com/cpaw_account">Cpaw</a></td>
  <td>「RustによるWebアプリケーション作成入門」</td>
</tr>
<tr>
  <td><a href="https://techbookfest.org/event/tbf04/circle/18420001">お02</a></td>
  <td><a href="http://yoshikawaweb.com/">吉川雅彦</a></td>
  <td>「z-indexを倒す」</td>
</tr>
<tr>
  <td><a href="https://techbookfest.org/event/tbf04/circle/16430001">い05</a></td>
  <td><a href="http://webdesign-manga.com/">マンガでわかるWebデザイン＋Git</a>/湊川あい</td>
  <td>「マンガでわかるDocker」「マンガでわかるScrapbox【無料頒布】」</td>
</tr>
<tr>
  <td><a href="https://techbookfest.org/event/tbf04/circle/14570001">け51</a></td>
  <td><a href="http://uchan.hateblo.jp/">uchan</a></td>
  <td>「USB3.0 ホストドライバ自作入門」</td>
</tr>
<tr>
  <td><a href="https://techbookfest.org/event/tbf04/circle/21040009">あ01</a></td>
  <td>日経BP出版局</td>
  <td>「日経電子の本」※無料配布</td>
</tr>
</tbody>
</table>

<p>※敬称略、順不同</p>

<h2 id="%E3%81%BE%E3%81%A8%E3%82%81">まとめ</h2>

<ul>
<li>そろそろ会場に対して人が多いのではないかと...</li>
<li>並ぶ前にトイレを済まそう(二度目)</li>
<li>段々と購入数が多くなっていく...</li>
<li>公式後払いアプリ怖い（お金に羽が生えて飛んでいく的な意味で</li>
</ul>
]]></content>
        </entry>
            <entry>
            <title type="html"><![CDATA[名古屋Qt勉強会#15 に参加しました]]></title>
            <link href="http://www.sharkpp.net/blog/2018/04/21/qt-nagoya-15.html"/>
            <updated>2018-04-21T05:50:00+00:00</updated>
            <id>http://www.sharkpp.net/blog/2018/04/21/qt-nagoya-15.html</id>
            <content type="html"><![CDATA[<p>つい先日 4月14日(土) に開催された <a href="https://qt-users.connpass.com/event/84048/">Qt 勉強会 @ Nagoya #15 - connpass</a> に参加しました。</p>

<p>まとめは <a href="https://togetter.com/li/1218135">Qt 勉強会 @ Nagoya # 15 まとめ - Togetter</a> です。</p>

<p>ちょっと遅くなったけど、そのまとめ。</p>

<p><img src="/images/20180414_qauthwith.png" alt="開発中" /></p>

<h2 id="%E4%BC%9A%E5%A0%B4%E5%88%B0%E7%9D%80%E3%81%BE%E3%81%A7">会場到着まで</h2>

<p>会場近くには、あの食器で有名なノリタケの森がある。
それを横目に通り過ぎながら名古屋駅からテクテク歩くこと約20分。
最初、別の場所を会場と思ってたけど間違えてたようで <a href="https://twitter.com/kazuo_asa">@kazuo_asa</a> @主催者さんに助けてもらった。</p>

<h2 id="%E8%87%AA%E5%B7%B1%E7%B4%B9%E4%BB%8B">自己紹介</h2>

<p>みんなで自己紹介</p>

<p>ほぼ何回か参加していて見知っていた人だった。
まあ、久しぶりの参加の人もいたけど。</p>

<h2 id="%E4%BB%8A%E5%9B%9E%E3%81%AE%E3%81%8A%E8%8F%93%E5%AD%90">今回のお菓子</h2>

<p>今回は駄菓子を持って来たけど、横に長く座っていた関係もあったのか、まああまり減らなかった。</p>

<p><img src="/images/20180414_dagashi.jpg" alt="串カツ田中で懇親会" /></p>

<h2 id="%E3%82%82%E3%81%8F%E3%82%82%E3%81%8F">もくもく</h2>

<p>とりあえず、久しぶりに Qt を触る。</p>

<p><a href="https://github.com/sharkpp/qtauthwith">qtauthwith</a> を触ってみるも、ビルドエラーが出るのでひたすら修正。</p>

<p>最終的にビルドは通るようになったけど... UIがそういえば実装するの超面倒だったな、と思い出して QtQuick で実装できないか模索。</p>

<h2 id="%E3%81%A8%E3%81%A4%E3%81%9C%E3%82%93%E3%81%AE%E6%9A%97%E5%8F%B7%E9%80%9A%E8%B2%A8">とつぜんの暗号通貨</h2>

<p>勉強会のイベントページに、なんか企業アカウントっぽいのが登録されているなぁと思ってたけど、開始時間過ぎても来ていなかったので、なんだったんだろうな、とは思ってた。
が、しばらくしてから、２人組の人が来たが、その片方は外国の方だったので、ちとびっくり。</p>

<p>どうやら、外国の方の方は暗号通貨 Dash と言う日本ではマイナーな仮想通貨の伝道師的な人だったようで、公式の Wallet アプリが Qt で作られている関係で参加した様子。</p>

<h3 id="%E6%9A%97%E5%8F%B7%E9%80%9A%E8%B2%A8-dash">暗号通貨 Dash</h3>

<p><a href="https://www.dash.org/jp/">DASH公式サイト | DASH暗号通貨 — Dash</a></p>

<p>どうやら Core Wallet って管理アプリが Qt 4 で作られているらしい。</p>

<p>話してくれたのは、暗号通貨 Dash のコミュニティマネージャ兼伝道師兼いろいろ。</p>

<p>Dash は bitcoin のハードフォークで Core Wallet が Qt 製なのも bitcoin から受け継いだもの。</p>

<p>bitcoin はマイニングで得た報酬はマイニングした人にのみ分配されるが、Dash はマイニングで発掘された報酬を開発者に分ける仕組みがあるとのこと。</p>

<p>分配の割合は 45:45:10 で、マイナー：マスターノード（いっぱいコインを持ってる人？）：コミュニティに分配され、コミュニティに分配された報酬は、投票により開発者やマーケティングなどに使われるらしい。</p>

<p>この辺り、面白い戦略をとってると思う。</p>

<p><a href="https://github.com/dashpay/dash">dashpay/dash: Dash - Reinventing Cryptocurrency</a> が公式リポジトリっぽい。</p>

<h4 id="%E6%A8%99%E6%BA%96-wallet-%E3%81%AB%E3%81%A4%E3%81%84%E3%81%A6">標準 wallet について</h4>

<ul>
<li>Qt 4 で実装</li>
<li>改善する箇所が多い。例えば、

<ul>
<li>エクスポートはCSV形式なので、JSONなどへの対応する、など。</li>
<li>送信先の選択画面、フィルタとかもできないし、一人一人選択しないといけない。</li>
<li>Multisig 機能があるがそのUIがないのでコマンドラインを直接指定しないといけない。</li>
</ul></li>
<li>つまるところ、Qtの開発者がもっと増えて欲しい</li>
<li>先の10%をどういう風に使うかを、フォーラムで提案＆投票し決める仕組みがある。</li>
<li>改善の提案はPRでもフォーラムでもできるけど、大きな改善はフォーラムで提案すると予算が降りるかもしれない。</li>
</ul>

<h3 id="solarcoin">SolarCoin</h3>

<p>公式はたぶんこれ <a href="https://solarcoin.org/">SolarCoin | SolarCoin</a> 。</p>

<p>どうやらこっちにも携わっているみたい。</p>

<p>dash のどこかのバージョンのフォーク。</p>

<p>コアな開発者は３人ぐらいなので、こちらも増えて欲しい、とのこと。</p>

<h2 id="%E6%87%87%E8%A6%AA%E4%BC%9A">懇親会</h2>

<p>会場近くの串カツ屋さん。なんか両隣は結構有名なお店らしい。</p>

<p><img src="/images/20180414_kushikatsu.jpg" alt="串カツ田中で懇親会" /></p>

<h2 id="%E6%9C%80%E5%BE%8C%E3%81%AB">最後に</h2>

<p>久しぶりに参加したけど、久しぶりにQt触っていろいろと忘れていたこともあった。
けど、強制的に時間を確保しもくもくするのはやはり悪くない。
あと、Dash コインの話もいろいろ面白かった。</p>
]]></content>
        </entry>
            <entry>
            <title type="html"><![CDATA[Qt 用の QDialog をベースとした吹き出し型のウィジェット]]></title>
            <link href="http://www.sharkpp.net/blog/2018/02/27/popover-widget-for-qt.html"/>
            <updated>2018-02-27T01:01:00+00:00</updated>
            <id>http://www.sharkpp.net/blog/2018/02/27/popover-widget-for-qt.html</id>
            <content type="html"><![CDATA[<p>とりあえず、ネタがないので先日に公開した <a href="https://github.com/sharkpp/qtpopover">Popover - QDialog base balloon shape widget</a> の紹介。</p>

<h2 id="%E4%BD%95%E3%81%8C%E3%81%A7%E3%81%8D%E3%82%8B%EF%BC%9F">何ができる？</h2>

<p><img src="/images/20180227_qtpopover.png" alt="スクリーンショット" /></p>

<p>こんな感じの切り欠き付きのポップアップが簡単に実装できます。</p>

<p><a href="https://developer.apple.com/documentation/appkit/nspopover">NSPopover</a> みたいなやつ。</p>

<h2 id="%E3%81%A9%E3%81%93%E3%81%A7%E5%88%A9%E7%94%A8%E3%81%A7%E3%81%8D%E3%82%8B%EF%BC%9F">どこで利用できる？</h2>

<p>現状は macOS しか動作の確認をしてないです。
もしかしたら Windows とか Linux でも動作するかも？</p>

<h2 id="%E3%81%A9%E3%81%86%E3%82%84%E3%81%A3%E3%81%A6%E4%BD%BF%E3%81%86%EF%BC%9F">どうやって使う？</h2>

<p>使い方は、</p>

<ul>
<li>ソースを組み込んで利用(a)</li>
<li>ライブラリとしてビルドして利用(b)</li>
</ul>

<p>の２種類です。</p>

<p>組み込みのサンプルは <a href="https://github.com/sharkpp/qtpopover/tree/master/examples">master/examples - qtpopover</a> あたりに。</p>

<h3 id="%E7%92%B0%E5%A2%83%E4%BE%8B">環境例</h3>

<table>
<thead>
<tr>
  <th>項目</th>
  <th>内容</th>
</tr>
</thead>
<tbody>
<tr>
  <td>アプリケーション名</td>
  <td>test</td>
</tr>
<tr>
  <td>ライブラリフォルダ</td>
  <td><code>libs</code></td>
</tr>
</tbody>
</table>

<h3 id="1%E3%82%BD%E3%83%BC%E3%82%B9%E3%82%92%E5%8F%96%E5%BE%97">1)ソースを取得</h3>

<pre><code class="console"># git submodule add git@github.com:sharkpp/qtpopover.git libs/qtpopover
# git submodule update
</code></pre>

<h3 id="2a%E3%82%BD%E3%83%BC%E3%82%B9%E3%82%92%E5%8F%96%E3%82%8A%E8%BE%BC%E3%82%80">2a)ソースを取り込む</h3>

<h4 id="2a.1%E3%83%97%E3%83%AD%E3%82%B8%E3%82%A7%E3%82%AF%E3%83%88%E3%83%95%E3%82%A1%E3%82%A4%E3%83%AB%60.pro%60%E3%82%92%E5%A4%89%E6%9B%B4">2a.1)プロジェクトファイル(<code>.pro</code>)を変更</h4>

<p>アプリケーションの <code>.pro</code> を変更する。
プロジェクトインクルードファイル（？）を追加します。</p>

<p>変更例</p>

<pre><code class="diff">+ # You can also select to disable deprecated APIs only up to a certain version of Qt.
+ #DEFINES += QT_DISABLE_DEPRECATED_BEFORE=0x060000    # disables all the APIs deprecated before Qt 6.0.0
+
+ include(./libs/qtpopover/sources/popover.pri)
+
+ SOURCES += \
+         main.cpp \
+         mainwindow.cpp \
</code></pre>

<h3 id="2b%E3%83%A9%E3%82%A4%E3%83%96%E3%83%A9%E3%83%AA%E3%82%92%E5%8F%96%E3%82%8A%E8%BE%BC%E3%82%80">2b)ライブラリを取り込む</h3>

<h4 id="2b.1%E3%83%A9%E3%82%A4%E3%83%96%E3%83%A9%E3%83%AA%E3%82%92%E3%83%93%E3%83%AB%E3%83%89">2b.1)ライブラリをビルド</h4>

<p><code>./libs/qtpopover/popover.pro</code> を <code>Qt Creator</code> で開きビルドする。</p>

<h4 id="2b.2%E3%83%97%E3%83%AD%E3%82%B8%E3%82%A7%E3%82%AF%E3%83%88%E3%83%95%E3%82%A1%E3%82%A4%E3%83%AB%60.pro%60%E3%82%92%E5%A4%89%E6%9B%B4">2b.2)プロジェクトファイル(<code>.pro</code>)を変更</h4>

<p>アプリケーションの <code>.pro</code> を変更する。</p>

<p><code>POPOVER_USE_STATIC_LIB=1</code> とプロジェクトインクルードファイル（？）を追加します。</p>

<p>変更例</p>

<pre><code class="diff">+ # You can also select to disable deprecated APIs only up to a certain version of Qt.
+ #DEFINES += QT_DISABLE_DEPRECATED_BEFORE=0x060000    # disables all the APIs deprecated before Qt 6.0.0
+
+ POPOVER_USE_STATIC_LIB=1
+ include(./libs/qtpopover/sources/popover.pri)
+
+ SOURCES += \
+         main.cpp \
+         mainwindow.cpp \
</code></pre>

<h3 id="3%60qdialog%60-%E3%83%99%E3%83%BC%E3%82%B9%E3%81%AE%E3%82%AF%E3%83%A9%E3%82%B9%E3%82%92%E4%BD%9C%E3%82%8B%E3%80%82">3)<code>QDialog</code> ベースのクラスを作る。</h3>

<h3 id="4%E3%82%BD%E3%83%BC%E3%82%B9%E3%81%AE%E5%A4%89%E6%9B%B4">4)ソースの変更</h3>

<p>変更例</p>

<pre><code class="cpp">  #include &lt;QApplication&gt;

  TaskTrayPopup::TaskTrayPopup(QWidget *parent)
-     : QDialog(parent)
+     : Popover(parent)
      , ui(new Ui::TaskTrayPopup)
  {
      ui-&gt;setupUi(this);
</code></pre>

<h3 id="5%E3%83%98%E3%83%83%E3%83%80%E3%81%AE%E5%A4%89%E6%9B%B4">5)ヘッダの変更</h3>

<p>変更例</p>

<pre><code class="cpp">  #ifndef TASKTRAYPOPUP_H
  #define TASKTRAYPOPUP_H

+ #include "popover.h"

  namespace Ui {
  class TaskTrayPopup;
  }

  class TaskTrayPopup
-         : public QDialog
+         : public Popover
  {
      Q_OBJECT

</code></pre>

<h2 id="%E3%81%AA%E3%81%9C%E4%BD%9C%E3%81%A3%E3%81%9F%EF%BC%9F">なぜ作った？</h2>

<p>いろんなところで利用できそうな Qt のクラス作ったけど、簡単に利用できる方法がないかなと、捏ねくり回して作って見ました。</p>

<p>どこかに、<code>npm i HOGE</code> とか <code>composer require HOGE</code> みたいに手軽に利用できる Qt の標準的なパッケージの仕組みはないものですかね。</p>
]]></content>
        </entry>
            <entry>
            <title type="html"><![CDATA[駆け足で Qt Network Authorization の使い方を紹介してみる]]></title>
            <link href="http://www.sharkpp.net/blog/2017/12/21/qt-advent-calendar-2017-21th-day.html"/>
            <updated>2017-12-21T23:45:00+00:00</updated>
            <id>http://www.sharkpp.net/blog/2017/12/21/qt-advent-calendar-2017-21th-day.html</id>
            <content type="html"><![CDATA[<p>こんにちは、こんばんは。</p>

<p><a href="http://qiita.com/advent-calendar/2017/qt">Qt Advent Calendar 2017</a> の 21日目を担当する <a href="https://twitter.com/sharkpp">@sharkpp</a> です。</p>

<p>昨日の <a href="https://qiita.com/Donokono/items/cb9167ee78eb758f8806">Qtでグラフを書いてみよう！</a> の自前のグラフ描画、すごかったですね。
自分も MFC で苦労して実装した覚えがあります。</p>

<p>さて、今回は Qt Network Authorization の使い方についてです。</p>

<h2 id="qt-network-authorization-%E3%81%AB%E3%81%A4%E3%81%84%E3%81%A6">Qt Network Authorization について</h2>

<p>Qt 5.8 から Technology Preview として追加された <a href="https://doc.qt.io/qt-5.10/qtnetworkauth-index.html">Qt Network Authorization</a> モジュールが、先日公開された Qt 5.10 でついに完全サポート(fully supported)されるようになりました。</p>

<p>モジュール自体は汎用的にできていて、Twitter や Facebook などの OAuth1/2 での認証に対応したサイトの利用も容易にできるようになっています。
ただ、現状は日本語の情報が少ないようなので、 Technology Preview で公開されて以降、この一年で調べたことなどをまとめていきたいと思います。</p>

<h2 id="%E7%92%B0%E5%A2%83">環境</h2>

<table>
<thead>
<tr>
  <th>バージョン</th>
  <th>注意点</th>
</tr>
</thead>
<tbody>
<tr>
  <td>Qt 5.8</td>
  <td>TP、一部サービスでソースコードの修正が必要な不具合あり</td>
</tr>
<tr>
  <td>Qt 5.9</td>
  <td>TP2、OAuthの計算がおかしい場合がある</td>
</tr>
<tr>
  <td>Qt 5.10</td>
  <td>基本はこれ！</td>
</tr>
</tbody>
</table>

<h2 id="%E3%81%93%E3%81%AE%E4%B8%80%E5%B9%B4%E3%81%AE%E5%A0%B1%E5%91%8A">この一年の報告</h2>

<h3 id="%E8%A8%98%E4%BA%8B">記事</h3>

<p>自分が書いた Qt Network Authorization に関する記事です。</p>

<p>意外と本数が少なかった。</p>

<ul>
<li><a href="/blog/2017/01/28/first-impression-qt-network-authorization.html">はじめての Qt Network Authorization</a></li>
<li><a href="/blog/2017/03/25/twitter-api-using-qt-network-authorization.html">Qt Network Authorization を使った Twitter API の利用</a></li>
<li><a href="/blog/2017/02/28/dropbox-api-using-qt-network-authorization.html">Qt Network Authorization を使った Dropbox API　の利用</a></li>
<li><a href="/blog/2017/10/21/jugemutter-development-diary-8th.html">じゅげむったーの開発日記 その８</a></li>
</ul>

<h3 id="%E4%B8%8D%E5%85%B7%E5%90%88">不具合</h3>

<p>自身が見つけた不具合です。</p>

<p>他にもいろいろ見つけたけど、どちらかと言うと要望に近かったので登録していないです、実は。</p>

<ul>
<li><a href="https://bugreports.qt.io/browse/QTBUG-59725">QTBUG-59725</a>
callback時に表示するHTMLでマルチバイト文字が欠ける</li>
<li><a href="https://bugreports.qt.io/browse/QTBUG-60400">QTBUG-60400</a>
Content-type を text/javascript で返すAPIでエラーになる</li>
</ul>

<h2 id="%E3%82%AF%E3%83%A9%E3%82%B9%E3%81%AE%E8%AA%AC%E6%98%8E">クラスの説明</h2>

<p>基本的には <a href="https://doc.qt.io/qt-5.10/qtnetworkauth-module.html">Qt Network Authorization C++ Classes</a> に書かれているクラスがすべて。</p>

<table>
<thead>
<tr>
  <th>クラス名</th>
  <th></th>
</tr>
</thead>
<tbody>
<tr>
  <td><a href="https://doc.qt.io/qt-5.10/qoauth1.html">QOAuth1</a></td>
  <td>OAuth 1 プロトコル実装</td>
</tr>
<tr>
  <td><a href="https://doc.qt.io/qt-5.10/qoauth1signature.html">QOAuth1Signature</a></td>
  <td>OAuth 1 シグネチャメソッド実装</td>
</tr>
<tr>
  <td><a href="https://doc.qt.io/qt-5.10/qoauth2authorizationcodeflow.html">QOAuth2AuthorizationCodeFlow</a></td>
  <td>承認コード付与フロー実装、QOAuth 2 用</td>
</tr>
</tbody>
</table>

<p>現状実装されているのは、 OAuth 1.x 用と OAuth 2.x 用のクラスで、Twitter や DropBox などなどサービスによってバージョンがバラバラなので APIの仕様書をよく確認する必要があります。</p>

<p>数年前に調べた結果は 「<a href="/blog/2014/03/30/oauth-providers-list.html">OAuth 認証を提供しているサービスをまとめてみました</a>」にまとめてありますので参考にしてください。</p>

<h2 id="%E5%AE%9F%E8%A3%85%E6%96%B9%E9%87%9D">実装方針</h2>

<p>いろんな実装方法があると思いますが、ここでは、クラスを new して利用する方向性、つまり…</p>

<pre><code class="cpp">    void MainWindow::onSendTweet() {
        TwitterAPI t = this-&gt;twitter;
        t-&gt;tweet("hoge");
    }
</code></pre>

<p>このような利用方法を想定として実装してみます。</p>

<h2 id="%E6%BA%96%E5%82%99">準備</h2>

<p>まずは何はともあれ、 API を利用するためのキーを取得しましょう。</p>

<p>アプリの登録方法は探せば見つかると思いますが、「<a href="/blog/2014/03/30/oauth-providers-list.html">OAuth 認証を提供しているサービスをまとめてみました</a>」で直接のリンクを張っておきましたので参考にしてみてください。</p>

<h3 id="%E7%A7%98%E3%81%99%E3%81%B9%E3%81%8D%E6%83%85%E5%A0%B1%E3%82%92%E3%81%A9%E3%81%AE%E3%82%88%E3%81%86%E3%81%AB%E6%B8%A1%E3%81%99%E3%81%8B%EF%BC%9F">秘すべき情報をどのように渡すか？</h3>

<p>この場合の、「秘すべき情報」とは、APIを利用するアプリ用の、"App key" と "App secret" と呼ばれる類のアプリ登録時にサービス側から発行してもらった情報です。</p>

<p>現状は、「プロジェクト」→「ビルド設定」→「ビルドステップ」→「追加の引数」に追加します。</p>

<p><img src="/images/20171221_qmake_args_for_oauth_apps.png" alt="OAuthのアプリケーションキーを設定するためのQMake設定" /></p>

<p>「追加の引数」に設定する内容は</p>

<pre><code>DEFINES+=TWITTER_APP_KEY="..." DEFINES+=TWITTER_APP_SECRET="..."
</code></pre>

<p>こんな感じ。</p>

<p>ソース側で利用するときは</p>

<pre><code class="cpp">                  :
#define STR__(x) #x
#define STR_(x) STR__(x)
                  :
    setClientIdentifier(STR_(TWITTER_APP_KEY));
    setClientSharedSecret(STR_(TWITTER_APP_SECRET));
                  :
</code></pre>

<p>このような形で利用しています。</p>

<p>この方法、 <code>.pro.user</code> に保存されるため QtCreator が更新された場合は設定が消えてしまうのが注意点です。</p>

<p>何か良い方法はないのでしょうか？</p>

<h2 id="%E5%AE%9F%E8%A3%85%E3%81%99%E3%82%8B%E5%89%8D%E3%81%AB">実装する前に</h2>

<p>ここからは、OAuth のバージョンによってそのクラスや利用方法が違うので順に記載していきます。</p>

<p>OAuth 1 は Twitter を利用している <a href="https://github.com/sharkpp/Jugemutter">sharkpp/Jugemutter: 長文投稿専用ツイッタークライアント「じゅげむったー」</a> を、
OAuth 2 は DropBox を利用している <a href="https://github.com/sharkpp/NetworkStorageAccessSample">sharkpp/NetworkStorageAccessSample: Qt Network Authorization "Network storage access" sample</a> を
下敷きに書き進めているので、参考にしてみてください。</p>

<h2 id="oauth-1">OAuth 1</h2>

<p>Twitter の例</p>

<p>大まかな初期化フローは</p>

<pre><code class="mermaid">graph TD;

A["初期化"] --&gt; |API エンドポイントの指定| B

B["setTemporaryCredentialsUrl() / setAuthorizationUrl() / setTokenCredentialsUrl()"] --&gt; |API キーの指定| C

C["setClientIdentifier() / setClientSharedSecret()"] --&gt; |"Auth Token 未初期化"| D0["grant()"]
C --&gt; |"Auth Token 初期化済"| F

D0 --&gt; D1("authorizeWithBrowser 受信")

F["内部状態を認証済みに変更"] --&gt; J

D1 --&gt;G
D1 --&gt;H("requestFailed 受信")

G("granted 受信") --&gt; I

I["ID情報など問い合わせ"] --&gt;  J["API利用可能"]
</code></pre>

<p>こんな感じ</p>

<p><code>QOAuth1</code> クラスから派生します。</p>

<pre><code class="cpp">#include &lt;QtCore&gt;
#include &lt;QtNetwork&gt;
#include &lt;QtNetworkAuth&gt;

class Twitter
    : public QOAuth1
{
    Q_OBJECT
public:
    :
    :
};
</code></pre>

<p>とりあえず、利用するシグナルは</p>

<table>
<thead>
<tr>
  <th>シグナル名＆プロトタイプ</th>
  <th>概要</th>
</tr>
</thead>
<tbody>
<tr>
  <td><code>void QAbstractOAuth::authorizeWithBrowser(const QUrl &amp;url)</code></td>
  <td>ブラウザでの認証要求</td>
</tr>
<tr>
  <td><code>void QAbstractOAuth::granted()</code></td>
  <td>認証フローが正常終了した。つまり、APIを利用できるような状態になった</td>
</tr>
<tr>
  <td><code>void QAbstractOAuth::requestFailed(const Error error)</code></td>
  <td>認証フローが失敗した</td>
</tr>
</tbody>
</table>

<p>これだけです。</p>

<h3 id="api-%E3%82%A8%E3%83%B3%E3%83%89%E3%83%9D%E3%82%A4%E3%83%B3%E3%83%88%E3%81%AE%E6%8C%87%E5%AE%9A">API エンドポイントの指定</h3>

<pre><code class="cpp">    setTemporaryCredentialsUrl(QUrl("https://api.twitter.com/oauth/request_token"));
    setAuthorizationUrl(QUrl("https://api.twitter.com/oauth/authenticate"));
    setTokenCredentialsUrl(QUrl("https://api.twitter.com/oauth/access_token"));
</code></pre>

<h3 id="api-%E3%82%AD%E3%83%BC%E3%81%AE%E6%8C%87%E5%AE%9A">API キーの指定</h3>

<p>これは、開発サイトなどでアプリを登録されたときに発行されるキーの組です。
値自体はさらに暗号化されているのが望ましいと思います。</p>

<pre><code class="cpp">    setClientIdentifier("..."); // TWITTER_APP_KEY
    setClientSharedSecret("..."); // TWITTER_APP_SECRET
</code></pre>

<h3 id="authorizewithbrowser-%E3%82%B7%E3%82%B0%E3%83%8A%E3%83%AB">authorizeWithBrowser シグナル</h3>

<pre><code class="cpp"> connect(this, &amp;QAbstractOAuth::authorizeWithBrowser, [=](QUrl url) {
        QUrlQuery query(url);
        query.addQueryItem("force_login", "true");
        url.setQuery(query);
        QDesktopServices::openUrl(url);
    });
</code></pre>

<p><code>QAbstractOAuth::authorizeWithBrowser</code> のシグナルを処理します。</p>

<p>これは、ブラウザで認証を行う前に引数を加えたりする(<code>query.addQueryItem("force_login", "true");</code> がこの例での引数を追加する)ためのシグナルです。</p>

<p>ここは別にラムダ式じゃなくても問題ないです。</p>

<p><code>QDesktopServices::openUrl(url);</code></p>

<p>この静的関数を呼び出すとブラウザが開き、各サービスの認証ページにアクセスが可能です。</p>

<h3 id="granted-%E3%82%B7%E3%82%B0%E3%83%8A%E3%83%AB">granted シグナル</h3>

<p>認証が正常に終了した場合ためのシグナルです。</p>

<pre><code class="cpp">  connect(this, &amp;QAbstractOAuth::granted, this, &amp;Twitter::authenticated);
</code></pre>

<p>場合によっては</p>

<pre><code class="cpp">  connect(this, &amp;QAbstractOAuth::granted, this, [=]() {
    // 認証要求成功
    Q_EMIT authenticated();
    // 続けてID情報などを取得する
    verifyCredentials();
  });
</code></pre>

<p>のように、ID情報やアイコン等の情報を予め取得するのも良いかもしれません。</p>

<h3 id="requestfailed-%E3%82%B7%E3%82%B0%E3%83%8A%E3%83%AB">requestFailed シグナル</h3>

<p>要求が失敗した場合ためのシグナルです。</p>

<p>granted シグナル の場合と同じく、何らかの形でクラス外へ通知しUI側でメッセージを表示させるなどの対応が必要になると思います。</p>

<pre><code class="cpp">  connect(this, &amp;QAbstractOAuth::requestFailed, this, &amp;Twitter::authenticateFailed);
</code></pre>

<h3 id="api-%E3%81%AE%E5%88%A9%E7%94%A8">API の利用</h3>

<p>予め GET や POST などのメソッドが用意されているためそれを利用します。</p>

<pre><code class="cpp">virtual QNetworkReply * deleteResource(const QUrl &amp;url, const QVariantMap &amp;parameters = QVariantMap()) override;
virtual QNetworkReply * get(const QUrl &amp;url, const QVariantMap &amp;parameters = QVariantMap()) override;
virtual QNetworkReply * head(const QUrl &amp;url, const QVariantMap &amp;parameters = QVariantMap()) override;
virtual QNetworkReply * post(const QUrl &amp;url, const QVariantMap &amp;parameters = QVariantMap()) override;
virtual QNetworkReply * put(const QUrl &amp;url, const QVariantMap &amp;parameters = QVariantMap()) override;
</code></pre>

<p>こんな感じですね</p>

<pre><code class="cpp">    QUrl url("https://api.twitter.com/1.1/account/verify_credentials.json");
    QUrlQuery query(url);

    QVariantMap data;
    query.addQueryItem("include_entities", "false");
    query.addQueryItem("skip_status",      "true");
    query.addQueryItem("include_email",    "false");

    url.setQuery(query);

    QNetworkReply *reply = get(url);
    connect(reply, &amp;QNetworkReply::finished, this, [=](){
        auto reply_ = qobject_cast&lt;QNetworkReply*&gt;(sender());

        // ここで結果を処理
    });
</code></pre>

<p><code>QNetworkReply</code> の結果を JSON として処理する方法などは割愛します。</p>

<h2 id="oauth-2">OAuth 2</h2>

<p>DropBox の例</p>

<p>大まかな初期化フローは</p>

<pre><code class="mermaid">graph TD;

A["初期化"] --&gt; |API エンドポイントの指定| B

B["setAuthorizationUrl() / setAccessTokenUrl()"] --&gt; |API キーの指定| C

C["setClientIdentifier() / setClientIdentifierSharedKey()"] --&gt; |"Auth Token 未初期化"| D0["grant()"]
C --&gt; |"Auth Token 初期化済"| F

F["内部状態を認証済みに変更"] --&gt; J

D0 --&gt; D1("authorizeWithBrowser 受付")

D1 --&gt;G
D1 --&gt;H("requestFailed 受付")

G("granted 受付") --&gt; I

I["ID情報など問い合わせ"] --&gt;  J["API利用可能"]
</code></pre>

<p>こんな感じ</p>

<p><code>QOAuth2AuthorizationCodeFlow</code> クラスから派生します。</p>

<pre><code class="cpp">#include &lt;QtCore&gt;
#include &lt;QtNetwork&gt;
#include &lt;QtNetworkAuth&gt;

class DropBox
    : public QOAuth2AuthorizationCodeFlow
{
    Q_OBJECT
public:
    :
    :
};
</code></pre>

<p>とりあえず、利用するシグナルは</p>

<table>
<thead>
<tr>
  <th>シグナル名＆プロトタイプ</th>
  <th>概要</th>
</tr>
</thead>
<tbody>
<tr>
  <td><code>void QAbstractOAuth::authorizeWithBrowser(const QUrl &amp;url)</code></td>
  <td>ブラウザでの認証要求</td>
</tr>
<tr>
  <td><code>void QOAuth2AuthorizationCodeFlow::statusChanged(QAbstractOAuth::Status status)</code></td>
  <td></td>
</tr>
</tbody>
</table>

<p>これだけです。</p>

<h3 id="api-%E3%82%A8%E3%83%B3%E3%83%89%E3%83%9D%E3%82%A4%E3%83%B3%E3%83%88%E3%81%AE%E6%8C%87%E5%AE%9A">API エンドポイントの指定</h3>

<p><code>OAuth1</code> クラスとはメソッドが違っているので注意です。</p>

<pre><code class="cpp">    setAuthorizationUrl(QUrl("https://www.dropbox.com/oauth2/authorize"));
    setAccessTokenUrl(QUrl("https://api.dropbox.com/oauth2/token"));
</code></pre>

<h3 id="api-%E3%82%AD%E3%83%BC%E3%81%AE%E6%8C%87%E5%AE%9A">API キーの指定</h3>

<p>これは、開発サイトなどでアプリを登録されたときに発行されるキーの組です。
値自体はさらに暗号化されているのが望ましいと思います。</p>

<p><code>OAuth1</code> クラスとはメソッドが違っているので注意です。</p>

<pre><code class="cpp">    setClientIdentifier("..."); // DROPBOX_APP_KEY
    setClientIdentifierSharedKey("..."); // DROPBOX_APP_SECRET
</code></pre>

<h3 id="%E8%A6%81%E6%B1%82%E5%89%8D%E3%81%AE%E3%83%91%E3%83%A9%E3%83%A1%E3%83%BC%E3%82%BF%E5%A4%89%E6%9B%B4">要求前のパラメータ変更</h3>

<p>認証処理中に受け渡されるデータを編集するための関数を登録します。</p>

<pre><code class="cpp">    setModifyParametersFunction([&amp;](Stage stage, QVariantMap* data) {
        if (Stage::RequestingAuthorization == stage ||
            Stage::RequestingAccessToken   == stage)
        {
            data-&gt;remove(Key::redirectUri);
        }
    });
</code></pre>

<p>DropBox では リダイレクト先のURLが存在していると意図しない動きをするため削除しています。</p>

<h3 id="authorizewithbrowser-%E3%82%B7%E3%82%B0%E3%83%8A%E3%83%AB">authorizeWithBrowser シグナル</h3>

<pre><code class="cpp"> connect(this, &amp;QAbstractOAuth::authorizeWithBrowser, [=](QUrl url) {
        QUrlQuery query(url);
        customReplyHandler-&gt;setState(query.queryItemValue(Key::state));
        QDesktopServices::openUrl(url);
    });
</code></pre>

<p><code>QAbstractOAuth::authorizeWithBrowser</code> のシグナルを処理します。</p>

<p>これは、ブラウザで認証を行う前に引数を加えたりするためのシグナルです。</p>

<p>ここは別にラムダ式じゃなくても問題ないです。</p>

<p><code>QDesktopServices::openUrl(url);</code></p>

<p>この静的関数を呼び出すとブラウザが開き、各サービスの認証ページにアクセスが可能です。</p>

<h3 id="statuschanged-%E3%82%B7%E3%82%B0%E3%83%8A%E3%83%AB">statusChanged シグナル</h3>

<p>認証ステータスが変化した時に呼ばれます。</p>

<pre><code class="cpp">    connect(this, &amp;QOAuth2AuthorizationCodeFlow::statusChanged, [=](QAbstractOAuth::Status status) {
        if (QAbstractOAuth::Status::Granted == status) {
            Q_EMIT authenticated();
        }
    });
</code></pre>

<p>ちょっとここは覚えてないですが、少なくとも当時は <code>QOAuth2AuthorizationCodeFlow::granted</code> シグナルではうまく処理できなかったみたいなので、認証ステータスの変化時にこのクラスを利用する側に対してシグナルを発報しています。</p>

<h3 id="api-%E3%81%AE%E5%88%A9%E7%94%A8">API の利用</h3>

<p>API の利用 は OAuth 1 の場合と同じなので割愛します。</p>

<h3 id="%E8%A3%9C%E8%B6%B3">補足</h3>

<p>例として出した DropBox は、出た当時の実装だと色々と不具合がでてこ汚い手を使って回避しないと実装できなかったため、ソース自体が参考にするにはふさわしくないかもしれません。</p>

<p>また、そのあたりソースは今回割愛しています。
興味がある方は <a href="https://github.com/sharkpp/NetworkStorageAccessSample">sharkpp/NetworkStorageAccessSample: Qt Network Authorization "Network storage access" sample</a> を参照しいてください。</p>

<h2 id="%E5%8F%82%E8%80%83">参考</h2>

<ul>
<li><a href="https://github.com/sharkpp/NetworkStorageAccessSample">sharkpp/NetworkStorageAccessSample: Qt Network Authorization "Network storage access" sample</a></li>
<li><a href="https://github.com/sharkpp/Jugemutter">sharkpp/Jugemutter: 長文投稿専用ツイッタークライアント「じゅげむったー」</a></li>
<li><a href="https://doc.qt.io/qt-5.10/qtnetworkauth-module.html">Qt Network Authorization C++ Classes | Qt Network Authorization 5.10</a></li>
</ul>

<h2 id="%E6%9C%80%E5%BE%8C%E3%81%AB">最後に</h2>

<p>今回は、新たに標準として加わった <a href="https://doc.qt.io/qt-5.10/qtnetworkauth-index.html">Qt Network Authorization</a> モジュール を駆け足で紹介しました。</p>

<p>お仕事でも趣味でも <code>Qt Network Authorization</code> モジュールを使ってみようかと思う方の参考になれば幸いです。</p>

<p>それでは、また。</p>

<p>明日は <a href="https://qiita.com/ynuma">ynuma</a> さんによる「<a href="https://qiita.com/ynuma/items/21e49d084f1f5c8d3e4d">QtRuby を使ってみました</a>」です。
お楽しみに。</p>

<hr />

<p>この投稿は <strong><a href="http://qiita.com/advent-calendar/2017/qt">Qt Advent Calendar 2017</a></strong> の <strong>21日目</strong>の記事です。</p>

<ul>
<li>20日目の記事: <a href="https://qiita.com/Donokono/items/cb9167ee78eb758f8806">Qtでグラフを書いてみよう！</a></li>
<li>22日目の記事: <a href="https://qiita.com/ynuma/items/21e49d084f1f5c8d3e4d">QtRuby を使ってみました</a></li>
</ul>

<hr />
]]></content>
        </entry>
    </feed>