<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
    <title><![CDATA[さめたすたすのお家]]></title>
    <link href="http://www.sharkpp.net/blog/tags/HSP3.xml" rel="self"/>
    <link href="http://www.sharkpp.net/"/>
    <updated>2017-06-18T02:29:09+00:00</updated>
    <id>http://www.sharkpp.net/</id>
            <author>
            <name><![CDATA[sharkpp]]></name>                    </author>
        <generator uri="http://sculpin.io/">Sculpin</generator>
            <entry>
            <title type="html"><![CDATA[HSP ユーザーのためのハブサイトを立上げました]]></title>
            <link href="http://www.sharkpp.net/blog/2016/04/01/hub-site-launched-for-hsp-users.html"/>
            <updated>2016-04-01T00:35:00+00:00</updated>
            <id>http://www.sharkpp.net/blog/2016/04/01/hub-site-launched-for-hsp-users.html</id>
            <content type="html"><![CDATA[<p>以前、某氏が公開していたドメインが、更新されず、スパムドメインになっていたのがいつの間にか手放されていたのを取得し、熟成させること 2 年ぐらい。</p>

<p>ようやく、重い腰を上げサイトを公開しました。</p>

<p><small>実際に公開されてから、この記事が書かれるまで一月以上経っていることは、内緒だよ！</small></p>

<p><a href="/images/2016_0401_hsp_users_jp.png"><img src="/thumbs/bf408036a14636515e7d7e7d3f7339c2-256x256.png" alt="hsp-users.jp"></a></p>

<p><a href="http://hsp-users.jp/">hsp-users.jp - 日本のHSPユーザのためのハブサイト</a></p>

<p>でアクセスできます。</p>

<p>関連として、</p>

<p>公式 Twitter : <a href="https://twitter.com/hsp_users_jp">@hsp_users_jp</a></p>

<p>要望や不具合など : <a href="https://github.com/hsp-users-jp/hsp-users.jp/issues">Issues · hsp-users-jp/hsp-users.jp</a> ※要GitHubアカウント</p>

<p>なども立ち上げました。</p>

<p>何かしらの意見や要望があればどしどしお願いします。</p>
]]></content>
        </entry>
            <entry>
            <title type="html"><![CDATA[Wine を使って Mac OS X で HSP と hgimg4 を動かしてみた]]></title>
            <link href="http://www.sharkpp.net/blog/2016/03/26/running-hsp-and-hgimg4-on-mac-osx-using-wine.html"/>
            <updated>2016-03-26T23:43:00+00:00</updated>
            <id>http://www.sharkpp.net/blog/2016/03/26/running-hsp-and-hgimg4-on-mac-osx-using-wine.html</id>
            <content type="html"><![CDATA[<p>HSP をどうしても Mac OS X で動かしたい！</p>

<p>まあ、とりあえず Wine 使っておけばいいよね！</p>

<p>よしよし動いた、って hgimg4 が動かないじゃないか！むきー</p>

<p>と、言う所から</p>

<p><a href="/images/2016_0326_hgimg4_test9.png"><img src="/thumbs/605ffbef1139b6b8bc46f69d73d86b6b-512x512.png" alt="hgimg4 サンプル test9"></a></p>

<p>このように、hgimg4 のサンプルが動くようにするための方法です。</p>

<h2 id="wine-%E3%81%AE%E6%97%A5%E6%9C%AC%E8%AA%9E%E7%92%B0%E5%A2%83%E3%82%92%E8%A8%AD%E5%AE%9A%E3%81%99%E3%82%8B">Wine の日本語環境を設定する</h2>

<p>まず Wine で UI などに日本語を表示させる為の設定を行います。</p>

<p>設定をしないと</p>

<p><a href="/images/2016_0326_hsp_install_wizard_tofu.png"><img src="/thumbs/e2f456d9675823508a2d47ecb49a0bca-256x256.png" alt="HSP インストールウィザード 豆腐"></a></p>

<p>こんな感じに、全部が全部では無いですが豆腐になります。</p>

<p>最初に HSP のインストール前にいろいろ設定を行うために Wine の環境を作ります。</p>

<p>標準では <code>~/.wine</code> に環境が作られます。</p>

<pre><code>$ wine xxx
</code></pre>

<p>「xxx.exe が見つから無い」と言われても無視してください。ワザとです。</p>

<p>別の場所に専用の環境を作る場合は</p>

<pre><code>$ WINEPREFIX=~/wine-hgimg4-test wine xxx
</code></pre>

<p>と <code>WINEPREFIX</code> 環境変数を指定します。</p>

<p>以降では <code>~/wine-hgimg4-test</code> を環境として使用します。</p>

<p>日本語のフォントは  <a href="http://www.geocities.jp/ipa_mona/">IPAモナーフォント</a> をインストールし、利用します。</p>

<p>まずは、フォントをインストールします。</p>

<pre><code class="bash">$ wget http://www.geocities.jp/ipa_mona/opfc-ModuleHP-1.1.1_withIPAMonaFonts-1.0.8.tar.gz
$ tar xzf opfc-ModuleHP-1.1.1_withIPAMonaFonts-1.0.8.tar.gz
$ mv opfc-ModuleHP-1.1.1_withIPAMonaFonts-1.0.8/fonts/ipa*.ttf ~/wine-hgimg4-test/drive_c/windows/Fonts/
$ rm -rf opfc-ModuleHP-1.1.1_withIPAMonaFonts-1.0.8
</code></pre>

<p>次に、<code>MS Gothic</code> などのフォントを別のフォント(ここでは IPA モナー フォント)のエリアスとする設定をします。</p>

<pre><code>REGEDIT4

[HKEY_CURRENT_USER¥Software¥Wine¥Fonts¥Replacements]
"MS Gothic"="IPA モナー ゴシック"
"MS Mincho"="IPA モナー 明朝"
"MS PGothic"="IPA モナー Pゴシック"
"MS PMincho"="IPA モナー P明朝"
"MS UI Gothic"="IPA モナー UIゴシック"
"ＭＳ ゴシック"="IPA モナー ゴシック"
"ＭＳ 明朝"="IPA モナー 明朝"
"ＭＳ Ｐゴシック"="IPA モナー Pゴシック"
"ＭＳ Ｐ明朝"="IPA モナー P明朝"
</code></pre>

<p>を <strong>Shift_JIS</strong> で！ <code>wine-font-replace-mona.reg</code> として保存しレジストリを更新します。</p>

<p>コピペも面倒な場合は、 <a href="/files/2016_0326_wine-font-replace-mona.reg">wine-font-replace-mona.reg</a> をダウンロードしてください。</p>

<pre><code class="bash">$ WINEPREFIX=~/wine-hgimg4-test wine regedit wine-font-replace-mona.reg
</code></pre>

<p>最後に、フォントのスムース処理の設定を行います。</p>

<pre><code class="registory">REGEDIT4

[HKEY_CURRENT_USER\Control Panel\Desktop]
"FontSmoothing"="1"
"FontSmoothingGamma"=dword:00000578
"FontSmoothingOrientation"=dword:00000001
"FontSmoothingType"=dword:00000002
</code></pre>

<p>を同じく <strong>Shift_JIS</strong> で！ <code>wine-font-smoothing-rgb.reg</code> として保存しレジストリを更新します。</p>

<p>コピペがやっぱり面倒な場合は、 <a href="/files/2016_0326_wine-font-smoothing-rgb.reg">wine-font-smoothing-rgb.reg</a> をダウンロードしてください。</p>

<pre><code>$ WINEPREFIX=~/wine-hgimg4-test wine regedit wine-font-smoothing-rgb.reg
</code></pre>

<h2 id="hsp-%E3%81%AE%E3%82%A4%E3%83%B3%E3%82%B9%E3%83%88%E3%83%BC%E3%83%AB">HSP のインストール</h2>

<p><a href="http://hsp.tv/make/downlist.html">HSPダウンロード</a> から HSP 3.4 をダウンロードします。</p>

<p>※ <a href="http://www.onionsoft.net/wp/archives/1642">HSP3.5β3を公開しました - おにたま(オニオンソフト)のおぼえがき</a> から HSP 3.5b3 をダウンロードしてもいいですが、こちらはインストーラ版では無いので注意です。</p>

<p>コマンドでダウンロードする場合はこんな感じです。</p>

<pre><code>$ wget http://www.onionsoft.net/hsp/file/hsp34.exe
</code></pre>

<p>そして、インストールします。</p>

<pre><code class="bash">$ WINEPREFIX=~/wine-hgimg4-test wine hsp34.exe
</code></pre>

<p>途中の「デスクトップ上にアイコンを作成する」や「拡張子の関連付けを行う」はチェックを外しておきましょう。</p>

<p><a href="/images/2016_0326_hsp_install_wizard_page_1.png"><img src="/thumbs/9b93c326efb30e0e081f852fdc82f27c-128x128.png" alt="HSP インストールウィザード ページ 01"></a> 
<a href="/images/2016_0326_hsp_install_wizard_page_2.png"><img src="/thumbs/944bfa26b702b628fdd4d800bba14dc3-128x128.png" alt="HSP インストールウィザード ページ 02"></a> 
<a href="/images/2016_0326_hsp_install_wizard_page_3.png"><img src="/thumbs/f5959a28a94fe43e70c5d52368920698-128x128.png" alt="HSP インストールウィザード ページ 03"></a> 
<a href="/images/2016_0326_hsp_install_wizard_page_4.png"><img src="/thumbs/78106ccd5918ab9c41b399079e5b3cf1-128x128.png" alt="HSP インストールウィザード ページ 04"></a> 
<a href="/images/2016_0326_hsp_install_wizard_page_5.png"><img src="/thumbs/e330caa9317c918cd8008d4e63cc8ca3-128x128.png" alt="HSP インストールウィザード ページ 05"></a> 
<a href="/images/2016_0326_hsp_install_wizard_page_6.png"><img src="/thumbs/88933c9aab67553abd0bc21af909a3a9-128x128.png" alt="HSP インストールウィザード ページ 06"></a> 
<a href="/images/2016_0326_hsp_install_wizard_page_7.png"><img src="/thumbs/69dfcfea98e8cc10ce874d787a6c0174-128x128.png" alt="HSP インストールウィザード ページ 07"></a></p>

<p>こんな感じにセットアップウィザードを行うと、</p>

<p><a href="/images/2016_0326_hsp_demo.png"><img src="/thumbs/0442cc0847c8faec0fefeb50c18da5a9-384x384.png" alt="HSPデモ"></a></p>

<p>とりあえず、 Wine で HSP が動くようになります。</p>

<pre><code class="bash">$ WINEPREFIX=~/wine-hgimg4-test wine c:\\hsp34\\hsed3.exe
</code></pre>

<p>とすると HSPスクリプトエディタ も起動します。</p>

<p><a href="/images/2016_0326_hsp_script_editor_with_assistant.png"><img src="/thumbs/9ebdeb5fd154ee9b2ce9200d5f1c98fe-384x384.png" alt="HSP スクリプトエディタ＆アシスタント"></a></p>

<h2 id="osx-%E4%B8%8A%E3%81%AE-wine-%E3%81%A7-hgimg3-%E3%82%92%E5%8B%95%E3%81%8B%E3%81%99">OSX 上の Wine で hgimg3 を動かす</h2>

<p>HSPスクリプトエディタ で <code>sample\\hgimg3\\tamane4.hsp</code> を開きます。</p>

<pre><code class="bash">$ WINEPREFIX=~/wine-hgimg4-test wine c:\\hsp34\\hsed3.exe "sample\\hgimg3\\tamane4.hsp"
</code></pre>

<p><a href="/images/2016_0326_hgimg3_tamane_source.png"><img src="/thumbs/7cc244fde01011f836fc6ec65c444a7a-384x384.png" alt="hgimg3 珠音 ソース"></a></p>

<p>そして、おもむろに <kbd>F5</kbd> を押下、</p>

<p><a href="/images/2016_0326_hgimg3_tamane_running.png"><img src="/thumbs/1e9426ea187d90bd2febb15569bc3c60-384x384.png" alt="hgimg3 珠音"></a></p>

<p>はい、無事にSDサイズの<ruby>珠音<rp>(</rp><rt>たまね</rt><rp>)</rp></ruby>ちゃんが表示されました。</p>

<h2 id="osx-%E4%B8%8A%E3%81%AE-wine-%E3%81%A7-hgimg4-%E3%82%92%E5%8B%95%E3%81%8B%E3%81%99">OSX 上の Wine で hgimg4 を動かす</h2>

<p>HSPスクリプトエディタ で <code>sample\\hgimg4\\tamane1.hsp</code> を開きます。</p>

<pre><code class="bash">$ WINEPREFIX=~/wine-hgimg4-test wine c:\\hsp34\\hsed3.exe "sample\\hgimg4\\tamane1.hsp"
</code></pre>

<p><a href="/images/2016_0326_hgimg4_tamane_source.png"><img src="/thumbs/ff0fd23abc5d83baa50d638b36b744cf-384x384.png" alt="hgimg4 珠音 ソース"></a></p>

<p>そして、おもむろに <kbd>F5</kbd> を押下、</p>

<p><a href="/images/2016_0326_hgimg4_tamane_running_failed.png"><img src="/thumbs/8930f39e1744af1691e5f13b93140428-384x384.png" alt="hgimg4 珠音 失敗"></a></p>

<p><span style="font-family: IPAMonaPGothic,'ＭＳ Ｐゴシック',sans-serif;font-size:16px;">(´・ω・`)</sapn></p>

<p>ここで諦めずに頑張る自分。</p>

<p>Wine のビルド方法は <a href="/blog/2016/01/31/building-wine-on-mac-osx.html">Mac OS X での Wine のビルドの仕方</a>
 の記事を参照のこと。</p>

<p>そして、Wine 1.9.6 からの変更が、<a href="https://github.com/sharkpp/wine/commit/6a876fd9a51d5c6ce54c1a6facf9b59561f62ecd">どーん</a></p>

<pre><code class="diff">$ git diff 6bc0ce26a853b51f11958545bfa5570bdcb1cf01 6a876fd9a51d5c6ce54c1a6facf9b59561f62ecd
diff --git a/dlls/winemac.drv/opengl.c b/dlls/winemac.drv/opengl.c
index ab79a82..c1492f7 100644
--- a/dlls/winemac.drv/opengl.c
+++ b/dlls/winemac.drv/opengl.c
@@ -2387,6 +2387,13 @@ static struct wgl_context *macdrv_wglCreateContextAttribsARB(HDC hdc,
         }
     }

+    if (3 == major &amp;&amp; minor &lt;= 1) { // force down OpenGL version
+        major   = 2;
+        minor   = 1;
+        flags  &amp;= ~WGL_CONTEXT_FORWARD_COMPATIBLE_BIT_ARB;
+        profile&amp;= ~WGL_CONTEXT_CORE_PROFILE_BIT_ARB;
+    }
+
     if ((major == 3 &amp;&amp; (minor == 2 || minor == 3)) ||
         (major == 4 &amp;&amp; (minor == 0 || minor == 1)))
     {
</code></pre>

<p>ビルドが、ばーん</p>

<pre><code class="bash">$ make
   :
Wine build complete.
</code></pre>

<p>最後に <code>sample\\hgimg4\\tamane1.hsp</code> を開き、</p>

<pre><code class="bash">$ WINEPREFIX=~/wine-hgimg4-test ./wine c:\\hsp34\\hsed3.exe "sample\\hgimg4\\tamane1.hsp"
</code></pre>

<p>そして、おもむろに <kbd>F5</kbd> を押下、</p>

<p><a href="/images/2016_0326_hgimg4_tamane_running.png"><img src="/thumbs/7095b1a5c9519d4d7402612142b8c1b6-384x384.png" alt="hgimg4 珠音"></a></p>

<p>おおおおー</p>

<p>やったね、無事に<ruby>珠音<rp>(</rp><rt>たまね</rt><rp>)</rp></ruby>ちゃんが表示されました。</p>

<h2 id="%E6%8A%80%E8%A1%93%E7%9A%84%E3%81%AA%E3%81%93%E3%81%A8%E3%82%92%E3%81%99%E3%81%93%E3%81%97">技術的なことをすこし</h2>

<p>今回やったことは、 OpenGL 3.1 を要求された場合に OpenGL 2.1 に強制的に変えることをしています。</p>

<p>いろいろ調べたところ、OS X の OpenGL サポートがちょっと残念なことになっているようで、<a href="https://developer.apple.com/opengl/capabilities/GLInfo_1090.html">OS X 10.9 OpenGL Information - OpenGL - Apple Developer</a> の辺りを見ると</p>

<table>
<thead>
<tr>
  <th>Profile</th>
  <th>Version</th>
</tr>
</thead>
<tbody>
<tr>
  <td>Legacy</td>
  <td>2.1</td>
</tr>
<tr>
  <td>Core</td>
  <td>3.3 - 4.1</td>
</tr>
</tbody>
</table>

<p>となっていて、OpenGL 3.1 なんてサポートして無いよ！って怒られて実行できなかったようです。</p>

<p>単純に Core プロファイルで動くようにして今度はシェーダーでバージョンが違うと怒られたのでどうしたものかと悩んでいましたが、 hgimg4 の 3D エンジンであるところの <a href="http://www.gameplay3d.io/">GamePlay 2D/3D</a> は OS X もサポートしているらしいのでビルドしてみて試したところ、あれ？ OpenGL 2.1 で動いているぞ！ってことで、今回の対応になったわけです。</p>

<p>ただ、OpenGL 3.1 で使えるシェーダーの機能を使っている場合は Windows と動きが違う可能性があるので確認は必要になると思います。</p>

<h2 id="%E3%81%8A%E3%81%BE%E3%81%91">おまけ</h2>

<p>hgimg4 の他のサンプルや、 HSPプログラムコンテスト 2015 で hgimg4 を利用したプログラムを探し動かしてみました。</p>

<p><a href="/images/2016_0326_hgimg4_test1.png"><img src="/thumbs/9909f635e32ecccd3d061bd49f5718cc-256x256.png" alt="hgimg4 サンプル test1"></a>
<a href="/images/2016_0326_hgimg4_test2.png"><img src="/thumbs/6225a1255e77e5d0d46b35b487e5397c-256x256.png" alt="hgimg4 サンプル test2"></a>
<a href="/images/2016_0326_hgimg4_test3.png"><img src="/thumbs/75789f539377222aba6535d5e37b00ad-256x256.png" alt="hgimg4 サンプル test3"></a>
<a href="/images/2016_0326_hgimg4_test4.png"><img src="/thumbs/06caf84bc1fb78e628676a0a75c4ca71-256x256.png" alt="hgimg4 サンプル test4"></a>
<a href="/images/2016_0326_hgimg4_test5.png"><img src="/thumbs/b2f896301fb8295cfc6a63134c8860fa-256x256.png" alt="hgimg4 サンプル test5"></a>
<a href="/images/2016_0326_hgimg4_test6.png"><img src="/thumbs/0ee1b30a809c80b7272297875d9288b2-256x256.png" alt="hgimg4 サンプル test6"></a>
<a href="/images/2016_0326_hgimg4_test7.png"><img src="/thumbs/fb8331afdbe5be612ce12d5b6e084058-256x256.png" alt="hgimg4 サンプル test7"></a>
<a href="/images/2016_0326_hgimg4_test8.png"><img src="/thumbs/7721eeef26d9c47dceab361c3bf05b55-256x256.png" alt="hgimg4 サンプル test8"></a>
<a href="/images/2016_0326_hgimg4_test9.png"><img src="/thumbs/605ffbef1139b6b8bc46f69d73d86b6b-256x256.png" alt="hgimg4 サンプル test9"></a>
<a href="/images/2016_0326_hgimg4_test10.png"><img src="/thumbs/96a44b6e76b6511e3f1b069f3f0457f8-256x256.png" alt="hgimg4 サンプル test10"></a>
<a href="/images/2016_0326_hgimg4_test11.png"><img src="/thumbs/820f347f4df1ae5f73069937720df6f8-256x256.png" alt="hgimg4 サンプル test11"></a>
<a href="/images/2016_0326_hgimg4_test12.png"><img src="/thumbs/8e056d3f9c8cfc709817396d5b66e0a4-256x256.png" alt="hgimg4 サンプル test12"></a>
<a href="/images/2016_0326_hgimg4_test13.png"><img src="/thumbs/a84bf8234192e3ff26852dbfc6623d41-256x256.png" alt="hgimg4 サンプル test13"></a>
<a href="/images/2016_0326_hgimg4_block3.png"><img src="/thumbs/ad5e652367972a2d7884af6008565618-256x256.png" alt="hgimg4 サンプル block3"></a></p>

<p><a href="http://dev.onionsoft.net/seed/info.ax?id=1077">ヨミチハコワイ</a>
(c) 法貴 優雅（MYAOSOFT）/ <a href="https://twitter.com/MYAOSOFT">@MYAOSOFT</a></p>

<p><a href="/images/2016_0326_hsp_contest_2015_no1077_ss_01.png"><img src="/thumbs/c6a5cc7b92acf6127054f3edbe0f6867-256x256.png" alt="ヨミチハコワイ 01"></a>
<a href="/images/2016_0326_hsp_contest_2015_no1077_ss_02.png"><img src="/thumbs/85b6912a8e8af5d7b013385f29a8878c-256x256.png" alt="ヨミチハコワイ 02"></a>
<a href="/images/2016_0326_hsp_contest_2015_no1077_ss_03.png"><img src="/thumbs/2b49015e278dcc10bab77fe863dadd26-256x256.png" alt="ヨミチハコワイ 03"></a></p>

<p><a href="http://dev.onionsoft.net/seed/info.ax?id=1084">R-sim++</a>
(c) hashikemu / <a href="https://twitter.com/kemuduino">@hashikemu</a></p>

<p><a href="/images/2016_0326_hsp_contest_2015_no1084_ss_01.png"><img src="/thumbs/5e254af57f6df3f1a0e6636aef19175d-256x256.png" alt="R-sim++ 01"></a>
<a href="/images/2016_0326_hsp_contest_2015_no1084_ss_02.png"><img src="/thumbs/cabc8d6a7d789a12153a0c6e4b8d25d2-256x256.png" alt="R-sim++ 02"></a>
<a href="/images/2016_0326_hsp_contest_2015_no1084_ss_03.png"><img src="/thumbs/1b694ea19f12b779d33fcdafd81f58cd-256x256.png" alt="R-sim++ 03"></a></p>

<h2 id="%E5%8F%82%E8%80%83">参考</h2>

<ul>
<li><a href="https://cozyattic.wordpress.com/2015/02/16/homebrew%E3%81%A7wine%E3%82%92%E4%BD%BF%E3%81%86/">【微妙】HomebrewでWineを使う | cozy attic</a></li>
<li><a href="http://kakurasan.blogspot.jp/2015/06/manage-winapps-using-wineprefixes.html">Wine環境(WINEPREFIX)を分けてWindowsアプリを上手に管理する - kakurasan</a></li>
<li><a href="http://www.geocities.jp/ipa_mona/">IPAモナーフォント</a></li>
<li><a href="https://technet.microsoft.com/en-us/library/cc978612.aspx">FontSmoothing</a></li>
<li><a href="http://d.hatena.ne.jp/kakurasan/20090107/p1">Wine 1.1.12におけるフォントのサブピクセルレンダリングについて - 試験運用中なLinux備忘録</a>
<a href="https://developer.apple.com/opengl/capabilities/GLInfo_1090.html">OS X 10.9 OpenGL Information - OpenGL - Apple Developer</a></li>
</ul>
]]></content>
        </entry>
            <entry>
            <title type="html"><![CDATA[HSP3用難読化＆独自スクランブル ツール ”yabuinu” を公開しました]]></title>
            <link href="http://www.sharkpp.net/blog/2009/09/30/yabuinu-the-obfuscator-and-scrambler-for-hsp3-0-0-1-0-release.html"/>
            <updated>2009-09-30T00:14:00+00:00</updated>
            <id>http://www.sharkpp.net/blog/2009/09/30/yabuinu-the-obfuscator-and-scrambler-for-hsp3-0-0-1-0-release.html</id>
            <content type="html"><![CDATA[<p>オブジェクト難読化＆独自スクランブルツールを公開しました。</p>

<p>hsp3obfusの後続バージョンになります。</p>

<p>HSP3の他バージョン用も簡単に実装できそうですが、とりあえず、HSP3.1用を実装してみました。</p>

<p>ダウンロードは詳細ページからどうぞ。</p>

<p><a href="http:/blog/2009/09/30/hsp-yabuinu.html" title="”yabuinu” 難読化＆独自スクランブル ツール for HSP 3.x">”yabuinu” 難読化＆独自スクランブル ツール for HSP 3.x</a></p>
]]></content>
        </entry>
            <entry>
            <title type="html"><![CDATA[OpenHSPのナイトリービルドを始めました]]></title>
            <link href="http://www.sharkpp.net/blog/2009/06/14/startup-openhsp-nightly-builds.html"/>
            <updated>2009-06-14T23:42:00+00:00</updated>
            <id>http://www.sharkpp.net/blog/2009/06/14/startup-openhsp-nightly-builds.html</id>
            <content type="html"><![CDATA[<p>まあタイトルの通りなんだけど、OpenHSPのナイトリービルドを始めました。</p>

<p>毎日0時ごろにリビジョンをチェックして上がっていたら自動でビルドしてzipで固めてこのサイトにアップロードって感じのバッチファイルを組んでタスクで動かすようにしました。</p>

<p>自動でビルドしているだけなんでバグがあってもお構いなしでアップします。</p>

<p>ただビルドエラーがあったりビルドに使用しているPCが止まっていると更新されません。</p>

<p>サーバーの容量にも限りがあるので適当に消しますが、過去のパッケージはローカルに残っているので再アップすることは出来ると思います。</p>

<p>ダウンロードは<a href="/blog/categories/HSP">OpenHSP</a>からどうぞ</p>
]]></content>
        </entry>
            <entry>
            <title type="html"><![CDATA[HSP3のファイル選択ダイアログで複数ファイルフィルタを指定で出来るように修正]]></title>
            <link href="http://www.sharkpp.net/blog/2008/09/28/hsp3-filedlg-multiple-filter-implement.html"/>
            <updated>2008-09-28T15:29:00+00:00</updated>
            <id>http://www.sharkpp.net/blog/2008/09/28/hsp3-filedlg-multiple-filter-implement.html</id>
            <content type="html"><![CDATA[<p><a href="http://hsp.tv/play/pforum.php?mode=all&amp;num=19768">ファイル保存ダイアログ</a>で話題に上がっているファイル選択ダイアログで複数ファイルフィルタを指定で出来るように修正してみました。</p>

<pre>dialog "as",16,"ソーススクリプト"
dialog "txt;*.exe;*.dll", 16, "色々なファイル"
dialog "bmp|jpg;*.jpeg|png", 16, "ビットマップ|JPEG|PNG"
dialog ";a*.txt", 16, "テキストファイル"
dialog "bmp|jpg;*.jpegpng", 16, "ビットマップ|JPEG|PNG"
dialog "bmp|jpg;*.jpeg|png", 16, "ビットマップ|JPEGPNG"
dialog "bmp||jpg;*.jpeg|png", 16, "ビットマップ|aa|JPEG|PNG"
dialog "bmp|*|jpg;*.jpeg|png", 16, "ビットマップ|aa|JPEG|PNG"
dialog "bmp|*|jpg;*.jpeg|png", 16, "ビットマップ||JPEG|PNG"
</pre>

<p>こんな感じで複数フィルタのファイルフィルタを指定します。</p>

<p>なんか、"\n"派の方が多いような気がしないでもないのでプリプロセッサで変更できるようにはしました。</p>

<p>実際どっちがいいのだろう</p>

<p>パッチ</p>

<pre>Index: filedlg.cpp
===================================================================
--- filedlg.cpp (revision 178)
+++ filedlg.cpp (working copy)
@@ -7,12 +7,13 @@
#include &lt;stdlib.h&gt;
#include &lt;stdio.h&gt;
#include &lt;string.h&gt;
+#include "../hsp3debug.h"
static HWND hwbak;
static OPENFILENAME ofn ;
static char szFileName[_MAX_PATH] ;
static char szTitleName[_MAX_FNAME + _MAX_EXT] ;
-static char szFilter[128];
+//static char szFilter[128];
void PopFileInitialize (HWND hwnd)
@@ -20,7 +21,7 @@
ofn.lStructSize       = sizeof (OPENFILENAME) ;
ofn.hwndOwner         = hwnd ;
ofn.hInstance         = NULL ;
-     ofn.lpstrFilter       = szFilter ;
+//   ofn.lpstrFilter       = szFilter ;
ofn.lpstrCustomFilter = NULL ;
ofn.nMaxCustFilter    = 0 ;
ofn.nFilterIndex      = 1 ;
@@ -39,42 +40,178 @@
ofn.lpTemplateName    = NULL ;
}
+// SJISの1バイト目か調べる
+#define is_sjis1(c)     ( ( (c) &gt;= 0x81 && (c) &lt;= 0x9F ) || ( (c) &gt;= 0xE0 && (c) &lt;= 0xFC ) )
void fd_ini( HWND hwnd, char *extname, char *extinfo )
{
-   int a,b;
-/*
-   rev 44
-   sjisの全角判定と判断して修正２。(naznyark)
-*/
-   unsigned char a1;
-   char fext[1024];
-   char finf[1024];
-   hwbak=hwnd;
+   // dialog p1,16,p3/dialog p1,17,p3 と OpenFileDialog/SaveFileDialogに渡すデータの
+   // p1(extname)      p3(extinfo)                    フィルタ用データ 
+   // "txt"            "テキストファイル"              "*.txt\0テキストファイル(*.txt)\0\0"
+   // "txt;*.text"     "テキストファイル"              "*.txt;*.text\0テキストファイル(*.txt;*.text)\0\0"
+   // "txt;*.text|log" "テキストファイル|ログファイル" "*.txt;*.text\0テキストファイル(*.txt;*.text)\0*.log\0ログファイル(*.log)\0\0"
+   // ";a*.txt"        "テキストファイル"              "a*.txt\0テキストファイル(a*.txt)\0\0"
-   szFilter[0]=0;
+   // Shark++
+   // ※ MSも全角を推奨していたし(メニュー文字列だったけど)もう半角捨ててもいいよね...
+   // 　 ってことで"ﾌｧｲﾙ" は "ファイル" にしました。
+
+#define realloc_filter_buffer()                        \
+   pszFilterPtr = (char*)realloc(pszFilter, nFilterLen + 1); \
+   if( NULL == pszFilterPtr ) goto out_of_memory;     \
+   pszFilter = pszFilterPtr
+
+   // 区切り文字
+#if 1
+   static const char DELIMITER[]       = "|";
+   static const int  DELIMITER_LEN     = 1;
+#else  // こっちにするなら\r\nで処理しないとだめ
+   static const char DELIMITER[]       = "\r";
+   static const int  DELIMITER_LEN     = 2;
+#endif
+   static const char DEFAULT_DESC[]    = "ファイル";
+   static const char ALL_FILE_FILTER[] = "すべてのファイル (*.*)";
+
+   char *pszFilter = NULL, *pszFilterPtr;
+   int nFilterLen;
+   int nFilterSeek;
+   char *fext = NULL, *fext_next;
+   char *finf = NULL, *finf_next;
+   int fext_len;
+   int finf_len;
+   bool no_aster;
+   int nFilterIndex;
+
szFileName[0]=0;
szTitleName[0]=0;
-   strcpy( fext,extname );
-   if (fext[0]==0) strcpy( fext,"*" );
-   sprintf( szFileName, "*.%s",fext );
+   fext = extname;
+   finf = extinfo;
-   if (fext[0]!=42) {
-       if (extinfo[0]==0) sprintf( finf,"%sﾌｧｲﾙ",fext );
-                     else strcpy( finf,extinfo );
-       sprintf( szFilter, "%s (*.%s)@*.%s@", finf, fext, fext );
+   nFilterLen = 0;
+   nFilterSeek = 0;
+
+   for(nFilterIndex = 0;;
+       fext = fext_next + DELIMITER_LEN,
+       finf = finf_next + DELIMITER_LEN,
+       nFilterIndex++)
+   {
+       // 区切り文字で分割
+       for(fext_next = fext; *fext_next && *DELIMITER != *fext_next; fext_next++) {
+           // SJISの1バイト目チェック＆2文字目を飛ばすときの'\0'チェック
+           if( is_sjis1(*fext_next) && fext_next[1] )
+               fext_next++;
+       }
+       for(finf_next = finf; *finf_next && *DELIMITER != *finf_next; finf_next++) {
+           // SJISの1バイト目チェック＆2文字目を飛ばすときの'\0'チェック
+           if( is_sjis1(*finf_next) && finf_next[1] )
+               finf_next++;
+       }
+       if( fext_next == fext && finf_next == finf ) {
+           break;
+       }
+
+       fext_len = (int)(fext_next - fext);
+       finf_len = (int)(finf_next - finf);
+
+       if( !*fext_next )
+           fext_next -= DELIMITER_LEN;
+       if( !*finf_next )
+           finf_next -= DELIMITER_LEN;
+
+       // 拡張子の先頭に';'があった場合は"*."を先頭につけないモードにする
+       no_aster = (';' == *fext);
+       if( no_aster ) {
+           fext++;
+           fext_len--;
+       }
+
+       if( 0 == fext_len ||
+           ('*' == *fext && 1 == fext_len) )
+       {
+           // 拡張子指定が空文字 or "*" の場合はフィルタに登録をしない
+           continue;
+       }
+
+       // デフォルトファイル名指定
+       if( 0 == nFilterIndex ) {
+           if( !no_aster )
+               strcat(szFileName, "*.");
+           strncat(szFileName, fext, min((size_t)fext_len, _MAX_PATH - 3/* strlen("*.")+sizeof('\0') */));
+       }
+
+       // finf + "(" + "*." + fext + ")" + "\0" + "*." + fext + "\0"
+       nFilterSeek = nFilterLen;
+       nFilterLen += finf_len + 1 + 2 + fext_len + 1 + 1 + 2 + fext_len + 1 + (no_aster ? -4 : 0);
+       if( 0 == finf_len ) {
+           // ファイルの説明が空文字の場合は拡張子+"ファイル"に
+           nFilterLen += fext_len;
+           nFilterLen += (int)strlen(DEFAULT_DESC); // ※
+       }
+       realloc_filter_buffer();
+
+       pszFilterPtr = pszFilter + nFilterSeek;
+       *pszFilterPtr = '\0';
+
+       // フィルタ説明
+       if( 0 == finf_len ) {
+           strncat(pszFilterPtr, fext, (size_t)fext_len);
+           strcat(pszFilterPtr, DEFAULT_DESC); // ※
+       } else {
+           strncat(pszFilterPtr, finf, (size_t)finf_len);
+       }
+
+       strcat(pszFilterPtr,  no_aster ? "(" : "(*.");
+       strncat(pszFilterPtr, fext, (size_t)fext_len);
+       strcat(pszFilterPtr,  ")");
+       strcat(pszFilterPtr,  DELIMITER);
+
+       // フィルタ拡張子
+       if( !no_aster )
+           strcat(pszFilterPtr, "*.");
+       strncat(pszFilterPtr, fext, (size_t)fext_len);
+       strcat(pszFilterPtr,  DELIMITER);
}
-   strcat( szFilter,"すべてのﾌｧｲﾙ (*.*)@*.*@@" );
-   b=(int)strlen(szFilter);
-   for(a=0;a&lt;b;a++) {
-       a1=szFilter[a];
-       if ( ( ( a1 &gt;= 0x81 ) && ( a1 &lt;= 0x9F ) ) || ( ( a1 &gt;= 0xE0 ) && ( a1 &lt;= 0xFC ) ) ) a++;
-       else if (a1=='@') szFilter[a]=0;
+   // "すべてのファイル (*.*)" + "\0" + "*.*" + "\0" + "\0"
+   nFilterSeek = nFilterLen;
+   nFilterLen += (int)strlen(ALL_FILE_FILTER) + 1 + (int)strlen("*.*") + 1 + 1;
+   realloc_filter_buffer();
+
+   pszFilterPtr = pszFilter + nFilterSeek;
+   *pszFilterPtr = '\0';
+
+   // フィルタ説明
+   strcat(pszFilterPtr, ALL_FILE_FILTER); // ※
+   strcat(pszFilterPtr, DELIMITER);
+
+   // フィルタ拡張子
+   strcat(pszFilterPtr, "*.*");
+   strcat(pszFilterPtr, DELIMITER);
+   strcat(pszFilterPtr, DELIMITER);
+
+// for(int i = 0; i &lt; nFilterLen-1; i++) if('\0'==pszFilter[i]) pszFilter[i] = '|';
+// MessageBox(NULL,pszFilter,"",0);
+
+   // 区切り文字を'\0'に変換
+   pszFilterPtr = pszFilter;
+   for(nFilterSeek = 0; nFilterSeek &lt; nFilterLen; pszFilterPtr++, nFilterSeek++) {
+       if( is_sjis1(*pszFilterPtr) )
+           pszFilterPtr++;
+       else if( *DELIMITER == *pszFilterPtr )
+           *pszFilterPtr = '\0';
}
+   
+   PopFileInitialize(hwnd);
+   ofn.lpstrFilter = pszFilter;
-   PopFileInitialize(hwnd);
+#undef realloc_filter_buffer
+
+   return;
+
+out_of_memory:
+   free(pszFilter);
+   throw HSPERR_OUT_OF_MEMORY;
}
char *fd_getfname( void )
@@ -84,17 +221,24 @@
BOOL fd_dialog( HWND hwnd, int mode, char *fext, char *finf )
{
+   BOOL bResult = FALSE;
switch(mode) {
case 0:
fd_ini( hwnd, fext, finf );
ofn.Flags = OFN_HIDEREADONLY | OFN_CREATEPROMPT ;
-       return GetOpenFileName (&ofn) ;
+       bResult = GetOpenFileName (&ofn) ;
+       free((void*)ofn.lpstrFilter);
+       ofn.lpstrFilter = NULL;
+       break;
case 1:
fd_ini( hwnd, fext, finf );
ofn.Flags = OFN_OVERWRITEPROMPT | OFN_HIDEREADONLY;
-       return GetSaveFileName (&ofn) ;
+       bResult = GetSaveFileName (&ofn) ;
+       free((void*)ofn.lpstrFilter);
+       ofn.lpstrFilter = NULL;
+       break;
}
-   return 0;
+   return bResult;
}
</pre>
]]></content>
        </entry>
    </feed>