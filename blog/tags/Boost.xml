<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
    <title><![CDATA[さめたすたすのお家]]></title>
    <link href="https://www.sharkpp.net/blog/tags/Boost.xml" rel="self"/>
    <link href="https://www.sharkpp.net/"/>
    <updated>2025-04-27T15:55:59+00:00</updated>
    <id>https://www.sharkpp.net/</id>
            <author>
            <name><![CDATA[sharkpp]]></name>                    </author>
        <generator uri="http://sculpin.io/">Sculpin</generator>
            <entry>
            <title type="html"><![CDATA[Boost.勉強会 #11 東京 に参加しました]]></title>
            <link href="https://www.sharkpp.net/blog/2013/06/01/boost-11-in-tokyo.html"/>
            <updated>2013-06-01T22:47:00+00:00</updated>
            <id>https://www.sharkpp.net/blog/2013/06/01/boost-11-in-tokyo.html</id>
            <content type="html"><![CDATA[<p>久しぶりのboost勉強会でした。 早速ですが、レポートというかメモというかをドーゾです。</p>

<ul>
<li><a href="http://partake.in/events/e75cde86-75c8-47ce-b647-2dbd0495b053#">Boost.勉強会 #11 東京 - PARTAKE</a></li>
<li><a href="http://sekico.co/zaseki/141">Boost.勉強会 #11 東京 #boostjpの座席表 - セキココ</a></li>
</ul>

<h2 id="c%2B%2B%E3%83%9D%E3%82%B1%E3%83%83%E3%83%88%E3%83%AA%E3%83%95%E3%82%A1%E3%83%AC%E3%83%B3%E3%82%B9%E3%81%AB%E3%81%A4%E3%81%84%E3%81%A6">C++ポケットリファレンスについて</h2>

<p>著者前へ→一人足りないwww</p>

<p>C++11の日本語初のリファレンス。</p>

<p>著者ズ→ <a href="https://twitter.com/nyaocat">@nyaocat</a> <a href="https://twitter.com/andochin">@andochin</a> <a href="https://twitter.com/hotwatermorning">@hotwatermorning</a> <a href="https://twitter.com/wraith13">@wraith13</a> <a href="https://twitter.com/egtra">@egtra</a> <a href="https://twitter.com/cpp_akira">@cpp_akira</a></p>

<p>コミュニティから本を出していきたい！</p>

<ul>
<li>日本語の問題が苦労した</li>
<li>Redmineで校正を管理</li>
</ul>

<h2 id="boost%E3%83%A9%E3%82%A4%E3%83%96%E3%83%A9%E3%83%AA%E4%B8%80%E5%91%A8%E3%81%AE%E6%97%85-1.51.0%3F1.53.0">Boostライブラリ一周の旅 1.51.0?1.53.0</h2>

<ul>
<li>発表者：<a href="https://twitter.com/cpp_akira">@cpp_akira</a></li>
<li>スライド：<a href="http://www.slideshare.net/faithandbrave/boost-tour-1530-merge">Boost Tour 1.53.0 merge</a></li>
</ul>

<h3 id="atomic">Atomic</h3>

<p>InterlockedIncrimentなどの置き換え、mutexの代わりなど。</p>

<h3 id="lookfree">Lookfree</h3>

<p>キュー、スタック、順位付きキューなどの実装がある。 push() や pop() がシュッパイする可能性があるので注意が必要！</p>

<h3 id="coroutine">Coroutine</h3>

<p>処理中に中断＆復帰ができる。</p>

<p>次のバージョン(1.54)でStackOverflowをあまり気にしなくてすむ機能が入る。</p>

<h3 id="multiprecision">Multiprecision</h3>

<p>多倍長整数計算ライブラリ。</p>

<h3 id="odeint">Odeint</h3>

<p>常微分方程式を解くライブラリ。 ゲームでも使えるらしい。</p>

<h2 id="c%2B%2B%E3%81%A7%E3%83%87%E3%83%BC%E3%82%BF%E3%82%92db%E3%81%AB%E4%BF%9D%E5%AD%98%E3%81%97%E3%81%A6%E6%89%B1%E3%81%A3%E3%81%A6%E3%81%BF%E3%82%88%E3%81%86">C++でデータをDBに保存して扱ってみよう</h2>

<ul>
<li>発表者：<a href="https://twitter.com/sakisaka7">@sakisaka7</a></li>
<li>スライド：<a href="http://beta.saki7.jp/slides/boost-study-11-cpp-database/">C++でDBにデータを保存して扱ってみよう :: Boost.勉強会 #11</a></li>
</ul>

<p>リレーショナルデータベース使ってる人→６〜７割</p>

<p>C++で使えるO/Rマッパーのはなし。</p>

<p>JSONで大量のデータの管理はいくない！</p>

<p>Wt(ウィッティー) <a href="http://www.webtoolkit.eu/wt/doc/tutorial/dbo/tutorial.html">Wt::Dbo Tutorial</a></p>

<p>JSONと比べデータベースを使うと、データの整合性や検索、同期、そしてデータ構造の管理などもできる！</p>

<p>bind処理も実装してある。</p>

<p>ほかにもC++のO/Rマッパーには次のような物がある。</p>

<ul>
<li><a href="http://www.treefrogframework.org/ja/%E3%83%89%E3%82%AD%E3%83%A5%E3%83%A1%E3%83%B3%E3%83%88/%E3%83%A2%E3%83%87%E3%83%AB/or%E3%83%9E%E3%83%83%E3%83%94%E3%83%B3%E3%82%B0">O/Rマッピング | TreeFrog Framework</a></li>
<li><a href="http://www.codesynthesis.com/products/odb/">ODB - C++ Object-Relational Mapping (ORM)</a></li>
<li><a href="https://code.google.com/p/boost-rdb/">boost.RDB</a></li>
</ul>

<p>会場からつ boost.python boost.Fusion などを絡め統一的なのができるのでは？</p>

<h3 id="%E3%81%8A%E3%81%BE%E3%81%91">おまけ</h3>

<p>何故、あえてC++なのか</p>

<ul>
<li>データは表示するための物</li>
<li>見やすいインターフェースが必要</li>
<li>HTMLとかのインターフェースに特化した物を使う</li>
<li>C++はデータを表示するインターフェースには向いていないのではないか？</li>
<li>C++の立ち位置を再確認するべき！</li>
<li>C++とWeb系言語を連携しよう！</li>
</ul>

<h2 id="%E6%98%BC%E4%BC%91%E3%81%BF%EF%BC%86c%2B%2B%E3%83%9D%E3%82%B1%E3%83%83%E3%83%88%E3%83%AA%E3%83%95%E3%82%A1%E3%83%AC%E3%83%B3%E3%82%B9%E8%B3%BC%E5%85%A5%E7%A5%AD%E3%82%8A">昼休み＆C++ポケットリファレンス購入祭り</h2>

<p>C++ポケットリファレンスをまだ購入していない人を有志で募って近くの本屋さんで購入しようって流れになったので、乗りました。</p>

<p>集まったのは9人</p>

<p>一番近くの三省堂書店に突撃しましたが、4冊しか置いてませんでした(後でTwitterでtweetされていましたがいつの間にかまた補充されていたようです)</p>

<p>周辺を探しましたが新刊でしかも技術書は扱っているところが少ないようで見つかりませんでした。</p>

<p>結局、未購入の人は秋葉原まで行って購入してきたようです(自分は三省堂書店で購入しました)。</p>

<p>あと、午後の発表の合間に著者ズにサインをしていただきました。</p>

<h2 id="the-instrumental-c%2B%2B">The Instrumental C++</h2>

<ul>
<li>発表者：<a href="https://twitter.com/hotwatermorning">@hotwatermorning</a></li>
<li>スライド：<a href="https://www.dropbox.com/s/8t7nfmxh7yprjzv/The%20Instrumental%20C%2B%2B.pdf">The Instrumental C++.pdf</a></li>
</ul>

<p>DTMer(D™を使っている人)向けの発表</p>

<p>※ただし、対象者は数人の模様</p>

<p>VSTプラグインを実装してみた話</p>

<p>サンプルでノイズを作るのに boost.Random を使っています。</p>

<h3 id="midi">MIDI</h3>

<ul>
<li>ノートオン‥‥音を出す信号、ピアノの鍵盤を押したり笛を吹いたりする動作</li>
<li>ノートオフ‥‥音を止める信号、ピアノの鍵盤を離したりする動作</li>
</ul>

<h3 id="%E3%81%BE%E3%81%A8%E3%82%81">まとめ</h3>

<ul>
<li><a href="http://gihyo.jp/book/2013/978-4-7741-5522-7">「サウンドプログラミング入門」青木直史</a> オススメ</li>
<li>VSTプラグインをがんばって実装してもホスト側が機能を実装していないこともあるので注意！</li>
</ul>

<h2 id="c%2B%2B%E3%81%A7%E3%81%BC%E3%81%8F%E3%81%8C%E5%BF%98%E3%82%8C%E3%81%8C%E3%81%A1%E3%81%AA%E3%81%93%E3%81%A8">C++でぼくが忘れがちなこと</h2>

<ul>
<li>発表者：<a href="https://twitter.com/andochin">@andochin</a></li>
</ul>

<p>C++覚えてますか？</p>

<ul>
<li>型周り、char と signed char と unsigned char や int[n]_t</li>
<li>typedefとcv修飾</li>
<li>virtualはいらない、overrideでいい</li>
<li>const参照での浮動小数点型と整数型、 const int &amp;i = d; // dのテンポラリが保持される</li>
<li>アクセス修飾子、、、、</li>
<li>operator&amp; をオーバーロードしていても addressof()でポインタ値がとれる</li>
<li>operator void の挙動、operator void をオーバーロードしていると static_cast<void>(s); とするとGCC4.7では呼ばれる</li>
<li>uniformd initializerによる初期化、 {} でクラスも初期化ができる。</li>
<li>クラスメンバの初期化の順番は宣言した順番に初期化される。</li>
</ul>

<p>C言語との違い</p>

<ul>
<li>main() Cではreturnが必要だけどC++では必要ない、C++では再起などが禁止</li>
<li>式中の型宣言</li>
<li>条件式の結果、代入式、カンマ演算子の結果がCだと右辺値だけどC++は左辺値</li>
<li>戻り値の有無、Cではエラーにならないが不定な値が返る、C++ではエラー</li>
<li>typedefと構造体(クラス)、C++では同じスコープで別のtypedefを作れない</li>
<li>定数の扱い、C++では未初期化の定数を作れない const int NG;</li>
</ul>

<h2 id="cilkplus%2C-tbb%2C-openmp">CilkPlus, TBB, OpenMP</h2>

<ul>
<li>発表者：<a href="https://twitter.com/krustf">@krustf</a></li>
</ul>

<p>並列プログラミングの話</p>

<p>支える技術</p>

<ul>
<li>Intel CilkPlus</li>
<li>Intel TBB</li>
<li>OpenMP</li>
<li>Future/Promise</li>
</ul>

<h3 id="intel-cilkplus">Intel CilkPlus</h3>

<p>並列プログラミング用のコンパイル拡張、GCCやLLVMでも使用可能。</p>

<ul>
<li>cilk&#95;spawn と cilk&#95;sync</li>
<li>Array Notation 自動でSIMD化される</li>
<li>＃pragma simd</li>
<li>Elemental Functions</li>
</ul>

<h3 id="intel-tbb">Intel TBB</h3>

<p>C++STL風のアルゴリズム</p>

<p>parallel&#95;for と parallel&#95;reduce があればだいたい事足りる。</p>

<h4 id="parallel_for">parallel_for</h4>

<ul>
<li>並列でforを実行</li>
<li>範囲の分割幅を指定</li>
<li>C++11のラムダ式が使える</li>
</ul>

<h4 id="parallel_reduce">parallel_reduce</h4>

<ul>
<li>並列リダクションを実行</li>
<li>C++11のラムダ式が使える</li>
</ul>

<h3 id="openmp">OpenMP</h3>

<p>＃pragma で指示</p>

<h3 id="future%2Fpromise">Future/Promise</h3>

<p>詳しくは、去年の筑波で発表された資料を参照</p>

<h3 id="%E3%83%9E%E3%83%BC%E3%82%AF%E3%81%99%E3%82%8B%E7%90%86%E7%94%B1">マークする理由</h3>

<p>コンパイラは並列化可能かどうかの判断が難しい。</p>

<p>なので、プログラマが指示してあげる。</p>

<h3 id="%E3%83%99%E3%83%B3%E3%83%81%E3%83%9E%E3%83%BC%E3%82%AF">ベンチマーク</h3>

<p>時間がなかったので適当</p>

<p>性能差には大きく変化はない。</p>

<ul>
<li><a href="http://accc.riken.jp/2145.htm">姫野ベンチマーク</a></li>
</ul>

<h3 id="%E3%81%BE%E3%81%A8%E3%82%81">まとめ</h3>

<ul>
<li>CilkPlus や Intel TBB を使おう</li>
<li>C++11 が使える場合は Promise もいいかも</li>
<li><a href="http://www.amazon.co.jp/dp/4877833056">構造化並列プログラミング</a> がおすすめ</li>
</ul>

<h2 id="hello%2C-c%2B%2B-%2B-javascript-world%21">Hello, C++ + JavaScript World!</h2>

<ul>
<li>発表者：<a href="https://twitter.com/hecomi">@hecomi</a></li>
</ul>

<h3 id="%E4%B8%96%E7%95%8C%E8%A6%B3">世界観</h3>

<ul>
<li>ChromeのJSエンジンはV8</li>
<li>V8はC++で実装</li>
<li>SimCityやNode.jsやQtでも</li>
<li>NaitiveClient</li>
<li><a href="https://github.com/kripken/emscripten">Emscripten</a> (C++をJSに変換)</li>
<li>Android</li>
</ul>

<h3 id="node.js">Node.js</h3>

<p>サーバーサイド JavaScript プラットフォーム</p>

<p>ブラウザでできないようなことができる</p>

<ul>
<li>ローカルのファイルを読み込んだり</li>
<li>サーバーを立てたり</li>
<li>npm モジュールで拡張可能</li>
</ul>

<h3 id="qt">Qt</h3>

<p>QtQuickでV8を使用</p>

<h3 id="naitiveclient">NaitiveClient</h3>

<ul>
<li>NaCl(塩)</li>
<li>ブラウザ上で安全にネイティブのコードを実行</li>
<li>Pepper(湖沼) API ローカルファイル、キーボード、ゲームパッドへのアクセスなど</li>
<li>Twitterより： Portable NaCl LLVM中間言語を使いマルチプラットフォーム対応に</li>
</ul>

<h3 id="emscripten">Emscripten</h3>

<ul>
<li>LLVM-IRをJavaScriptに変換</li>
<li>C++ →(Clang)→ LLVM-IR →(Emscripten)→ JavaScript</li>
<li>UnrealEnginがヌルサクで → <a href="http://www.unrealengine.com/html5/">Epic Citadel</a></li>
<li>Qtもブラウザで動く！</li>
<li>HellowWorldは12万行に!?</li>
<li>asm.js形式で吐き出すので OdinMonkey で動かすとロードは遅いけどヌルサク</li>
</ul>

<h2 id="%E6%9C%AA%E6%9D%A5%E3%81%AEc%2B%2B%E3%81%AB%E5%90%91%E3%81%91%E3%81%A6%E6%9B%B8%E3%81%84%E3%81%9F%E8%AB%96%E6%96%87%E3%81%A8%E3%81%84%E3%81%86%E5%90%8D%E3%81%AE%E3%83%8D%E3%82%BF%E5%B8%B3">未来のC++に向けて書いた論文という名のネタ帳</h2>

<ul>
<li><p>発表者：<a href="https://twitter.com/Sigureya">@Sigureya</a></p></li>
<li><p>マクロ的な何か(boost.spirit.qi)</p></li>
<li><p>まとめ、LISPは神の言語、C++は邪心の言語</p></li>
<li>LISPの布教</li>
<li>30分のところ、5分で終了</li>
</ul>

<h2 id="%E3%82%B3%E3%83%B3%E3%83%86%E3%83%8A%E3%81%AE%E3%83%91%E3%83%95%E3%82%A9%E3%83%BC%E3%83%9E%E3%83%B3%E3%82%B9%E3%81%AB%E3%81%A4%E3%81%84%E3%81%A6">コンテナのパフォーマンスについて</h2>

<ul>
<li><p>発表者：<a href="https://twitter.com/hgodai">@hgodai</a></p></li>
<li><p>29歳教</p></li>
<li><p>Ivar jacobson と一緒に仕事をしたことが</p></li>
<li>思考を硬直させない</li>
<li>常識、慣例、しきたり、都市伝説に惑わされない、 <strong>自分の目で確かめる</strong></li>
</ul>

<h3 id="std%3A%3Avector%E3%81%A7%E3%81%84%E3%81%84%E3%81%AE%EF%BC%9F">std::vectorでいいの？</h3>

<ul>
<li>プロフェッショナルは「とりあえず」は似合わない</li>
<li>「とりあえず」していいのは「ビール」</li>
</ul>

<h3 id="%E3%83%99%E3%83%B3%E3%83%81%E3%83%9E%E3%83%BC%E3%82%AF">ベンチマーク</h3>

<ul>
<li>std::deque + Win/VS2012 はなぜかすごい遅い</li>
<li>oreoreアロケータ使った場合、std::deque や boost::stable_vector が遅い</li>
<li>emplace&#95;back() つかえるなら push&#95;back() を使うよりパフォーマンス的に良いことが多い</li>
<li>insert()は std::list は爆速、大きなデータの場合は boost::stable_vector も候補に加えてもよい</li>
<li>検索は unorderd_map が早い、ソート済みvectorはそこそこ早い</li>
</ul>

<p><a href="http://ssa.techarts.co.jp/">ソフトウエア研究会in秋葉原</a></p>

<h2 id="c%2B%2B14%E3%81%AE%E6%A6%82%E8%A6%81">C++14の概要</h2>

<ul>
<li><p>発表者：<a href="https://twitter.com/cpp_akira">@cpp_akira</a></p></li>
<li><p>C++11のバグ修正＆マイナーアップデート、改め、色々機能追加あり</p></li>
<li><p>C++17を目指すC++1yも</p></li>
</ul>

<h3 id="%E3%82%B3%E3%82%A2%E6%A9%9F%E8%83%BD">コア機能</h3>

<ul>
<li>2進数リテラル、 0b1100 で 12</li>
<li>実行時サイズの配列、 定数だけでなくローカル変数や引数でも配列を初期化できるようになった、確保できなかったり0が指定された場合は例外が発生する</li>
<li>通常の関数の戻り値型推論、ラムダ式と同様に通常の関数でも戻り値を推論できるようにする</li>
<li>ジェネリックラムダ、ラムダ式の引数にautoが使えるようになる</li>
<li>一般化されたらラムダキャプチャ</li>
<li>constexpr関数の制限緩和</li>
<li>変数テンプレート、変数定義にテンプレートを使用できるようになる</li>
<li>軽量コンセプト、C++11で入らなかったコンセプトの軽量版</li>
</ul>

<h3 id="%E3%83%A9%E3%82%A4%E3%83%96%E3%83%A9%E3%83%AA">ライブラリ</h3>

<ul>
<li>make&#95;unique()、std::unique&#95;ptr のヘルパ関数</li>
<li>exchange()、非並列プログラミング用compere_exchange()</li>
<li>コンパイル時整数シーケンス、主にstd::tuple用</li>
<li>tupleの型指定get()、インデックスではなく指定した型を取得できるようになる、最終的に変わるかも？</li>
<li>quotedマニュピレータ、Boost.Iostreams由来</li>
<li>ユーザー定義リテラルライブラリ</li>
<li>Type Traitsのエリアステンプレート版、C++11のType Traitsライブラリに対するエイリアステンプレートのラッパー</li>
<li>optional型、boost::optional由来、一部boostから変更(none→nullopt)</li>
<li>実行時サイズの配列、dynarray<T>、std::vector風なインターフェースを持ちスタックでメモリを確保するコンテナ</li>
<li>共有ミューテックス、multiple-reader / single-writer なミューテックス、shared_lock<T> / .lock_shared() が追加</li>
<li>ファイルシステム、ファイル属性やパス、ディレクトリのサポート、boost.FileSystem V3由来</li>
<li>ネットワークライブラリの基本的な機能、間に合わないのでバイトオーダーの交換機能のみ</li>
</ul>

<p>入らないもの</p>

<ul>
<li>モジュールシステム</li>
<li>Rangeライブラリ</li>
<li>コルーティン</li>
</ul>

<p>などなど</p>

<h3 id="%E3%81%93%E3%81%93%E3%81%8B%E3%82%89%E5%A7%8B%E3%82%81%E3%82%88%E3%81%86">ここから始めよう</h3>

<ul>
<li><a href="http://isocpp.org/">Standard C++ Foundation</a></li>
<li>↑のRSS</li>
<li>std-proposalsのML</li>
</ul>

<h3 id="%E3%81%BE%E3%81%A8%E3%82%81">まとめ</h3>

<ul>
<li>C++14には便利な機能が入るっぽい、ただし状況が変わるかも？</li>
<li>C++14の次はC++1y</li>
<li>C++の仕様策定はクローズドからオープンに</li>
</ul>

<h2 id="%E5%85%A8%E4%BD%93%E7%9A%84%E3%81%AA%E3%81%BE%E3%81%A8%E3%82%81">全体的なまとめ</h2>

<p>久しぶりのboost.勉強会でしたが、相変わらずboost成分が少ないなーと。</p>

<p>あと、C++ポケットリファレンスを買って著者にサインをもらう流れが面白かったなと、、、ただ、自分もですが休憩時間を越えてサインに行列ができたのはちょっとまずかったと反省(自分は越える前に席には戻っていましたが、、)。</p>

<p>個人的にはJavaScript関連はジャストミートで聞いていて楽しかったです。</p>
]]></content>
        </entry>
            <entry>
            <title type="html"><![CDATA[Boost.勉強会 #10 東京 に参加しました]]></title>
            <link href="https://www.sharkpp.net/blog/2012/07/30/boost-workshop-10-in-tokyo.html"/>
            <updated>2012-07-30T00:49:00+00:00</updated>
            <id>https://www.sharkpp.net/blog/2012/07/30/boost-workshop-10-in-tokyo.html</id>
            <content type="html"><![CDATA[<p>一昨日、Boost.勉強会 #10 東京 に参加しました。</p>

<h2 id="%E5%85%A5%E5%A0%B4">入場</h2>

<p>とりあえず、ビルマでたどり着けたは着けたけど、入り方がわからなくてうろうろしてたら係の人があけてくれた。</p>

<h2 id="boost%E3%83%A9%E3%82%A4%E3%83%96%E3%83%A9%E3%83%AA%E4%B8%80%E5%91%A8%E3%81%AE%E6%97%85-1.49.0%3F1.50.0-%40cpp_akira1">Boostライブラリ一周の旅 1.49.0?1.50.0 <a href="http://www.twitter.com/cpp_akira">@cpp_akira</a></h2>

<p>以前に紹介した内容以外も含めたスライドをslideshareで公開する</p>

<ul>
<li><a href="http://www.boost.org/doc/libs/1_50_0/doc/html/string_algo.html">Boost.Algorithm</a> → 文字列処理ライブラリに加えて all&#95;of,copy&#95;if,clamp(min+maxの範囲制限がいっぺんにできる)などなどが追加されている。</li>
<li>functional/overloadfunction → ？</li>
<li><a href="http://www.boost.org/doc/libs/1_50_0/libs/local_function/doc/html/index.html">Boost.LocalFunction</a> → ローカル関数を定義</li>
<li><a href="http://www.boost.org/doc/libs/1_50_0/libs/utility/identity_type/doc/html/index.html">Boost.Utility/IdentityType</a> → 関数マクロに渡す引数でカンマを付けれるようにする機能など</li>
</ul>

<h2 id="c%2B%2Bnow%21-2012%E5%8F%82%E5%8A%A0%E3%83%AC%E3%83%9D%E3%83%BC%E3%83%88-%40cpp_akira1">C++Now! 2012参加レポート <a href="http://www.twitter.com/cpp_akira">@cpp_akira</a></h2>

<p>気になった内容のメモ</p>

<h3 id="%EF%BC%91%E6%97%A5%E7%9B%AE">１日目</h3>

<h4 id="odeint">odeint</h4>

<p>常備分方程式を解く為のライブラリ</p>

<p>http://headmyshoulder.github.com/odeint-v2/</p>

<h4 id="lambda-functions">Lambda Functions</h4>

<p>C++11に追加されたラムダ式の紹介、スライドとしてうまくまとめられているので見るべきとのこと(ただし、もちろん英語)</p>

<p><a href="https://sites.google.com/site/boostjp/cppnow/2012#lambda">C++Now! 2012 - boostjp</a></p>

<h4 id="ustring">Ustring</h4>

<p><a href="https://sites.google.com/site/boostjp/cppnow/2012#ustring">C++Now! 2012 - boostjp</a></p>

<h3 id="%EF%BC%92%E6%97%A5%E7%9B%AE">２日目</h3>

<h3 id="metaparse">Metaparse</h3>

<p>コンパイル時構文解析ライブラリ、文字列リテラルで構文解析、謎の技術</p>

<p><a href="https://sites.google.com/site/boostjp/cppnow/2012#metaparse">C++Now! 2012 - boostjp</a></p>

<h3 id="3%E6%97%A5%E7%9B%AE">3日目</h3>

<h4 id="modules-in-c%2B%2B">Modules in C++</h4>

<p>次期標準に入れようとしているモジュールシステムに関するキーノート</p>

<p>Javaなどであるようなパッケージみたいな感じ、コンパイル時間の短縮などを主に意図している模様</p>

<p><a href="https://sites.google.com/site/boostjp/cppnow/2012#modules">C++Now! 2012 - boostjp</a></p>

<h4 id="conceptclang">conceptClang</h4>

<p>C++11に含まれなかったconceptをClang(クラン)で実験的に実装してみようという話</p>

<p><a href="https://sites.google.com/site/boostjp/cppnow/2012#concept-clang">C++Now! 2012 - boostjp</a></p>

<p>４日目</p>

<h4 id="now-what%3F">Now What?</h4>

<p>C++が今どこにいるのかというキーノート</p>

<p><a href="https://sites.google.com/site/boostjp/cppnow/2012#now-what">C++Now! 2012 - boostjp</a></p>

<h4 id="using-boost.coroutine-to-untangle-a-state-machine">Using Boost.Coroutine to untangle a state machine</h4>

<p>Boost.Contextをベースとして使いBoost.Coroutineを書き直したという話</p>

<p><a href="https://sites.google.com/site/boostjp/cppnow/2012#coroutine">C++Now! 2012 - boostjp</a></p>

<p>発表の資料はgithubで公開しているとのこと→ここ</p>

<h2 id="sexyhook-3%E3%81%AE%E5%A4%89%E6%9B%B4%E7%82%B9-%40super_rti12">sexyhook 3の変更点 <a href="http://www.twitter.com/super_rti">@super_rti</a></h2>

<h3 id="%E8%87%AA%E5%B7%B1%E7%B4%B9%E4%BB%8B">自己紹介</h3>

<p><a href="http://d.hatena.ne.jp/rti7743/20111220/1324389840">なのは完売 とある関数の電脳戦</a> → アンチフック＆フックを仕掛けてきた対象を落とす</p>

<p><a href="http://d.hatena.ne.jp/rti7743/20111113/1321149932">regexp for assemble for PHP</a> → 文字列のリストをもとにそれを受諾する正規表現を自動で作る仕組みをPHPで実装する試み</p>

<h3 id="%E6%9C%AC%E9%A1%8C">本題</h3>

<p>何をするライブラリか → テストなどを目的としてAPIや関数を乗っ取り強引に接合部を作る。</p>

<p>ヘッダのみで使え、x86とx64に対応。</p>

<p>通常のクラスメソッドや仮想関数もフック可能。</p>

<p>実装はトランポリンフック。 基本的な仕組みは、関数の先頭にフック先へのジャンプコードを入れる。この時、元のコードが壊れてしまうのでそれをどうするかが重要。</p>

<p>sexyhook2はバックアップした元コードをオリジナルの関数をコールするタイミングで書き戻し、デストラクタで再度フックコードを入れ直している。</p>

<p>sexyhook3はオペコードのバイト数を数えオペコードが壊れないサイズでバックアップしその最後にバックアップしていない箇所へのジャンプコードを挟んでおく。 オリジナルのコードを呼ぶときはバックアップしたコードを呼び出すことでオーバーヘッドを少なくしている。</p>

<p>副産物としてオペコードを数える処理ができたので公開したとのこと。</p>

<h2 id="%E6%98%BC%E4%BC%91%E3%81%BF">昼休み</h2>

<p>予定より早く発表が終わってしまったので、@super_rti さんが別のときに発表したスライドで発表。</p>

<h3 id="%E9%9F%B3%E5%A3%B0%E8%AA%8D%E8%AD%98%E3%81%AE%E3%81%94%E8%AA%8D%E8%AD%98%E3%83%95%E3%82%A3%E3%83%AB%E3%82%BF%E3%81%A8%E3%81%97%E3%81%A6%E3%81%AE%E6%A9%9F%E6%A2%B0%E5%AD%A6%E7%BF%92">音声認識のご認識フィルタとしての機械学習</h3>

<h4 id="%E9%9F%B3%E5%A3%B0%E8%AA%8D%E8%AD%98%E3%81%A7%E5%AE%B6%E9%9B%BB%E6%93%8D%E4%BD%9C">音声認識で家電操作</h4>

<p>発達した科学は魔法と区別がつかない</p>

<h4 id="%E9%9F%B3%E5%A3%B0%E8%AA%8D%E8%AD%98">音声認識</h4>

<p>方法は、SAPI と <a href="http://julius.sourceforge.jp/">julius</a> (フリーの実装) を使ってみたとのこと。</p>

<h5 id="%E6%96%87%E6%B3%95%E8%AA%8D%E8%AD%98%E3%81%A8%E3%83%87%E3%82%A3%E3%82%AF%E3%83%86%E3%83%BC%E3%82%B7%E3%83%A7%E3%83%B3">文法認識とディクテーション</h5>

<ul>
<li>文法認識、認識率は高いが過剰認識をしやすい</li>
<li>ディクテーション、フリーの実装は認識率が低い</li>
</ul>

<p>呼びかけと命令、「コンピュータ、電気つけて」の規則を作ることで音声認識を賢くする</p>

<p>信頼度がそれぞれのライブラリで取得できるがそのまま信頼すると裏切られる。</p>

<p>認識率が芳しくないので、フィルタとして機械学習を使用し音声認識＋機械学習とすることで認識率アップをもくろむ。 中身いじれないので、juliusを以降では使うことに。</p>

<ul>
<li>SVM → ？</li>
<li>mfcc → ？</li>
</ul>

<h3 id="%E8%AA%B2%E9%A1%8C">課題</h3>

<p>テストに使った声や呼びかけが「コンピュータ」に特化してしまった。 まだ、数時間に一回のミスが出るが、数ヶ月に一回にしたい。</p>

<h3 id="%E3%81%9D%E3%81%AE%E4%BB%96">その他</h3>

<p>julius の voca と grammer は使いにくい。 なぜなら、メモリリークしたりstatic使いまくっている。 なので独自のコンバータを作った</p>

<p><a href="http://d.hatena.ne.jp/faith_and_brave/20080602/1212397278">inline namesapce</a>ってのがこのあたりでサラッと出てきた気がする。</p>

<h2 id="%E6%98%BC%E4%BC%91%E3%81%BF%E7%B5%82%E4%BA%86">昼休み終了</h2>

<p>閉め切られていたので戻るのに難儀した。</p>

<h2 id="c%2B%2B%E3%81%A7%E3%82%A8%E3%83%AC%E3%82%AC%E3%83%B3%E3%83%88%E3%81%AA%E4%B8%A6%E5%88%97%E8%A8%88%E7%AE%97-%40ponkotuy17">C++でエレガントな並列計算 <a href="http://www.twitter.com/ponkotuy">@ponkotuy</a></h2>

<h3 id="thrust">Thrust</h3>

<p>CUDA上で動くSTL</p>

<p><a href="https://thrust.github.io/">Thrust - Parallel Algorithms Library</a></p>

<h3 id="boost.ublas19"><a href="http://www.boost.org/libs/numeric/">Boost.uBLAS</a></h3>

<p>会場から突っ込みが出ていたが、デフォルトの実装がひどいらしく処理のエンジンをかえてやらないといけない。 下に書いてあるEigenをバックエンジンとして使うこともできる模様。</p>

<h3 id="eigen">Eigen</h3>

<p><a href="http://eigen.tuxfamily.org/">Eigen</a></p>

<h3 id="boost.simd">Boost.SIMD</h3>

<p>SIMD型＋周辺処理を行うライブラリ。 実装途中。</p>

<p><a href="http://d.hatena.ne.jp/faith_and_brave/20110330/1301469339">Boost.SIMDの元</a></p>

<h2 id="c%2B%2B-transactional-memory%E8%A8%80%E8%AA%9E%E6%8B%A1%E5%BC%B5%E3%81%AE%E7%B4%B9%E4%BB%8B-%40yohhoy22">C++ Transactional Memory言語拡張の紹介 <a href="http://www.twitter.com/yohhoy">@yohhoy</a></h2>

<p>C++の次の規格に入れようとしている機能、とりあえずは、TRで入れられる模様。</p>

<p>データベースな世界の「トランザクション」をメモリ操作に適用し、同時操作からメモリの一貫性を保護する機能。</p>

<p>ハードウエアベースの実装：Intel Haswell,AMD ASF(シミュレータベース) ソフトウエアベースの実装：Haskell,Clojure,C++STM,TBoost.STM</p>

<p><a href="http://www.codesynthesis.com/~boris/blog/2012/04/18/cxx11-generalized-attributes/">generalized attribute 構文</a></p>

<p>gccに実験的に実装中。 ただし、ソフトウエアベースなのでパフォーマンスはすごく悪い、公式としても速度はとりあえず二の次。 <a href="http://d.hatena.ne.jp/faith_and_brave/20111122/1321938184">GCC 4.7にはTransactional Memoryの拡張が入る予定</a></p>

<h2 id="%E4%B8%87%E8%83%BD%E6%95%B0%E5%80%A4%E5%9E%8Burr-%40wraith1325">万能数値型URR <a href="http://www.twitter.com/wraith13">@wraith13</a></h2>

<p>浮動小数点（IEEE754）とも固定小数点とも違う表現方法。</p>

<p>IEEE754は1985と2008の２つがある。</p>

<p>URRの特徴は、1もしくは-1付近で精度がものすごく良くなる、が、その逆は悪くなる。 また、ビット長によらず内部表現は同じ。</p>

<p>課題は、ハードウエアによる支援がないため現状は遅い。 なので収納ビットが節約できるぐらいであまりメリットがない。 文字列との相互変換が難しい。 ビット長を大きくしても極大値、極小値の精度はあまり変わらない。</p>

<p>実際に実装してみたとのこと→<a href="http://tricklib.com/cxx/ex/urr/">ここ</a></p>

<h2 id="%E5%AE%B6%E3%81%AB%E5%B8%B0%E3%82%8B%E3%81%BE%E3%81%A7%E3%81%8C%E9%81%A0%E8%B6%B3%E3%81%A7%E3%81%99%EF%BC%8E-%40cryolite27">家に帰るまでが遠足です． <a href="http://www.twitter.com/Cryolite">@Cryolite</a></h2>

<p>Boost.Build(bjam)の紹介。</p>

<p>Boost.Build使えば、複数のコンパイラオプション、複数のコンパイラ(gccのバージョンとかgccとclangとか)をそれぞれ一括でビルドできる。 依存関係を考えオプションなどの波及なもどしてくれる。 Boost.Build便利だよ。</p>

<h2 id="%E5%85%A8%E5%93%A1%E5%8F%82%E5%8A%A0%E3%83%87%E3%82%A3%E3%82%B9%E3%82%AB%E3%83%83%E3%82%B7%E3%83%A7%E3%83%B3">全員参加ディスカッション</h2>

<p>今回は、これをお目当てでいったようなものです。</p>

<ul>
<li>ディスカッションはワールド・カフェ形式をベースに。</li>
<li>１テーブル６人ぐらいで30分でテーブルチェンジ、３回目のチェンジでもとのテーブルに戻る。</li>
<li>各テーブルに白紙が配られそれに内容を書いてく。</li>
</ul>

<h3 id="%E3%82%A4%E3%83%99%E3%83%B3%E3%83%88%E5%87%A6%E7%90%86%E3%83%A9%E3%82%A4%E3%83%96%E3%83%A9%E3%83%AA">イベント処理ライブラリ</h3>

<p><a href="http://www.twitter.com/egtra">@egtra</a>さんがテーブルマスター。</p>

<p>もともと、じゃんけんで自分がなる予定だったけど内容を考えたの自分だからやりましょうか？と助け舟が出てきたので好意に甘えちゃいましたorz</p>

<p>自分がテーブルマスターになったときに、さっとないよう出しておけばよかったなーと後悔。</p>

<p>内容としては、C#にある、functional reactive programming のようなことをC++で実装したい。 を選びました。</p>

<p>そもそも、FRPがなんなのか？ってのもあったけど、どう表現するか？や、スレッドセーフをどう実装するか？など、でぐるぐる話し合ってました。</p>

<p>イベントの繊維をどうやって表現するかに関しては、グラフを書いてこれをソースに落とせないか？ や、アスキーアートで書いてこれをそのまま実行できればいいよねみたいなことも話してました。</p>

<h3 id="%E3%82%B2%E3%83%BC%E3%83%A0%E3%82%A8%E3%83%B3%E3%82%B8%E3%83%B3">ゲームエンジン</h3>

<p>赤い服きた人</p>

<p>なんか、ゲームエンジンの話から上のレイヤーはC++関係ないよねーって話になって、 たしか、@cpp_akiraさんが、テスト済みの通信ライブラリ欲しい、って話になり、 そのうち、テスターが欲しいよねー、何かアプリ入れてテスターになってもらえばいいじゃん？ からテスター請負サービス作ろう、な流れになりました、自分のいるときは。 チェンジのときに、もはや、C++関係ないよねーっていいながら席を立ってしまいました。</p>

<p>で、最初のテーブルに居たメンバーが同じテーブルになっていたようで聞いた話によると、 上の話はおじゃんにしてFR*のような話題になっていた模様</p>

<h3 id="%E7%A9%B6%E6%A5%B5%E3%81%AE%E6%96%87%E5%AD%97%E5%88%97%E3%82%AF%E3%83%A9%E3%82%B9">究極の文字列クラス</h3>

<p>とりあえず、席に着いたときには紙が真っ白でした。</p>

<p>席に着いたときに聞いた以前の内容としては、文字列クラスは可変長を管理するか固定長にするか、みたいな内容でした。</p>

<p>未知の言語を追加できる仕組みがほしいとか、 ソート処理が欲しいとか？（これはアドオンだったかも？） 高速な検索と高速な編集はトレードオフだとか？ 表示処理などはアドオンかなー？とか</p>

<p>あれ？一番興味あったのに一番記憶がないorz</p>

<h2 id="%E3%81%BE%E3%81%A8%E3%82%81">まとめ</h2>

<p>ディスカッションだけ、メモをとっていなかったので記憶のみで書いてるため結構あやふや、、、orz</p>

<p>まーでも、楽しかったです。</p>

<p>知らないライブラリとか出てきて色々興味深かったです。</p>

<p>あと、懇親会の中華料理店は中ギュウギュウだったのとなかなか注文とりにきてくれなかったのが辛かった。</p>
]]></content>
        </entry>
            <entry>
            <title type="html"><![CDATA[インストール: boostで遊ぶ 其の１]]></title>
            <link href="https://www.sharkpp.net/blog/2009/08/23/play-with-boost-part-1.html"/>
            <updated>2009-08-23T13:48:00+00:00</updated>
            <id>https://www.sharkpp.net/blog/2009/08/23/play-with-boost-part-1.html</id>
            <content type="html"><![CDATA[<p>最近、といっても数日前から<a href="http://www.boost.org/">boost</a>を触り始めた。</p>

<p>主に、<a href="http://www.kmonos.net/alang/boost/">Let's boost</a>を参考にしています。</p>

<p>まず、</p>

<ol>
<li>ダウンロードページから boost&#95;1&#95;39_0.7z と boost-jam-3.1.17-1-ntx86.zip をダウンロード＆解凍。</li>
<li>bjam.exe は boost と同じフォルダに入れました。</li>
<li>Let's boostのページのページに乗っ取ってインストールフォルダを決めパスをINCLUDEとLIBに設定。</li>
<li>「Visual Studio 2008 コマンド プロンプト」を起動しインストールフォルダ移動。</li>
<li></li>
</ol>

<pre>bjam --toolset=msvc link=static,shared release debug stage</pre>

<p>と入力してライブラリをビルド。</p>

<p>とここまで来て、<a href="http://www.kmonos.net/alang/boost/classes/asio.html">letsboost::asio</a>のサンプルを入力してコンパイルだーと「Visual Studio 2008 コマンド プロンプト」から</p>

<pre>cl /EHsc asio_sample.cpp
</pre>

<p>と入力すると...</p>

<pre>LINK : fatal error LNK1104: ファイル 'libboost_system-vc90-mt-s-1_39.lib' を開くことができません
</pre>

<p>＿|￣|○</p>

<p>ライブラリの設定を見直しやり直してもだめ...</p>

<p>ライブラリフォルダを見ると確かに無い...？？？</p>

<p>色々検索してみると今回のビルド方法の場合はどうもbjamのオプションがたりないようなので、</p>

<pre>bjam --toolset=msvc runtime-link=static link=static release debug stage
</pre>

<p>と <code>runtime-link=static</code> を追加すると libboost&#95;system-vc90-mt-s-1&#95;39.lib が生成されリンクできた。(<a href="#f1" name ="b1" title="IDEの場合のデフォルトは”マルチスレッド デバッグ DLL”で、libboost_system-vc90-mt-gd-1_39.libが必要とされるので、Let's boostの方法でOKです。">*1</a>)</p>

<p>exeが出来た、さー実行...？？あれ？</p>

<p>何も結果が出てこない...</p>

<p>コンパイルオプション変えてもだめ</p>

<p>でそういえばサンプルが入っていたなーと思い出し、boost\libs\asio\example\http\client の sync&#95;client.cpp と async&#95;client.cpp をコピーしビルド。</p>

<p>中身見ながら結構面倒なことやってるなーと思いつつ実行！</p>

<pre>Exception: 指定されたクラスが見つかりません。
</pre>

<p>おや？</p>

<p>クラスってなんだーと思い最終的にIDEでステップ実行。</p>

<pre>tcp::resolver::iterator endpoint_iterator = resolver.resolve(query);
</pre>

<p>の行で例外が発生しているみたい。</p>

<p>たどっていくと<code>getaddrinfo()</code>から10109が返ってくる。10109ってなんだろーって検索すると WSATYPE&#95;NOT&#95;FOUND らしい。</p>

<p>検索で見つかった<a href="http://yanchde.gozaru.jp/winsock2/getaddrinfo.html">getaddrinfo</a>をみながら、うーん WSATYPE&#95;NOT&#95;FOUND かーと考えてみると、サービス名に"http"って指定していたなーと思い、"80"にして実行してみるとうまく動いた。</p>

<p>asio_sample.cpp の方も "http" から "80" に変えるとこちらも動いた...</p>

<p>で結局、<code>getaddrinfo()</code>に与える引数でなぜか自分の環境では、"http"がだめみたいってことだった。</p>

<p>なんか設定があるのだろうか？？？</p>

<p>でやっとスタートラインに立てたので今回は終了</p>

<p><a href="#b1" name="f1">*1
</a>: IDEの場合のデフォルトは”マルチスレッド デバッグ DLL”で、libboost&#95;system-vc90-mt-gd-1&#95;39.libが必要とされるので、Let's boostの方法でOKです。</p>
]]></content>
        </entry>
    </feed>