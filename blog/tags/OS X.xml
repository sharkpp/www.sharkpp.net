<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
    <title><![CDATA[さめたすたすのお家]]></title>
    <link href="http://www.sharkpp.net/blog/tags/OS%20X.xml" rel="self"/>
    <link href="http://www.sharkpp.net/"/>
    <updated>2017-07-16T09:14:43+00:00</updated>
    <id>http://www.sharkpp.net/</id>
            <author>
            <name><![CDATA[sharkpp]]></name>                    </author>
        <generator uri="http://sculpin.io/">Sculpin</generator>
            <entry>
            <title type="html"><![CDATA[QMacCocoaViewContainer を使ってみる]]></title>
            <link href="http://www.sharkpp.net/blog/2016/12/10/qt-advent-calendar-2016-10th-day.html"/>
            <updated>2016-12-10T17:25:00+00:00</updated>
            <id>http://www.sharkpp.net/blog/2016/12/10/qt-advent-calendar-2016-10th-day.html</id>
            <content type="html"><![CDATA[<p>こんにちは、こんばんは。</p>

<p><a href="http://qiita.com/advent-calendar/2016/qt">Qt Advent Calendar 2016</a> の 10日目を担当する <a href="https://twitter.com/sharkpp">@sharkpp</a> です。</p>

<p>今回は <a href="http://doc.qt.io/qt-5/qmaccocoaviewcontainer.html">QMacCocoaViewContainer</a> Class を触ってみようかと思います。</p>

<p>題して「QMacCocoaViewContainer を使ってみる」です。</p>

<h2 id="%E3%81%AF%E3%81%98%E3%82%81%E3%81%AB">はじめに</h2>

<p>これは、 Qt で macOS Sierra の <a href="https://developer.apple.com/reference/appkit/nstouchbar">Touch Bar</a> を使ってみようとして挫折したあれこれのから生まれた記事であります。</p>

<p>公式の方では <a href="https://bugreports.qt.io/browse/QTBUG-56908">[QTBUG-56908] Support NSTouchBar on latest MacBook Pro - Qt Bug Tracker</a> で 5.9 を目標に実装が提案？されているようです。</p>

<p>まあ、とりあえず Touch Bar の事は忘れましょう。</p>

<h2 id="%E7%92%B0%E5%A2%83">環境</h2>

<table>
<thead>
<tr>
  <th>項目</th>
  <th>値</th>
</tr>
</thead>
<tbody>
<tr>
  <td>OS</td>
  <td>macOS Sierra 10.12.1 (16B2659)</td>
</tr>
<tr>
  <td>Qt</td>
  <td>5.7.0</td>
</tr>
<tr>
  <td>Qt Creator</td>
  <td>4.1.0</td>
</tr>
</tbody>
</table>

<p>この記事では Qt Creator でコードを書いていきます。</p>

<h2 id="%E7%9B%AE%E6%A8%99%E3%81%AA%E3%81%A9">目標など</h2>

<p>今回は <a href="https://developer.apple.com/reference/appkit/nsbutton">NSButton</a> を Qt のウインドウ上に表示してクリックをハンドリングするまでがこの記事の内容になります。</p>

<p>とりあえず作るクラスの階層です。</p>

<pre><code>CocoaButton -- QPushButton を派生
  +-- CocoaButtonWrapper -- NSButton の参照を所有
        +-- CocoaButtonProxy -- NSButton のクリックを CocoaButtonWrapper に送る
</code></pre>

<p><code>CocoaButton</code> が Qt のウィジェットとして利用できるようにするクラスで、そのほかに <code>CocoaButtonWrapper</code> や <code>CocoaButtonProxy</code> があります。</p>

<h2 id="%E3%83%97%E3%83%AD%E3%82%B8%E3%82%A7%E3%82%AF%E3%83%88%E3%82%92%E4%BD%9C%E3%82%8B">プロジェクトを作る</h2>

<p>まず適当なプロジェクトを作り、<code>NSButton</code> ボタン用のクラスを追加します。</p>

<p><a href="http://doc.qt.io/qt-5/ios-support.html#using-objective-c-code-in-qt-applications">Using Objective-C Code in Qt Applications</a> に書かれているように <code>OBJECTIVE_SOURCES</code> に <code>.mm</code> ファイルを追加しますが、「クラスの定義」でソースファイル名の拡張子を <code>.mm</code> に変更した場合は自動で設定してくれるようです。</p>

<p><a href="/images/2016_1210_qtcreator_newclass.png"><img src="/thumbs/9821c8921f122c38b6db04654a1b4bba-384x384.png" alt="Qt Creator"></a></p>

<p>また、 <code>NSButton</code> などを利用するので .pro に AppKit をリンクするように <code>LIBS</code> に追加します。</p>

<pre><code class="diff"><br />  FORMS    += mainwindow.ui
+ 
+ OBJECTIVE_SOURCES += \
+     cocoabutton.mm
+ 
+ macx: LIBS += -framework AppKit
</code></pre>

<p>こんな感じです。</p>

<p>完全な内容は <a href="https://github.com/sharkpp/MacCocoaWithQtSample/blob/master/MacCocoaWithQtSample.pro">MacCocoaWithQtSample.pro</a> を見てみてください。</p>

<h2 id="cocoabutton-%E3%81%AE%E5%AE%9F%E8%A3%85">CocoaButton の実装</h2>

<p>追加したファイルにクラスの実装をしていきます。</p>

<p><a href="https://github.com/sharkpp/MacCocoaWithQtSample/blob/master/cocoabutton.mm">cocoabutton.mm</a> に <code>CocoaButton</code> を実装してきます。</p>

<p>Qt Cretor のデザイナでボタンを設置したいがために <code>moveEvent</code> や <code>resizeEvent</code> を実装します。</p>

<pre><code class="cpp">void CocoaButton::moveEvent(QMoveEvent *event)
{
    NSRect frame;
    frame = [m_wrpper-&gt;m_refButton frame];
    frame.origin.x = event-&gt;pos().x();
    frame.origin.y = event-&gt;pos().y();
    [m_wrpper-&gt;m_refButton setFrame:frame];
}

void CocoaButton::resizeEvent(QResizeEvent *event)
{
    NSRect frame;
    frame = [m_wrpper-&gt;m_refButton frame];
    frame.size.width = event-&gt;size().width();
    frame.size.height = event-&gt;size().height();
    [m_wrpper-&gt;m_refButton setFrame:frame];
}
</code></pre>

<p><code>setText</code> でボタンのキャプションを変えれるようにしておきます。</p>

<pre><code class="cpp">void CocoaButton::setText(const QString &amp;text)
{
    [m_wrpper-&gt;m_refButton setTitle: text.toNSString()];
}
</code></pre>

<p>あとは、</p>

<pre><code class="cpp">    CocoaButtonProxy *proxy = [[CocoaButtonProxy alloc] init:this];
    [m_refButton setTarget:proxy];
    [m_refButton setAction:@selector(clicked:)];
</code></pre>

<p>みたいな形で Objective-C で実装された target と action を登録して</p>

<pre><code class="objectivec">- (IBAction)clicked:(id)sender
{
    proxyDest-&gt;handleClicked();
}
</code></pre>

<p>とすれば、クリックで C++ で実装されたメソッドが呼び出せます。</p>

<p>最後に <code>CocoaButtonProxy</code> から <code>CocoaButton</code> そしてその上位へとシグナルを飛ばすようにすれば、</p>

<pre><code class="cpp">connect(ui-&gt;buttonCocoa, SIGNAL(clicked()), this, SLOT(onCocoaButtonClick()));
</code></pre>

<p>このような形でシグナルを受け取ることができます。</p>

<p><a href="/images/2016_1210_sample_ss.png"><img src="/thumbs/199fc30fdfe0a59ceab9e8c4e83bc0e6-384x384.png" alt="Qt Creator"></a></p>

<p>実際に動かすとこんな感じです。</p>

<h2 id="%E6%88%90%E6%9E%9C%E7%89%A9">成果物</h2>

<p><a href="https://github.com/sharkpp/MacCocoaWithQtSample">sharkpp/MacCocoaWithQtSample</a> に今回の記事の完全なソースを置いておきます。</p>

<h2 id="%E5%8F%82%E8%80%83">参考</h2>

<ul>
<li><a href="http://doc.qt.io/qt-5/qmaccocoaviewcontainer.html">QMacCocoaViewContainer Class | Qt Widgets 5.7</a></li>
<li><a href="https://bugreports.qt.io/browse/QTBUG-40583">[QTBUG-40583] Unable to use QMacCocoaViewContainer - Qt Bug Tracker</a></li>
<li><a href="https://github.com/vasi/vdfuse/blob/master/include/VBox/VBoxCocoa.h">vdfuse/VBoxCocoa.h at master - vasi/vdfuse</a></li>
</ul>

<h2 id="%E6%9C%80%E5%BE%8C%E3%81%AB">最後に</h2>

<p>今回は、<a href="https://developer.apple.com/reference/appkit/nstouchbar">Touch Bar</a> を Qt から使ってみたい、から始まり結果、かなりスケールダウンした記事となりましたが、それもこれも、初めてさわる Objective-C が原因でしたが、今回いろいろ調べてなんとなくわかってきたので Touch Bar の方も何かしらためせるといいなと思っています。</p>

<p>それでは、また。</p>

<p>明日は <a href="https://twitter.com/nekomatu">@nekomatu</a> さんによる「<a href="http://nekomatu.blogspot.jp/2016/12/develop-qtapp-with-qtcreator-on-buildroot.html">BuildrootとQtCreatorを使ってQtアプリを開発する方法</a>」です。
お楽しみに。</p>

<hr />

<p>この投稿は <strong><a href="http://qiita.com/advent-calendar/2016/qt">Qt Advent Calendar 2016</a></strong> の <strong>10日目</strong>の記事です。</p>

<ul>
<li>９日目の記事: <a href="http://qiita.com/hermit4/items/6282640a7fe4dbcdec43">スレッドの同期について学ぼう(その１）</a></li>
<li>11日目の記事: <a href="http://nekomatu.blogspot.jp/2016/12/develop-qtapp-with-qtcreator-on-buildroot.html">BuildrootとQtCreatorを使ってQtアプリを開発する方法</a></li>
</ul>

<hr />
]]></content>
        </entry>
            <entry>
            <title type="html"><![CDATA[macOS と Wine で作る HSP 3 の開発環境]]></title>
            <link href="http://www.sharkpp.net/blog/2016/12/01/hsp-advent-calendar-2016-1st-day.html"/>
            <updated>2016-12-01T01:00:00+00:00</updated>
            <id>http://www.sharkpp.net/blog/2016/12/01/hsp-advent-calendar-2016-1st-day.html</id>
            <content type="html"><![CDATA[<p>こんにちは、こんばんは。</p>

<p><a href="http://qiita.com/advent-calendar/2016/hsp">Hot Soup Processor Advent Calendar 2016</a> の 初日を担当する <a href="https://twitter.com/sharkpp">@sharkpp</a> です。</p>

<p>この記事は、macOS 上で、どうしても HSP 3 のアプリを開発したい、iOS アプリのデプロイ時だけではなく HSPDish での開発時も macOS で行いたい、そういった人が、HSP 3 の開発環境を手に入れるまでの手順です。</p>

<p>題して「macOS と Wine で作る HSP 3 の開発環境」です。</p>

<h2 id="%E3%81%A7%E3%81%8D%E3%82%8B%E3%82%88%E3%81%86%E3%81%AB%E3%81%AA%E3%82%8B%E3%81%93%E3%81%A8">できるようになること</h2>

<p>この記事に書かれていることを一通り行うと</p>

<ul>
<li>macOS で HSPDish 用のソースがコンパイルができる</li>
<li>hgimg3 が動作する</li>
</ul>

<p>が、できるようになります。</p>

<p>今回は諦めること。</p>

<ul>
<li>hgimg4 が動作する
Wine にパッチを当てないとダメっぽいので、どうしてもやりたい場合は <a href="/blog/2016/03/26/running-hsp-and-hgimg4-on-mac-osx-using-wine.html">Wine を使って Mac OS X で HSP と hgimg4 を動かしてみた</a> を見ながら試してみてください。</li>
<li>オフラインでの HSP Document Library の動作
IE コンポーネントがうまく動作しない模様なので</li>
</ul>

<p>この記事を読みにあたっては、最低限 macOS のシェルが触れることが必要とされています。</p>

<h2 id="%E3%81%AF%E3%81%98%E3%82%81%E3%81%AB">はじめに</h2>

<p>まずはじめに、必要なソフトウェアの一覧です。</p>

<ul>
<li><a href="http://hsp.tv/">HSP 3</a> -- これがないと始まりませんよね？</li>
<li><a href="https://www.winehq.org/">Wine</a> -- macOSでWindowsの実行ファイルを起動させるために必要です</li>
</ul>

<h2 id="wine">Wine</h2>

<p>今回は、安定版ではなく開発版の Wine を利用します。</p>

<p>基本的には、安定版も手順は変わらないと思います。</p>

<p>macOS 用の Wine は <a href="https://dl.winehq.org/wine-builds/macosx/download.html">https://dl.winehq.org/wine-builds/macosx/download.html</a> からダウンロードして、と行きたいのですが、どうやら現時点での最新の 1.9.23 から遡ること 1.9.9 まで、HSP が利用している API がうまく動いてくれないようなのです。</p>

<p>上記バージョンで動作させると</p>

<p><a href="/images/2016_1201_hsp3_throw_error_with_lastest_wine.png"><img src="/thumbs/4d2bdb380dd65586fc0f3cb359b39d34-384x384.png" alt="最新のWineでHSPを実行するとエラーが出る"></a></p>

<p>のような感じで画像読み込み時にエラーが出ます。</p>

<p>なので、</p>

<p><a href="/images/2016_1201_wine_mac_archive_link.png"><img src="/thumbs/30fb512f557aef34bf097ac8406e2232-384x384.png" alt="Wine の過去にリリースされたファイルの一覧ページへ"></a> 
<a href="/images/2016_1201_wine_mac_find_package.png"><img src="/thumbs/2f5dc8ee3deb899b4dc0c02eef5d9dfd-384x384.png" alt="Wine 1.9.8 のパッケージを探す"></a></p>

<p>このように辿り、<a href="https://dl.winehq.org/wine-builds/macosx/i686/">Index of /wine-builds/macosx/i686</a> から <code>winehq-staging-1.9.8.pkg</code> をダウンロードしインストールしていきます。</p>

<h3 id="wine-%E3%81%AE%E3%82%A4%E3%83%B3%E3%82%B9%E3%83%88%E3%83%BC%E3%83%AB">Wine のインストール</h3>

<p><a href="/images/2016_1201_wine_install_wizard_page_1.png"><img src="/thumbs/20843081dfc77af1871777b78752172a-128x128.png" alt="Wine 1.9.8 インストールウィザード ページ 01"></a> 
<a href="/images/2016_1201_wine_install_wizard_page_2.png"><img src="/thumbs/62a72b0957ba33d2e9e25450fb2ea423-128x128.png" alt="Wine 1.9.8 インストールウィザード ページ 02"></a> 
<a href="/images/2016_1201_wine_install_wizard_page_3.png"><img src="/thumbs/5e8f072785fd5473d8d0df3e73dc8b72-128x128.png" alt="Wine 1.9.8 インストールウィザード ページ 03"></a> 
<a href="/images/2016_1201_wine_install_wizard_page_4.png"><img src="/thumbs/1e26bc8228b6c2373e2c5e130df4c8d3-128x128.png" alt="Wine 1.9.8 インストールウィザード ページ 04"></a> 
<a href="/images/2016_1201_wine_install_wizard_page_5.png"><img src="/thumbs/9f7937bfe8b23939169398ca9e5a3444-128x128.png" alt="Wine 1.9.8 インストールウィザード ページ 05"></a> 
<a href="/images/2016_1201_wine_install_wizard_page_6.png"><img src="/thumbs/8414c79a227cf3eb3201af1d62deb5e7-128x128.png" alt="Wine 1.9.8 インストールウィザード ページ 06"></a> 
<a href="/images/2016_1201_wine_install_wizard_page_7.png"><img src="/thumbs/736c27a4bedefc9fb27a6d7916b82439-128x128.png" alt="Wine 1.9.8 インストールウィザード ページ 07"></a></p>

<p>インストールウィザードでは特に選択を変更する部分はありません。</p>

<p><a href="/images/2016_1201_wine_in_applications.png"><img src="/thumbs/13e5b4843ca08e1bfbc39f907258f113-384x384.png" alt="アプリケーションにインストールされたWine"></a></p>

<p>インストールが完了すると、アプリケーションに追加されます。</p>

<p><a href="/images/2016_1201_wine_console.png"><img src="/thumbs/8ed440fda3dd2fc4dfae39accc32d45c-384x384.png" alt="Wineコンソール"></a></p>

<p>アプリケーションから <code>Wine Staging</code> を選び、ターミナルを起動します。
ターミナルから</p>

<pre><code>$ winecfg
</code></pre>

<p>と入力し実行すると、 <code>winecfg</code> が起動する前に、Wine の動作環境の作成が行われます。</p>

<p><a href="/images/2016_1201_wine_mono_install_select.png"><img src="/thumbs/b6a8591a422d0597a5380158439bc59b-384x384.png" alt="Wine環境構築中のWine-Monoインストール確認"></a></p>

<p>途中、 Wine-Mono をインストールするかどうか聞かれますが、これはどちらを選んでも問題ないです。</p>

<p><code>winecfg</code> が起動したら、特に設定を変更することがない場合はそっと閉じます。</p>

<p>次は、日本語の表示ができるように設定を変更します。</p>

<p>設定しないと</p>

<p><a href="/images/2016_0326_hsp_install_wizard_tofu.png"><img src="/thumbs/e2f456d9675823508a2d47ecb49a0bca-256x256.png" alt="HSP インストールウィザード 豆腐"></a></p>

<p>こんな感じになります。</p>

<p>所謂、豆腐ですね。</p>

<h3 id="wine-%E3%81%AB%E6%97%A5%E6%9C%AC%E8%AA%9E%E3%81%AE%E8%A1%A8%E7%A4%BA%E3%81%AE%E3%81%9F%E3%82%81%E3%81%AE%E8%A8%AD%E5%AE%9A%E3%81%AA%E3%81%A9%E3%82%92%E8%A1%8C%E3%81%86">Wine に日本語の表示のための設定などを行う</h3>

<p><a href="http://www.geocities.jp/ipa_mona/">IPAモナーフォント</a> のページから <a href="http://www.geocities.jp/ipa_mona/opfc-ModuleHP-1.1.1_withIPAMonaFonts-1.0.8.tar.gz">opfc-ModuleHP-1.1.1_withIPAMonaFonts-1.0.8.tar.gz</a> をダウンロードし <code>~/.wine/drive_c/windows/Fonts/</code> へ放り込みます。</p>

<p>コマンドラインだけでやるなら</p>

<pre><code class="bash">$ wget http://www.geocities.jp/ipa_mona/opfc-ModuleHP-1.1.1_withIPAMonaFonts-1.0.8.tar.gz
$ tar xzf opfc-ModuleHP-1.1.1_withIPAMonaFonts-1.0.8.tar.gz
$ mv opfc-ModuleHP-1.1.1_withIPAMonaFonts-1.0.8/fonts/ipa*.ttf ~/.wine/drive_c/windows/Fonts/
$ rm -rf opfc-ModuleHP-1.1.1_withIPAMonaFonts-1.0.8
</code></pre>

<p>こんな感じです。</p>

<p>次に、<code>MS Gothic</code> などのフォントを別のフォント(ここでは IPA モナー フォント)のエリアスとする設定をします。</p>

<pre><code class="ini">REGEDIT4

[HKEY_CURRENT_USER¥Software¥Wine¥Fonts¥Replacements]
"MS Gothic"="IPA モナー ゴシック"
"MS Mincho"="IPA モナー 明朝"
"MS PGothic"="IPA モナー Pゴシック"
"MS PMincho"="IPA モナー P明朝"
"MS UI Gothic"="IPA モナー UIゴシック"
"ＭＳ ゴシック"="IPA モナー ゴシック"
"ＭＳ 明朝"="IPA モナー 明朝"
"ＭＳ Ｐゴシック"="IPA モナー Pゴシック"
"ＭＳ Ｐ明朝"="IPA モナー P明朝"
</code></pre>

<p>を <strong>Shift_JIS</strong> で！ <code>wine-font-replace-mona.reg</code> として保存しレジストリを更新します。</p>

<p>コピペも面倒な場合は、 <a href="/files/2016_0326_wine-font-replace-mona.reg">wine-font-replace-mona.reg</a> をダウンロードしてください。</p>

<pre><code class="bash">$ wine regedit wine-font-replace-mona.reg
</code></pre>

<p><a href="https://www.google.com/get/noto/">Google Noto Fonts</a> でも問題ないですが、このフォントには明朝がないので注意です。</p>

<p>Google Noto Fonts を利用する場合は、こんな感じです。</p>

<p><a href="https://www.google.com/get/noto/">Google Noto Fonts</a> から <code>Noto Sans CJK JP</code> をダウンロードし利用します。</p>

<pre><code class="bash">$ wget https://noto-website-2.storage.googleapis.com/pkgs/NotoSansCJKjp-hinted.zip
$ unzip NotoSansCJKjp-hinted.zip
$ mv *.otf ~/.wine/drive_c/windows/Fonts/
$ rm -f NotoSansCJKjp-hinted.zip LICENSE_OFL.txt
</code></pre>

<p>レジストリに設定する内容は、例えば</p>

<pre><code class="ini">REGEDIT4

[HKEY_CURRENT_USER¥Software¥Wine¥Fonts¥Replacements]
"MS Gothic"="Noto Sans Mono CJK JP Regular"
"MS Mincho"="Noto Sans Mono CJK JP Regular"
"MS PGothic"="Noto Sans CJK JP Medium"
"MS PMincho"="Noto Sans CJK JP Medium"
"MS UI Gothic"="Noto Sans CJK JP Medium"
"ＭＳ ゴシック"="Noto Sans Mono CJK JP Regular"
"ＭＳ 明朝"="Noto Sans Mono CJK JP Regular"
"ＭＳ Ｐゴシック"="Noto Sans CJK JP Medium"
"ＭＳ Ｐ明朝"="Noto Sans CJK JP Medium"
</code></pre>

<p>こんな感じです。</p>

<p>最後に、フォントのスムース処理の設定を行います。</p>

<pre><code class="registory">REGEDIT4

[HKEY_CURRENT_USER\Control Panel\Desktop]
"FontSmoothing"="1"
"FontSmoothingGamma"=dword:00000578
"FontSmoothingOrientation"=dword:00000001
"FontSmoothingType"=dword:00000002
</code></pre>

<p>を同じく <strong>Shift_JIS</strong> で！ <code>wine-font-smoothing-rgb.reg</code> として保存しレジストリを更新します。</p>

<p>コピペがやっぱり面倒な場合は、 <a href="/files/2016_0326_wine-font-smoothing-rgb.reg">wine-font-smoothing-rgb.reg</a> をダウンロードしてください。</p>

<pre><code>$ wine regedit wine-font-smoothing-rgb.reg
</code></pre>

<h2 id="hsp">HSP</h2>

<p>ここでは、現時点での最新の安定版 HSP 3.4 を利用します。</p>

<p>なぜ Wine は開発版を使うんだというツッコミはなしです。</p>

<p><a href="http://hsp.tv/make/downlist.html">http://hsp.tv/make/downlist.html</a> から HSP 3.4 をダウンロードしてください。</p>

<p><a href="/images/2016_1201_hsp3_download.png"><img src="/thumbs/f8bde4f60f8a4926975e8b4997c59f9c-384x384.png" alt="hsp.tv"></a> 
<a href="/images/2016_1201_hsp3_download_list_page.png"><img src="/thumbs/0a55fd8f63615f92762cb454ff1d8c36-384x384.png" alt="hsp.tv HSPダウンロードページ"></a></p>

<h3 id="hsp-%E3%81%AE%E3%82%A4%E3%83%B3%E3%82%B9%E3%83%88%E3%83%BC%E3%83%AB">HSP のインストール</h3>

<p>ダウンロードした <code>hsp34.exe</code> をダブルクリックし、インストーラを起動します。</p>

<p>途中の「デスクトップ上にアイコンを作成する」や「拡張子の関連付けを行う」はチェックを外しておきましょう。</p>

<p>それ以外のインストール先などは、お好みで。</p>

<p><a href="/images/2016_1201_hsp_install_wizard_page_1.png"><img src="/thumbs/d6d8ca748755902b7f4fb2a783238025-128x128.png" alt="HSP 3.4 インストールウィザード ページ 01"></a> 
<a href="/images/2016_1201_hsp_install_wizard_page_2.png"><img src="/thumbs/8c10c7f04723aef7551c2a9f20b5b697-128x128.png" alt="HSP 3.4 インストールウィザード ページ 02"></a> 
<a href="/images/2016_1201_hsp_install_wizard_page_3.png"><img src="/thumbs/71954faafec64ecdefcbceb9c4e2251c-128x128.png" alt="HSP 3.4 インストールウィザード ページ 03"></a> 
<a href="/images/2016_1201_hsp_install_wizard_page_4.png"><img src="/thumbs/95c9d676804dff72d93fbdacc0c2bc27-128x128.png" alt="HSP 3.4 インストールウィザード ページ 04"></a> 
<a href="/images/2016_1201_hsp_install_wizard_page_5.png"><img src="/thumbs/8a10d80408688d9d8638ea7bb00d8110-128x128.png" alt="HSP 3.4 インストールウィザード ページ 05"></a> 
<a href="/images/2016_1201_hsp_install_wizard_page_6.png"><img src="/thumbs/106dd846e3dfd7ca39ed4f4e27152818-128x128.png" alt="HSP 3.4 インストールウィザード ページ 06"></a> 
<a href="/images/2016_1201_hsp_install_wizard_page_7.png"><img src="/thumbs/13a0fac17951990a9d55355605bc729b-128x128.png" alt="HSP 3.4 インストールウィザード ページ 07"></a></p>

<p>インストールが完了したら、デモアプリが起動します。</p>

<p><a href="/images/2016_1201_hsp_demo.png"><img src="/thumbs/0b46aff93b34371fc3fbfc981f123232-384x384.png" alt="HSPのデモアプリ"></a></p>

<p>エラーもなく起動していれば OK です。</p>

<p>Wine で <code>WINEPREFIX</code> を利用し環境を切り替えていなければ、 <code>~/.wine/drive_c/hsp34</code> にインストールされていると思います。</p>

<pre><code class="bash">$ wine c:\\hsp34\\hsed3.exe
</code></pre>

<p>スクリプトエディタの実行ファイルを起動すると、Windwos と同じようにエディタが起動すると思います。</p>

<p><a href="/images/2016_1201_hsp_script_edtor.png"><img src="/thumbs/97b79398c171fb59a71f4749777b06e1-384x384.png" alt="HSPの標準エディタ"></a></p>

<p>ついでにアシスタントも起動しているので、必要なければ設定から起動しないようにしておきましょう。</p>

<p><a href="/images/2016_1201_hsp_script_edtor_disable_auto_run_assistant.png"><img src="/thumbs/4bf083e788d1bfeb05b06096b3a2ff06-384x384.png" alt="HSPの標準エディタの設定を変更"></a></p>

<p>この時点で、HSPDishのプログラムもコンパイルできるようになっていると思います。</p>

<p><a href="/images/2016_1201_hspdish_sample.png"><img src="/thumbs/b8fde9d75e7d5f5ef6ba9a6325616c8b-384x384.png" alt="HSPDishのサンプル"></a></p>

<p>hgimg4 を利用する場合は、もう少し手間がかかります。</p>

<p>ということで、時間切れ。</p>

<p>ここまで読んでいただきありがとうございます。</p>

<p>次は <a href="https://twitter.com/mjhd_devlion">@mjhd_devlion</a> さんの <a href="http://qiita.com/mjhd-devlion/items/375ea9894294919380fd">Linux・MacでVimでHSP開発</a> です。</p>

<h2 id="%E3%82%84%E3%82%8A%E6%AE%8B%E3%81%97%E3%81%9F%E3%81%93%E3%81%A8">やり残したこと</h2>

<p>残念ながら、今回は諸事情でできなかったことがあります。</p>

<ul>
<li>Wine 最新版で動作しない

<ul>
<li>これは、Wine側の問題ではないかと思うので、少し調べてみたいと思います。</li>
</ul></li>
<li>HSP Help Library が動作しない

<ul>
<li>Wine に IE をインストールするのは難しいようなので諦めたほうがいいかも。</li>
<li>公式で動作していたものはいつの間にかサーバーエラーとなるようなので <a href="https://twitter.com/mjhd_devlion">@mjhd_devlion</a> さんの <a href="http://ohdl.hsproom.me/">ohdl.hsproom.me</a> で確認するのがいいと思います。</li>
<li>Wine-Gecko なる IE 互換のアプリがあるようなのですが、はたして。</li>
</ul></li>
<li>hgimg4 が動作しない。

<ul>
<li><a href="/blog/2016/03/26/running-hsp-and-hgimg4-on-mac-osx-using-wine.html">Wine を使って Mac OS X で HSP と hgimg4 を動かしてみた</a> を見ながら頑張りましょう。</li>
</ul></li>
<li>iOS のアプリを実際に作れるまでの流れ

<ul>
<li>これも、いろいろ調べながら試してみたいです。</li>
</ul></li>
</ul>

<h2 id="%E5%8F%82%E8%80%83">参考</h2>

<ul>
<li><a href="/blog/2016/03/26/running-hsp-and-hgimg4-on-mac-osx-using-wine.html">Wine を使って Mac OS X で HSP と hgimg4 を動かしてみた</a></li>
<li><a href="https://wiki.winehq.org/MacOSX">MacOSX - WineHQ Wiki</a></li>
<li><a href="http://oxynotes.com/?p=10293">Google Fontsの日本語フォント「Noto Fonts」の使い方 | OXY NOTES</a></li>
<li><a href="http://www.geocities.jp/ipa_mona/">IPAモナーフォント</a></li>
<li><a href="https://technet.microsoft.com/en-us/library/cc978612.aspx">FontSmoothing</a></li>
<li><a href="http://d.hatena.ne.jp/kakurasan/20090107/p1">Wine 1.1.12におけるフォントのサブピクセルレンダリングについて - 試験運用中なLinux備忘録</a></li>
</ul>

<hr />

<p>この投稿は <strong><a href="http://qiita.com/advent-calendar/2016/hsp">Hot Soup Processor Advent Calendar 2016</a></strong> の <strong>1日目</strong>の記事です。</p>

<ul>
<li>2日目の記事: <a href="http://qiita.com/mjhd-devlion/items/375ea9894294919380fd">Linux・MacでVimでHSP開発</a></li>
</ul>

<hr />
]]></content>
        </entry>
    </feed>